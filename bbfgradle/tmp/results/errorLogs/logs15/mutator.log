2021-03-11 12:48:12,958 [main:66] - Compilation checking started
2021-03-11 12:48:15,226 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:48:15,387 [main:194] - Type params = []
2021-03-11 12:48:15,543 [main:302] - generating value of type = Int true depth = 1
2021-03-11 12:48:15,545 [main:302] - generating value of type = String true depth = 1
2021-03-11 12:48:15,932 [main:52] - Trying to change 226 nodes
2021-03-11 12:48:15,932 [main:56] - replacing (5, Int)
2021-03-11 12:48:15,933 [main:38] - replacing 5 Int
2021-03-11 12:48:15,933 [main:42] - Getting value of type Int
2021-03-11 12:48:16,072 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:16,073 [main:46] - GENERATED VALUE OF TYPE Int = 551529538
2021-03-11 12:48:16,074 [main:49] - GENERATED IS CALL =false
2021-03-11 12:48:16,599 [main:55] - randomType = A?
2021-03-11 12:48:16,722 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:48:16,722 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:48:16,933 [main:194] - Type params = []
2021-03-11 12:48:17,081 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:48:17,082 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:48:17,136 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7d291fed]
2021-03-11 12:48:17,138 [main:66] - Generated call from random type = (A(1545341633, "kzgmz"))?.x.countOneBits()
2021-03-11 12:48:17,138 [main:94] - GETTING Int from Int
2021-03-11 12:48:17,256 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2fea6abb]]
2021-03-11 12:48:17,256 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:48:17,257 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2fea6abb]
2021-03-11 12:48:17,428 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:48:17,430 [main:105] - GENERATED CALL = (0+1+2).toLong().compareTo(8)
2021-03-11 12:48:17,431 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@58fd4e05]]
2021-03-11 12:48:17,431 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d]
2021-03-11 12:48:17,555 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:48:17,557 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@58fd4e05]
2021-03-11 12:48:17,725 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:48:17,726 [main:105] - GENERATED CALL = (0+1+2).div(0.5351902236460022).compareTo(-9)
2021-03-11 12:48:17,727 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@241f9269]]
2021-03-11 12:48:17,727 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:48:17,727 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@241f9269]
2021-03-11 12:48:17,842 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:17,843 [main:105] - GENERATED CALL = (0+1+2).toInt().or(-1735197402)
2021-03-11 12:48:17,843 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.ranges.IntRange.random(): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1c24ca3b]]
2021-03-11 12:48:17,844 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e]
2021-03-11 12:48:17,977 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:48:17,978 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.ranges.IntRange.random(): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1c24ca3b]
2021-03-11 12:48:17,979 [main:105] - GENERATED CALL = (0+1+2).rangeTo(-21).random()
2021-03-11 12:48:17,980 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d63158f]]
2021-03-11 12:48:17,980 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:48:18,126 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:18,127 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d63158f]
2021-03-11 12:48:18,128 [main:105] - GENERATED CALL = (0+1+2).compareTo(1331400885).dec()
2021-03-11 12:48:18,128 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d], @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@33616e79]]
2021-03-11 12:48:18,128 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d]
2021-03-11 12:48:18,309 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:48:18,310 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@33616e79]
2021-03-11 12:48:18,311 [main:105] - GENERATED CALL = (0+1+2).div(0.3168699356057054).roundToInt()
2021-03-11 12:48:18,311 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3b8291ff]]
2021-03-11 12:48:18,311 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:48:18,458 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:18,459 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3b8291ff]
2021-03-11 12:48:18,577 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:18,578 [main:105] - GENERATED CALL = (0+1+2).compareTo(-37158745).coerceAtMost(-1700073260)
2021-03-11 12:48:18,579 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e], public final val step: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@1b8e1a38]]
2021-03-11 12:48:18,579 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e]
2021-03-11 12:48:18,702 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:48:18,703 [main:105] - GENERATED CALL = (0+1+2).rangeTo(45).step
2021-03-11 12:48:18,703 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ebc0bf5]]
2021-03-11 12:48:18,704 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:48:18,811 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:18,812 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ebc0bf5]
2021-03-11 12:48:18,910 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:18,911 [main:105] - GENERATED CALL = (0+1+2).compareTo(-2026223148).and(-1372607189)
2021-03-11 12:48:18,912 [main:101] - Case = [@kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@55f9f89c]]
2021-03-11 12:48:18,912 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@55f9f89c]
2021-03-11 12:48:19,064 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:48:19,066 [main:105] - GENERATED CALL = (0+1+2).rem(-113)
2021-03-11 12:48:19,066 [main:63] - replacement of 5 of type Int is (A(1545341633, "kzgmz"))?.x.countOneBits()
2021-03-11 12:48:19,182 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:48:19,183 [main:66] - Compilation checking started
2021-03-11 12:48:19,837 [main:53] - Result = true
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>((A(1545341633, "kzgmz"))?.x.countOneBits()) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}
2021-03-11 12:48:19,839 [main:56] - replacing (sum, Int)
2021-03-11 12:48:19,840 [main:38] - replacing sum Int
2021-03-11 12:48:19,840 [main:42] - Getting value of type Int
2021-03-11 12:48:19,973 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:19,973 [main:46] - GENERATED VALUE OF TYPE Int = -460803997
2021-03-11 12:48:19,974 [main:49] - GENERATED IS CALL =false
2021-03-11 12:48:19,975 [main:55] - randomType = A
2021-03-11 12:48:20,087 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:48:20,087 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:48:20,196 [main:194] - Type params = []
2021-03-11 12:48:20,300 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:48:20,300 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:48:20,315 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d4a80]
2021-03-11 12:48:20,316 [main:66] - Generated call from random type = (A(-553384973, "knveg")).x.unaryPlus()
2021-03-11 12:48:20,316 [main:94] - GETTING Int from Int
2021-03-11 12:48:20,397 [main:101] - Case = [public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f664709]]
2021-03-11 12:48:20,397 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f664709]
2021-03-11 12:48:20,523 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:20,658 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:20,659 [main:105] - GENERATED CALL = (0+1+2+3).coerceIn(-335084147, 1432466003)
2021-03-11 12:48:20,660 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.ranges.IntRange.random(): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1c24ca3b]]
2021-03-11 12:48:20,660 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e]
2021-03-11 12:48:20,765 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:48:20,766 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.ranges.IntRange.random(): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1c24ca3b]
2021-03-11 12:48:20,767 [main:105] - GENERATED CALL = (0+1+2+3).rangeTo(-113).random()
2021-03-11 12:48:20,767 [main:101] - Case = [public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62a877f4]]
2021-03-11 12:48:20,768 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62a877f4]
2021-03-11 12:48:20,768 [main:105] - GENERATED CALL = (0+1+2+3).toInt()
2021-03-11 12:48:20,769 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]]
2021-03-11 12:48:20,769 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]
2021-03-11 12:48:20,902 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:48:20,902 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:48:21,017 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:48:21,019 [main:105] - GENERATED CALL = (0+1+2+3).equals("yuqlv").compareTo(true)
2021-03-11 12:48:21,019 [main:101] - Case = [public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e53c7a]]
2021-03-11 12:48:21,019 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e53c7a]
2021-03-11 12:48:21,125 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:21,126 [main:105] - GENERATED CALL = (0+1+2+3).shr(-1349793238)
2021-03-11 12:48:21,126 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], public open fun toInt(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6c27f2a5]]
2021-03-11 12:48:21,126 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:48:21,126 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6c27f2a5]
2021-03-11 12:48:21,127 [main:105] - GENERATED CALL = (0+1+2+3).toShort().toInt()
2021-03-11 12:48:21,127 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4c4a428d]]
2021-03-11 12:48:21,127 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169]
2021-03-11 12:48:21,128 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4c4a428d]
2021-03-11 12:48:21,128 [main:105] - GENERATED CALL = (0+1+2+3).toFloat().toBits()
2021-03-11 12:48:21,128 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@32278335]]
2021-03-11 12:48:21,128 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:48:21,129 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@32278335]
2021-03-11 12:48:21,243 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:48:21,244 [main:105] - GENERATED CALL = (0+1+2+3).toShort().compareTo(-120)
2021-03-11 12:48:21,244 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ed6eedb]]
2021-03-11 12:48:21,244 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:48:21,245 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ed6eedb]
2021-03-11 12:48:21,359 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:48:21,360 [main:105] - GENERATED CALL = (0+1+2+3).toInt().div(-114)
2021-03-11 12:48:21,360 [main:101] - Case = [public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3ff9eaf8]]
2021-03-11 12:48:21,360 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3ff9eaf8]
2021-03-11 12:48:21,459 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:21,460 [main:105] - GENERATED CALL = (0+1+2+3).coerceAtLeast(-1984506769)
2021-03-11 12:48:21,460 [main:63] - replacement of sum of type Int is (A(-553384973, "knveg")).x.unaryPlus()
2021-03-11 12:48:21,551 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:48:21,552 [main:66] - Compilation checking started
2021-03-11 12:48:21,856 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>((A(1545341633, "kzgmz"))?.x.countOneBits()) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        (A(-553384973, "knveg")).x.unaryPlus() += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}
2021-03-11 12:48:21,858 [main:56] - replacing (x, Int)
2021-03-11 12:48:21,858 [main:38] - replacing x Int
2021-03-11 12:48:21,859 [main:42] - Getting value of type Int
2021-03-11 12:48:21,971 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:21,971 [main:46] - GENERATED VALUE OF TYPE Int = 1758646630
2021-03-11 12:48:21,971 [main:49] - GENERATED IS CALL =false
2021-03-11 12:48:22,311 [main:55] - randomType = LinkedHashSet<Float>
2021-03-11 12:48:22,436 [main:302] - generating value of type = LinkedHashSet<Float> false depth = 0
2021-03-11 12:48:22,552 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Float): LkedHashSet<Float> = TODO()
2021-03-11 12:48:22,555 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Float): LkedHashSet<Float> = TODO()
2021-03-11 12:48:22,670 [main:302] - generating value of type = Float true depth = 3
2021-03-11 12:48:22,671 [main:95] - GENERATED = linkedSetOf<Float>(0.1955623f)
2021-03-11 12:48:22,922 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62a877f4]
2021-03-11 12:48:22,923 [main:66] - Generated call from random type = (linkedSetOf<Float>(0.1955623f)).size.toInt()
2021-03-11 12:48:22,923 [main:63] - replacement of x of type Int is (linkedSetOf<Float>(0.1955623f)).size.toInt()
2021-03-11 12:48:23,031 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:48:23,031 [main:66] - Compilation checking started
2021-03-11 12:48:23,608 [main:53] - Result = true
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>((A(1545341633, "kzgmz"))?.x.countOneBits()) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}


2021-03-11 12:48:23,610 [main:56] - replacing (i, Int)
2021-03-11 12:48:23,611 [main:38] - replacing i Int
2021-03-11 12:48:23,611 [main:42] - Getting value of type Int
2021-03-11 12:48:23,724 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:23,724 [main:46] - GENERATED VALUE OF TYPE Int = 262652909
2021-03-11 12:48:23,725 [main:49] - GENERATED IS CALL =false
2021-03-11 12:48:23,842 [main:55] - randomType = LinkedHashSet<A>
2021-03-11 12:48:23,949 [main:302] - generating value of type = LinkedHashSet<A> false depth = 0
2021-03-11 12:48:24,060 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<A> = TODO()
2021-03-11 12:48:24,062 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<A> = TODO()
2021-03-11 12:48:24,184 [main:95] - GENERATED = linkedSetOf<A>()
2021-03-11 12:48:24,328 [main:137] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@155f7245]
2021-03-11 12:48:24,329 [main:66] - Generated call from random type = (linkedSetOf<A>()).toArray().size
2021-03-11 12:48:24,329 [main:63] - replacement of i of type Int is (linkedSetOf<A>()).toArray().size
2021-03-11 12:48:24,429 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:48:24,429 [main:66] - Compilation checking started
2021-03-11 12:48:24,958 [main:53] - Result = true
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>((A(1545341633, "kzgmz"))?.x.countOneBits()) {
        i -> A((linkedSetOf<A>()).toArray().size, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}


2021-03-11 12:48:24,960 [main:56] - replacing (0+1, Int)
2021-03-11 12:48:24,961 [main:38] - replacing 0+1 Int
2021-03-11 12:48:24,961 [main:42] - Getting value of type Int
2021-03-11 12:48:25,139 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:25,140 [main:46] - GENERATED VALUE OF TYPE Int = -1582169921
2021-03-11 12:48:25,140 [main:49] - GENERATED IS CALL =false
2021-03-11 12:48:25,618 [main:55] - randomType = Pair<ULong, Double?>
2021-03-11 12:48:25,733 [main:302] - generating value of type = Pair<ULong, Double?> false depth = 0
2021-03-11 12:48:25,922 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: ULong, second: Double?): Pair<ULong, Double?> = TODO()
2021-03-11 12:48:25,925 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: ULong, second: Double?): Pair<ULong, Double?> = TODO()
2021-03-11 12:48:26,052 [main:302] - generating value of type = ULong true depth = 3
2021-03-11 12:48:26,053 [main:302] - generating value of type = Double true depth = 3
2021-03-11 12:48:26,054 [main:95] - GENERATED = Pair<ULong, Double?>(3695514502194335951.toULong(), 0.5664179537930296)
2021-03-11 12:48:26,097 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toInt(): kotlin.Int defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@535dc224]
2021-03-11 12:48:26,098 [main:66] - Generated call from random type = (Pair<ULong, Double?>(3695514502194335951.toULong(), 0.5664179537930296)).first.toInt()
2021-03-11 12:48:26,101 [main:94] - GETTING Int from String
2021-03-11 12:48:26,159 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ebc0bf5]]
2021-03-11 12:48:26,159 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:48:26,260 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:48:26,261 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ebc0bf5]
2021-03-11 12:48:26,363 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:26,364 [main:105] - GENERATED CALL = (str).compareTo("tindy").and(113698212)
2021-03-11 12:48:26,365 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36bf0f77]]
2021-03-11 12:48:26,365 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36bf0f77]
2021-03-11 12:48:26,365 [main:105] - GENERATED CALL = (str).length.takeHighestOneBit()
2021-03-11 12:48:26,365 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fb80e1e]]
2021-03-11 12:48:26,366 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:48:26,469 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:26,595 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:26,596 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fb80e1e]
2021-03-11 12:48:26,734 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:48:26,734 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:48:26,735 [main:105] - GENERATED CALL = (str).subSequence(-705226407, -2074503248).indexOfFirst({a: Char -> false})
2021-03-11 12:48:26,736 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cca13b8]]
2021-03-11 12:48:26,736 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cca13b8]
2021-03-11 12:48:26,842 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-11 12:48:26,843 [main:302] - generating value of type = Int true depth = 1
2021-03-11 12:48:26,844 [main:105] - GENERATED CALL = (str).sumOf({a: Char -> 123532005})
2021-03-11 12:48:26,844 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2814a4a]]
2021-03-11 12:48:26,844 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:48:26,946 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:48:26,947 [main:105] - GENERATED CALL = (str).compareTo("cyuch").sign
2021-03-11 12:48:26,948 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ec35323]]
2021-03-11 12:48:26,948 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ec35323]
2021-03-11 12:48:27,044 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:27,044 [main:105] - GENERATED CALL = (str).length.rotateLeft(-1175873702)
2021-03-11 12:48:27,045 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f1f36c0]]
2021-03-11 12:48:27,045 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:48:27,193 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:27,320 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:27,321 [main:137] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f1f36c0]
2021-03-11 12:48:27,424 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:48:27,525 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:27,620 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:48:27,621 [main:105] - GENERATED CALL = (str).subSequence(-771663329, -2112092839).lastIndexOf('幓', 1967850349, true)
2021-03-11 12:48:27,621 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@5052b22e]]
2021-03-11 12:48:27,621 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:48:27,749 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:48:27,751 [main:105] - GENERATED CALL = (str).compareTo("oyvfr").absoluteValue
2021-03-11 12:48:27,751 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@5052b22e]]
2021-03-11 12:48:27,751 [main:105] - GENERATED CALL = (str).length.absoluteValue
2021-03-11 12:48:27,751 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2814a4a]]
2021-03-11 12:48:27,752 [main:105] - GENERATED CALL = (str).length.sign
2021-03-11 12:48:27,752 [main:63] - replacement of 0+1 of type Int is (str).sumOf({a: Char -> 123532005})
2021-03-11 12:48:27,850 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:48:27,851 [main:66] - Compilation checking started
2021-03-11 12:48:28,253 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>((A(1545341633, "kzgmz"))?.x.countOneBits()) {
        i -> A((linkedSetOf<A>()).toArray().size, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += y
    }
    
    return if (sum == (str).sumOf({a: Char -> 123532005})+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}


2021-03-11 12:48:28,256 [main:56] - replacing (sum == 0+1+2+3+4, Boolean)
2021-03-11 12:48:28,256 [main:38] - replacing sum == 0+1+2+3+4 Boolean
2021-03-11 12:48:28,256 [main:42] - Getting value of type Boolean
2021-03-11 12:48:28,373 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:48:28,374 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 12:48:28,374 [main:49] - GENERATED IS CALL =false
2021-03-11 12:48:29,958 [main:55] - randomType = Map<Pair<Function2<Function2<A?, Function1<ArrayDeque<Short>, A>, Int>, Boolean, Set<Short>>, Byte>, List<A>>
2021-03-11 12:48:29,960 [main:94] - GETTING Boolean from Int
2021-03-11 12:48:30,025 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4063f07e]]
2021-03-11 12:48:30,025 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]
2021-03-11 12:48:30,187 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:48:30,187 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4063f07e]
2021-03-11 12:48:30,287 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:48:30,288 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).equals("bowey").and(false)
2021-03-11 12:48:30,288 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169], public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@67360a68]]
2021-03-11 12:48:30,288 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169]
2021-03-11 12:48:30,289 [main:137] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@67360a68]
2021-03-11 12:48:30,289 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toFloat().isFinite()
2021-03-11 12:48:30,289 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@66871f61]]
2021-03-11 12:48:30,289 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]
2021-03-11 12:48:30,388 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:48:30,389 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@66871f61]
2021-03-11 12:48:30,488 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:48:30,489 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).equals("ecajj").or(false)
2021-03-11 12:48:30,489 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1a38040]]
2021-03-11 12:48:30,489 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]
2021-03-11 12:48:30,596 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1a38040]
2021-03-11 12:48:30,739 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:48:30,740 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).equals(null).xor(true)
2021-03-11 12:48:30,740 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7f28a29], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3f8bc992]]
2021-03-11 12:48:30,740 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7f28a29]
2021-03-11 12:48:30,741 [main:137] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3f8bc992]
2021-03-11 12:48:30,754 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toDouble().isFinite()
2021-03-11 12:48:30,755 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@5c3e3f7b]]
2021-03-11 12:48:30,755 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169]
2021-03-11 12:48:30,755 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@5c3e3f7b]
2021-03-11 12:48:30,848 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:48:30,849 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toFloat().equals("quarx")
2021-03-11 12:48:30,849 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24bd4c6b]]
2021-03-11 12:48:30,849 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:48:30,850 [main:137] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24bd4c6b]
2021-03-11 12:48:30,850 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toChar().isDigit()
2021-03-11 12:48:30,850 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@512146ca]]
2021-03-11 12:48:30,850 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:48:30,850 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@512146ca]
2021-03-11 12:48:30,948 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:48:30,949 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toLong().equals("zfvbe")
2021-03-11 12:48:30,949 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169], public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@5e365ad0]]
2021-03-11 12:48:30,949 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169]
2021-03-11 12:48:30,949 [main:137] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@5e365ad0]
2021-03-11 12:48:30,950 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toFloat().isNaN()
2021-03-11 12:48:30,950 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@27eff770]]
2021-03-11 12:48:30,950 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d]
2021-03-11 12:48:31,045 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:48:31,046 [main:137] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@27eff770]
2021-03-11 12:48:31,046 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).div(0.40878046546743263).isInfinite()
2021-03-11 12:48:31,046 [main:63] - replacement of sum == 0+1+2+3+4 of type Boolean is (A(-1427813506, "vtkln").x).equals(null).xor(true)
2021-03-11 12:48:31,140 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:48:31,141 [main:66] - Compilation checking started
2021-03-11 12:48:31,663 [main:53] - Result = true
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>((A(1545341633, "kzgmz"))?.x.countOneBits()) {
        i -> A((linkedSetOf<A>()).toArray().size, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += y
    }
    
    return if ((A(-1427813506, "vtkln").x).equals(null).xor(true) && str == "01234") "OK" else "Fail ${sum} ${str}"
}


2021-03-11 12:48:31,665 [main:56] - replacing ("OK", String)
2021-03-11 12:48:31,665 [main:38] - replacing "OK" String
2021-03-11 12:48:31,665 [main:42] - Getting value of type String
2021-03-11 12:48:31,775 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:48:31,775 [main:46] - GENERATED VALUE OF TYPE String = "qfcja"
2021-03-11 12:48:31,775 [main:49] - GENERATED IS CALL =false
2021-03-11 12:48:31,984 [main:55] - randomType = Pair<String, UInt>
2021-03-11 12:48:32,085 [main:302] - generating value of type = Pair<String, UInt> false depth = 0
2021-03-11 12:48:32,184 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: String, second: UInt): Pair<String, UInt> = TODO()
2021-03-11 12:48:32,186 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: String, second: UInt): Pair<String, UInt> = TODO()
2021-03-11 12:48:32,306 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:48:32,306 [main:302] - generating value of type = UInt true depth = 3
2021-03-11 12:48:32,307 [main:95] - GENERATED = Pair<String, UInt>("vvczr", 2007067713.toUInt())
2021-03-11 12:48:32,326 [main:137] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26682bd2]
2021-03-11 12:48:32,443 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:48:32,536 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:48:32,634 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:48:32,636 [main:66] - Generated call from random type = (Pair<String, UInt>("vvczr", 2007067713.toUInt())).first.replaceBefore('긪', "vkehh", "yullv")
2021-03-11 12:48:32,637 [main:94] - GETTING String from Int
2021-03-11 12:48:32,691 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:48:32,691 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:48:32,691 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:48:32,788 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:32,789 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toInt().toString(-1881905963)
2021-03-11 12:48:32,789 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]]
2021-03-11 12:48:32,790 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:48:32,790 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]
2021-03-11 12:48:32,910 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:48:32,911 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toChar().plus("pgmru")
2021-03-11 12:48:32,912 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:48:32,912 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:48:33,028 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:48:33,029 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:48:33,126 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:33,126 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).div(-5515656590717538630).toString(390720678)
2021-03-11 12:48:33,127 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:48:33,127 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:48:33,127 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:48:33,220 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:33,220 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toLong().toString(-457754995)
2021-03-11 12:48:33,221 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]]
2021-03-11 12:48:33,221 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:48:33,221 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]
2021-03-11 12:48:33,221 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toChar().lowercase()
2021-03-11 12:48:33,221 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]]
2021-03-11 12:48:33,221 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:48:33,221 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]
2021-03-11 12:48:33,222 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toChar().uppercase()
2021-03-11 12:48:33,222 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:48:33,222 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:48:33,310 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:33,310 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toString(854937757)
2021-03-11 12:48:33,311 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]]
2021-03-11 12:48:33,311 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:48:33,311 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]
2021-03-11 12:48:33,311 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toChar().titlecase()
2021-03-11 12:48:33,311 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:48:33,311 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:48:33,402 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:33,403 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:48:33,553 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:33,554 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).compareTo(-105506652).toString(-572799142)
2021-03-11 12:48:33,554 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]]
2021-03-11 12:48:33,554 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:48:33,554 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]
2021-03-11 12:48:33,647 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:33,647 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toByte().toString(-656032375)
2021-03-11 12:48:33,648 [main:63] - replacement of "OK" of type String is (A(-1427813506, "vtkln").x).toLong().toString(-457754995)
2021-03-11 12:48:33,740 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:48:33,740 [main:66] - Compilation checking started
2021-03-11 12:48:34,188 [main:53] - Result = true
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>((A(1545341633, "kzgmz"))?.x.countOneBits()) {
        i -> A((linkedSetOf<A>()).toArray().size, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += y
    }
    
    return if ((A(-1427813506, "vtkln").x).equals(null).xor(true) && str == "01234") (A(-1427813506, "vtkln").x).toLong().toString(-457754995) else "Fail ${sum} ${str}"
}


2021-03-11 12:48:34,191 [main:56] - replacing (0+1+2, Int)
2021-03-11 12:48:34,191 [main:38] - replacing 0+1+2 Int
2021-03-11 12:48:34,192 [main:42] - Getting value of type Int
2021-03-11 12:48:34,300 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:34,300 [main:46] - GENERATED VALUE OF TYPE Int = -743121398
2021-03-11 12:48:34,301 [main:49] - GENERATED IS CALL =false
2021-03-11 12:48:34,418 [main:55] - randomType = Map<A, Boolean>
2021-03-11 12:48:34,419 [main:94] - GETTING Int from Int
2021-03-11 12:48:34,488 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3ae3dfd2]]
2021-03-11 12:48:34,488 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:48:34,488 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3ae3dfd2]
2021-03-11 12:48:34,586 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:48:34,587 [main:105] - GENERATED CALL = (0+1+2).toByte().times(102)
2021-03-11 12:48:34,587 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f655756]]
2021-03-11 12:48:34,587 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:48:34,686 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:34,686 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f655756]
2021-03-11 12:48:34,687 [main:105] - GENERATED CALL = (0+1+2).compareTo(-789030479).unaryMinus()
2021-03-11 12:48:34,687 [main:101] - Case = [public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f161575]]
2021-03-11 12:48:34,687 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f161575]
2021-03-11 12:48:34,785 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:48:34,786 [main:105] - GENERATED CALL = (0+1+2).times(-37)
2021-03-11 12:48:34,786 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b80cd8f]]
2021-03-11 12:48:34,787 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:48:34,883 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:34,884 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b80cd8f]
2021-03-11 12:48:34,885 [main:105] - GENERATED CALL = (0+1+2).compareTo(-304238248).inc()
2021-03-11 12:48:34,885 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7f28a29], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@58fd4e05]]
2021-03-11 12:48:34,885 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7f28a29]
2021-03-11 12:48:34,885 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@58fd4e05]
2021-03-11 12:48:34,990 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:48:34,991 [main:105] - GENERATED CALL = (0+1+2).toDouble().compareTo(109)
2021-03-11 12:48:34,995 [main:101] - Case = [public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b80cd8f]]
2021-03-11 12:48:34,995 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b80cd8f]
2021-03-11 12:48:34,995 [main:105] - GENERATED CALL = (0+1+2).inc()
2021-03-11 12:48:34,996 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ed6eedb]]
2021-03-11 12:48:34,996 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:48:35,130 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:35,130 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ed6eedb]
2021-03-11 12:48:35,230 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:48:35,231 [main:105] - GENERATED CALL = (0+1+2).compareTo(680155695).div(-77)
2021-03-11 12:48:35,231 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ebc0bf5]]
2021-03-11 12:48:35,231 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:48:35,231 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ebc0bf5]
2021-03-11 12:48:35,325 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:35,325 [main:105] - GENERATED CALL = (0+1+2).toInt().and(-1121279207)
2021-03-11 12:48:35,326 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10809a26]]
2021-03-11 12:48:35,326 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:48:35,326 [main:137] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10809a26]
2021-03-11 12:48:35,326 [main:105] - GENERATED CALL = (0+1+2).toChar().digitToInt()
2021-03-11 12:48:35,326 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c9f5998]]
2021-03-11 12:48:35,326 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:48:35,419 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:35,420 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c9f5998]
2021-03-11 12:48:35,511 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:35,512 [main:105] - GENERATED CALL = (0+1+2).compareTo(1236956021).shl(1959978107)
2021-03-11 12:48:35,512 [main:63] - replacement of 0+1+2 of type Int is (0+1+2).toInt().and(-1121279207)
2021-03-11 12:48:35,604 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:48:35,606 [main:56] - replacing (i.toString(), String)
2021-03-11 12:48:35,607 [main:38] - replacing i.toString() String
2021-03-11 12:48:35,607 [main:42] - Getting value of type String
2021-03-11 12:48:35,721 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:48:35,722 [main:46] - GENERATED VALUE OF TYPE String = "bzosd"
2021-03-11 12:48:35,722 [main:49] - GENERATED IS CALL =false
2021-03-11 12:48:35,724 [main:55] - randomType = A
2021-03-11 12:48:35,852 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:48:35,852 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:48:35,945 [main:194] - Type params = []
2021-03-11 12:48:36,041 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:48:36,041 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:48:36,053 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32ee4d0a]
2021-03-11 12:48:36,145 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:48:36,270 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:48:36,272 [main:66] - Generated call from random type = (A(1551329251, "rhooj")).y.replaceIndentByMargin("gblxv", "twkxd")
2021-03-11 12:48:36,272 [main:63] - replacement of i.toString() of type String is (A(1551329251, "rhooj")).y.replaceIndentByMargin("gblxv", "twkxd")
2021-03-11 12:48:36,383 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:48:36,384 [main:66] - Compilation checking started
2021-03-11 12:48:36,848 [main:53] - Result = true
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>((A(1545341633, "kzgmz"))?.x.countOneBits()) {
        i -> A((linkedSetOf<A>()).toArray().size, (A(1551329251, "rhooj")).y.replaceIndentByMargin("gblxv", "twkxd"))
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += y
    }
    
    return if ((A(-1427813506, "vtkln").x).equals(null).xor(true) && str == "01234") (A(-1427813506, "vtkln").x).toLong().toString(-457754995) else "Fail ${sum} ${str}"
}


2021-03-11 12:48:36,851 [main:56] - replacing (0, Int)
2021-03-11 12:48:36,852 [main:38] - replacing 0 Int
2021-03-11 12:48:36,852 [main:42] - Getting value of type Int
2021-03-11 12:48:36,946 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:36,946 [main:46] - GENERATED VALUE OF TYPE Int = 1179980735
2021-03-11 12:48:36,947 [main:49] - GENERATED IS CALL =false
2021-03-11 12:48:37,053 [main:55] - randomType = Short
2021-03-11 12:48:37,172 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:48:37,257 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@3544563b]
2021-03-11 12:48:37,350 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:48:37,352 [main:66] - Generated call from random type = (-4273).minus(126)
2021-03-11 12:48:37,352 [main:94] - GETTING Int from Int
2021-03-11 12:48:37,390 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76034fc0]]
2021-03-11 12:48:37,390 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:48:37,390 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76034fc0]
2021-03-11 12:48:37,391 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toInt().countTrailingZeroBits()
2021-03-11 12:48:37,391 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@588beded]]
2021-03-11 12:48:37,391 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:48:37,391 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@588beded]
2021-03-11 12:48:37,489 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:48:37,491 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toShort().plus(63)
2021-03-11 12:48:37,491 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18626c8c]]
2021-03-11 12:48:37,491 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:48:37,584 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:37,585 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18626c8c]
2021-03-11 12:48:37,671 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:48:37,672 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
2021-03-11 12:48:37,673 [main:101] - Case = [public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18626c8c]]
2021-03-11 12:48:37,673 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18626c8c]
2021-03-11 12:48:37,761 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:48:37,761 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).plus(-96)
2021-03-11 12:48:37,761 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e], public final val first: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@271f9a43]]
2021-03-11 12:48:37,762 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e]
2021-03-11 12:48:37,850 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:48:37,851 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).rangeTo(-91).first
2021-03-11 12:48:37,851 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@32278335]]
2021-03-11 12:48:37,851 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:48:37,852 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@32278335]
2021-03-11 12:48:38,021 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:48:38,022 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toShort().compareTo(8)
2021-03-11 12:48:38,023 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3b8291ff]]
2021-03-11 12:48:38,023 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:48:38,023 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3b8291ff]
2021-03-11 12:48:38,133 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:38,133 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toInt().coerceAtMost(-7802822)
2021-03-11 12:48:38,134 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], public open fun toInt(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6c27f2a5]]
2021-03-11 12:48:38,134 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:48:38,134 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6c27f2a5]
2021-03-11 12:48:38,134 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toShort().toInt()
2021-03-11 12:48:38,134 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c9f5998]]
2021-03-11 12:48:38,134 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:48:38,134 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c9f5998]
2021-03-11 12:48:38,229 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:38,230 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toInt().shl(-1588993631)
2021-03-11 12:48:38,230 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ec35323]]
2021-03-11 12:48:38,231 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:48:38,321 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:38,322 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ec35323]
2021-03-11 12:48:38,411 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:38,412 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).compareTo(738341365).rotateLeft(-173725723)
2021-03-11 12:48:38,412 [main:63] - replacement of 0 of type Int is (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
2021-03-11 12:48:38,502 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:48:38,503 [main:66] - Compilation checking started
2021-03-11 12:48:38,913 [main:53] - Result = true
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>((A(1545341633, "kzgmz"))?.x.countOneBits()) {
        i -> A((linkedSetOf<A>()).toArray().size, (A(1551329251, "rhooj")).y.replaceIndentByMargin("gblxv", "twkxd"))
    }
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = ""
    
    for ((x, y) in arr) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += y
    }
    
    return if ((A(-1427813506, "vtkln").x).equals(null).xor(true) && str == "01234") (A(-1427813506, "vtkln").x).toLong().toString(-457754995) else "Fail ${sum} ${str}"
}


2021-03-11 12:48:38,916 [main:56] - replacing ({
        i -> A((linkedSetOf<A>()).toArray().size, (A(1551329251, "rhooj")).y.replaceIndentByMargin("gblxv", "twkxd"))
    }, Function1<Int, A>)
2021-03-11 12:48:38,916 [main:38] - replacing {
        i -> A((linkedSetOf<A>()).toArray().size, (A(1551329251, "rhooj")).y.replaceIndentByMargin("gblxv", "twkxd"))
    } Function1<Int, A>
2021-03-11 12:48:38,916 [main:42] - Getting value of type Function1<Int, A>
2021-03-11 12:48:39,021 [main:302] - generating value of type = Function1<Int, A> false depth = 0
2021-03-11 12:48:39,021 [main:302] - generating value of type = A false depth = 1
2021-03-11 12:48:39,021 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:48:39,111 [main:194] - Type params = []
2021-03-11 12:48:39,201 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:48:39,201 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:48:39,202 [main:46] - GENERATED VALUE OF TYPE Function1<Int, A> = {a: Int -> A(-2102853564, "upkja")}
2021-03-11 12:48:39,202 [main:49] - GENERATED IS CALL =false
2021-03-11 12:48:39,203 [main:55] - randomType = A
2021-03-11 12:48:39,294 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:48:39,294 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:48:39,381 [main:194] - Type params = []
2021-03-11 12:48:39,471 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:48:39,472 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:48:39,483 [main:94] - GETTING Function1<Int, A> from Int
2021-03-11 12:48:39,535 [main:94] - GETTING Function1<Int, A> from Int
2021-03-11 12:48:39,537 [main:94] - GETTING Function1<Int, A> from Int
2021-03-11 12:48:39,538 [main:94] - GETTING Function1<Int, A> from Int
2021-03-11 12:48:39,552 [main:94] - GETTING Function1<Int, A> from Int
2021-03-11 12:48:39,554 [main:94] - GETTING Function1<Int, A> from Boolean
2021-03-11 12:48:39,568 [main:94] - GETTING Function1<Int, A> from String
2021-03-11 12:48:39,589 [main:94] - GETTING Function1<Int, A> from String
2021-03-11 12:48:39,589 [main:63] - replacement of {
        i -> A((linkedSetOf<A>()).toArray().size, (A(1551329251, "rhooj")).y.replaceIndentByMargin("gblxv", "twkxd"))
    } of type Function1<Int, A> is {a: Int -> A(-2102853564, "upkja")}
2021-03-11 12:48:39,679 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 12:48:39,679 [main:66] - Compilation checking started
2021-03-11 12:48:40,067 [main:53] - Result = true
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>((A(1545341633, "kzgmz"))?.x.countOneBits()) {a: Int -> A(-2102853564, "upkja")}
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = ""
    
    for ((x, y) in arr) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += y
    }
    
    return if ((A(-1427813506, "vtkln").x).equals(null).xor(true) && str == "01234") (A(-1427813506, "vtkln").x).toLong().toString(-457754995) else "Fail ${sum} ${str}"
}


2021-03-11 12:48:40,069 [main:56] - replacing (sum, Int)
2021-03-11 12:48:40,069 [main:38] - replacing sum Int
2021-03-11 12:48:40,069 [main:42] - Getting value of type Int
2021-03-11 12:48:40,159 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:40,160 [main:46] - GENERATED VALUE OF TYPE Int = 1685840885
2021-03-11 12:48:40,160 [main:49] - GENERATED IS CALL =false
2021-03-11 12:48:40,160 [main:55] - randomType = Boolean
2021-03-11 12:48:40,249 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:48:40,262 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:48:40,348 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:48:40,348 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@55f9f89c]
2021-03-11 12:48:40,437 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:48:40,438 [main:66] - Generated call from random type = (false).compareTo(true).rem(92)
2021-03-11 12:48:40,438 [main:63] - replacement of sum of type Int is (false).compareTo(true).rem(92)
2021-03-11 12:48:40,544 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:48:40,545 [main:66] - Compilation checking started
2021-03-11 12:48:40,950 [main:53] - Result = true
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>((A(1545341633, "kzgmz"))?.x.countOneBits()) {a: Int -> A(-2102853564, "upkja")}
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = ""
    
    for ((x, y) in arr) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += y
    }
    
    return if ((A(-1427813506, "vtkln").x).equals(null).xor(true) && str == "01234") (A(-1427813506, "vtkln").x).toLong().toString(-457754995) else "Fail ${(false).compareTo(true).rem(92)} ${str}"
}


2021-03-11 12:48:40,952 [main:56] - replacing (str, String)
2021-03-11 12:48:40,952 [main:38] - replacing str String
2021-03-11 12:48:40,952 [main:42] - Getting value of type String
2021-03-11 12:48:41,045 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:48:41,046 [main:46] - GENERATED VALUE OF TYPE String = "anzhs"
2021-03-11 12:48:41,046 [main:49] - GENERATED IS CALL =false
2021-03-11 12:48:41,047 [main:55] - randomType = String
2021-03-11 12:48:41,132 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:48:41,163 [main:137] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a3ba1fe]
2021-03-11 12:48:41,257 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:41,347 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:48:41,347 [main:66] - Generated call from random type = ("xxybe").padEnd(1346845419, '鮮')
2021-03-11 12:48:41,348 [main:94] - GETTING String from Int
2021-03-11 12:48:41,407 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]]
2021-03-11 12:48:41,407 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:48:41,407 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]
2021-03-11 12:48:41,407 [main:105] - GENERATED CALL = (0+1+2+3).toChar().uppercase()
2021-03-11 12:48:41,407 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:48:41,407 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:48:41,501 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:48:41,502 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:48:41,608 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:41,609 [main:105] - GENERATED CALL = (0+1+2+3).div(-8737055302720789053).toString(1342862467)
2021-03-11 12:48:41,609 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]]
2021-03-11 12:48:41,609 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:48:41,609 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]
2021-03-11 12:48:41,609 [main:105] - GENERATED CALL = (0+1+2+3).toChar().titlecase()
2021-03-11 12:48:41,609 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:48:41,609 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:48:41,697 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:41,697 [main:105] - GENERATED CALL = (0+1+2+3).toString(-614912485)
2021-03-11 12:48:41,697 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:48:41,698 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:48:41,783 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:41,783 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:48:41,869 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:41,870 [main:105] - GENERATED CALL = (0+1+2+3).compareTo(-1270383716).toString(-157808766)
2021-03-11 12:48:41,870 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]]
2021-03-11 12:48:41,870 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:48:41,871 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]
2021-03-11 12:48:41,955 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:41,956 [main:105] - GENERATED CALL = (0+1+2+3).toByte().toString(-254256760)
2021-03-11 12:48:41,956 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]]
2021-03-11 12:48:41,956 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:48:41,956 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]
2021-03-11 12:48:42,041 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:48:42,042 [main:105] - GENERATED CALL = (0+1+2+3).toChar().plus("cgsui")
2021-03-11 12:48:42,042 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]]
2021-03-11 12:48:42,042 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:48:42,042 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]
2021-03-11 12:48:42,131 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:42,131 [main:105] - GENERATED CALL = (0+1+2+3).toShort().toString(480336982)
2021-03-11 12:48:42,132 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]]
2021-03-11 12:48:42,132 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:48:42,132 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]
2021-03-11 12:48:42,132 [main:105] - GENERATED CALL = (0+1+2+3).toChar().lowercase()
2021-03-11 12:48:42,132 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:48:42,132 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:48:42,132 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:48:42,281 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:42,282 [main:105] - GENERATED CALL = (0+1+2+3).toInt().toString(-1543579283)
2021-03-11 12:48:42,282 [main:63] - replacement of str of type String is (0+1+2+3).toChar().lowercase()
2021-03-11 12:48:42,402 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:48:42,402 [main:66] - Compilation checking started
2021-03-11 12:48:42,639 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>((A(1545341633, "kzgmz"))?.x.countOneBits()) {a: Int -> A(-2102853564, "upkja")}
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = ""
    
    for ((x, y) in arr) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        (0+1+2+3).toChar().lowercase() += y
    }
    
    return if ((A(-1427813506, "vtkln").x).equals(null).xor(true) && str == "01234") (A(-1427813506, "vtkln").x).toLong().toString(-457754995) else "Fail ${(false).compareTo(true).rem(92)} ${str}"
}


2021-03-11 12:48:42,641 [main:56] - replacing (sum, Int)
2021-03-11 12:48:42,641 [main:38] - replacing sum Int
2021-03-11 12:48:42,641 [main:42] - Getting value of type Int
2021-03-11 12:48:42,725 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:42,726 [main:46] - GENERATED VALUE OF TYPE Int = 827593411
2021-03-11 12:48:42,726 [main:49] - GENERATED IS CALL =false
2021-03-11 12:48:42,908 [main:55] - randomType = HashSet<Collection<A>>
2021-03-11 12:48:43,008 [main:302] - generating value of type = HashSet<Collection<A>> false depth = 0
2021-03-11 12:48:43,101 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: Collection<A>): HashSet<Collection<A>> = TODO()
2021-03-11 12:48:43,103 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: Collection<A>): HashSet<Collection<A>> = TODO()
2021-03-11 12:48:43,192 [main:302] - generating value of type = Collection<A> false depth = 3
2021-03-11 12:48:43,282 [main:43] - GENERATING CALL OF fun <T> setOf(): Collection<A> = TODO()
2021-03-11 12:48:43,283 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOf(): Collection<A> = TODO()
2021-03-11 12:48:43,372 [main:95] - GENERATED = setOf<A>()
2021-03-11 12:48:43,372 [main:95] - GENERATED = hashSetOf<Collection<A>>(setOf<A>())
2021-03-11 12:48:43,498 [main:137] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@1af8249e]
2021-03-11 12:48:43,498 [main:137] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentHashCode(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@35b1a8b0]
2021-03-11 12:48:43,498 [main:66] - Generated call from random type = (hashSetOf<Collection<A>>(setOf<A>())).toArray().contentHashCode()
2021-03-11 12:48:43,499 [main:94] - GETTING Int from Int
2021-03-11 12:48:43,531 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@3544563b]]
2021-03-11 12:48:43,531 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:48:43,532 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@3544563b]
2021-03-11 12:48:43,616 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:48:43,616 [main:105] - GENERATED CALL = (0+1+2).toShort().minus(64)
2021-03-11 12:48:43,616 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@55f9f89c]]
2021-03-11 12:48:43,616 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:48:43,715 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:43,716 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@55f9f89c]
2021-03-11 12:48:43,807 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:48:43,808 [main:105] - GENERATED CALL = (0+1+2).compareTo(2103636693).rem(11)
2021-03-11 12:48:43,808 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76034fc0]]
2021-03-11 12:48:43,809 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:48:43,893 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:43,894 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76034fc0]
2021-03-11 12:48:43,894 [main:105] - GENERATED CALL = (0+1+2).compareTo(1514942470).countTrailingZeroBits()
2021-03-11 12:48:43,894 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6561e48]]
2021-03-11 12:48:43,894 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:48:43,894 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6561e48]
2021-03-11 12:48:43,978 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:48:43,979 [main:105] - GENERATED CALL = (0+1+2).toInt().compareTo(-127)
2021-03-11 12:48:43,979 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ebc0bf5]]
2021-03-11 12:48:43,979 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:48:44,062 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:44,062 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ebc0bf5]
2021-03-11 12:48:44,144 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:44,145 [main:105] - GENERATED CALL = (0+1+2).compareTo(-630616087).and(10946122)
2021-03-11 12:48:44,145 [main:101] - Case = [public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ebc0bf5]]
2021-03-11 12:48:44,145 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ebc0bf5]
2021-03-11 12:48:44,228 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:44,229 [main:105] - GENERATED CALL = (0+1+2).and(-1511899452)
2021-03-11 12:48:44,229 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@588beded]]
2021-03-11 12:48:44,229 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:48:44,229 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@588beded]
2021-03-11 12:48:44,335 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:48:44,336 [main:105] - GENERATED CALL = (0+1+2).toShort().plus(-41)
2021-03-11 12:48:44,336 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10809a26]]
2021-03-11 12:48:44,336 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:48:44,337 [main:137] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10809a26]
2021-03-11 12:48:44,337 [main:105] - GENERATED CALL = (0+1+2).toChar().digitToInt()
2021-03-11 12:48:44,337 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@4966235c]]
2021-03-11 12:48:44,337 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:48:44,337 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@4966235c]
2021-03-11 12:48:44,431 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:48:44,432 [main:105] - GENERATED CALL = (0+1+2).toByte().div(103)
2021-03-11 12:48:44,432 [main:101] - Case = [@kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@55f9f89c]]
2021-03-11 12:48:44,432 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@55f9f89c]
2021-03-11 12:48:44,516 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:48:44,517 [main:105] - GENERATED CALL = (0+1+2).rem(29)
2021-03-11 12:48:44,517 [main:63] - replacement of sum of type Int is (0+1+2).compareTo(2103636693).rem(11)
2021-03-11 12:48:44,601 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:48:44,601 [main:66] - Compilation checking started
2021-03-11 12:48:44,836 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>((A(1545341633, "kzgmz"))?.x.countOneBits()) {a: Int -> A(-2102853564, "upkja")}
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = ""
    
    for ((x, y) in arr) {
        (0+1+2).compareTo(2103636693).rem(11) += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += y
    }
    
    return if ((A(-1427813506, "vtkln").x).equals(null).xor(true) && str == "01234") (A(-1427813506, "vtkln").x).toLong().toString(-457754995) else "Fail ${(false).compareTo(true).rem(92)} ${str}"
}


2021-03-11 12:48:44,838 [main:56] - replacing ((A(-1427813506, "vtkln").x).equals(null).xor(true) && str == "01234", Boolean)
2021-03-11 12:48:44,839 [main:38] - replacing (A(-1427813506, "vtkln").x).equals(null).xor(true) && str == "01234" Boolean
2021-03-11 12:48:44,839 [main:42] - Getting value of type Boolean
2021-03-11 12:48:44,924 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:48:44,924 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 12:48:44,924 [main:49] - GENERATED IS CALL =false
2021-03-11 12:48:44,925 [main:55] - randomType = String
2021-03-11 12:48:45,012 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:48:45,035 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a0c7c2e]
2021-03-11 12:48:45,035 [main:66] - Generated call from random type = ("rqduc").isNotEmpty()
2021-03-11 12:48:45,036 [main:94] - GETTING Boolean from Int
2021-03-11 12:48:45,077 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@53884783]]
2021-03-11 12:48:45,078 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]
2021-03-11 12:48:45,178 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:48:45,178 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@53884783]
2021-03-11 12:48:45,265 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:48:45,266 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).equals("dxujp").equals("mswoq")
2021-03-11 12:48:45,266 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@a2ea05b]]
2021-03-11 12:48:45,266 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e]
2021-03-11 12:48:45,355 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:48:45,355 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@a2ea05b]
2021-03-11 12:48:45,453 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:48:45,454 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).rangeTo(-115).equals("ugywp")
2021-03-11 12:48:45,454 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24bd4c6b]]
2021-03-11 12:48:45,454 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:48:45,454 [main:137] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24bd4c6b]
2021-03-11 12:48:45,454 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toChar().isDigit()
2021-03-11 12:48:45,455 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7f28a29], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@27eff770]]
2021-03-11 12:48:45,455 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7f28a29]
2021-03-11 12:48:45,455 [main:137] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@27eff770]
2021-03-11 12:48:45,455 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toDouble().isInfinite()
2021-03-11 12:48:45,455 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@98474c2]]
2021-03-11 12:48:45,455 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d]
2021-03-11 12:48:45,553 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:48:45,553 [main:137] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@98474c2]
2021-03-11 12:48:45,554 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).div(0.6459235336254061).isNaN()
2021-03-11 12:48:45,554 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4428db34]]
2021-03-11 12:48:45,554 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:48:45,554 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4428db34]
2021-03-11 12:48:45,641 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:48:45,641 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toShort().equals("mxcxs")
2021-03-11 12:48:45,641 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169], public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@67360a68]]
2021-03-11 12:48:45,641 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169]
2021-03-11 12:48:45,641 [main:137] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@67360a68]
2021-03-11 12:48:45,642 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toFloat().isFinite()
2021-03-11 12:48:45,642 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4063f07e]]
2021-03-11 12:48:45,642 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]
2021-03-11 12:48:45,729 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:48:45,730 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4063f07e]
2021-03-11 12:48:45,847 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:48:45,848 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).equals("vobhs").and(false)
2021-03-11 12:48:45,848 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@631e496]]
2021-03-11 12:48:45,848 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:48:45,848 [main:137] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@631e496]
2021-03-11 12:48:45,849 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toChar().isISOControl()
2021-03-11 12:48:45,849 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@628f3477]]
2021-03-11 12:48:45,849 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:48:45,849 [main:137] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@628f3477]
2021-03-11 12:48:45,849 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toChar().isSurrogate()
2021-03-11 12:48:45,849 [main:63] - replacement of (A(-1427813506, "vtkln").x).equals(null).xor(true) && str == "01234" of type Boolean is (A(-1427813506, "vtkln").x).toFloat().isFinite()
2021-03-11 12:48:45,945 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:48:45,945 [main:66] - Compilation checking started
2021-03-11 12:48:46,314 [main:53] - Result = true
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>((A(1545341633, "kzgmz"))?.x.countOneBits()) {a: Int -> A(-2102853564, "upkja")}
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = ""
    
    for ((x, y) in arr) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += y
    }
    
    return if ((A(-1427813506, "vtkln").x).toFloat().isFinite()) (A(-1427813506, "vtkln").x).toLong().toString(-457754995) else "Fail ${(false).compareTo(true).rem(92)} ${str}"
}


2021-03-11 12:48:46,316 [main:56] - replacing ("Fail ${(false).compareTo(true).rem(92)} ${str}", String)
2021-03-11 12:48:46,316 [main:38] - replacing "Fail ${(false).compareTo(true).rem(92)} ${str}" String
2021-03-11 12:48:46,316 [main:42] - Getting value of type String
2021-03-11 12:48:46,403 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:48:46,404 [main:46] - GENERATED VALUE OF TYPE String = "ibfme"
2021-03-11 12:48:46,404 [main:49] - GENERATED IS CALL =false
2021-03-11 12:48:46,688 [main:55] - randomType = Function1<Int?, Collection<A>>
2021-03-11 12:48:46,689 [main:94] - GETTING String from Int
2021-03-11 12:48:46,739 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:48:46,739 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:48:46,844 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:46,845 [main:105] - GENERATED CALL = (sum).toString(724145126)
2021-03-11 12:48:46,845 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:48:46,845 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:48:46,846 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:48:46,934 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:46,935 [main:105] - GENERATED CALL = (sum).toLong().toString(-875249364)
2021-03-11 12:48:46,935 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]]
2021-03-11 12:48:46,935 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:48:46,935 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]
2021-03-11 12:48:46,935 [main:105] - GENERATED CALL = (sum).toChar().titlecase()
2021-03-11 12:48:46,936 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]]
2021-03-11 12:48:46,936 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:48:46,936 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]
2021-03-11 12:48:46,936 [main:105] - GENERATED CALL = (sum).toChar().lowercase()
2021-03-11 12:48:46,936 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]]
2021-03-11 12:48:46,936 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:48:46,936 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]
2021-03-11 12:48:47,019 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:47,020 [main:105] - GENERATED CALL = (sum).toShort().toString(1107760094)
2021-03-11 12:48:47,020 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:48:47,020 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:48:47,104 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:48:47,105 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:48:47,188 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:47,188 [main:105] - GENERATED CALL = (sum).div(3031467223701819221).toString(-1383187515)
2021-03-11 12:48:47,188 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:48:47,188 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:48:47,274 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:47,275 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:48:47,358 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:47,358 [main:105] - GENERATED CALL = (sum).compareTo(1104703403).toString(-721251643)
2021-03-11 12:48:47,359 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:48:47,359 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:48:47,359 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:48:47,472 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:47,473 [main:105] - GENERATED CALL = (sum).toInt().toString(-2002581833)
2021-03-11 12:48:47,473 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]]
2021-03-11 12:48:47,473 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:48:47,473 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]
2021-03-11 12:48:47,579 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:48:47,580 [main:105] - GENERATED CALL = (sum).toChar().plus("mmzkj")
2021-03-11 12:48:47,580 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]]
2021-03-11 12:48:47,580 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:48:47,580 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]
2021-03-11 12:48:47,667 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:47,667 [main:105] - GENERATED CALL = (sum).toByte().toString(45420925)
2021-03-11 12:48:47,668 [main:63] - replacement of "Fail ${(false).compareTo(true).rem(92)} ${str}" of type String is (sum).toByte().toString(45420925)
2021-03-11 12:48:47,751 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:48:47,752 [main:66] - Compilation checking started
2021-03-11 12:48:48,147 [main:53] - Result = true
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>((A(1545341633, "kzgmz"))?.x.countOneBits()) {a: Int -> A(-2102853564, "upkja")}
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = ""
    
    for ((x, y) in arr) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += y
    }
    
    return if ((A(-1427813506, "vtkln").x).toFloat().isFinite()) (A(-1427813506, "vtkln").x).toLong().toString(-457754995) else (sum).toByte().toString(45420925)
}


2021-03-11 12:48:48,149 [main:56] - replacing (if ((A(-1427813506, "vtkln").x).toFloat().isFinite()) (A(-1427813506, "vtkln").x).toLong().toString(-457754995) else (sum).toByte().toString(45420925), String)
2021-03-11 12:48:48,149 [main:38] - replacing if ((A(-1427813506, "vtkln").x).toFloat().isFinite()) (A(-1427813506, "vtkln").x).toLong().toString(-457754995) else (sum).toByte().toString(45420925) String
2021-03-11 12:48:48,150 [main:42] - Getting value of type String
2021-03-11 12:48:48,233 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:48:48,234 [main:46] - GENERATED VALUE OF TYPE String = "qafyj"
2021-03-11 12:48:48,234 [main:49] - GENERATED IS CALL =false
2021-03-11 12:48:48,235 [main:55] - randomType = A
2021-03-11 12:48:48,326 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:48:48,326 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:48:48,441 [main:194] - Type params = []
2021-03-11 12:48:48,524 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:48:48,524 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:48:48,534 [main:137] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3948e47d]
2021-03-11 12:48:48,619 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:48:48,619 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:48:48,620 [main:66] - Generated call from random type = (A(2007929541, "bpruq")).y.dropLastWhile({a: Char -> false})
2021-03-11 12:48:48,621 [main:94] - GETTING String from Int
2021-03-11 12:48:48,660 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:48:48,660 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:48:48,660 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:48:48,742 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:48,743 [main:105] - GENERATED CALL = (0+1+2).toInt().toString(868583827)
2021-03-11 12:48:48,743 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]]
2021-03-11 12:48:48,743 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:48:48,743 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]
2021-03-11 12:48:48,744 [main:105] - GENERATED CALL = (0+1+2).toChar().lowercase()
2021-03-11 12:48:48,744 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]]
2021-03-11 12:48:48,744 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:48:48,744 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]
2021-03-11 12:48:48,744 [main:105] - GENERATED CALL = (0+1+2).toChar().titlecase()
2021-03-11 12:48:48,744 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]]
2021-03-11 12:48:48,744 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:48:48,744 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]
2021-03-11 12:48:48,744 [main:105] - GENERATED CALL = (0+1+2).toChar().uppercase()
2021-03-11 12:48:48,744 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]]
2021-03-11 12:48:48,745 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:48:48,745 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]
2021-03-11 12:48:48,827 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:48,828 [main:105] - GENERATED CALL = (0+1+2).toShort().toString(1741625077)
2021-03-11 12:48:48,828 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:48:48,828 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:48:48,910 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:48,910 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:48:48,992 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:48,993 [main:105] - GENERATED CALL = (0+1+2).compareTo(74383045).toString(-753882918)
2021-03-11 12:48:48,993 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]]
2021-03-11 12:48:48,993 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:48:48,993 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]
2021-03-11 12:48:49,076 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:48:49,076 [main:105] - GENERATED CALL = (0+1+2).toChar().plus("wgrdb")
2021-03-11 12:48:49,076 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:48:49,077 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:48:49,181 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:48:49,182 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:48:49,275 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:49,276 [main:105] - GENERATED CALL = (0+1+2).div(2349501347873370380).toString(-19682999)
2021-03-11 12:48:49,276 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]]
2021-03-11 12:48:49,276 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:48:49,276 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]
2021-03-11 12:48:49,358 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:49,358 [main:105] - GENERATED CALL = (0+1+2).toByte().toString(212428391)
2021-03-11 12:48:49,359 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:48:49,359 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:48:49,359 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:48:49,440 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:49,440 [main:105] - GENERATED CALL = (0+1+2).toLong().toString(172189107)
2021-03-11 12:48:49,440 [main:63] - replacement of if ((A(-1427813506, "vtkln").x).toFloat().isFinite()) (A(-1427813506, "vtkln").x).toLong().toString(-457754995) else (sum).toByte().toString(45420925) of type String is (0+1+2).compareTo(74383045).toString(-753882918)
2021-03-11 12:48:49,521 [main:33] - Trying to replace Element(IF) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:48:49,521 [main:66] - Compilation checking started
2021-03-11 12:48:49,831 [main:53] - Result = true
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>((A(1545341633, "kzgmz"))?.x.countOneBits()) {a: Int -> A(-2102853564, "upkja")}
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = ""
    
    for ((x, y) in arr) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += y
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:48:49,833 [main:56] - replacing ("", String)
2021-03-11 12:48:49,833 [main:38] - replacing "" String
2021-03-11 12:48:49,833 [main:42] - Getting value of type String
2021-03-11 12:48:49,915 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:48:49,916 [main:46] - GENERATED VALUE OF TYPE String = "ymrec"
2021-03-11 12:48:49,916 [main:49] - GENERATED IS CALL =false
2021-03-11 12:48:50,004 [main:55] - randomType = A?
2021-03-11 12:48:50,113 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:48:50,114 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:48:50,193 [main:194] - Type params = []
2021-03-11 12:48:50,271 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:48:50,272 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:48:50,280 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2976238d]
2021-03-11 12:48:50,361 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:48:50,362 [main:66] - Generated call from random type = (A(893664772, "cyfgk"))?.y.replaceIndent("vqlkn")
2021-03-11 12:48:50,363 [main:94] - GETTING String from Int
2021-03-11 12:48:50,425 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]]
2021-03-11 12:48:50,425 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:48:50,425 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]
2021-03-11 12:48:50,511 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:50,511 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toShort().toString(-775210943)
2021-03-11 12:48:50,512 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:48:50,512 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:48:50,512 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:48:50,602 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:50,603 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toLong().toString(1704543014)
2021-03-11 12:48:50,603 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]]
2021-03-11 12:48:50,603 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:48:50,603 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]
2021-03-11 12:48:50,604 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toChar().uppercase()
2021-03-11 12:48:50,604 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:48:50,604 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:48:50,693 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:50,693 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:48:50,776 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:50,776 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
2021-03-11 12:48:50,777 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]]
2021-03-11 12:48:50,777 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:48:50,777 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]
2021-03-11 12:48:50,777 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toChar().titlecase()
2021-03-11 12:48:50,777 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]]
2021-03-11 12:48:50,777 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:48:50,777 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]
2021-03-11 12:48:50,777 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toChar().lowercase()
2021-03-11 12:48:50,777 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]]
2021-03-11 12:48:50,778 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:48:50,778 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]
2021-03-11 12:48:50,859 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:50,860 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toByte().toString(-841394850)
2021-03-11 12:48:50,860 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:48:50,860 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:48:50,974 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:48:50,975 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:48:51,065 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:51,066 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).div(-4379565057669524354).toString(-366801879)
2021-03-11 12:48:51,066 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]]
2021-03-11 12:48:51,066 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:48:51,066 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]
2021-03-11 12:48:51,147 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:48:51,148 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toChar().plus("yyosc")
2021-03-11 12:48:51,148 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:48:51,148 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:48:51,227 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:51,227 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toString(-551418304)
2021-03-11 12:48:51,227 [main:63] - replacement of "" of type String is (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
2021-03-11 12:48:51,306 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:48:51,306 [main:66] - Compilation checking started
2021-03-11 12:48:51,641 [main:53] - Result = true
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>((A(1545341633, "kzgmz"))?.x.countOneBits()) {a: Int -> A(-2102853564, "upkja")}
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in arr) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += y
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:48:51,643 [main:56] - replacing (arr, Array<A>)
2021-03-11 12:48:51,644 [main:38] - replacing arr Array<A>
2021-03-11 12:48:51,644 [main:42] - Getting value of type Array<A>
2021-03-11 12:48:51,730 [main:302] - generating value of type = Array<A> false depth = 0
2021-03-11 12:48:51,814 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<A> = TODO()
2021-03-11 12:48:51,815 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<A> = TODO()
2021-03-11 12:48:51,928 [main:95] - GENERATED = emptyArray<A>()
2021-03-11 12:48:51,928 [main:46] - GENERATED VALUE OF TYPE Array<A> = emptyArray<A>()
2021-03-11 12:48:51,928 [main:49] - GENERATED IS CALL =true
2021-03-11 12:48:52,192 [main:55] - randomType = Set<UShort>
2021-03-11 12:48:52,194 [main:94] - GETTING Array<A> from Int
2021-03-11 12:48:52,227 [main:94] - GETTING Array<A> from String
2021-03-11 12:48:52,245 [main:94] - GETTING Array<A> from Int
2021-03-11 12:48:52,246 [main:94] - GETTING Array<A> from Int
2021-03-11 12:48:52,247 [main:94] - GETTING Array<A> from Int
2021-03-11 12:48:52,248 [main:94] - GETTING Array<A> from Int
2021-03-11 12:48:52,249 [main:94] - GETTING Array<A> from String
2021-03-11 12:48:52,250 [main:94] - GETTING Array<A> from Boolean
2021-03-11 12:48:52,259 [main:63] - replacement of arr of type Array<A> is emptyArray<A>()
2021-03-11 12:48:52,343 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:48:52,343 [main:66] - Compilation checking started
2021-03-11 12:48:52,660 [main:53] - Result = true
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>((A(1545341633, "kzgmz"))?.x.countOneBits()) {a: Int -> A(-2102853564, "upkja")}
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += y
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:48:52,661 [main:56] - replacing (str, String)
2021-03-11 12:48:52,662 [main:38] - replacing str String
2021-03-11 12:48:52,662 [main:42] - Getting value of type String
2021-03-11 12:48:52,745 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:48:52,745 [main:46] - GENERATED VALUE OF TYPE String = "osjqc"
2021-03-11 12:48:52,746 [main:49] - GENERATED IS CALL =false
2021-03-11 12:48:52,746 [main:55] - randomType = A
2021-03-11 12:48:52,828 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:48:52,828 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:48:52,909 [main:194] - Type params = []
2021-03-11 12:48:53,013 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:48:53,014 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:48:53,021 [main:137] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61b5cf30]
2021-03-11 12:48:53,102 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:53,182 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:48:53,183 [main:66] - Generated call from random type = (A(-19653445, "pvufy")).y.padStart(1260938443, '졜')
2021-03-11 12:48:53,184 [main:94] - GETTING String from Int
2021-03-11 12:48:53,216 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:48:53,216 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:48:53,297 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:53,298 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:48:53,377 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:53,378 [main:105] - GENERATED CALL = (0+1+2).compareTo(-821686522).toString(-1537764623)
2021-03-11 12:48:53,378 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:48:53,378 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:48:53,378 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:48:53,458 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:53,458 [main:105] - GENERATED CALL = (0+1+2).toInt().toString(1615919173)
2021-03-11 12:48:53,459 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]]
2021-03-11 12:48:53,459 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:48:53,459 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]
2021-03-11 12:48:53,538 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:53,539 [main:105] - GENERATED CALL = (0+1+2).toByte().toString(-555153301)
2021-03-11 12:48:53,539 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]]
2021-03-11 12:48:53,539 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:48:53,539 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]
2021-03-11 12:48:53,539 [main:105] - GENERATED CALL = (0+1+2).toChar().titlecase()
2021-03-11 12:48:53,539 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:48:53,539 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:48:53,619 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:48:53,619 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:48:53,701 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:53,701 [main:105] - GENERATED CALL = (0+1+2).div(8998432659115121963).toString(532629215)
2021-03-11 12:48:53,701 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:48:53,702 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:48:53,702 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:48:53,789 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:53,790 [main:105] - GENERATED CALL = (0+1+2).toLong().toString(-1358953332)
2021-03-11 12:48:53,790 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]]
2021-03-11 12:48:53,790 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:48:53,790 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]
2021-03-11 12:48:53,901 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:48:53,902 [main:105] - GENERATED CALL = (0+1+2).toChar().plus("erkgv")
2021-03-11 12:48:53,902 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]]
2021-03-11 12:48:53,902 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:48:53,902 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]
2021-03-11 12:48:53,903 [main:105] - GENERATED CALL = (0+1+2).toChar().uppercase()
2021-03-11 12:48:53,903 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]]
2021-03-11 12:48:53,903 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:48:53,903 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]
2021-03-11 12:48:54,003 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:54,004 [main:105] - GENERATED CALL = (0+1+2).toShort().toString(-1936842475)
2021-03-11 12:48:54,004 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:48:54,004 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:48:54,088 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:54,088 [main:105] - GENERATED CALL = (0+1+2).toString(-1463170636)
2021-03-11 12:48:54,088 [main:63] - replacement of str of type String is (0+1+2).div(8998432659115121963).toString(532629215)
2021-03-11 12:48:54,171 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:48:54,172 [main:56] - replacing (A((linkedSetOf<A>()).toArray().size, (A(1551329251, "rhooj")).y.replaceIndentByMargin("gblxv", "twkxd")), A)
2021-03-11 12:48:54,173 [main:38] - replacing A((linkedSetOf<A>()).toArray().size, (A(1551329251, "rhooj")).y.replaceIndentByMargin("gblxv", "twkxd")) A
2021-03-11 12:48:54,173 [main:42] - Getting value of type A
2021-03-11 12:48:54,252 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:48:54,252 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:48:54,334 [main:194] - Type params = []
2021-03-11 12:48:54,414 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:48:54,414 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:48:54,415 [main:46] - GENERATED VALUE OF TYPE A = A(-2078651486, "pbofg")
2021-03-11 12:48:54,415 [main:49] - GENERATED IS CALL =true
2021-03-11 12:48:54,499 [main:55] - randomType = List<A>
2021-03-11 12:48:54,500 [main:94] - GETTING A from Boolean
2021-03-11 12:48:54,513 [main:94] - GETTING A from String
2021-03-11 12:48:54,533 [main:94] - GETTING A from Int
2021-03-11 12:48:54,576 [main:94] - GETTING A from Int
2021-03-11 12:48:54,577 [main:94] - GETTING A from Int
2021-03-11 12:48:54,577 [main:94] - GETTING A from String
2021-03-11 12:48:54,578 [main:94] - GETTING A from Int
2021-03-11 12:48:54,579 [main:94] - GETTING A from Int
2021-03-11 12:48:54,579 [main:63] - replacement of A((linkedSetOf<A>()).toArray().size, (A(1551329251, "rhooj")).y.replaceIndentByMargin("gblxv", "twkxd")) of type A is A(-2078651486, "pbofg")
2021-03-11 12:48:54,658 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:48:54,660 [main:56] - replacing ((0+1+2).toInt().and(-1121279207)+3, Int)
2021-03-11 12:48:54,660 [main:38] - replacing (0+1+2).toInt().and(-1121279207)+3 Int
2021-03-11 12:48:54,660 [main:42] - Getting value of type Int
2021-03-11 12:48:54,761 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:54,761 [main:46] - GENERATED VALUE OF TYPE Int = -875086289
2021-03-11 12:48:54,761 [main:49] - GENERATED IS CALL =false
2021-03-11 12:48:54,865 [main:55] - randomType = A?
2021-03-11 12:48:54,946 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:48:54,946 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:48:55,028 [main:194] - Type params = []
2021-03-11 12:48:55,112 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:48:55,112 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:48:55,126 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3b8291ff]
2021-03-11 12:48:55,210 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:55,210 [main:66] - Generated call from random type = (A(1813755933, "iezie"))?.x.coerceAtMost(-894508538)
2021-03-11 12:48:55,210 [main:94] - GETTING Int from Int
2021-03-11 12:48:55,246 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10809a26]]
2021-03-11 12:48:55,246 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:48:55,246 [main:137] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10809a26]
2021-03-11 12:48:55,246 [main:105] - GENERATED CALL = (0+1).toChar().digitToInt()
2021-03-11 12:48:55,247 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d868003]]
2021-03-11 12:48:55,247 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:48:55,247 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d868003]
2021-03-11 12:48:55,333 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:48:55,334 [main:105] - GENERATED CALL = (0+1).toInt().minus(107)
2021-03-11 12:48:55,334 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@5e10d1c0]]
2021-03-11 12:48:55,334 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:48:55,334 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@5e10d1c0]
2021-03-11 12:48:55,415 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:48:55,415 [main:105] - GENERATED CALL = (0+1).toByte().minus(40)
2021-03-11 12:48:55,416 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2d4ffd58]]
2021-03-11 12:48:55,416 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:48:55,416 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2d4ffd58]
2021-03-11 12:48:55,416 [main:105] - GENERATED CALL = (0+1).toLong().countTrailingZeroBits()
2021-03-11 12:48:55,416 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f161575]]
2021-03-11 12:48:55,416 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:48:55,503 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:55,504 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f161575]
2021-03-11 12:48:55,616 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:48:55,617 [main:105] - GENERATED CALL = (0+1).compareTo(-2019482183).times(33)
2021-03-11 12:48:55,617 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3b8291ff]]
2021-03-11 12:48:55,617 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:48:55,617 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3b8291ff]
2021-03-11 12:48:55,715 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:55,716 [main:105] - GENERATED CALL = (0+1).toInt().coerceAtMost(-1152341734)
2021-03-11 12:48:55,716 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@d0efe34]]
2021-03-11 12:48:55,716 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:48:55,798 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:55,799 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@d0efe34]
2021-03-11 12:48:55,878 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:55,879 [main:105] - GENERATED CALL = (0+1).compareTo(-871779013).rotateRight(-775609123)
2021-03-11 12:48:55,879 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]]
2021-03-11 12:48:55,879 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]
2021-03-11 12:48:55,958 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:48:55,958 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:48:56,040 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:48:56,041 [main:105] - GENERATED CALL = (0+1).equals("nnotl").compareTo(false)
2021-03-11 12:48:56,041 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@7760e931]]
2021-03-11 12:48:56,041 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:48:56,041 [main:105] - GENERATED CALL = (0+1).toChar().code
2021-03-11 12:48:56,042 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@68b11d5c]]
2021-03-11 12:48:56,042 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:48:56,042 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@68b11d5c]
2021-03-11 12:48:56,042 [main:105] - GENERATED CALL = (0+1).toShort().countOneBits()
2021-03-11 12:48:56,042 [main:63] - replacement of (0+1+2).toInt().and(-1121279207)+3 of type Int is (0+1).toInt().coerceAtMost(-1152341734)
2021-03-11 12:48:56,124 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:48:56,126 [main:56] - replacing (str, String)
2021-03-11 12:48:56,126 [main:38] - replacing str String
2021-03-11 12:48:56,126 [main:42] - Getting value of type String
2021-03-11 12:48:56,207 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:48:56,208 [main:46] - GENERATED VALUE OF TYPE String = "xebat"
2021-03-11 12:48:56,208 [main:49] - GENERATED IS CALL =false
2021-03-11 12:48:56,209 [main:55] - randomType = A
2021-03-11 12:48:56,318 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:48:56,318 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:48:56,408 [main:194] - Type params = []
2021-03-11 12:48:56,489 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:48:56,489 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:48:56,496 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7beb8085]
2021-03-11 12:48:56,497 [main:66] - Generated call from random type = (A(1844383363, "tzyql")).y.trim()
2021-03-11 12:48:56,498 [main:94] - GETTING String from Int
2021-03-11 12:48:56,530 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:48:56,530 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:48:56,530 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:48:56,610 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:56,611 [main:105] - GENERATED CALL = (0+1).toLong().toString(1285038126)
2021-03-11 12:48:56,611 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]]
2021-03-11 12:48:56,611 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:48:56,611 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]
2021-03-11 12:48:56,611 [main:105] - GENERATED CALL = (0+1).toChar().lowercase()
2021-03-11 12:48:56,611 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]]
2021-03-11 12:48:56,611 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:48:56,612 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]
2021-03-11 12:48:56,612 [main:105] - GENERATED CALL = (0+1).toChar().uppercase()
2021-03-11 12:48:56,612 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:48:56,612 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:48:56,694 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:56,695 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:48:56,778 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:56,779 [main:105] - GENERATED CALL = (0+1).compareTo(-1499716284).toString(-52621631)
2021-03-11 12:48:56,779 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]]
2021-03-11 12:48:56,779 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:48:56,779 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]
2021-03-11 12:48:56,779 [main:105] - GENERATED CALL = (0+1).toChar().titlecase()
2021-03-11 12:48:56,779 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]]
2021-03-11 12:48:56,779 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:48:56,779 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]
2021-03-11 12:48:56,859 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:48:56,860 [main:105] - GENERATED CALL = (0+1).toChar().plus("eloqn")
2021-03-11 12:48:56,860 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:48:56,861 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:48:56,951 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:48:56,951 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:48:57,068 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:57,069 [main:105] - GENERATED CALL = (0+1).div(877924056004504915).toString(272896704)
2021-03-11 12:48:57,069 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:48:57,069 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:48:57,069 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:48:57,161 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:57,162 [main:105] - GENERATED CALL = (0+1).toInt().toString(1032009685)
2021-03-11 12:48:57,162 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]]
2021-03-11 12:48:57,162 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:48:57,162 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]
2021-03-11 12:48:57,243 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:57,243 [main:105] - GENERATED CALL = (0+1).toByte().toString(-11621198)
2021-03-11 12:48:57,243 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:48:57,243 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:48:57,324 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:57,324 [main:105] - GENERATED CALL = (0+1).toString(-2041501297)
2021-03-11 12:48:57,324 [main:63] - replacement of str of type String is (A(1844383363, "tzyql")).y.trim()
2021-03-11 12:48:57,407 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:48:57,407 [main:66] - Compilation checking started
2021-03-11 12:48:57,625 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>((A(1545341633, "kzgmz"))?.x.countOneBits()) {a: Int -> A(-2102853564, "upkja")}
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        (A(1844383363, "tzyql")).y.trim() += y
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:48:57,627 [main:56] - replacing (sum, Int)
2021-03-11 12:48:57,627 [main:38] - replacing sum Int
2021-03-11 12:48:57,628 [main:42] - Getting value of type Int
2021-03-11 12:48:57,721 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:57,722 [main:46] - GENERATED VALUE OF TYPE Int = -1897895244
2021-03-11 12:48:57,722 [main:49] - GENERATED IS CALL =false
2021-03-11 12:48:57,891 [main:55] - randomType = Collection<UInt>
2021-03-11 12:48:57,892 [main:94] - GETTING Int from String
2021-03-11 12:48:57,910 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f655756]]
2021-03-11 12:48:57,910 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f655756]
2021-03-11 12:48:57,910 [main:105] - GENERATED CALL = (str).length.unaryMinus()
2021-03-11 12:48:57,910 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@216b8aa8]]
2021-03-11 12:48:57,910 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@216b8aa8]
2021-03-11 12:48:58,009 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:58,010 [main:105] - GENERATED CALL = (str).length.ushr(423425893)
2021-03-11 12:48:58,010 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e53c7a]]
2021-03-11 12:48:58,010 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:48:58,091 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:48:58,091 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e53c7a]
2021-03-11 12:48:58,170 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:58,171 [main:105] - GENERATED CALL = (str).compareTo("eazrt").shr(-1012405490)
2021-03-11 12:48:58,171 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6736791a]]
2021-03-11 12:48:58,171 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:48:58,251 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:48:58,252 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6736791a]
2021-03-11 12:48:58,252 [main:105] - GENERATED CALL = (str).compareTo("lgrhk").inv()
2021-03-11 12:48:58,252 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@241f9269]]
2021-03-11 12:48:58,252 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:48:58,332 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:48:58,333 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@241f9269]
2021-03-11 12:48:58,414 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:48:58,414 [main:105] - GENERATED CALL = (str).compareTo("quknz").or(1253102522)
2021-03-11 12:48:58,415 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2814a4a]]
2021-03-11 12:48:58,415 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:48:58,495 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:48:58,496 [main:105] - GENERATED CALL = (str).compareTo("wtcov").sign
2021-03-11 12:48:58,496 [main:101] - Case = [public val kotlin.CharSequence.lastIndex: kotlin.Int defined in kotlin.text[DeserializedPropertyDescriptor@6df3c7bf]]
2021-03-11 12:48:58,496 [main:105] - GENERATED CALL = (str).lastIndex
2021-03-11 12:48:58,496 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6561e48]]
2021-03-11 12:48:58,496 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6561e48]
2021-03-11 12:48:58,576 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:48:58,577 [main:105] - GENERATED CALL = (str).length.compareTo(24)
2021-03-11 12:48:58,577 [main:101] - Case = [public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b3faa6c]]
2021-03-11 12:48:58,577 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b3faa6c]
2021-03-11 12:48:58,656 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:48:58,657 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:48:58,657 [main:105] - GENERATED CALL = (str).indexOfLast({a: Char -> true})
2021-03-11 12:48:58,657 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cca13b8]]
2021-03-11 12:48:58,657 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cca13b8]
2021-03-11 12:48:58,761 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-11 12:48:58,761 [main:302] - generating value of type = Int true depth = 1
2021-03-11 12:48:58,762 [main:105] - GENERATED CALL = (str).sumOf({a: Char -> 883586437})
2021-03-11 12:48:58,762 [main:63] - replacement of sum of type Int is (str).length.ushr(423425893)
2021-03-11 12:48:58,857 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:48:58,857 [main:66] - Compilation checking started
2021-03-11 12:48:59,078 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>((A(1545341633, "kzgmz"))?.x.countOneBits()) {a: Int -> A(-2102853564, "upkja")}
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (str).length.ushr(423425893) += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += y
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:48:59,079 [main:56] - replacing (Array<A>((A(1545341633, "kzgmz"))?.x.countOneBits()) {a: Int -> A(-2102853564, "upkja")}, Array<A>)
2021-03-11 12:48:59,080 [main:38] - replacing Array<A>((A(1545341633, "kzgmz"))?.x.countOneBits()) {a: Int -> A(-2102853564, "upkja")} Array<A>
2021-03-11 12:48:59,080 [main:42] - Getting value of type Array<A>
2021-03-11 12:48:59,164 [main:302] - generating value of type = Array<A> false depth = 0
2021-03-11 12:48:59,250 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<A> = TODO()
2021-03-11 12:48:59,251 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<A> = TODO()
2021-03-11 12:48:59,335 [main:95] - GENERATED = emptyArray<A>()
2021-03-11 12:48:59,335 [main:46] - GENERATED VALUE OF TYPE Array<A> = emptyArray<A>()
2021-03-11 12:48:59,335 [main:49] - GENERATED IS CALL =true
2021-03-11 12:48:59,420 [main:55] - randomType = UShort
2021-03-11 12:48:59,500 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 12:48:59,530 [main:94] - GETTING Array<A> from Boolean
2021-03-11 12:48:59,540 [main:94] - GETTING Array<A> from Int
2021-03-11 12:48:59,573 [main:94] - GETTING Array<A> from String
2021-03-11 12:48:59,592 [main:94] - GETTING Array<A> from Int
2021-03-11 12:48:59,593 [main:94] - GETTING Array<A> from Int
2021-03-11 12:48:59,594 [main:94] - GETTING Array<A> from String
2021-03-11 12:48:59,595 [main:94] - GETTING Array<A> from Int
2021-03-11 12:48:59,596 [main:94] - GETTING Array<A> from Int
2021-03-11 12:48:59,596 [main:63] - replacement of Array<A>((A(1545341633, "kzgmz"))?.x.countOneBits()) {a: Int -> A(-2102853564, "upkja")} of type Array<A> is emptyArray<A>()
2021-03-11 12:48:59,691 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:48:59,691 [main:66] - Compilation checking started
2021-03-11 12:48:59,995 [main:53] - Result = true
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += y
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:48:59,996 [main:56] - replacing (y, String)
2021-03-11 12:48:59,997 [main:38] - replacing y String
2021-03-11 12:48:59,997 [main:42] - Getting value of type String
2021-03-11 12:49:00,075 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:49:00,076 [main:46] - GENERATED VALUE OF TYPE String = "gtrzr"
2021-03-11 12:49:00,076 [main:49] - GENERATED IS CALL =false
2021-03-11 12:49:00,157 [main:55] - randomType = UInt
2021-03-11 12:49:00,235 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:49:00,277 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@425ddf5f]
2021-03-11 12:49:00,278 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34e56fb7]
2021-03-11 12:49:00,356 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:00,356 [main:66] - Generated call from random type = (2124118860.toUInt()).toUShort().toString(678293244)
2021-03-11 12:49:00,357 [main:94] - GETTING String from String
2021-03-11 12:49:00,374 [main:101] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ff4584d]]
2021-03-11 12:49:00,375 [main:137] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ff4584d]
2021-03-11 12:49:00,452 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:00,453 [main:105] - GENERATED CALL = (str).take(-668614894)
2021-03-11 12:49:00,453 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22fce58d]]
2021-03-11 12:49:00,453 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22fce58d]
2021-03-11 12:49:00,453 [main:105] - GENERATED CALL = (str).toLowerCase()
2021-03-11 12:49:00,453 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:49:00,453 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:49:00,531 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:00,531 [main:105] - GENERATED CALL = (str).length.toString(-857840627)
2021-03-11 12:49:00,532 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69aea4dc]]
2021-03-11 12:49:00,532 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69aea4dc]
2021-03-11 12:49:00,610 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:49:00,610 [main:105] - GENERATED CALL = (str).concat("xisiq")
2021-03-11 12:49:00,610 [main:101] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3948e47d]]
2021-03-11 12:49:00,610 [main:137] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3948e47d]
2021-03-11 12:49:00,689 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:49:00,689 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:49:00,690 [main:105] - GENERATED CALL = (str).dropLastWhile({a: Char -> false})
2021-03-11 12:49:00,690 [main:101] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35a2566b]]
2021-03-11 12:49:00,690 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35a2566b]
2021-03-11 12:49:00,792 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:49:00,871 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:49:00,949 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:49:00,950 [main:105] - GENERATED CALL = (str).replaceAfterLast('置', "sugzo", "bbrpv")
2021-03-11 12:49:00,950 [main:101] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@863c31e]]
2021-03-11 12:49:00,950 [main:137] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@863c31e]
2021-03-11 12:49:01,028 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:49:01,028 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:49:01,029 [main:105] - GENERATED CALL = (str).filterNot({a: Char -> true})
2021-03-11 12:49:01,029 [main:101] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@268eb547]]
2021-03-11 12:49:01,029 [main:137] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@268eb547]
2021-03-11 12:49:01,107 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:49:01,108 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:49:01,108 [main:105] - GENERATED CALL = (str).filter({a: Char -> true})
2021-03-11 12:49:01,108 [main:101] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2976238d]]
2021-03-11 12:49:01,108 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2976238d]
2021-03-11 12:49:01,187 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:49:01,187 [main:105] - GENERATED CALL = (str).replaceIndent("sjion")
2021-03-11 12:49:01,187 [main:101] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@161cf1b0]]
2021-03-11 12:49:01,187 [main:137] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@161cf1b0]
2021-03-11 12:49:01,264 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:49:01,342 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:49:01,419 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:01,420 [main:105] - GENERATED CALL = (str).replace('?', 'ꮮ', true)
2021-03-11 12:49:01,420 [main:63] - replacement of y of type String is (str).concat("xisiq")
2021-03-11 12:49:01,517 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:49:01,517 [main:66] - Compilation checking started
2021-03-11 12:49:01,811 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (str).concat("xisiq")
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:49:01,813 [main:56] - replacing (y, String)
2021-03-11 12:49:01,813 [main:38] - replacing y String
2021-03-11 12:49:01,813 [main:42] - Getting value of type String
2021-03-11 12:49:01,900 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:49:01,901 [main:46] - GENERATED VALUE OF TYPE String = "bweml"
2021-03-11 12:49:01,901 [main:49] - GENERATED IS CALL =false
2021-03-11 12:49:01,994 [main:55] - randomType = Char
2021-03-11 12:49:02,083 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:49:02,119 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]
2021-03-11 12:49:02,206 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:49:02,206 [main:66] - Generated call from random type = ('⋇').plus("phbcm")
2021-03-11 12:49:02,208 [main:94] - GETTING String from Int
2021-03-11 12:49:02,267 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:49:02,267 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:49:02,267 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:49:02,350 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:02,351 [main:105] - GENERATED CALL = (0+1).toInt().toString(1908949072)
2021-03-11 12:49:02,351 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:49:02,351 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:49:02,434 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:02,434 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:49:02,532 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:02,533 [main:105] - GENERATED CALL = (0+1).compareTo(-1920318469).toString(1561874374)
2021-03-11 12:49:02,533 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]]
2021-03-11 12:49:02,533 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:02,533 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]
2021-03-11 12:49:02,533 [main:105] - GENERATED CALL = (0+1).toChar().titlecase()
2021-03-11 12:49:02,533 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]]
2021-03-11 12:49:02,533 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:02,533 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]
2021-03-11 12:49:02,534 [main:105] - GENERATED CALL = (0+1).toChar().uppercase()
2021-03-11 12:49:02,534 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:49:02,534 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:49:02,614 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:49:02,614 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:49:02,693 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:02,694 [main:105] - GENERATED CALL = (0+1).div(7858689891277665704).toString(99171456)
2021-03-11 12:49:02,694 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:49:02,694 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:49:02,694 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:49:02,773 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:02,774 [main:105] - GENERATED CALL = (0+1).toLong().toString(1957540983)
2021-03-11 12:49:02,774 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]]
2021-03-11 12:49:02,774 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:02,774 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]
2021-03-11 12:49:02,774 [main:105] - GENERATED CALL = (0+1).toChar().lowercase()
2021-03-11 12:49:02,774 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:49:02,774 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:49:02,854 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:02,855 [main:105] - GENERATED CALL = (0+1).toString(1415923383)
2021-03-11 12:49:02,855 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]]
2021-03-11 12:49:02,855 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:02,855 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]
2021-03-11 12:49:02,934 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:49:02,935 [main:105] - GENERATED CALL = (0+1).toChar().plus("dhyjw")
2021-03-11 12:49:02,935 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]]
2021-03-11 12:49:02,935 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:49:02,935 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]
2021-03-11 12:49:03,018 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:03,018 [main:105] - GENERATED CALL = (0+1).toShort().toString(820280928)
2021-03-11 12:49:03,018 [main:63] - replacement of y of type String is (0+1).toChar().titlecase()
2021-03-11 12:49:03,098 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:49:03,098 [main:66] - Compilation checking started
2021-03-11 12:49:03,388 [main:53] - Result = true
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:49:03,390 [main:56] - replacing ((0+1).toInt().coerceAtMost(-1152341734)+4, Int)
2021-03-11 12:49:03,390 [main:38] - replacing (0+1).toInt().coerceAtMost(-1152341734)+4 Int
2021-03-11 12:49:03,390 [main:42] - Getting value of type Int
2021-03-11 12:49:03,493 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:03,494 [main:46] - GENERATED VALUE OF TYPE Int = 122740236
2021-03-11 12:49:03,494 [main:49] - GENERATED IS CALL =false
2021-03-11 12:49:03,848 [main:55] - randomType = Function1<A, Function1<UByte, Char>>
2021-03-11 12:49:03,848 [main:94] - GETTING Int from Int
2021-03-11 12:49:03,902 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@ccd075b]]
2021-03-11 12:49:03,902 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:49:03,903 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@ccd075b]
2021-03-11 12:49:03,992 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:49:03,993 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toByte().rem(30)
2021-03-11 12:49:03,993 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e], public final val last: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@1e6a92d2]]
2021-03-11 12:49:03,993 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e]
2021-03-11 12:49:04,083 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:49:04,084 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).rangeTo(88).last
2021-03-11 12:49:04,084 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@390b15c0]]
2021-03-11 12:49:04,084 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:04,084 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@390b15c0]
2021-03-11 12:49:04,173 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:49:04,174 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toChar().minus('匸')
2021-03-11 12:49:04,174 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@19388119]]
2021-03-11 12:49:04,174 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:49:04,174 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@19388119]
2021-03-11 12:49:04,174 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toLong().toInt()
2021-03-11 12:49:04,174 [main:101] - Case = [public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@39041b0c], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@72cbb805]]
2021-03-11 12:49:04,174 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@39041b0c]
2021-03-11 12:49:04,255 [main:302] - generating value of type = Float true depth = 0
2021-03-11 12:49:04,256 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@72cbb805]
2021-03-11 12:49:04,256 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).div(0.14280552f).toRawBits()
2021-03-11 12:49:04,256 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d4a80]]
2021-03-11 12:49:04,256 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:49:04,256 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d4a80]
2021-03-11 12:49:04,256 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toInt().unaryPlus()
2021-03-11 12:49:04,257 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3b8291ff]]
2021-03-11 12:49:04,257 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:49:04,358 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:04,359 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3b8291ff]
2021-03-11 12:49:04,459 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:04,460 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).compareTo(1165730364).coerceAtMost(-341736628)
2021-03-11 12:49:04,460 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@72cbb805]]
2021-03-11 12:49:04,460 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169]
2021-03-11 12:49:04,460 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@72cbb805]
2021-03-11 12:49:04,460 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toFloat().toRawBits()
2021-03-11 12:49:04,461 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36845587]]
2021-03-11 12:49:04,461 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:49:04,461 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36845587]
2021-03-11 12:49:04,550 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:04,551 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toInt().xor(797177756)
2021-03-11 12:49:04,551 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1f1092b7]]
2021-03-11 12:49:04,551 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:49:04,551 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1f1092b7]
2021-03-11 12:49:04,551 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toByte().toInt()
2021-03-11 12:49:04,551 [main:63] - replacement of (0+1).toInt().coerceAtMost(-1152341734)+4 of type Int is (A(-1427813506, "vtkln").x).toInt().xor(797177756)
2021-03-11 12:49:04,634 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:49:04,635 [main:56] - replacing (str, String)
2021-03-11 12:49:04,636 [main:38] - replacing str String
2021-03-11 12:49:04,636 [main:42] - Getting value of type String
2021-03-11 12:49:04,718 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:49:04,718 [main:46] - GENERATED VALUE OF TYPE String = "ewfsj"
2021-03-11 12:49:04,718 [main:49] - GENERATED IS CALL =false
2021-03-11 12:49:04,719 [main:55] - randomType = A
2021-03-11 12:49:04,800 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:49:04,800 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:49:04,880 [main:194] - Type params = []
2021-03-11 12:49:04,964 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:49:04,964 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:49:04,975 [main:137] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ff4584d]
2021-03-11 12:49:05,059 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:05,060 [main:66] - Generated call from random type = (A(-919678397, "ccnef")).y.take(-188394699)
2021-03-11 12:49:05,061 [main:94] - GETTING String from Int
2021-03-11 12:49:05,118 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:49:05,118 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:49:05,217 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:05,217 [main:105] - GENERATED CALL = (sum).toString(1114236214)
2021-03-11 12:49:05,222 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]]
2021-03-11 12:49:05,222 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:05,222 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]
2021-03-11 12:49:05,222 [main:105] - GENERATED CALL = (sum).toChar().lowercase()
2021-03-11 12:49:05,222 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:49:05,222 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:49:05,316 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:05,316 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:49:05,397 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:05,397 [main:105] - GENERATED CALL = (sum).compareTo(1979910550).toString(-484226010)
2021-03-11 12:49:05,398 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:49:05,398 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:49:05,398 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:49:05,476 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:05,477 [main:105] - GENERATED CALL = (sum).toInt().toString(1428683536)
2021-03-11 12:49:05,477 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:49:05,477 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:49:05,557 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:49:05,557 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:49:05,638 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:05,639 [main:105] - GENERATED CALL = (sum).div(2133935812403894637).toString(1463787440)
2021-03-11 12:49:05,639 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]]
2021-03-11 12:49:05,639 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:05,639 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]
2021-03-11 12:49:05,725 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:49:05,726 [main:105] - GENERATED CALL = (sum).toChar().plus("djqen")
2021-03-11 12:49:05,726 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:49:05,726 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:49:05,726 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:49:05,810 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:05,811 [main:105] - GENERATED CALL = (sum).toLong().toString(387539904)
2021-03-11 12:49:05,811 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]]
2021-03-11 12:49:05,811 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:05,811 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]
2021-03-11 12:49:05,811 [main:105] - GENERATED CALL = (sum).toChar().titlecase()
2021-03-11 12:49:05,812 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]]
2021-03-11 12:49:05,812 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:49:05,812 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]
2021-03-11 12:49:05,897 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:05,898 [main:105] - GENERATED CALL = (sum).toByte().toString(599290443)
2021-03-11 12:49:05,898 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]]
2021-03-11 12:49:05,898 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:05,898 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]
2021-03-11 12:49:05,899 [main:105] - GENERATED CALL = (sum).toChar().uppercase()
2021-03-11 12:49:05,899 [main:63] - replacement of str of type String is "ewfsj"
2021-03-11 12:49:06,003 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 12:49:06,004 [main:66] - Compilation checking started
2021-03-11 12:49:06,251 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        "ewfsj" += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:49:06,253 [main:56] - replacing (sum, Int)
2021-03-11 12:49:06,253 [main:38] - replacing sum Int
2021-03-11 12:49:06,253 [main:42] - Getting value of type Int
2021-03-11 12:49:06,338 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:06,339 [main:46] - GENERATED VALUE OF TYPE Int = 1056874209
2021-03-11 12:49:06,339 [main:49] - GENERATED IS CALL =false
2021-03-11 12:49:06,429 [main:55] - randomType = A?
2021-03-11 12:49:06,509 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:49:06,510 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:49:06,589 [main:194] - Type params = []
2021-03-11 12:49:06,669 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:49:06,669 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:49:06,682 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f664709]
2021-03-11 12:49:06,760 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:06,839 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:06,840 [main:66] - Generated call from random type = (A(-611375841, "ggzjr"))?.x.coerceIn(1700802403, 1425717707)
2021-03-11 12:49:06,841 [main:94] - GETTING Int from String
2021-03-11 12:49:06,864 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415]]
2021-03-11 12:49:06,864 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).length
2021-03-11 12:49:06,864 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@d0efe34]]
2021-03-11 12:49:06,864 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:49:06,972 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:49:06,973 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@d0efe34]
2021-03-11 12:49:07,067 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:07,067 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).compareTo("okypb").rotateRight(-7088790)
2021-03-11 12:49:07,067 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@216b8aa8]]
2021-03-11 12:49:07,067 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:49:07,154 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:49:07,155 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@216b8aa8]
2021-03-11 12:49:07,242 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:07,243 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).compareTo("rbbmt").ushr(1557943537)
2021-03-11 12:49:07,243 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6736791a]]
2021-03-11 12:49:07,243 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6736791a]
2021-03-11 12:49:07,243 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).length.inv()
2021-03-11 12:49:07,243 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36bf0f77]]
2021-03-11 12:49:07,243 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36bf0f77]
2021-03-11 12:49:07,244 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).length.takeHighestOneBit()
2021-03-11 12:49:07,244 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d4a80]]
2021-03-11 12:49:07,244 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:49:07,327 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:49:07,328 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d4a80]
2021-03-11 12:49:07,328 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).compareTo("jjkpf").unaryPlus()
2021-03-11 12:49:07,328 [main:101] - Case = [public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f1f36c0]]
2021-03-11 12:49:07,328 [main:137] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f1f36c0]
2021-03-11 12:49:07,414 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:49:07,499 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:07,584 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:07,585 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).lastIndexOf('쩈', 898024091, true)
2021-03-11 12:49:07,585 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ec35323]]
2021-03-11 12:49:07,585 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ec35323]
2021-03-11 12:49:07,670 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:07,671 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).length.rotateLeft(444494612)
2021-03-11 12:49:07,671 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e53c7a]]
2021-03-11 12:49:07,671 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e53c7a]
2021-03-11 12:49:07,775 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:07,775 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).length.shr(735373701)
2021-03-11 12:49:07,775 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76034fc0]]
2021-03-11 12:49:07,775 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76034fc0]
2021-03-11 12:49:07,776 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).length.countTrailingZeroBits()
2021-03-11 12:49:07,776 [main:63] - replacement of sum of type Int is 1056874209
2021-03-11 12:49:07,872 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 12:49:07,874 [main:56] - replacing (sum, Int)
2021-03-11 12:49:07,874 [main:38] - replacing sum Int
2021-03-11 12:49:07,874 [main:42] - Getting value of type Int
2021-03-11 12:49:07,959 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:07,960 [main:46] - GENERATED VALUE OF TYPE Int = -611920180
2021-03-11 12:49:07,960 [main:49] - GENERATED IS CALL =false
2021-03-11 12:49:08,139 [main:55] - randomType = Array<ULong>
2021-03-11 12:49:08,223 [main:302] - generating value of type = Array<ULong> false depth = 0
2021-03-11 12:49:08,318 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->ULong): Array<ULong> = TODO()
2021-03-11 12:49:08,319 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->ULong): Array<ULong> = TODO()
2021-03-11 12:49:08,594 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:49:08,595 [main:302] - generating value of type = Function1<Int, ULong> false depth = 3
2021-03-11 12:49:08,595 [main:302] - generating value of type = ULong true depth = 4
2021-03-11 12:49:08,595 [main:95] - GENERATED = Array<ULong>(425056048, {a: Int -> 2334964432291170755.toULong()})
2021-03-11 12:49:08,611 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.ULong defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5156074a]
2021-03-11 12:49:08,700 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:08,701 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.ULong.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3e0cb373]
2021-03-11 12:49:08,701 [main:66] - Generated call from random type = (Array<ULong>(425056048, {a: Int -> 2334964432291170755.toULong()})).get(-738218412).countOneBits()
2021-03-11 12:49:08,701 [main:94] - GETTING Int from Int
2021-03-11 12:49:08,749 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@61aa5dbf]]
2021-03-11 12:49:08,749 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:49:08,749 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@61aa5dbf]
2021-03-11 12:49:08,833 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:49:08,833 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toShort().rem(75)
2021-03-11 12:49:08,833 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d4a80]]
2021-03-11 12:49:08,833 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:49:08,833 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d4a80]
2021-03-11 12:49:08,834 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toInt().unaryPlus()
2021-03-11 12:49:08,834 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e53c7a]]
2021-03-11 12:49:08,834 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:49:08,914 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:08,914 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e53c7a]
2021-03-11 12:49:08,994 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:08,995 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).compareTo(2041476477).shr(1894388112)
2021-03-11 12:49:08,995 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@5e10d1c0]]
2021-03-11 12:49:08,995 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:49:08,995 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@5e10d1c0]
2021-03-11 12:49:09,075 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:49:09,075 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toByte().minus(44)
2021-03-11 12:49:09,075 [main:101] - Case = [public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e53c7a]]
2021-03-11 12:49:09,076 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e53c7a]
2021-03-11 12:49:09,155 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:09,156 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).shr(1328266763)
2021-03-11 12:49:09,156 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e], public final val first: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@271f9a43]]
2021-03-11 12:49:09,156 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e]
2021-03-11 12:49:09,234 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:49:09,235 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).rangeTo(50).first
2021-03-11 12:49:09,235 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@216b8aa8]]
2021-03-11 12:49:09,235 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:49:09,235 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@216b8aa8]
2021-03-11 12:49:09,314 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:09,315 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toInt().ushr(1095007909)
2021-03-11 12:49:09,315 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e], public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@1ca46bf]]
2021-03-11 12:49:09,315 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e]
2021-03-11 12:49:09,414 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:49:09,415 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).rangeTo(29).endInclusive
2021-03-11 12:49:09,415 [main:101] - Case = [public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f664709]]
2021-03-11 12:49:09,415 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f664709]
2021-03-11 12:49:09,506 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:09,593 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:09,594 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).coerceIn(-97308526, 318947362)
2021-03-11 12:49:09,594 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4ba73279]]
2021-03-11 12:49:09,594 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:49:09,594 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4ba73279]
2021-03-11 12:49:09,594 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toShort().unaryMinus()
2021-03-11 12:49:09,594 [main:63] - replacement of sum of type Int is (A(-1427813506, "vtkln").x).toInt().ushr(1095007909)
2021-03-11 12:49:09,673 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:49:09,673 [main:66] - Compilation checking started
2021-03-11 12:49:09,938 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (A(-1427813506, "vtkln").x).toInt().ushr(1095007909) += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:49:09,939 [main:56] - replacing (str, String)
2021-03-11 12:49:09,939 [main:38] - replacing str String
2021-03-11 12:49:09,940 [main:42] - Getting value of type String
2021-03-11 12:49:10,020 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:49:10,020 [main:46] - GENERATED VALUE OF TYPE String = "fitgm"
2021-03-11 12:49:10,020 [main:49] - GENERATED IS CALL =false
2021-03-11 12:49:10,102 [main:55] - randomType = A?
2021-03-11 12:49:10,181 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:49:10,182 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:49:10,262 [main:194] - Type params = []
2021-03-11 12:49:10,342 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:49:10,342 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:49:10,350 [main:137] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a3ba1fe]
2021-03-11 12:49:10,452 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:10,537 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:49:10,538 [main:66] - Generated call from random type = (A(-394975477, "jwekl"))?.y.padEnd(1916101489, '럹')
2021-03-11 12:49:10,539 [main:94] - GETTING String from Int
2021-03-11 12:49:10,574 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]]
2021-03-11 12:49:10,574 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:49:10,574 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]
2021-03-11 12:49:10,657 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:10,658 [main:105] - GENERATED CALL = (0+1).toShort().toString(-528289554)
2021-03-11 12:49:10,658 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]]
2021-03-11 12:49:10,658 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:10,658 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]
2021-03-11 12:49:10,658 [main:105] - GENERATED CALL = (0+1).toChar().lowercase()
2021-03-11 12:49:10,658 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:49:10,658 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:49:10,744 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:10,744 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:49:10,827 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:10,828 [main:105] - GENERATED CALL = (0+1).compareTo(-1419320122).toString(-1213386117)
2021-03-11 12:49:10,828 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:49:10,828 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:49:10,828 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:49:10,911 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:10,912 [main:105] - GENERATED CALL = (0+1).toLong().toString(-186266421)
2021-03-11 12:49:10,912 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:49:10,912 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:49:10,997 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:10,998 [main:105] - GENERATED CALL = (0+1).toString(31050528)
2021-03-11 12:49:10,998 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]]
2021-03-11 12:49:10,998 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:10,998 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]
2021-03-11 12:49:10,998 [main:105] - GENERATED CALL = (0+1).toChar().uppercase()
2021-03-11 12:49:10,998 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:49:10,998 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:49:10,998 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:49:11,081 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:11,081 [main:105] - GENERATED CALL = (0+1).toInt().toString(-1930380452)
2021-03-11 12:49:11,081 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]]
2021-03-11 12:49:11,081 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:11,082 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]
2021-03-11 12:49:11,082 [main:105] - GENERATED CALL = (0+1).toChar().titlecase()
2021-03-11 12:49:11,082 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]]
2021-03-11 12:49:11,082 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:49:11,082 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]
2021-03-11 12:49:11,165 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:11,166 [main:105] - GENERATED CALL = (0+1).toByte().toString(-1508172630)
2021-03-11 12:49:11,166 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:49:11,166 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:49:11,268 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:49:11,269 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:49:11,366 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:11,366 [main:105] - GENERATED CALL = (0+1).div(-273852672223585693).toString(2071754562)
2021-03-11 12:49:11,366 [main:63] - replacement of str of type String is (0+1).toChar().uppercase()
2021-03-11 12:49:11,457 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:49:11,457 [main:66] - Compilation checking started
2021-03-11 12:49:11,672 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        (0+1).toChar().uppercase() += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:49:11,674 [main:56] - replacing (str, String)
2021-03-11 12:49:11,675 [main:38] - replacing str String
2021-03-11 12:49:11,675 [main:42] - Getting value of type String
2021-03-11 12:49:11,756 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:49:11,757 [main:46] - GENERATED VALUE OF TYPE String = "fvcci"
2021-03-11 12:49:11,757 [main:49] - GENERATED IS CALL =false
2021-03-11 12:49:11,840 [main:55] - randomType = A?
2021-03-11 12:49:11,927 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:49:11,928 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:49:12,005 [main:194] - Type params = []
2021-03-11 12:49:12,086 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:49:12,086 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:49:12,098 [main:137] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cb4f9a]
2021-03-11 12:49:12,177 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:12,178 [main:66] - Generated call from random type = (A(451776439, "qwtlp"))?.y.drop(1702290498)
2021-03-11 12:49:12,179 [main:94] - GETTING String from Int
2021-03-11 12:49:12,214 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]]
2021-03-11 12:49:12,214 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:12,215 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]
2021-03-11 12:49:12,215 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toChar().uppercase()
2021-03-11 12:49:12,215 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]]
2021-03-11 12:49:12,215 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:12,215 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]
2021-03-11 12:49:12,316 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:49:12,317 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toChar().plus("cddin")
2021-03-11 12:49:12,317 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]]
2021-03-11 12:49:12,317 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:49:12,317 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]
2021-03-11 12:49:12,396 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:12,396 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toByte().toString(-1731210522)
2021-03-11 12:49:12,397 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:49:12,397 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:49:12,397 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:49:12,475 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:12,476 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toInt().toString(923402459)
2021-03-11 12:49:12,476 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:49:12,476 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:49:12,555 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:49:12,555 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:49:12,635 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:12,636 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).div(3282148412238544132).toString(1239628880)
2021-03-11 12:49:12,636 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]]
2021-03-11 12:49:12,636 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:12,636 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]
2021-03-11 12:49:12,636 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toChar().lowercase()
2021-03-11 12:49:12,636 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:49:12,636 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:49:12,717 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:12,718 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toString(2005407095)
2021-03-11 12:49:12,718 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]]
2021-03-11 12:49:12,718 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:49:12,718 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]
2021-03-11 12:49:12,799 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:12,800 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toShort().toString(1539705942)
2021-03-11 12:49:12,800 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:49:12,800 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:49:12,880 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:12,881 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:49:12,961 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:12,961 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).compareTo(-588263633).toString(-423926405)
2021-03-11 12:49:12,961 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:49:12,961 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:49:12,961 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:49:13,043 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:13,043 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toLong().toString(-1554852231)
2021-03-11 12:49:13,043 [main:63] - replacement of str of type String is (A(451776439, "qwtlp"))?.y.drop(1702290498)
2021-03-11 12:49:13,124 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:49:13,124 [main:66] - Compilation checking started
2021-03-11 12:49:13,369 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        (A(451776439, "qwtlp"))?.y.drop(1702290498) += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:49:13,372 [main:56] - replacing (str, String)
2021-03-11 12:49:13,372 [main:38] - replacing str String
2021-03-11 12:49:13,372 [main:42] - Getting value of type String
2021-03-11 12:49:13,457 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:49:13,457 [main:46] - GENERATED VALUE OF TYPE String = "xxvxp"
2021-03-11 12:49:13,457 [main:49] - GENERATED IS CALL =false
2021-03-11 12:49:13,549 [main:55] - randomType = ULong
2021-03-11 12:49:13,629 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:49:13,662 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@996a1e1]
2021-03-11 12:49:13,662 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]
2021-03-11 12:49:13,745 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:13,746 [main:66] - Generated call from random type = (33798446801753498.toULong()).toShort().toString(906301968)
2021-03-11 12:49:13,747 [main:94] - GETTING String from Int
2021-03-11 12:49:13,783 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]]
2021-03-11 12:49:13,783 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:13,784 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]
2021-03-11 12:49:13,784 [main:105] - GENERATED CALL = (0+1+2).toChar().titlecase()
2021-03-11 12:49:13,784 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:49:13,784 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:49:13,878 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:13,879 [main:105] - GENERATED CALL = (0+1+2).toString(-1985405054)
2021-03-11 12:49:13,879 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]]
2021-03-11 12:49:13,879 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:13,879 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]
2021-03-11 12:49:13,879 [main:105] - GENERATED CALL = (0+1+2).toChar().lowercase()
2021-03-11 12:49:13,879 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:49:13,879 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:49:13,959 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:49:13,960 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:49:14,041 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:14,041 [main:105] - GENERATED CALL = (0+1+2).div(-8322537091048803786).toString(-145717199)
2021-03-11 12:49:14,041 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:49:14,041 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:49:14,042 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:49:14,122 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:14,122 [main:105] - GENERATED CALL = (0+1+2).toLong().toString(-1868196100)
2021-03-11 12:49:14,122 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]]
2021-03-11 12:49:14,122 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:14,123 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]
2021-03-11 12:49:14,123 [main:105] - GENERATED CALL = (0+1+2).toChar().uppercase()
2021-03-11 12:49:14,123 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:49:14,123 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:49:14,202 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:14,202 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:49:14,280 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:14,280 [main:105] - GENERATED CALL = (0+1+2).compareTo(1518615279).toString(568306761)
2021-03-11 12:49:14,280 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]]
2021-03-11 12:49:14,280 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:14,281 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]
2021-03-11 12:49:14,400 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:49:14,400 [main:105] - GENERATED CALL = (0+1+2).toChar().plus("ydwsy")
2021-03-11 12:49:14,401 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]]
2021-03-11 12:49:14,401 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:49:14,401 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]
2021-03-11 12:49:14,498 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:14,498 [main:105] - GENERATED CALL = (0+1+2).toShort().toString(-684429060)
2021-03-11 12:49:14,499 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:49:14,499 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:49:14,499 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:49:14,586 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:14,586 [main:105] - GENERATED CALL = (0+1+2).toInt().toString(1482321156)
2021-03-11 12:49:14,586 [main:63] - replacement of str of type String is (0+1+2).toChar().uppercase()
2021-03-11 12:49:14,678 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:49:14,678 [main:66] - Compilation checking started
2021-03-11 12:49:14,890 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        (0+1+2).toChar().uppercase() += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:49:14,892 [main:56] - replacing (0+1, Int)
2021-03-11 12:49:14,892 [main:38] - replacing 0+1 Int
2021-03-11 12:49:14,892 [main:42] - Getting value of type Int
2021-03-11 12:49:14,983 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:14,983 [main:46] - GENERATED VALUE OF TYPE Int = -677949379
2021-03-11 12:49:14,984 [main:49] - GENERATED IS CALL =false
2021-03-11 12:49:15,148 [main:55] - randomType = Set<UByte>
2021-03-11 12:49:15,149 [main:94] - GETTING Int from Int
2021-03-11 12:49:15,180 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@6972dc2f]]
2021-03-11 12:49:15,180 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:49:15,258 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:49:15,259 [main:105] - GENERATED CALL = (0+1).div(-3854275567904116297).sign
2021-03-11 12:49:15,259 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2d4ffd58]]
2021-03-11 12:49:15,259 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:49:15,259 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2d4ffd58]
2021-03-11 12:49:15,259 [main:105] - GENERATED CALL = (0+1).toLong().countTrailingZeroBits()
2021-03-11 12:49:15,259 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3ff9eaf8]]
2021-03-11 12:49:15,259 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:49:15,337 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:15,338 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3ff9eaf8]
2021-03-11 12:49:15,416 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:15,416 [main:105] - GENERATED CALL = (0+1).compareTo(-266160391).coerceAtLeast(15971201)
2021-03-11 12:49:15,416 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e], public final val first: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@271f9a43]]
2021-03-11 12:49:15,417 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e]
2021-03-11 12:49:15,519 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:49:15,520 [main:105] - GENERATED CALL = (0+1).rangeTo(-4).first
2021-03-11 12:49:15,520 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4c4a428d]]
2021-03-11 12:49:15,520 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169]
2021-03-11 12:49:15,520 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4c4a428d]
2021-03-11 12:49:15,520 [main:105] - GENERATED CALL = (0+1).toFloat().toBits()
2021-03-11 12:49:15,520 [main:101] - Case = [public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6736791a]]
2021-03-11 12:49:15,520 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6736791a]
2021-03-11 12:49:15,521 [main:105] - GENERATED CALL = (0+1).inv()
2021-03-11 12:49:15,521 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3ae3dfd2]]
2021-03-11 12:49:15,521 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:49:15,521 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3ae3dfd2]
2021-03-11 12:49:15,599 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:49:15,600 [main:105] - GENERATED CALL = (0+1).toByte().times(-74)
2021-03-11 12:49:15,600 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2814a4a]]
2021-03-11 12:49:15,600 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:49:15,679 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:15,680 [main:105] - GENERATED CALL = (0+1).compareTo(1213442437).sign
2021-03-11 12:49:15,680 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1baa65c8]]
2021-03-11 12:49:15,680 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:49:15,680 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1baa65c8]
2021-03-11 12:49:15,680 [main:105] - GENERATED CALL = (0+1).toShort().unaryPlus()
2021-03-11 12:49:15,680 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36845587]]
2021-03-11 12:49:15,680 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:49:15,759 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:15,760 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36845587]
2021-03-11 12:49:15,845 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:15,845 [main:105] - GENERATED CALL = (0+1).compareTo(-1875024987).xor(-66561691)
2021-03-11 12:49:15,845 [main:63] - replacement of 0+1 of type Int is (0+1).toByte().times(-74)
2021-03-11 12:49:15,928 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:49:15,930 [main:56] - replacing ("01234", String)
2021-03-11 12:49:15,930 [main:38] - replacing "01234" String
2021-03-11 12:49:15,930 [main:42] - Getting value of type String
2021-03-11 12:49:16,013 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:49:16,013 [main:46] - GENERATED VALUE OF TYPE String = "kyqzn"
2021-03-11 12:49:16,013 [main:49] - GENERATED IS CALL =false
2021-03-11 12:49:16,099 [main:55] - randomType = A?
2021-03-11 12:49:16,182 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:49:16,182 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:49:16,263 [main:194] - Type params = []
2021-03-11 12:49:16,341 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:49:16,342 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:49:16,354 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:49:16,434 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:16,434 [main:66] - Generated call from random type = (A(1259847034, "uaeth"))?.x.toString(-1150687311)
2021-03-11 12:49:16,435 [main:94] - GETTING String from Int
2021-03-11 12:49:16,475 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:49:16,475 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:49:16,475 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:49:16,578 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:16,579 [main:105] - GENERATED CALL = (0+1).toLong().toString(249041562)
2021-03-11 12:49:16,579 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:49:16,579 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:49:16,664 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:16,671 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:49:16,753 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:16,753 [main:105] - GENERATED CALL = (0+1).compareTo(148744158).toString(170370326)
2021-03-11 12:49:16,753 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:49:16,753 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:49:16,753 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:49:16,834 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:16,835 [main:105] - GENERATED CALL = (0+1).toInt().toString(-899025023)
2021-03-11 12:49:16,835 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]]
2021-03-11 12:49:16,835 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:16,835 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]
2021-03-11 12:49:16,835 [main:105] - GENERATED CALL = (0+1).toChar().uppercase()
2021-03-11 12:49:16,835 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]]
2021-03-11 12:49:16,835 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:16,836 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]
2021-03-11 12:49:16,916 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:49:16,917 [main:105] - GENERATED CALL = (0+1).toChar().plus("szdxq")
2021-03-11 12:49:16,917 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:49:16,917 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:49:16,995 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:16,996 [main:105] - GENERATED CALL = (0+1).toString(615888199)
2021-03-11 12:49:16,996 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]]
2021-03-11 12:49:16,996 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:49:16,996 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]
2021-03-11 12:49:17,075 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:17,075 [main:105] - GENERATED CALL = (0+1).toByte().toString(-1703543860)
2021-03-11 12:49:17,076 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]]
2021-03-11 12:49:17,076 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:17,076 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]
2021-03-11 12:49:17,076 [main:105] - GENERATED CALL = (0+1).toChar().lowercase()
2021-03-11 12:49:17,076 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]]
2021-03-11 12:49:17,076 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:49:17,076 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]
2021-03-11 12:49:17,158 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:17,158 [main:105] - GENERATED CALL = (0+1).toShort().toString(840894789)
2021-03-11 12:49:17,158 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:49:17,158 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:49:17,239 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:49:17,239 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:49:17,319 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:17,319 [main:105] - GENERATED CALL = (0+1).div(-5189696021564156313).toString(-800337820)
2021-03-11 12:49:17,319 [main:63] - replacement of "01234" of type String is (0+1).toLong().toString(249041562)
2021-03-11 12:49:17,398 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:49:17,399 [main:56] - replacing (str, String)
2021-03-11 12:49:17,400 [main:38] - replacing str String
2021-03-11 12:49:17,400 [main:42] - Getting value of type String
2021-03-11 12:49:17,506 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:49:17,506 [main:46] - GENERATED VALUE OF TYPE String = "yowvz"
2021-03-11 12:49:17,506 [main:49] - GENERATED IS CALL =false
2021-03-11 12:49:17,620 [main:55] - randomType = HashSet<A>
2021-03-11 12:49:17,710 [main:302] - generating value of type = HashSet<A> false depth = 0
2021-03-11 12:49:17,795 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): HashSet<A> = TODO()
2021-03-11 12:49:17,796 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): HashSet<A> = TODO()
2021-03-11 12:49:18,039 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:49:18,039 [main:302] - generating value of type = Float true depth = 3
2021-03-11 12:49:18,040 [main:95] - GENERATED = LinkedHashSet<A>(1259795185, 0.22896266f)
2021-03-11 12:49:18,170 [main:137] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@42b56b77]
2021-03-11 12:49:18,170 [main:137] - GENERATING call of type public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3def229f]
2021-03-11 12:49:18,249 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:49:18,332 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:49:18,333 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:49:18,528 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:49:18,528 [main:95] - GENERATED = StringBuilder(1110000363)
2021-03-11 12:49:18,618 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:49:18,711 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:49:18,798 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:49:18,799 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:49:18,966 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:49:18,966 [main:95] - GENERATED = StringBuilder(1080709647)
2021-03-11 12:49:19,046 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:19,125 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:49:19,208 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 12:49:19,208 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 12:49:19,289 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:49:19,290 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:49:19,499 [main:302] - generating value of type = CharSequence false depth = 4
2021-03-11 12:49:19,504 [main:95] - GENERATED = StringBuilder("ujtjr")
2021-03-11 12:49:19,505 [main:66] - Generated call from random type = (LinkedHashSet<A>(1259795185, 0.22896266f)).toArray().joinToString(StringBuilder(1110000363), "ktnfr", StringBuilder(1080709647), 1772637593, StringBuilder(), {a: T -> StringBuilder("ujtjr")})
2021-03-11 12:49:19,506 [main:94] - GETTING String from Boolean
2021-03-11 12:49:19,521 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:49:19,521 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:49:19,608 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:19,609 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:49:19,703 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:19,704 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(true).toString(1689608019)
2021-03-11 12:49:19,704 [main:63] - replacement of str of type String is "yowvz"
2021-03-11 12:49:19,790 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 12:49:19,791 [main:66] - Compilation checking started
2021-03-11 12:49:20,010 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        "yowvz" += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:49:20,011 [main:56] - replacing (3, Int)
2021-03-11 12:49:20,011 [main:38] - replacing 3 Int
2021-03-11 12:49:20,011 [main:42] - Getting value of type Int
2021-03-11 12:49:20,089 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:20,089 [main:46] - GENERATED VALUE OF TYPE Int = 1500300926
2021-03-11 12:49:20,089 [main:49] - GENERATED IS CALL =false
2021-03-11 12:49:20,170 [main:55] - randomType = ULong
2021-03-11 12:49:20,249 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:49:20,280 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@4410ea75]
2021-03-11 12:49:20,280 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4b0ed578]
2021-03-11 12:49:20,280 [main:66] - Generated call from random type = (3354057179326972558.toULong()).toShort().countTrailingZeroBits()
2021-03-11 12:49:20,280 [main:94] - GETTING Int from Int
2021-03-11 12:49:20,314 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@43b701b6]]
2021-03-11 12:49:20,314 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:49:20,314 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@43b701b6]
2021-03-11 12:49:20,315 [main:105] - GENERATED CALL = (0+1+2+3).toByte().unaryPlus()
2021-03-11 12:49:20,315 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ed6eedb]]
2021-03-11 12:49:20,315 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:49:20,315 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ed6eedb]
2021-03-11 12:49:20,392 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:49:20,393 [main:105] - GENERATED CALL = (0+1+2+3).toInt().div(88)
2021-03-11 12:49:20,394 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@6972dc2f]]
2021-03-11 12:49:20,394 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:49:20,394 [main:105] - GENERATED CALL = (0+1+2+3).toLong().sign
2021-03-11 12:49:20,394 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@61aa5dbf]]
2021-03-11 12:49:20,394 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:49:20,394 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@61aa5dbf]
2021-03-11 12:49:20,472 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:49:20,472 [main:105] - GENERATED CALL = (0+1+2+3).toShort().rem(-53)
2021-03-11 12:49:20,472 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10809a26]]
2021-03-11 12:49:20,472 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:20,472 [main:137] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10809a26]
2021-03-11 12:49:20,473 [main:105] - GENERATED CALL = (0+1+2+3).toChar().digitToInt()
2021-03-11 12:49:20,473 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62a877f4]]
2021-03-11 12:49:20,473 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:49:20,473 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62a877f4]
2021-03-11 12:49:20,473 [main:105] - GENERATED CALL = (0+1+2+3).toInt().toInt()
2021-03-11 12:49:20,473 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@390b15c0]]
2021-03-11 12:49:20,473 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:20,473 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@390b15c0]
2021-03-11 12:49:20,576 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:49:20,577 [main:105] - GENERATED CALL = (0+1+2+3).toChar().minus('錱')
2021-03-11 12:49:20,577 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2814a4a]]
2021-03-11 12:49:20,577 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:49:20,658 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:20,658 [main:105] - GENERATED CALL = (0+1+2+3).compareTo(-1468301707).sign
2021-03-11 12:49:20,658 [main:101] - Case = [public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ebc0bf5]]
2021-03-11 12:49:20,659 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ebc0bf5]
2021-03-11 12:49:20,739 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:20,739 [main:105] - GENERATED CALL = (0+1+2+3).and(-918994223)
2021-03-11 12:49:20,739 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4b0ed578]]
2021-03-11 12:49:20,739 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:49:20,740 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4b0ed578]
2021-03-11 12:49:20,740 [main:105] - GENERATED CALL = (0+1+2+3).toShort().countTrailingZeroBits()
2021-03-11 12:49:20,740 [main:63] - replacement of 3 of type Int is (0+1+2+3).toShort().countTrailingZeroBits()
2021-03-11 12:49:20,817 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:49:20,819 [main:56] - replacing (sum, Int)
2021-03-11 12:49:20,819 [main:38] - replacing sum Int
2021-03-11 12:49:20,819 [main:42] - Getting value of type Int
2021-03-11 12:49:20,896 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:20,896 [main:46] - GENERATED VALUE OF TYPE Int = 22248349
2021-03-11 12:49:20,896 [main:49] - GENERATED IS CALL =false
2021-03-11 12:49:20,897 [main:55] - randomType = A
2021-03-11 12:49:20,974 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:49:20,974 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:49:21,052 [main:194] - Type params = []
2021-03-11 12:49:21,129 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:49:21,129 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:49:21,136 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3ff9eaf8]
2021-03-11 12:49:21,214 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:21,215 [main:66] - Generated call from random type = (A(-2104262090, "vovab")).x.coerceAtLeast(-1441279128)
2021-03-11 12:49:21,215 [main:63] - replacement of sum of type Int is (A(-2104262090, "vovab")).x.coerceAtLeast(-1441279128)
2021-03-11 12:49:21,293 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:49:21,293 [main:66] - Compilation checking started
2021-03-11 12:49:21,518 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (A(-2104262090, "vovab")).x.coerceAtLeast(-1441279128) += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:49:21,520 [main:56] - replacing (sum, Int)
2021-03-11 12:49:21,520 [main:38] - replacing sum Int
2021-03-11 12:49:21,520 [main:42] - Getting value of type Int
2021-03-11 12:49:21,601 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:21,602 [main:46] - GENERATED VALUE OF TYPE Int = -294558533
2021-03-11 12:49:21,602 [main:49] - GENERATED IS CALL =false
2021-03-11 12:49:21,880 [main:55] - randomType = HashMap<A, Sequence<ULong>>
2021-03-11 12:49:21,958 [main:302] - generating value of type = HashMap<A, Sequence<ULong>> false depth = 0
2021-03-11 12:49:22,044 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(pairs: Pair<A, Sequence<ULong>>): HashMap<A, Sequence<ULong>> = TODO()
2021-03-11 12:49:22,045 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(pairs: Pair<A, Sequence<ULong>>): HashMap<A, Sequence<ULong>> = TODO()
2021-03-11 12:49:22,128 [main:302] - generating value of type = Pair<A, Sequence<ULong>> false depth = 3
2021-03-11 12:49:22,214 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: A, second: Sequence<ULong>): Pair<A, Sequence<ULong>> = TODO()
2021-03-11 12:49:22,215 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: A, second: Sequence<ULong>): Pair<A, Sequence<ULong>> = TODO()
2021-03-11 12:49:22,299 [main:302] - generating value of type = A false depth = 6
2021-03-11 12:49:22,300 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:49:22,380 [main:194] - Type params = []
2021-03-11 12:49:22,461 [main:302] - generating value of type = Int true depth = 8
2021-03-11 12:49:22,461 [main:302] - generating value of type = String true depth = 8
2021-03-11 12:49:22,462 [main:302] - generating value of type = Sequence<ULong> false depth = 6
2021-03-11 12:49:22,546 [main:43] - GENERATING CALL OF fun <T> sequenceOf(elements: ULong): Sequence<ULong> = TODO()
2021-03-11 12:49:22,547 [main:61] - WITHOUT TYPE PARAMS = fun <T> sequenceOf(elements: ULong): Sequence<ULong> = TODO()
2021-03-11 12:49:22,628 [main:302] - generating value of type = ULong true depth = 9
2021-03-11 12:49:22,628 [main:95] - GENERATED = sequenceOf<ULong>(8984325178425801882.toULong())
2021-03-11 12:49:22,628 [main:95] - GENERATED = Pair<A, Sequence<ULong>>(A(493452537, "svcyr"), sequenceOf<ULong>(8984325178425801882.toULong()))
2021-03-11 12:49:22,629 [main:95] - GENERATED = hashMapOf<A, Sequence<ULong>>(Pair<A, Sequence<ULong>>(A(493452537, "svcyr"), sequenceOf<ULong>(8984325178425801882.toULong())))
2021-03-11 12:49:22,859 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d868003]
2021-03-11 12:49:22,981 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:49:22,982 [main:66] - Generated call from random type = (hashMapOf<A, Sequence<ULong>>(Pair<A, Sequence<ULong>>(A(493452537, "svcyr"), sequenceOf<ULong>(8984325178425801882.toULong())))).size.minus(-35)
2021-03-11 12:49:22,983 [main:94] - GETTING Int from Boolean
2021-03-11 12:49:22,996 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@446340cf]]
2021-03-11 12:49:22,997 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:49:23,133 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:23,134 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@446340cf]
2021-03-11 12:49:23,135 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).takeLowestOneBit()
2021-03-11 12:49:23,135 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1d132288], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]]
2021-03-11 12:49:23,135 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1d132288]
2021-03-11 12:49:23,261 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:49:23,261 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:49:23,342 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:23,342 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).equals("fxibg").compareTo(true)
2021-03-11 12:49:23,342 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@d0efe34]]
2021-03-11 12:49:23,342 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:49:23,422 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:23,422 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@d0efe34]
2021-03-11 12:49:23,502 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:23,503 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).rotateRight(-987353398)
2021-03-11 12:49:23,503 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d4a80]]
2021-03-11 12:49:23,503 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:49:23,590 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:23,590 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d4a80]
2021-03-11 12:49:23,590 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(true).unaryPlus()
2021-03-11 12:49:23,590 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36bf0f77]]
2021-03-11 12:49:23,591 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:49:23,675 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:23,676 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36bf0f77]
2021-03-11 12:49:23,676 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).takeHighestOneBit()
2021-03-11 12:49:23,676 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6736791a]]
2021-03-11 12:49:23,676 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:49:23,762 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:23,763 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6736791a]
2021-03-11 12:49:23,763 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).inv()
2021-03-11 12:49:23,763 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@5052b22e]]
2021-03-11 12:49:23,763 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:49:23,850 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:23,851 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(true).absoluteValue
2021-03-11 12:49:23,851 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]]
2021-03-11 12:49:23,851 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:49:23,939 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:23,940 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(true)
2021-03-11 12:49:23,940 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@241f9269]]
2021-03-11 12:49:23,940 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:49:24,031 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:24,032 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@241f9269]
2021-03-11 12:49:24,157 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:24,158 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(true).or(1623652803)
2021-03-11 12:49:24,158 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ed6eedb]]
2021-03-11 12:49:24,158 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:49:24,250 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:24,251 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ed6eedb]
2021-03-11 12:49:24,344 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:49:24,345 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(true).div(93)
2021-03-11 12:49:24,345 [main:63] - replacement of sum of type Int is (sum == 0+1+2+3+4).compareTo(true)
2021-03-11 12:49:24,427 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:49:24,428 [main:66] - Compilation checking started
2021-03-11 12:49:24,645 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (sum == 0+1+2+3+4).compareTo(true) += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:49:24,647 [main:56] - replacing (str, String)
2021-03-11 12:49:24,647 [main:38] - replacing str String
2021-03-11 12:49:24,647 [main:42] - Getting value of type String
2021-03-11 12:49:24,727 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:49:24,727 [main:46] - GENERATED VALUE OF TYPE String = "pmipm"
2021-03-11 12:49:24,728 [main:49] - GENERATED IS CALL =false
2021-03-11 12:49:24,728 [main:55] - randomType = A
2021-03-11 12:49:24,807 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:49:24,807 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:49:24,886 [main:194] - Type params = []
2021-03-11 12:49:24,965 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:49:24,965 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:49:24,974 [main:137] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a963ec3]
2021-03-11 12:49:25,053 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:49:25,133 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:49:25,134 [main:66] - Generated call from random type = (A(1888258778, "dwgpw")).y.substringBeforeLast('ሁ', "muxlv")
2021-03-11 12:49:25,134 [main:63] - replacement of str of type String is (A(1888258778, "dwgpw")).y.substringBeforeLast('ሁ', "muxlv")
2021-03-11 12:49:25,212 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:49:25,212 [main:66] - Compilation checking started
2021-03-11 12:49:25,474 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        (A(1888258778, "dwgpw")).y.substringBeforeLast('ሁ', "muxlv") += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:49:25,476 [main:56] - replacing ((0+1+2).div(8998432659115121963).toString(532629215) == (0+1).toLong().toString(249041562), Boolean)
2021-03-11 12:49:25,476 [main:38] - replacing (0+1+2).div(8998432659115121963).toString(532629215) == (0+1).toLong().toString(249041562) Boolean
2021-03-11 12:49:25,476 [main:42] - Getting value of type Boolean
2021-03-11 12:49:25,559 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:25,560 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 12:49:25,560 [main:49] - GENERATED IS CALL =false
2021-03-11 12:49:25,644 [main:55] - randomType = UShort
2021-03-11 12:49:25,722 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 12:49:25,751 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@47b941dd]
2021-03-11 12:49:25,751 [main:137] - GENERATING call of type public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6822e70d]
2021-03-11 12:49:25,752 [main:66] - Generated call from random type = (21463.toUShort()).toFloat().isInfinite()
2021-03-11 12:49:25,752 [main:94] - GETTING Boolean from Int
2021-03-11 12:49:25,787 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169], public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@67360a68]]
2021-03-11 12:49:25,787 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169]
2021-03-11 12:49:25,787 [main:137] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@67360a68]
2021-03-11 12:49:25,787 [main:105] - GENERATED CALL = (sum).toFloat().isFinite()
2021-03-11 12:49:25,788 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1a38040]]
2021-03-11 12:49:25,788 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]
2021-03-11 12:49:25,868 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:49:25,868 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1a38040]
2021-03-11 12:49:25,947 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:25,948 [main:105] - GENERATED CALL = (sum).equals("skxyi").xor(false)
2021-03-11 12:49:25,948 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]]
2021-03-11 12:49:25,948 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:49:25,948 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]
2021-03-11 12:49:26,029 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:49:26,029 [main:105] - GENERATED CALL = (sum).toInt().equals("snttr")
2021-03-11 12:49:26,029 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]]
2021-03-11 12:49:26,029 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:49:26,108 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:26,108 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]
2021-03-11 12:49:26,187 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:49:26,188 [main:105] - GENERATED CALL = (sum).compareTo(-1633357719).equals("eugnq")
2021-03-11 12:49:26,188 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e8ffc26]]
2021-03-11 12:49:26,188 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:26,188 [main:137] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e8ffc26]
2021-03-11 12:49:26,188 [main:105] - GENERATED CALL = (sum).toChar().isUpperCase()
2021-03-11 12:49:26,188 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2443d528]]
2021-03-11 12:49:26,188 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:26,188 [main:137] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2443d528]
2021-03-11 12:49:26,188 [main:105] - GENERATED CALL = (sum).toChar().isLetter()
2021-03-11 12:49:26,188 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24bd4c6b]]
2021-03-11 12:49:26,188 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:26,188 [main:137] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24bd4c6b]
2021-03-11 12:49:26,188 [main:105] - GENERATED CALL = (sum).toChar().isDigit()
2021-03-11 12:49:26,189 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@216b78]]
2021-03-11 12:49:26,189 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:26,189 [main:137] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@216b78]
2021-03-11 12:49:26,189 [main:105] - GENERATED CALL = (sum).toChar().isWhitespace()
2021-03-11 12:49:26,189 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7f28a29], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@27eff770]]
2021-03-11 12:49:26,189 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7f28a29]
2021-03-11 12:49:26,189 [main:137] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@27eff770]
2021-03-11 12:49:26,189 [main:105] - GENERATED CALL = (sum).toDouble().isInfinite()
2021-03-11 12:49:26,189 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4428db34]]
2021-03-11 12:49:26,189 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:49:26,189 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4428db34]
2021-03-11 12:49:26,270 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:49:26,270 [main:105] - GENERATED CALL = (sum).toShort().equals("zwbyq")
2021-03-11 12:49:26,270 [main:63] - replacement of (0+1+2).div(8998432659115121963).toString(532629215) == (0+1).toLong().toString(249041562) of type Boolean is (sum).compareTo(-1633357719).equals("eugnq")
2021-03-11 12:49:26,348 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:49:26,350 [main:56] - replacing (str, String)
2021-03-11 12:49:26,350 [main:38] - replacing str String
2021-03-11 12:49:26,350 [main:42] - Getting value of type String
2021-03-11 12:49:26,433 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:49:26,433 [main:46] - GENERATED VALUE OF TYPE String = "onfpt"
2021-03-11 12:49:26,433 [main:49] - GENERATED IS CALL =false
2021-03-11 12:49:26,521 [main:55] - randomType = ULong
2021-03-11 12:49:26,642 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:49:26,684 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUInt(): kotlin.UInt defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@eb4443e]
2021-03-11 12:49:26,684 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76e34b2c]
2021-03-11 12:49:26,780 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:26,781 [main:66] - Generated call from random type = (2699975171358236048.toULong()).toUInt().toString(-1992038866)
2021-03-11 12:49:26,782 [main:94] - GETTING String from Int
2021-03-11 12:49:26,833 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]]
2021-03-11 12:49:26,833 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:26,833 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]
2021-03-11 12:49:26,913 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:49:26,914 [main:105] - GENERATED CALL = (0+1+2+3).toChar().plus("lhfju")
2021-03-11 12:49:26,914 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]]
2021-03-11 12:49:26,914 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:26,914 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]
2021-03-11 12:49:26,914 [main:105] - GENERATED CALL = (0+1+2+3).toChar().lowercase()
2021-03-11 12:49:26,914 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:49:26,915 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:49:26,997 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:49:26,998 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:49:27,076 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:27,076 [main:105] - GENERATED CALL = (0+1+2+3).div(4785736191071121509).toString(424553904)
2021-03-11 12:49:27,077 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:49:27,077 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:49:27,160 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:27,161 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:49:27,258 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:27,258 [main:105] - GENERATED CALL = (0+1+2+3).compareTo(-180555727).toString(-1751072027)
2021-03-11 12:49:27,258 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]]
2021-03-11 12:49:27,258 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:27,259 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]
2021-03-11 12:49:27,259 [main:105] - GENERATED CALL = (0+1+2+3).toChar().uppercase()
2021-03-11 12:49:27,259 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:49:27,259 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:49:27,259 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:49:27,337 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:27,337 [main:105] - GENERATED CALL = (0+1+2+3).toInt().toString(-1470663852)
2021-03-11 12:49:27,337 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]]
2021-03-11 12:49:27,337 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:49:27,337 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]
2021-03-11 12:49:27,416 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:27,416 [main:105] - GENERATED CALL = (0+1+2+3).toByte().toString(-1281670049)
2021-03-11 12:49:27,416 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]]
2021-03-11 12:49:27,416 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:49:27,416 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]
2021-03-11 12:49:27,495 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:27,495 [main:105] - GENERATED CALL = (0+1+2+3).toShort().toString(-1657918024)
2021-03-11 12:49:27,495 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:49:27,495 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:49:27,495 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:49:27,575 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:27,575 [main:105] - GENERATED CALL = (0+1+2+3).toLong().toString(-883458625)
2021-03-11 12:49:27,575 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:49:27,575 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:49:27,681 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:27,681 [main:105] - GENERATED CALL = (0+1+2+3).toString(-1041192080)
2021-03-11 12:49:27,681 [main:63] - replacement of str of type String is (0+1+2+3).toChar().uppercase()
2021-03-11 12:49:27,764 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:49:27,764 [main:66] - Compilation checking started
2021-03-11 12:49:27,986 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        (0+1+2+3).toChar().uppercase() += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:49:27,988 [main:56] - replacing (4, Int)
2021-03-11 12:49:27,988 [main:38] - replacing 4 Int
2021-03-11 12:49:27,988 [main:42] - Getting value of type Int
2021-03-11 12:49:28,084 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:28,085 [main:46] - GENERATED VALUE OF TYPE Int = 232545420
2021-03-11 12:49:28,085 [main:49] - GENERATED IS CALL =false
2021-03-11 12:49:28,426 [main:55] - randomType = Function2<UByte, Set<Boolean>, A>
2021-03-11 12:49:28,426 [main:94] - GETTING Int from Int
2021-03-11 12:49:28,469 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@19b4dbb0]]
2021-03-11 12:49:28,469 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:28,469 [main:137] - GENERATING call of type public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@19b4dbb0]
2021-03-11 12:49:28,470 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toChar().toInt()
2021-03-11 12:49:28,470 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1f1092b7]]
2021-03-11 12:49:28,470 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:49:28,470 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1f1092b7]
2021-03-11 12:49:28,470 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toByte().toInt()
2021-03-11 12:49:28,470 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6736791a]]
2021-03-11 12:49:28,470 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:49:28,470 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6736791a]
2021-03-11 12:49:28,470 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toInt().inv()
2021-03-11 12:49:28,470 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e], public final val step: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@1b8e1a38]]
2021-03-11 12:49:28,470 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e]
2021-03-11 12:49:28,551 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:49:28,551 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).rangeTo(-117).step
2021-03-11 12:49:28,551 [main:101] - Case = [public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3b8291ff]]
2021-03-11 12:49:28,551 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3b8291ff]
2021-03-11 12:49:28,632 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:28,632 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).coerceAtMost(1973933028)
2021-03-11 12:49:28,632 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1c62794d]]
2021-03-11 12:49:28,633 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:49:28,633 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1c62794d]
2021-03-11 12:49:28,715 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:49:28,716 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toByte().compareTo(119)
2021-03-11 12:49:28,716 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@6972dc2f]]
2021-03-11 12:49:28,716 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:49:28,820 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:49:28,820 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).div(-3426299535612056665).sign
2021-03-11 12:49:28,821 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f655756]]
2021-03-11 12:49:28,821 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:49:28,821 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f655756]
2021-03-11 12:49:28,821 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toInt().unaryMinus()
2021-03-11 12:49:28,821 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@8c6da7c]]
2021-03-11 12:49:28,821 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:49:28,898 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:49:28,899 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@8c6da7c]
2021-03-11 12:49:28,899 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).div(-5202715011428761170).countLeadingZeroBits()
2021-03-11 12:49:28,899 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2814a4a]]
2021-03-11 12:49:28,899 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:49:28,980 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:28,981 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).compareTo(1893608981).sign
2021-03-11 12:49:28,981 [main:63] - replacement of 4 of type Int is (A(-1427813506, "vtkln").x).div(-3426299535612056665).sign
2021-03-11 12:49:29,064 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:49:29,065 [main:56] - replacing (sum, Int)
2021-03-11 12:49:29,066 [main:38] - replacing sum Int
2021-03-11 12:49:29,066 [main:42] - Getting value of type Int
2021-03-11 12:49:29,144 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:29,144 [main:46] - GENERATED VALUE OF TYPE Int = 148420510
2021-03-11 12:49:29,144 [main:49] - GENERATED IS CALL =false
2021-03-11 12:49:29,145 [main:55] - randomType = A
2021-03-11 12:49:29,223 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:49:29,223 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:49:29,301 [main:194] - Type params = []
2021-03-11 12:49:29,379 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:49:29,379 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:49:29,389 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e53c7a]
2021-03-11 12:49:29,475 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:29,475 [main:66] - Generated call from random type = (A(-1893829581, "gopkv")).x.shr(37292480)
2021-03-11 12:49:29,476 [main:94] - GETTING Int from Boolean
2021-03-11 12:49:29,485 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ec35323]]
2021-03-11 12:49:29,485 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:49:29,562 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:29,562 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ec35323]
2021-03-11 12:49:29,641 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:29,642 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(true).rotateLeft(648097342)
2021-03-11 12:49:29,642 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d868003]]
2021-03-11 12:49:29,642 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:49:29,723 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:29,724 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d868003]
2021-03-11 12:49:29,830 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:49:29,830 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).minus(-86)
2021-03-11 12:49:29,831 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36bf0f77]]
2021-03-11 12:49:29,831 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:49:29,914 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:29,915 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36bf0f77]
2021-03-11 12:49:29,915 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(true).takeHighestOneBit()
2021-03-11 12:49:29,915 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c9f5998]]
2021-03-11 12:49:29,915 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:49:30,000 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:30,000 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c9f5998]
2021-03-11 12:49:30,092 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:30,093 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).shl(1321333430)
2021-03-11 12:49:30,093 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@241f9269]]
2021-03-11 12:49:30,093 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:49:30,174 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:30,175 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@241f9269]
2021-03-11 12:49:30,253 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:30,254 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(true).or(508677284)
2021-03-11 12:49:30,254 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f655756]]
2021-03-11 12:49:30,254 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:49:30,332 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:30,333 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f655756]
2021-03-11 12:49:30,333 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).unaryMinus()
2021-03-11 12:49:30,333 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e53c7a]]
2021-03-11 12:49:30,333 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:49:30,410 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:30,410 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e53c7a]
2021-03-11 12:49:30,488 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:30,488 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).shr(-529257261)
2021-03-11 12:49:30,652 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3b8291ff]]
2021-03-11 12:49:30,652 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:49:30,732 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:30,733 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3b8291ff]
2021-03-11 12:49:30,811 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:30,811 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).coerceAtMost(65577339)
2021-03-11 12:49:30,811 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f664709]]
2021-03-11 12:49:30,811 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:49:30,889 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:30,890 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f664709]
2021-03-11 12:49:31,003 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:31,103 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:31,103 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).coerceIn(2030690085, 1374503311)
2021-03-11 12:49:31,103 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]]
2021-03-11 12:49:31,103 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:49:31,191 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:31,191 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false)
2021-03-11 12:49:31,191 [main:63] - replacement of sum of type Int is 148420510
2021-03-11 12:49:31,268 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 12:49:31,269 [main:66] - Compilation checking started
2021-03-11 12:49:31,465 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        148420510 += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:49:31,467 [main:56] - replacing (sum, Int)
2021-03-11 12:49:31,467 [main:38] - replacing sum Int
2021-03-11 12:49:31,467 [main:42] - Getting value of type Int
2021-03-11 12:49:31,544 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:31,544 [main:46] - GENERATED VALUE OF TYPE Int = -936009509
2021-03-11 12:49:31,545 [main:49] - GENERATED IS CALL =false
2021-03-11 12:49:31,545 [main:55] - randomType = Float
2021-03-11 12:49:31,623 [main:302] - generating value of type = Float true depth = 0
2021-03-11 12:49:31,661 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:49:31,661 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@446340cf]
2021-03-11 12:49:31,661 [main:66] - Generated call from random type = (0.3913073f).toInt().takeLowestOneBit()
2021-03-11 12:49:31,661 [main:94] - GETTING Int from Int
2021-03-11 12:49:31,704 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@13ad634b]]
2021-03-11 12:49:31,704 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:49:31,704 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@13ad634b]
2021-03-11 12:49:31,704 [main:105] - GENERATED CALL = (0+1+2).toLong().countOneBits()
2021-03-11 12:49:31,704 [main:101] - Case = [public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18626c8c]]
2021-03-11 12:49:31,704 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18626c8c]
2021-03-11 12:49:31,782 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:49:31,782 [main:105] - GENERATED CALL = (0+1+2).plus(48)
2021-03-11 12:49:31,782 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18626c8c]]
2021-03-11 12:49:31,782 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:49:31,782 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18626c8c]
2021-03-11 12:49:31,860 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:49:31,860 [main:105] - GENERATED CALL = (0+1+2).toInt().plus(113)
2021-03-11 12:49:31,861 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4ba73279]]
2021-03-11 12:49:31,861 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:49:31,861 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4ba73279]
2021-03-11 12:49:31,861 [main:105] - GENERATED CALL = (0+1+2).toShort().unaryMinus()
2021-03-11 12:49:31,861 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c9f5998]]
2021-03-11 12:49:31,861 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:49:31,939 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:31,939 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c9f5998]
2021-03-11 12:49:32,017 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:32,017 [main:105] - GENERATED CALL = (0+1+2).compareTo(-1293723410).shl(-2044666481)
2021-03-11 12:49:32,017 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36bf0f77]]
2021-03-11 12:49:32,017 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:49:32,094 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:32,094 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36bf0f77]
2021-03-11 12:49:32,095 [main:105] - GENERATED CALL = (0+1+2).compareTo(2108230454).takeHighestOneBit()
2021-03-11 12:49:32,095 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@a5b3754]]
2021-03-11 12:49:32,095 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:49:32,095 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@a5b3754]
2021-03-11 12:49:32,095 [main:105] - GENERATED CALL = (0+1+2).toInt().countLeadingZeroBits()
2021-03-11 12:49:32,095 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62a877f4]]
2021-03-11 12:49:32,095 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:49:32,095 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62a877f4]
2021-03-11 12:49:32,095 [main:105] - GENERATED CALL = (0+1+2).toInt().toInt()
2021-03-11 12:49:32,095 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@68b11d5c]]
2021-03-11 12:49:32,095 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:49:32,096 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@68b11d5c]
2021-03-11 12:49:32,096 [main:105] - GENERATED CALL = (0+1+2).toShort().countOneBits()
2021-03-11 12:49:32,096 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3b8291ff]]
2021-03-11 12:49:32,096 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:49:32,096 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3b8291ff]
2021-03-11 12:49:32,201 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:32,201 [main:105] - GENERATED CALL = (0+1+2).toInt().coerceAtMost(1894482530)
2021-03-11 12:49:32,201 [main:63] - replacement of sum of type Int is (0+1+2).toShort().countOneBits()
2021-03-11 12:49:32,280 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:49:32,280 [main:66] - Compilation checking started
2021-03-11 12:49:32,481 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (0+1+2).toShort().countOneBits() += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:49:32,484 [main:56] - replacing (sum, Int)
2021-03-11 12:49:32,484 [main:38] - replacing sum Int
2021-03-11 12:49:32,484 [main:42] - Getting value of type Int
2021-03-11 12:49:32,562 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:32,562 [main:46] - GENERATED VALUE OF TYPE Int = 677424829
2021-03-11 12:49:32,562 [main:49] - GENERATED IS CALL =false
2021-03-11 12:49:32,563 [main:55] - randomType = Char
2021-03-11 12:49:32,641 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:49:32,668 [main:137] - GENERATING call of type public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1b5b532a]
2021-03-11 12:49:32,668 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4ba73279]
2021-03-11 12:49:32,668 [main:66] - Generated call from random type = ('').toShort().unaryMinus()
2021-03-11 12:49:32,668 [main:63] - replacement of sum of type Int is ('').toShort().unaryMinus()
2021-03-11 12:49:32,746 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:49:32,746 [main:66] - Compilation checking started
2021-03-11 12:49:32,939 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        ('').toShort().unaryMinus() += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:49:32,941 [main:56] - replacing (sum, Int)
2021-03-11 12:49:32,941 [main:38] - replacing sum Int
2021-03-11 12:49:32,941 [main:42] - Getting value of type Int
2021-03-11 12:49:33,019 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:33,020 [main:46] - GENERATED VALUE OF TYPE Int = 2065828524
2021-03-11 12:49:33,020 [main:49] - GENERATED IS CALL =false
2021-03-11 12:49:33,100 [main:55] - randomType = Long
2021-03-11 12:49:33,178 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:49:33,209 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@46af30c9]
2021-03-11 12:49:33,209 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@390b15c0]
2021-03-11 12:49:33,286 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:49:33,286 [main:66] - Generated call from random type = (-3120363420636923872).toChar().minus('Ӊ')
2021-03-11 12:49:33,287 [main:94] - GETTING Int from Int
2021-03-11 12:49:33,318 [main:101] - Case = [public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36845587]]
2021-03-11 12:49:33,318 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36845587]
2021-03-11 12:49:33,395 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:33,396 [main:105] - GENERATED CALL = (0+1).xor(-1669201160)
2021-03-11 12:49:33,396 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@13ad634b]]
2021-03-11 12:49:33,396 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:49:33,494 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:49:33,494 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@13ad634b]
2021-03-11 12:49:33,494 [main:105] - GENERATED CALL = (0+1).div(-617446007829085048).countOneBits()
2021-03-11 12:49:33,494 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@208e2fd]]
2021-03-11 12:49:33,494 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:49:33,495 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@208e2fd]
2021-03-11 12:49:33,495 [main:105] - GENERATED CALL = (0+1).toShort().countLeadingZeroBits()
2021-03-11 12:49:33,495 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ec35323]]
2021-03-11 12:49:33,495 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:49:33,495 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ec35323]
2021-03-11 12:49:33,573 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:33,573 [main:105] - GENERATED CALL = (0+1).toInt().rotateLeft(-1800245024)
2021-03-11 12:49:33,573 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e53c7a]]
2021-03-11 12:49:33,573 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:49:33,573 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e53c7a]
2021-03-11 12:49:33,653 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:33,653 [main:105] - GENERATED CALL = (0+1).toInt().shr(1481458046)
2021-03-11 12:49:33,653 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7d291fed]]
2021-03-11 12:49:33,653 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:49:33,731 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:33,732 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7d291fed]
2021-03-11 12:49:33,732 [main:105] - GENERATED CALL = (0+1).compareTo(-1508278819).countOneBits()
2021-03-11 12:49:33,732 [main:101] - Case = [public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6736791a]]
2021-03-11 12:49:33,732 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6736791a]
2021-03-11 12:49:33,732 [main:105] - GENERATED CALL = (0+1).inv()
2021-03-11 12:49:33,732 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@64d6d42b]]
2021-03-11 12:49:33,732 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169]
2021-03-11 12:49:33,732 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@64d6d42b]
2021-03-11 12:49:33,810 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:49:33,810 [main:105] - GENERATED CALL = (0+1).toFloat().compareTo(121)
2021-03-11 12:49:33,810 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6736791a]]
2021-03-11 12:49:33,810 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:49:33,887 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:33,887 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6736791a]
2021-03-11 12:49:33,888 [main:105] - GENERATED CALL = (0+1).compareTo(-2008839036).inv()
2021-03-11 12:49:33,888 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36bf0f77]]
2021-03-11 12:49:33,888 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36bf0f77]
2021-03-11 12:49:33,888 [main:105] - GENERATED CALL = (0+1).takeHighestOneBit()
2021-03-11 12:49:33,888 [main:63] - replacement of sum of type Int is (0+1).inv()
2021-03-11 12:49:33,965 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:49:33,965 [main:66] - Compilation checking started
2021-03-11 12:49:34,171 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (0+1).inv() += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:49:34,173 [main:56] - replacing (0, Int)
2021-03-11 12:49:34,174 [main:38] - replacing 0 Int
2021-03-11 12:49:34,174 [main:42] - Getting value of type Int
2021-03-11 12:49:34,253 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:34,253 [main:46] - GENERATED VALUE OF TYPE Int = 1035311062
2021-03-11 12:49:34,253 [main:49] - GENERATED IS CALL =false
2021-03-11 12:49:34,334 [main:55] - randomType = ULong
2021-03-11 12:49:34,412 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:49:34,439 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@3ae26420]
2021-03-11 12:49:34,439 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@3f9d904]
2021-03-11 12:49:34,516 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:49:34,517 [main:66] - Generated call from random type = (9109739837434634828.toULong()).toUShort().compareTo(123.toUByte())
2021-03-11 12:49:34,518 [main:94] - GETTING Int from Boolean
2021-03-11 12:49:34,527 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f655756]]
2021-03-11 12:49:34,527 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:49:34,605 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:34,605 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f655756]
2021-03-11 12:49:34,605 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).unaryMinus()
2021-03-11 12:49:34,605 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@55f9f89c]]
2021-03-11 12:49:34,606 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:49:34,706 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:34,707 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@55f9f89c]
2021-03-11 12:49:34,785 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:49:34,785 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).rem(-49)
2021-03-11 12:49:34,785 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@446340cf]]
2021-03-11 12:49:34,785 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:49:34,864 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:34,864 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@446340cf]
2021-03-11 12:49:34,864 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(true).takeLowestOneBit()
2021-03-11 12:49:34,864 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18626c8c]]
2021-03-11 12:49:34,864 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:49:34,943 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:34,943 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18626c8c]
2021-03-11 12:49:35,021 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:49:35,021 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).plus(12)
2021-03-11 12:49:35,022 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@5052b22e]]
2021-03-11 12:49:35,022 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:49:35,100 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:35,100 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(true).absoluteValue
2021-03-11 12:49:35,100 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d63158f]]
2021-03-11 12:49:35,100 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:49:35,178 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:35,178 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d63158f]
2021-03-11 12:49:35,178 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).dec()
2021-03-11 12:49:35,178 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@a5b3754]]
2021-03-11 12:49:35,178 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:49:35,255 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:35,256 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@a5b3754]
2021-03-11 12:49:35,256 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).countLeadingZeroBits()
2021-03-11 12:49:35,256 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ed6eedb]]
2021-03-11 12:49:35,256 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:49:35,334 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:35,334 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ed6eedb]
2021-03-11 12:49:35,412 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:49:35,413 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).div(43)
2021-03-11 12:49:35,413 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7d291fed]]
2021-03-11 12:49:35,413 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:49:35,489 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:35,490 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7d291fed]
2021-03-11 12:49:35,495 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(true).countOneBits()
2021-03-11 12:49:35,495 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62a877f4]]
2021-03-11 12:49:35,495 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:49:35,572 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:35,572 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62a877f4]
2021-03-11 12:49:35,573 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).toInt()
2021-03-11 12:49:35,573 [main:63] - replacement of 0 of type Int is (9109739837434634828.toULong()).toUShort().compareTo(123.toUByte())
2021-03-11 12:49:35,650 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:49:35,651 [main:56] - replacing (sum, Int)
2021-03-11 12:49:35,651 [main:38] - replacing sum Int
2021-03-11 12:49:35,651 [main:42] - Getting value of type Int
2021-03-11 12:49:35,769 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:35,770 [main:46] - GENERATED VALUE OF TYPE Int = 468266256
2021-03-11 12:49:35,770 [main:49] - GENERATED IS CALL =false
2021-03-11 12:49:36,053 [main:55] - randomType = Sequence<Long?>
2021-03-11 12:49:36,053 [main:94] - GETTING Int from Int
2021-03-11 12:49:36,086 [main:101] - Case = [public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@39041b0c], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4c4a428d]]
2021-03-11 12:49:36,086 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@39041b0c]
2021-03-11 12:49:36,163 [main:302] - generating value of type = Float true depth = 0
2021-03-11 12:49:36,164 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4c4a428d]
2021-03-11 12:49:36,164 [main:105] - GENERATED CALL = (sum).div(0.27830607f).toBits()
2021-03-11 12:49:36,164 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@58fd4e05]]
2021-03-11 12:49:36,164 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d]
2021-03-11 12:49:36,244 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:49:36,245 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@58fd4e05]
2021-03-11 12:49:36,323 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:49:36,323 [main:105] - GENERATED CALL = (sum).div(0.05852859301580893).compareTo(-4)
2021-03-11 12:49:36,323 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ed6eedb]]
2021-03-11 12:49:36,323 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:49:36,402 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:36,402 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ed6eedb]
2021-03-11 12:49:36,480 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:49:36,480 [main:105] - GENERATED CALL = (sum).compareTo(-46999179).div(83)
2021-03-11 12:49:36,480 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@6972dc2f]]
2021-03-11 12:49:36,480 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:49:36,480 [main:105] - GENERATED CALL = (sum).toLong().sign
2021-03-11 12:49:36,480 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@7e8d0d69]]
2021-03-11 12:49:36,480 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:49:36,481 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@7e8d0d69]
2021-03-11 12:49:36,559 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:49:36,560 [main:105] - GENERATED CALL = (sum).toShort().times(120)
2021-03-11 12:49:36,560 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b80cd8f]]
2021-03-11 12:49:36,560 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:49:36,640 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:36,640 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b80cd8f]
2021-03-11 12:49:36,640 [main:105] - GENERATED CALL = (sum).compareTo(-1638134227).inc()
2021-03-11 12:49:36,641 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f655756]]
2021-03-11 12:49:36,641 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:49:36,641 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f655756]
2021-03-11 12:49:36,641 [main:105] - GENERATED CALL = (sum).toInt().unaryMinus()
2021-03-11 12:49:36,641 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@6972dc2f]]
2021-03-11 12:49:36,641 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:49:36,778 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:49:36,778 [main:105] - GENERATED CALL = (sum).div(6185941854789860082).sign
2021-03-11 12:49:36,778 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4b0ed578]]
2021-03-11 12:49:36,778 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:49:36,778 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4b0ed578]
2021-03-11 12:49:36,778 [main:105] - GENERATED CALL = (sum).toShort().countTrailingZeroBits()
2021-03-11 12:49:36,778 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@588beded]]
2021-03-11 12:49:36,779 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:49:36,779 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@588beded]
2021-03-11 12:49:36,864 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:49:36,865 [main:105] - GENERATED CALL = (sum).toShort().plus(-124)
2021-03-11 12:49:36,865 [main:63] - replacement of sum of type Int is (sum).div(0.27830607f).toBits()
2021-03-11 12:49:36,954 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:49:36,954 [main:66] - Compilation checking started
2021-03-11 12:49:37,162 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (sum).div(0.27830607f).toBits() += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:49:37,164 [main:56] - replacing (str, String)
2021-03-11 12:49:37,164 [main:38] - replacing str String
2021-03-11 12:49:37,164 [main:42] - Getting value of type String
2021-03-11 12:49:37,244 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:49:37,244 [main:46] - GENERATED VALUE OF TYPE String = "tlfbv"
2021-03-11 12:49:37,245 [main:49] - GENERATED IS CALL =false
2021-03-11 12:49:37,245 [main:55] - randomType = String
2021-03-11 12:49:37,323 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:49:37,344 [main:137] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@674fd350]
2021-03-11 12:49:37,422 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:49:37,500 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:49:37,576 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:37,577 [main:66] - Generated call from random type = ("zbgag").replaceFirst('稾', '끒', false)
2021-03-11 12:49:37,578 [main:94] - GETTING String from Int
2021-03-11 12:49:37,609 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:49:37,609 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:49:37,609 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:49:37,686 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:37,686 [main:105] - GENERATED CALL = (0+1+2+3).toLong().toString(-36191925)
2021-03-11 12:49:37,686 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:49:37,686 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:49:37,764 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:37,764 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:49:37,841 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:37,841 [main:105] - GENERATED CALL = (0+1+2+3).compareTo(898076265).toString(1459584654)
2021-03-11 12:49:37,841 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]]
2021-03-11 12:49:37,841 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:49:37,841 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]
2021-03-11 12:49:37,953 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:37,954 [main:105] - GENERATED CALL = (0+1+2+3).toByte().toString(-1810411527)
2021-03-11 12:49:37,954 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:49:37,954 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:49:38,046 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:38,047 [main:105] - GENERATED CALL = (0+1+2+3).toString(1848235895)
2021-03-11 12:49:38,047 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]]
2021-03-11 12:49:38,047 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:38,047 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]
2021-03-11 12:49:38,047 [main:105] - GENERATED CALL = (0+1+2+3).toChar().titlecase()
2021-03-11 12:49:38,047 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]]
2021-03-11 12:49:38,047 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:38,047 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]
2021-03-11 12:49:38,142 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:49:38,143 [main:105] - GENERATED CALL = (0+1+2+3).toChar().plus("fyllc")
2021-03-11 12:49:38,143 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]]
2021-03-11 12:49:38,143 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:38,143 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]
2021-03-11 12:49:38,143 [main:105] - GENERATED CALL = (0+1+2+3).toChar().uppercase()
2021-03-11 12:49:38,143 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]]
2021-03-11 12:49:38,143 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:38,143 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]
2021-03-11 12:49:38,144 [main:105] - GENERATED CALL = (0+1+2+3).toChar().lowercase()
2021-03-11 12:49:38,144 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:49:38,144 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:49:38,222 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:49:38,223 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:49:38,299 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:38,300 [main:105] - GENERATED CALL = (0+1+2+3).div(8001783976488798116).toString(382691208)
2021-03-11 12:49:38,300 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:49:38,300 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:49:38,300 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:49:38,378 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:38,378 [main:105] - GENERATED CALL = (0+1+2+3).toInt().toString(-58033369)
2021-03-11 12:49:38,379 [main:63] - replacement of str of type String is (0+1+2+3).toByte().toString(-1810411527)
2021-03-11 12:49:38,455 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:49:38,457 [main:56] - replacing (2, Int)
2021-03-11 12:49:38,457 [main:38] - replacing 2 Int
2021-03-11 12:49:38,457 [main:42] - Getting value of type Int
2021-03-11 12:49:38,534 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:38,534 [main:46] - GENERATED VALUE OF TYPE Int = -529295401
2021-03-11 12:49:38,534 [main:49] - GENERATED IS CALL =false
2021-03-11 12:49:38,614 [main:55] - randomType = ULong
2021-03-11 12:49:38,690 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:49:38,719 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@3976628d]
2021-03-11 12:49:38,719 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@4a7eb080]
2021-03-11 12:49:38,805 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:49:38,805 [main:66] - Generated call from random type = (3017248352236957745.toULong()).toByte().plus(-60)
2021-03-11 12:49:38,806 [main:94] - GETTING Int from Boolean
2021-03-11 12:49:38,815 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@216b8aa8]]
2021-03-11 12:49:38,815 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:49:38,891 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:38,891 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@216b8aa8]
2021-03-11 12:49:39,009 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:39,010 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(true).ushr(1949997608)
2021-03-11 12:49:39,010 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f161575]]
2021-03-11 12:49:39,010 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:49:39,093 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:39,093 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f161575]
2021-03-11 12:49:39,182 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:49:39,183 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(true).times(-28)
2021-03-11 12:49:39,183 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36845587]]
2021-03-11 12:49:39,183 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:49:39,264 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:39,264 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36845587]
2021-03-11 12:49:39,342 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:39,343 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).xor(1946381031)
2021-03-11 12:49:39,343 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b80cd8f]]
2021-03-11 12:49:39,343 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:49:39,420 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:39,421 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b80cd8f]
2021-03-11 12:49:39,421 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(true).inc()
2021-03-11 12:49:39,421 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@241f9269]]
2021-03-11 12:49:39,421 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:49:39,502 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:39,502 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@241f9269]
2021-03-11 12:49:39,579 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:39,579 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).or(1518545956)
2021-03-11 12:49:39,579 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7d291fed]]
2021-03-11 12:49:39,579 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:49:39,656 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:39,656 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7d291fed]
2021-03-11 12:49:39,657 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(true).countOneBits()
2021-03-11 12:49:39,657 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ebc0bf5]]
2021-03-11 12:49:39,657 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:49:39,735 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:39,735 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ebc0bf5]
2021-03-11 12:49:39,819 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:39,820 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).and(-1007902655)
2021-03-11 12:49:39,820 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@d0efe34]]
2021-03-11 12:49:39,820 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:49:39,900 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:39,900 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@d0efe34]
2021-03-11 12:49:40,005 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:40,006 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).rotateRight(2095144311)
2021-03-11 12:49:40,006 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f664709]]
2021-03-11 12:49:40,006 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:49:40,089 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:40,089 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f664709]
2021-03-11 12:49:40,175 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:40,256 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:40,256 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(true).coerceIn(-1111802692, -1488367983)
2021-03-11 12:49:40,256 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76034fc0]]
2021-03-11 12:49:40,256 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:49:40,336 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:40,337 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76034fc0]
2021-03-11 12:49:40,337 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).countTrailingZeroBits()
2021-03-11 12:49:40,337 [main:63] - replacement of 2 of type Int is (3017248352236957745.toULong()).toByte().plus(-60)
2021-03-11 12:49:40,415 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:49:40,417 [main:56] - replacing (str, String)
2021-03-11 12:49:40,417 [main:38] - replacing str String
2021-03-11 12:49:40,417 [main:42] - Getting value of type String
2021-03-11 12:49:40,494 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:49:40,494 [main:46] - GENERATED VALUE OF TYPE String = "krfad"
2021-03-11 12:49:40,657 [main:49] - GENERATED IS CALL =false
2021-03-11 12:49:40,739 [main:55] - randomType = UInt
2021-03-11 12:49:40,819 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:49:40,855 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@1a8d3bce]
2021-03-11 12:49:40,856 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]
2021-03-11 12:49:40,934 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:40,935 [main:66] - Generated call from random type = (85237679.toUInt()).toShort().toString(270897579)
2021-03-11 12:49:40,935 [main:63] - replacement of str of type String is (85237679.toUInt()).toShort().toString(270897579)
2021-03-11 12:49:41,012 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:49:41,012 [main:66] - Compilation checking started
2021-03-11 12:49:41,220 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        (85237679.toUInt()).toShort().toString(270897579) += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:49:41,222 [main:56] - replacing (str, String)
2021-03-11 12:49:41,222 [main:38] - replacing str String
2021-03-11 12:49:41,222 [main:42] - Getting value of type String
2021-03-11 12:49:41,341 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:49:41,341 [main:46] - GENERATED VALUE OF TYPE String = "irfhq"
2021-03-11 12:49:41,341 [main:49] - GENERATED IS CALL =false
2021-03-11 12:49:41,342 [main:55] - randomType = A
2021-03-11 12:49:41,428 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:49:41,428 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:49:41,515 [main:194] - Type params = []
2021-03-11 12:49:41,594 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:49:41,594 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:49:41,604 [main:137] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e343344]
2021-03-11 12:49:41,687 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:49:41,766 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:49:41,766 [main:66] - Generated call from random type = (A(-1660910805, "nbmud")).y.substringAfter('ﳐ', "ttmyz")
2021-03-11 12:49:41,767 [main:94] - GETTING String from Int
2021-03-11 12:49:41,810 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:49:41,810 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:49:41,811 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:49:41,888 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:41,888 [main:105] - GENERATED CALL = (0+1+2+3).toLong().toString(2016995953)
2021-03-11 12:49:41,889 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]]
2021-03-11 12:49:41,889 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:49:41,889 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]
2021-03-11 12:49:41,967 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:41,967 [main:105] - GENERATED CALL = (0+1+2+3).toByte().toString(1499835017)
2021-03-11 12:49:41,967 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:49:41,967 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:49:42,044 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:42,045 [main:105] - GENERATED CALL = (0+1+2+3).toString(1031456991)
2021-03-11 12:49:42,045 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]]
2021-03-11 12:49:42,045 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:42,045 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]
2021-03-11 12:49:42,045 [main:105] - GENERATED CALL = (0+1+2+3).toChar().lowercase()
2021-03-11 12:49:42,045 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:49:42,045 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:49:42,122 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:42,123 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:49:42,200 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:42,200 [main:105] - GENERATED CALL = (0+1+2+3).compareTo(1519716861).toString(1299885898)
2021-03-11 12:49:42,201 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:49:42,201 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:49:42,201 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:49:42,300 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:42,301 [main:105] - GENERATED CALL = (0+1+2+3).toInt().toString(-1704574681)
2021-03-11 12:49:42,301 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]]
2021-03-11 12:49:42,301 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:42,301 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]
2021-03-11 12:49:42,301 [main:105] - GENERATED CALL = (0+1+2+3).toChar().uppercase()
2021-03-11 12:49:42,301 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:49:42,301 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:49:42,383 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:49:42,384 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:49:42,480 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:42,480 [main:105] - GENERATED CALL = (0+1+2+3).div(7414883986231188319).toString(-1735767267)
2021-03-11 12:49:42,480 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]]
2021-03-11 12:49:42,480 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:49:42,480 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]
2021-03-11 12:49:42,559 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:42,560 [main:105] - GENERATED CALL = (0+1+2+3).toShort().toString(-1893776939)
2021-03-11 12:49:42,560 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]]
2021-03-11 12:49:42,560 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:42,560 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]
2021-03-11 12:49:42,637 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:49:42,638 [main:105] - GENERATED CALL = (0+1+2+3).toChar().plus("aaxxx")
2021-03-11 12:49:42,638 [main:63] - replacement of str of type String is (0+1+2+3).toInt().toString(-1704574681)
2021-03-11 12:49:42,716 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:49:42,716 [main:66] - Compilation checking started
2021-03-11 12:49:42,908 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        (0+1+2+3).toInt().toString(-1704574681) += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:49:42,910 [main:56] - replacing (sum, Int)
2021-03-11 12:49:42,910 [main:38] - replacing sum Int
2021-03-11 12:49:42,910 [main:42] - Getting value of type Int
2021-03-11 12:49:42,990 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:42,990 [main:46] - GENERATED VALUE OF TYPE Int = 1860384923
2021-03-11 12:49:42,990 [main:49] - GENERATED IS CALL =false
2021-03-11 12:49:43,156 [main:55] - randomType = UShort?
2021-03-11 12:49:43,236 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 12:49:43,275 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@2f834fab]
2021-03-11 12:49:43,354 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:49:43,354 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f655756]
2021-03-11 12:49:43,355 [main:66] - Generated call from random type = (18838.toUShort())?.compareTo(125.toUByte()).unaryMinus()
2021-03-11 12:49:43,355 [main:94] - GETTING Int from Int
2021-03-11 12:49:43,390 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6736791a]]
2021-03-11 12:49:43,390 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:49:43,390 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6736791a]
2021-03-11 12:49:43,390 [main:105] - GENERATED CALL = (0+1+2).toInt().inv()
2021-03-11 12:49:43,390 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]]
2021-03-11 12:49:43,390 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]
2021-03-11 12:49:43,492 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:49:43,493 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:49:43,575 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:43,576 [main:105] - GENERATED CALL = (0+1+2).equals("cyeek").compareTo(true)
2021-03-11 12:49:43,576 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@a5b3754]]
2021-03-11 12:49:43,576 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:49:43,676 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:43,676 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@a5b3754]
2021-03-11 12:49:43,676 [main:105] - GENERATED CALL = (0+1+2).compareTo(-1626401052).countLeadingZeroBits()
2021-03-11 12:49:43,676 [main:101] - Case = [public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@241f9269]]
2021-03-11 12:49:43,676 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@241f9269]
2021-03-11 12:49:43,756 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:43,757 [main:105] - GENERATED CALL = (0+1+2).or(1899739451)
2021-03-11 12:49:43,757 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@5e10d1c0]]
2021-03-11 12:49:43,757 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:49:43,757 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@5e10d1c0]
2021-03-11 12:49:43,834 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:49:43,834 [main:105] - GENERATED CALL = (0+1+2).toByte().minus(-98)
2021-03-11 12:49:43,834 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@d0efe34]]
2021-03-11 12:49:43,834 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:49:43,911 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:43,911 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@d0efe34]
2021-03-11 12:49:43,988 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:43,989 [main:105] - GENERATED CALL = (0+1+2).compareTo(-587307424).rotateRight(-785376535)
2021-03-11 12:49:43,989 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7d291fed]]
2021-03-11 12:49:43,989 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:49:44,066 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:44,066 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7d291fed]
2021-03-11 12:49:44,066 [main:105] - GENERATED CALL = (0+1+2).compareTo(834211462).countOneBits()
2021-03-11 12:49:44,067 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76034fc0]]
2021-03-11 12:49:44,067 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76034fc0]
2021-03-11 12:49:44,067 [main:105] - GENERATED CALL = (0+1+2).countTrailingZeroBits()
2021-03-11 12:49:44,067 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@390b15c0]]
2021-03-11 12:49:44,067 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:44,067 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@390b15c0]
2021-03-11 12:49:44,144 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:49:44,145 [main:105] - GENERATED CALL = (0+1+2).toChar().minus('ظ')
2021-03-11 12:49:44,145 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10809a26]]
2021-03-11 12:49:44,145 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:44,145 [main:137] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10809a26]
2021-03-11 12:49:44,145 [main:105] - GENERATED CALL = (0+1+2).toChar().digitToInt()
2021-03-11 12:49:44,145 [main:63] - replacement of sum of type Int is (0+1+2).toChar().minus('ظ')
2021-03-11 12:49:44,222 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:49:44,223 [main:66] - Compilation checking started
2021-03-11 12:49:44,422 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (0+1+2).toChar().minus('ظ') += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:49:44,424 [main:56] - replacing (sum, Int)
2021-03-11 12:49:44,424 [main:38] - replacing sum Int
2021-03-11 12:49:44,424 [main:42] - Getting value of type Int
2021-03-11 12:49:44,503 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:44,503 [main:46] - GENERATED VALUE OF TYPE Int = -498614795
2021-03-11 12:49:44,503 [main:49] - GENERATED IS CALL =false
2021-03-11 12:49:44,504 [main:55] - randomType = A
2021-03-11 12:49:44,602 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:49:44,603 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:49:44,686 [main:194] - Type params = []
2021-03-11 12:49:44,775 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:49:44,776 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:49:44,785 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f664709]
2021-03-11 12:49:44,875 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:44,954 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:44,954 [main:66] - Generated call from random type = (A(1642114177, "yictb")).x.coerceIn(2023456308, -1947410598)
2021-03-11 12:49:44,955 [main:94] - GETTING Int from String
2021-03-11 12:49:44,981 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c9f5998]]
2021-03-11 12:49:44,981 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c9f5998]
2021-03-11 12:49:45,061 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:45,062 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).length.shl(-831082382)
2021-03-11 12:49:45,062 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b80cd8f]]
2021-03-11 12:49:45,062 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:49:45,145 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:49:45,145 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b80cd8f]
2021-03-11 12:49:45,146 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).compareTo("vsztm").inc()
2021-03-11 12:49:45,146 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cca13b8]]
2021-03-11 12:49:45,146 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:49:45,230 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:45,313 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:45,314 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cca13b8]
2021-03-11 12:49:45,396 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-11 12:49:45,396 [main:302] - generating value of type = Int true depth = 1
2021-03-11 12:49:45,397 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).subSequence(-1511971555, 802032372).sumOf({a: Char -> -1648309485})
2021-03-11 12:49:45,397 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3ff9eaf8]]
2021-03-11 12:49:45,397 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3ff9eaf8]
2021-03-11 12:49:45,476 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:45,477 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).length.coerceAtLeast(490695217)
2021-03-11 12:49:45,477 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2814a4a]]
2021-03-11 12:49:45,477 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:49:45,556 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:49:45,556 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).compareTo("ouger").sign
2021-03-11 12:49:45,560 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f655756]]
2021-03-11 12:49:45,560 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f655756]
2021-03-11 12:49:45,560 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).length.unaryMinus()
2021-03-11 12:49:45,560 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@5052b22e]]
2021-03-11 12:49:45,560 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:49:45,658 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:49:45,658 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).compareTo("yhqua").absoluteValue
2021-03-11 12:49:45,659 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ebc0bf5]]
2021-03-11 12:49:45,659 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ebc0bf5]
2021-03-11 12:49:45,742 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:45,742 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).length.and(-98578663)
2021-03-11 12:49:45,742 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62a877f4]]
2021-03-11 12:49:45,742 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:49:45,830 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:49:45,830 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62a877f4]
2021-03-11 12:49:45,830 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).compareTo("sgywf").toInt()
2021-03-11 12:49:45,830 [main:101] - Case = [public val kotlin.CharSequence.lastIndex: kotlin.Int defined in kotlin.text[DeserializedPropertyDescriptor@6df3c7bf]]
2021-03-11 12:49:45,831 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).lastIndex
2021-03-11 12:49:45,831 [main:63] - replacement of sum of type Int is (A(-1427813506, "vtkln").y).length.unaryMinus()
2021-03-11 12:49:45,924 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:49:45,924 [main:66] - Compilation checking started
2021-03-11 12:49:46,123 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (A(-1427813506, "vtkln").y).length.unaryMinus() += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:49:46,125 [main:56] - replacing (str, String)
2021-03-11 12:49:46,125 [main:38] - replacing str String
2021-03-11 12:49:46,125 [main:42] - Getting value of type String
2021-03-11 12:49:46,201 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:49:46,202 [main:46] - GENERATED VALUE OF TYPE String = "nzolx"
2021-03-11 12:49:46,202 [main:49] - GENERATED IS CALL =false
2021-03-11 12:49:46,363 [main:55] - randomType = ArrayList<A?>
2021-03-11 12:49:46,439 [main:302] - generating value of type = ArrayList<A?> false depth = 0
2021-03-11 12:49:46,521 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: A?): ArrayList<A?> = TODO()
2021-03-11 12:49:46,522 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: A?): ArrayList<A?> = TODO()
2021-03-11 12:49:46,601 [main:302] - generating value of type = A false depth = 3
2021-03-11 12:49:46,601 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:49:46,679 [main:194] - Type params = []
2021-03-11 12:49:46,786 [main:302] - generating value of type = Int true depth = 5
2021-03-11 12:49:46,787 [main:302] - generating value of type = String true depth = 5
2021-03-11 12:49:46,787 [main:95] - GENERATED = arrayListOf<A?>(A(2041324902, "hcaoh"))
2021-03-11 12:49:46,987 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@c3a4e3a]
2021-03-11 12:49:46,988 [main:137] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3dbb0cb4]
2021-03-11 12:49:46,988 [main:66] - Generated call from random type = (arrayListOf<A?>(A(2041324902, "hcaoh"))).toArray().contentToString()
2021-03-11 12:49:46,989 [main:94] - GETTING String from Int
2021-03-11 12:49:47,043 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:49:47,044 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:49:47,123 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:47,123 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:49:47,201 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:47,202 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).compareTo(-1500249401).toString(-300056965)
2021-03-11 12:49:47,202 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]]
2021-03-11 12:49:47,202 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:47,202 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]
2021-03-11 12:49:47,280 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:49:47,280 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toChar().plus("scypn")
2021-03-11 12:49:47,280 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]]
2021-03-11 12:49:47,281 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:47,281 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]
2021-03-11 12:49:47,281 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toChar().titlecase()
2021-03-11 12:49:47,281 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]]
2021-03-11 12:49:47,281 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:47,281 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]
2021-03-11 12:49:47,281 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toChar().uppercase()
2021-03-11 12:49:47,281 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:49:47,281 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:49:47,281 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:49:47,358 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:47,359 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toLong().toString(496503661)
2021-03-11 12:49:47,359 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:49:47,359 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:49:47,437 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:49:47,438 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:49:47,517 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:47,518 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).div(5230272995414184056).toString(-1258069295)
2021-03-11 12:49:47,518 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:49:47,518 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:49:47,518 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:49:47,596 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:47,597 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toInt().toString(-1312180027)
2021-03-11 12:49:47,597 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]]
2021-03-11 12:49:47,597 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:49:47,597 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]
2021-03-11 12:49:47,675 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:47,676 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toShort().toString(249401846)
2021-03-11 12:49:47,676 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:49:47,676 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:49:47,754 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:47,755 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toString(211078015)
2021-03-11 12:49:47,755 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]]
2021-03-11 12:49:47,755 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:47,755 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]
2021-03-11 12:49:47,755 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toChar().lowercase()
2021-03-11 12:49:47,755 [main:63] - replacement of str of type String is (A(-1427813506, "vtkln").x).toChar().uppercase()
2021-03-11 12:49:47,834 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:49:47,835 [main:66] - Compilation checking started
2021-03-11 12:49:48,070 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        (A(-1427813506, "vtkln").x).toChar().uppercase() += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:49:48,072 [main:56] - replacing (1, Int)
2021-03-11 12:49:48,072 [main:38] - replacing 1 Int
2021-03-11 12:49:48,072 [main:42] - Getting value of type Int
2021-03-11 12:49:48,150 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:48,150 [main:46] - GENERATED VALUE OF TYPE Int = -246490098
2021-03-11 12:49:48,150 [main:49] - GENERATED IS CALL =false
2021-03-11 12:49:48,473 [main:55] - randomType = ArrayDeque<Short?>?
2021-03-11 12:49:48,550 [main:302] - generating value of type = ArrayDeque<Short?> false depth = 0
2021-03-11 12:49:48,631 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<Short?> = TODO()
2021-03-11 12:49:48,632 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<Short?> = TODO()
2021-03-11 12:49:48,711 [main:95] - GENERATED = ArrayDeque<Short?>()
2021-03-11 12:49:48,892 [main:66] - Generated call from random type = (ArrayDeque<Short?>())?.size.sign
2021-03-11 12:49:48,893 [main:94] - GETTING Int from Int
2021-03-11 12:49:48,944 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d868003]]
2021-03-11 12:49:48,944 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:49:49,026 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:49,027 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d868003]
2021-03-11 12:49:49,105 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:49:49,105 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).compareTo(843157885).minus(7)
2021-03-11 12:49:49,105 [main:101] - Case = [public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6736791a]]
2021-03-11 12:49:49,105 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6736791a]
2021-03-11 12:49:49,105 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).inv()
2021-03-11 12:49:49,105 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@5052b22e]]
2021-03-11 12:49:49,105 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:49:49,106 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toInt().absoluteValue
2021-03-11 12:49:49,106 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62a877f4]]
2021-03-11 12:49:49,106 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:49:49,106 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62a877f4]
2021-03-11 12:49:49,106 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toInt().toInt()
2021-03-11 12:49:49,106 [main:101] - Case = [public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f161575]]
2021-03-11 12:49:49,106 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f161575]
2021-03-11 12:49:49,183 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:49:49,183 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).times(13)
2021-03-11 12:49:49,183 [main:101] - Case = [public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d4a80]]
2021-03-11 12:49:49,183 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d4a80]
2021-03-11 12:49:49,184 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).unaryPlus()
2021-03-11 12:49:49,184 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@13ad634b]]
2021-03-11 12:49:49,184 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:49:49,310 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:49:49,311 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@13ad634b]
2021-03-11 12:49:49,311 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).div(9013263139594398591).countOneBits()
2021-03-11 12:49:49,311 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@5e10d1c0]]
2021-03-11 12:49:49,311 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:49:49,311 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@5e10d1c0]
2021-03-11 12:49:49,394 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:49:49,394 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toByte().minus(-80)
2021-03-11 12:49:49,394 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76034fc0]]
2021-03-11 12:49:49,395 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:49:49,485 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:49,486 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76034fc0]
2021-03-11 12:49:49,486 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).compareTo(663398091).countTrailingZeroBits()
2021-03-11 12:49:49,486 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@a5b3754]]
2021-03-11 12:49:49,486 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:49:49,486 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@a5b3754]
2021-03-11 12:49:49,486 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toInt().countLeadingZeroBits()
2021-03-11 12:49:49,486 [main:63] - replacement of 1 of type Int is (A(-1427813506, "vtkln").x).toByte().minus(-80)
2021-03-11 12:49:49,566 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:49:49,568 [main:56] - replacing (str, String)
2021-03-11 12:49:49,568 [main:38] - replacing str String
2021-03-11 12:49:49,568 [main:42] - Getting value of type String
2021-03-11 12:49:49,645 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:49:49,645 [main:46] - GENERATED VALUE OF TYPE String = "uljtv"
2021-03-11 12:49:49,645 [main:49] - GENERATED IS CALL =false
2021-03-11 12:49:49,646 [main:55] - randomType = A
2021-03-11 12:49:49,722 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:49:49,722 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:49:49,799 [main:194] - Type params = []
2021-03-11 12:49:49,876 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:49:49,876 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:49:49,886 [main:137] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15bff3a4]
2021-03-11 12:49:49,962 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:49,962 [main:66] - Generated call from random type = (A(467344275, "gaqca")).y.takeLast(1085596657)
2021-03-11 12:49:49,963 [main:94] - GETTING String from Int
2021-03-11 12:49:49,993 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:49:49,993 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:49:50,071 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:49:50,072 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:49:50,150 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:50,151 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).div(-8184725087922783182).toString(1746709216)
2021-03-11 12:49:50,151 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:49:50,151 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:49:50,228 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:50,229 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:49:50,328 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:50,329 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).compareTo(1687832795).toString(551233047)
2021-03-11 12:49:50,329 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]]
2021-03-11 12:49:50,329 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:50,329 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]
2021-03-11 12:49:50,329 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toChar().uppercase()
2021-03-11 12:49:50,329 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]]
2021-03-11 12:49:50,329 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:50,329 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]
2021-03-11 12:49:50,329 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toChar().titlecase()
2021-03-11 12:49:50,329 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:49:50,329 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:49:50,414 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:50,414 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toString(2123787805)
2021-03-11 12:49:50,414 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]]
2021-03-11 12:49:50,414 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:50,414 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]
2021-03-11 12:49:50,506 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:49:50,507 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toChar().plus("nbmyw")
2021-03-11 12:49:50,507 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:49:50,507 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:49:50,507 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:49:50,589 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:50,590 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toInt().toString(853142462)
2021-03-11 12:49:50,753 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:49:50,753 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:49:50,753 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:49:50,830 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:50,830 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toLong().toString(-1982362343)
2021-03-11 12:49:50,830 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]]
2021-03-11 12:49:50,830 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:49:50,830 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]
2021-03-11 12:49:50,914 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:50,915 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toByte().toString(-2036623327)
2021-03-11 12:49:50,915 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]]
2021-03-11 12:49:50,915 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:49:50,915 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]
2021-03-11 12:49:50,915 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toChar().lowercase()
2021-03-11 12:49:50,916 [main:63] - replacement of str of type String is (A(-1427813506, "vtkln").x).toInt().toString(853142462)
2021-03-11 12:49:50,993 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:49:50,994 [main:66] - Compilation checking started
2021-03-11 12:49:51,208 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        (A(-1427813506, "vtkln").x).toInt().toString(853142462) += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:49:51,210 [main:56] - replacing (str, String)
2021-03-11 12:49:51,210 [main:38] - replacing str String
2021-03-11 12:49:51,210 [main:42] - Getting value of type String
2021-03-11 12:49:51,287 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:49:51,288 [main:46] - GENERATED VALUE OF TYPE String = "lelyg"
2021-03-11 12:49:51,288 [main:49] - GENERATED IS CALL =false
2021-03-11 12:49:51,367 [main:55] - randomType = A?
2021-03-11 12:49:51,444 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:49:51,445 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:49:51,522 [main:194] - Type params = []
2021-03-11 12:49:51,599 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:49:51,600 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:49:51,608 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22fce58d]
2021-03-11 12:49:51,608 [main:66] - Generated call from random type = (A(-983954426, "dyjry"))?.y.toLowerCase()
2021-03-11 12:49:51,608 [main:94] - GETTING String from String
2021-03-11 12:49:51,624 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@340b14f4]]
2021-03-11 12:49:51,624 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@340b14f4]
2021-03-11 12:49:51,736 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:51,823 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:51,927 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:49:51,932 [main:105] - GENERATED CALL = (str).replaceRange(-1987275527, 1204091933, "alrfj")
2021-03-11 12:49:51,932 [main:101] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1eb803d8]]
2021-03-11 12:49:51,932 [main:137] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1eb803d8]
2021-03-11 12:49:52,020 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:52,020 [main:105] - GENERATED CALL = (str).repeat(-839364670)
2021-03-11 12:49:52,020 [main:101] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@863c31e]]
2021-03-11 12:49:52,020 [main:137] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@863c31e]
2021-03-11 12:49:52,096 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:49:52,097 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:49:52,097 [main:105] - GENERATED CALL = (str).filterNot({a: Char -> false})
2021-03-11 12:49:52,098 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b6d023e]]
2021-03-11 12:49:52,098 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b6d023e]
2021-03-11 12:49:52,175 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 12:49:52,277 [main:43] - GENERATING CALL OF fun <T> emptyList(): Iterable<Int> = TODO()
2021-03-11 12:49:52,278 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyList(): Iterable<Int> = TODO()
2021-03-11 12:49:52,356 [main:95] - GENERATED = emptyList<Int>()
2021-03-11 12:49:52,357 [main:105] - GENERATED CALL = (str).slice(emptyList<Int>())
2021-03-11 12:49:52,357 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7beb8085]]
2021-03-11 12:49:52,357 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7beb8085]
2021-03-11 12:49:52,357 [main:105] - GENERATED CALL = (str).trim()
2021-03-11 12:49:52,357 [main:101] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d460c5b]]
2021-03-11 12:49:52,357 [main:137] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d460c5b]
2021-03-11 12:49:52,357 [main:105] - GENERATED CALL = (str).decapitalize()
2021-03-11 12:49:52,357 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6466768c]]
2021-03-11 12:49:52,357 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6466768c]
2021-03-11 12:49:52,357 [main:105] - GENERATED CALL = (str).trimEnd()
2021-03-11 12:49:52,357 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30dba167]]
2021-03-11 12:49:52,357 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30dba167]
2021-03-11 12:49:52,357 [main:105] - GENERATED CALL = (str).reversed()
2021-03-11 12:49:52,357 [main:101] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7e5ed9ce]]
2021-03-11 12:49:52,357 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7e5ed9ce]
2021-03-11 12:49:52,435 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:49:52,435 [main:105] - GENERATED CALL = (str).plus("pvdlc")
2021-03-11 12:49:52,436 [main:101] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2976238d]]
2021-03-11 12:49:52,436 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2976238d]
2021-03-11 12:49:52,514 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:49:52,515 [main:105] - GENERATED CALL = (str).replaceIndent("wjlmk")
2021-03-11 12:49:52,515 [main:63] - replacement of str of type String is (A(-983954426, "dyjry"))?.y.toLowerCase()
2021-03-11 12:49:52,593 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:49:52,594 [main:66] - Compilation checking started
2021-03-11 12:49:52,796 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        (A(-983954426, "dyjry"))?.y.toLowerCase() += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:49:52,798 [main:56] - replacing (str, String)
2021-03-11 12:49:52,799 [main:38] - replacing str String
2021-03-11 12:49:52,799 [main:42] - Getting value of type String
2021-03-11 12:49:52,901 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:49:52,901 [main:46] - GENERATED VALUE OF TYPE String = "lgugy"
2021-03-11 12:49:52,902 [main:49] - GENERATED IS CALL =false
2021-03-11 12:49:52,902 [main:55] - randomType = A
2021-03-11 12:49:52,985 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:49:52,985 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:49:53,073 [main:194] - Type params = []
2021-03-11 12:49:53,152 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:49:53,152 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:49:53,163 [main:137] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a3ba1fe]
2021-03-11 12:49:53,244 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:53,324 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:49:53,325 [main:66] - Generated call from random type = (A(-1364281605, "ydlnn")).y.padEnd(1141365404, '䣓')
2021-03-11 12:49:53,325 [main:63] - replacement of str of type String is (A(-1364281605, "ydlnn")).y.padEnd(1141365404, '䣓')
2021-03-11 12:49:53,404 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:49:53,405 [main:66] - Compilation checking started
2021-03-11 12:49:53,600 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        (A(-1364281605, "ydlnn")).y.padEnd(1141365404, '䣓') += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:49:53,602 [main:56] - replacing (sum, Int)
2021-03-11 12:49:53,602 [main:38] - replacing sum Int
2021-03-11 12:49:53,602 [main:42] - Getting value of type Int
2021-03-11 12:49:53,687 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:53,687 [main:46] - GENERATED VALUE OF TYPE Int = -903898307
2021-03-11 12:49:53,687 [main:49] - GENERATED IS CALL =false
2021-03-11 12:49:54,034 [main:55] - randomType = Set<Pair<A, HashMap<Float, UShort>>>
2021-03-11 12:49:54,035 [main:94] - GETTING Int from Int
2021-03-11 12:49:54,066 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7d291fed]]
2021-03-11 12:49:54,066 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:49:54,180 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:54,180 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7d291fed]
2021-03-11 12:49:54,180 [main:105] - GENERATED CALL = (0+1+2+3).compareTo(1499483586).countOneBits()
2021-03-11 12:49:54,180 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e], public final val step: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@1b8e1a38]]
2021-03-11 12:49:54,180 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e]
2021-03-11 12:49:54,263 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:49:54,264 [main:105] - GENERATED CALL = (0+1+2+3).rangeTo(32).step
2021-03-11 12:49:54,264 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ebc0bf5]]
2021-03-11 12:49:54,264 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:49:54,264 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ebc0bf5]
2021-03-11 12:49:54,351 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:54,351 [main:105] - GENERATED CALL = (0+1+2+3).toInt().and(277978431)
2021-03-11 12:49:54,351 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d868003]]
2021-03-11 12:49:54,351 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:49:54,351 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d868003]
2021-03-11 12:49:54,429 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:49:54,430 [main:105] - GENERATED CALL = (0+1+2+3).toInt().minus(120)
2021-03-11 12:49:54,430 [main:101] - Case = [public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@216b8aa8]]
2021-03-11 12:49:54,430 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@216b8aa8]
2021-03-11 12:49:54,508 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:54,508 [main:105] - GENERATED CALL = (0+1+2+3).ushr(1143502456)
2021-03-11 12:49:54,508 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@a5b3754]]
2021-03-11 12:49:54,508 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@a5b3754]
2021-03-11 12:49:54,508 [main:105] - GENERATED CALL = (0+1+2+3).countLeadingZeroBits()
2021-03-11 12:49:54,508 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3b8291ff]]
2021-03-11 12:49:54,508 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:49:54,508 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3b8291ff]
2021-03-11 12:49:54,585 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:54,585 [main:105] - GENERATED CALL = (0+1+2+3).toInt().coerceAtMost(1566761732)
2021-03-11 12:49:54,585 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@72cbb805]]
2021-03-11 12:49:54,585 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169]
2021-03-11 12:49:54,586 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@72cbb805]
2021-03-11 12:49:54,586 [main:105] - GENERATED CALL = (0+1+2+3).toFloat().toRawBits()
2021-03-11 12:49:54,586 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@5052b22e]]
2021-03-11 12:49:54,586 [main:105] - GENERATED CALL = (0+1+2+3).absoluteValue
2021-03-11 12:49:54,586 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@5052b22e]]
2021-03-11 12:49:54,586 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:49:54,662 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:54,662 [main:105] - GENERATED CALL = (0+1+2+3).compareTo(-788011338).absoluteValue
2021-03-11 12:49:54,662 [main:63] - replacement of sum of type Int is (0+1+2).toInt().and(-1121279207)+(0+1+2+3).toShort().countTrailingZeroBits()
2021-03-11 12:49:54,739 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-11 12:49:54,739 [main:66] - Compilation checking started
2021-03-11 12:49:54,945 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (0+1+2).toInt().and(-1121279207)+(0+1+2+3).toShort().countTrailingZeroBits() += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:49:54,947 [main:56] - replacing (str, String)
2021-03-11 12:49:54,947 [main:38] - replacing str String
2021-03-11 12:49:54,947 [main:42] - Getting value of type String
2021-03-11 12:49:55,024 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:49:55,024 [main:46] - GENERATED VALUE OF TYPE String = "cciqj"
2021-03-11 12:49:55,024 [main:49] - GENERATED IS CALL =false
2021-03-11 12:49:55,183 [main:55] - randomType = Short?
2021-03-11 12:49:55,259 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:49:55,292 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:49:55,292 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:49:55,393 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:55,394 [main:66] - Generated call from random type = (-12755)?.toLong().toString(-359753657)
2021-03-11 12:49:55,395 [main:94] - GETTING String from Boolean
2021-03-11 12:49:55,405 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:49:55,405 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:49:55,488 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:55,489 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:49:55,577 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:55,578 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).toString(-1883715429)
2021-03-11 12:49:55,578 [main:63] - replacement of str of type String is "cciqj"
2021-03-11 12:49:55,657 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 12:49:55,657 [main:66] - Compilation checking started
2021-03-11 12:49:55,860 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        "cciqj" += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:49:55,861 [main:56] - replacing (sum, Int)
2021-03-11 12:49:55,861 [main:38] - replacing sum Int
2021-03-11 12:49:55,861 [main:42] - Getting value of type Int
2021-03-11 12:49:55,937 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:55,938 [main:46] - GENERATED VALUE OF TYPE Int = -1079579278
2021-03-11 12:49:55,938 [main:49] - GENERATED IS CALL =false
2021-03-11 12:49:56,019 [main:55] - randomType = UShort
2021-03-11 12:49:56,095 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 12:49:56,133 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@7ccdb1a8]
2021-03-11 12:49:56,133 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3ae3dfd2]
2021-03-11 12:49:56,210 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:49:56,210 [main:66] - Generated call from random type = (15520.toUShort()).toByte().times(88)
2021-03-11 12:49:56,211 [main:94] - GETTING Int from String
2021-03-11 12:49:56,235 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12698afb]]
2021-03-11 12:49:56,235 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:49:56,311 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:56,387 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:56,388 [main:137] - GENERATING call of type public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12698afb]
2021-03-11 12:49:56,465 [main:302] - generating value of type = CharArray false depth = 0
2021-03-11 12:49:56,545 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 12:49:56,546 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 12:49:56,658 [main:302] - generating value of type = Char true depth = 3
2021-03-11 12:49:56,659 [main:95] - GENERATED = charArrayOf('짂')
2021-03-11 12:49:56,740 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:56,831 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:56,831 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).subSequence(-243560272, 1056593354).indexOfAny(charArrayOf('짂'), 1188169472, true)
2021-03-11 12:49:56,831 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f1f36c0]]
2021-03-11 12:49:56,831 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:49:56,912 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:56,992 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:56,992 [main:137] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f1f36c0]
2021-03-11 12:49:57,074 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:49:57,152 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:57,229 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:57,230 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).subSequence(775504352, -1327012410).lastIndexOf('髇', 718708774, false)
2021-03-11 12:49:57,230 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cca13b8]]
2021-03-11 12:49:57,230 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:49:57,307 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:57,385 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:57,385 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cca13b8]
2021-03-11 12:49:57,462 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-11 12:49:57,462 [main:302] - generating value of type = Int true depth = 1
2021-03-11 12:49:57,463 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).subSequence(-338579902, -568267291).sumOf({a: Char -> 1477330026})
2021-03-11 12:49:57,463 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21280b00], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@7760e931]]
2021-03-11 12:49:57,463 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21280b00]
2021-03-11 12:49:57,540 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:57,540 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).get(1061032188).code
2021-03-11 12:49:57,540 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6561e48]]
2021-03-11 12:49:57,540 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6561e48]
2021-03-11 12:49:57,654 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:49:57,655 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).length.compareTo(-110)
2021-03-11 12:49:57,655 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12ba5a1a]]
2021-03-11 12:49:57,655 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:49:57,747 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:57,843 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:57,843 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12ba5a1a]
2021-03-11 12:49:57,843 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).subSequence(1817983236, 893132006).count()
2021-03-11 12:49:57,843 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3b8291ff]]
2021-03-11 12:49:57,844 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3b8291ff]
2021-03-11 12:49:57,926 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:57,927 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).length.coerceAtMost(-1842489732)
2021-03-11 12:49:57,927 [main:101] - Case = [public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12698afb]]
2021-03-11 12:49:57,927 [main:137] - GENERATING call of type public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12698afb]
2021-03-11 12:49:58,004 [main:302] - generating value of type = CharArray false depth = 0
2021-03-11 12:49:58,083 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 12:49:58,084 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 12:49:58,163 [main:302] - generating value of type = Char true depth = 3
2021-03-11 12:49:58,164 [main:95] - GENERATED = charArrayOf('ⵊ')
2021-03-11 12:49:58,241 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:58,320 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:49:58,320 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).indexOfAny(charArrayOf('ⵊ'), -1430272486, false)
2021-03-11 12:49:58,320 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@5052b22e]]
2021-03-11 12:49:58,321 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).length.absoluteValue
2021-03-11 12:49:58,321 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d63158f]]
2021-03-11 12:49:58,321 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d63158f]
2021-03-11 12:49:58,321 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).length.dec()
2021-03-11 12:49:58,321 [main:63] - replacement of sum of type Int is (A(-1427813506, "vtkln").y).length.dec()
2021-03-11 12:49:58,403 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:49:58,404 [main:66] - Compilation checking started
2021-03-11 12:49:58,619 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (A(-1427813506, "vtkln").y).length.dec() += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:49:58,622 [main:56] - replacing (sum, Int)
2021-03-11 12:49:58,622 [main:38] - replacing sum Int
2021-03-11 12:49:58,622 [main:42] - Getting value of type Int
2021-03-11 12:49:58,705 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:58,705 [main:46] - GENERATED VALUE OF TYPE Int = -54182776
2021-03-11 12:49:58,705 [main:49] - GENERATED IS CALL =false
2021-03-11 12:49:58,706 [main:55] - randomType = Char
2021-03-11 12:49:58,783 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:49:58,804 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@20381e51]
2021-03-11 12:49:58,905 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:49:58,906 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62a877f4]
2021-03-11 12:49:58,906 [main:66] - Generated call from random type = ('좷').compareTo('ᯮ').toInt()
2021-03-11 12:49:58,906 [main:94] - GETTING Int from Int
2021-03-11 12:49:58,948 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36bf0f77]]
2021-03-11 12:49:58,948 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36bf0f77]
2021-03-11 12:49:58,949 [main:105] - GENERATED CALL = (0+1+2+3).takeHighestOneBit()
2021-03-11 12:49:58,949 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6736791a]]
2021-03-11 12:49:58,949 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:49:59,031 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:59,032 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6736791a]
2021-03-11 12:49:59,032 [main:105] - GENERATED CALL = (0+1+2+3).compareTo(-1197035858).inv()
2021-03-11 12:49:59,032 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7d291fed]]
2021-03-11 12:49:59,032 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:49:59,119 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:59,119 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7d291fed]
2021-03-11 12:49:59,120 [main:105] - GENERATED CALL = (0+1+2+3).compareTo(-899533408).countOneBits()
2021-03-11 12:49:59,120 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3b8291ff]]
2021-03-11 12:49:59,120 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:49:59,200 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:59,200 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3b8291ff]
2021-03-11 12:49:59,277 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:59,277 [main:105] - GENERATED CALL = (0+1+2+3).compareTo(1697205281).coerceAtMost(-1793493420)
2021-03-11 12:49:59,278 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76034fc0]]
2021-03-11 12:49:59,278 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:49:59,278 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76034fc0]
2021-03-11 12:49:59,278 [main:105] - GENERATED CALL = (0+1+2+3).toInt().countTrailingZeroBits()
2021-03-11 12:49:59,278 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18626c8c]]
2021-03-11 12:49:59,278 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:49:59,354 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:49:59,354 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18626c8c]
2021-03-11 12:49:59,430 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:49:59,431 [main:105] - GENERATED CALL = (0+1+2+3).compareTo(1894408504).plus(-82)
2021-03-11 12:49:59,431 [main:101] - Case = [public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18626c8c]]
2021-03-11 12:49:59,431 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18626c8c]
2021-03-11 12:49:59,508 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:49:59,508 [main:105] - GENERATED CALL = (0+1+2+3).plus(79)
2021-03-11 12:49:59,508 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@5052b22e]]
2021-03-11 12:49:59,508 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:49:59,508 [main:105] - GENERATED CALL = (0+1+2+3).toInt().absoluteValue
2021-03-11 12:49:59,509 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@72cbb805]]
2021-03-11 12:49:59,509 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169]
2021-03-11 12:49:59,509 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@72cbb805]
2021-03-11 12:49:59,509 [main:105] - GENERATED CALL = (0+1+2+3).toFloat().toRawBits()
2021-03-11 12:49:59,509 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169], public open fun toInt(): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@65cf0468]]
2021-03-11 12:49:59,509 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169]
2021-03-11 12:49:59,509 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@65cf0468]
2021-03-11 12:49:59,509 [main:105] - GENERATED CALL = (0+1+2+3).toFloat().toInt()
2021-03-11 12:49:59,509 [main:63] - replacement of sum of type Int is (0+1+2+3).toFloat().toInt()
2021-03-11 12:49:59,586 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:49:59,586 [main:66] - Compilation checking started
2021-03-11 12:49:59,783 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (0+1+2+3).toFloat().toInt() += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:49:59,785 [main:56] - replacing (str, String)
2021-03-11 12:49:59,785 [main:38] - replacing str String
2021-03-11 12:49:59,785 [main:42] - Getting value of type String
2021-03-11 12:49:59,862 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:49:59,862 [main:46] - GENERATED VALUE OF TYPE String = "nuctq"
2021-03-11 12:49:59,862 [main:49] - GENERATED IS CALL =false
2021-03-11 12:50:00,142 [main:55] - randomType = MutableMap<LinkedHashSet<A>, Short>
2021-03-11 12:50:00,143 [main:94] - GETTING String from Int
2021-03-11 12:50:00,179 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:50:00,179 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:50:00,260 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:00,261 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:50:00,345 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:00,345 [main:105] - GENERATED CALL = (sum).compareTo(1287695509).toString(1815055588)
2021-03-11 12:50:00,345 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:50:00,346 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:50:00,346 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:50:00,426 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:00,427 [main:105] - GENERATED CALL = (sum).toInt().toString(1450297010)
2021-03-11 12:50:00,427 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:50:00,427 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:50:00,427 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:50:00,513 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:00,513 [main:105] - GENERATED CALL = (sum).toLong().toString(-400914799)
2021-03-11 12:50:00,513 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]]
2021-03-11 12:50:00,513 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:50:00,513 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]
2021-03-11 12:50:00,513 [main:105] - GENERATED CALL = (sum).toChar().lowercase()
2021-03-11 12:50:00,513 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]]
2021-03-11 12:50:00,513 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:50:00,513 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]
2021-03-11 12:50:00,597 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:00,598 [main:105] - GENERATED CALL = (sum).toShort().toString(-292323004)
2021-03-11 12:50:00,598 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:50:00,598 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:50:00,680 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:00,681 [main:105] - GENERATED CALL = (sum).toString(-1303321661)
2021-03-11 12:50:00,684 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:50:00,685 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:50:00,761 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:50:00,761 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:50:00,838 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:00,839 [main:105] - GENERATED CALL = (sum).div(-5916728369057867023).toString(-2036643672)
2021-03-11 12:50:00,839 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]]
2021-03-11 12:50:00,839 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:50:00,839 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]
2021-03-11 12:50:00,839 [main:105] - GENERATED CALL = (sum).toChar().uppercase()
2021-03-11 12:50:00,839 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]]
2021-03-11 12:50:00,839 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:50:00,839 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]
2021-03-11 12:50:00,839 [main:105] - GENERATED CALL = (sum).toChar().titlecase()
2021-03-11 12:50:00,840 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]]
2021-03-11 12:50:00,840 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:50:00,840 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]
2021-03-11 12:50:00,916 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:00,917 [main:105] - GENERATED CALL = (sum).toByte().toString(633254102)
2021-03-11 12:50:00,917 [main:63] - replacement of str of type String is (sum).compareTo(1287695509).toString(1815055588)
2021-03-11 12:50:00,993 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:50:00,994 [main:66] - Compilation checking started
2021-03-11 12:50:01,184 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        (sum).compareTo(1287695509).toString(1815055588) += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:50:01,187 [main:56] - replacing (str, String)
2021-03-11 12:50:01,187 [main:38] - replacing str String
2021-03-11 12:50:01,187 [main:42] - Getting value of type String
2021-03-11 12:50:01,269 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:01,270 [main:46] - GENERATED VALUE OF TYPE String = "zkaxq"
2021-03-11 12:50:01,270 [main:49] - GENERATED IS CALL =false
2021-03-11 12:50:01,471 [main:55] - randomType = List<A>
2021-03-11 12:50:01,472 [main:94] - GETTING String from Int
2021-03-11 12:50:01,514 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]]
2021-03-11 12:50:01,514 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:50:01,514 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]
2021-03-11 12:50:01,608 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:01,608 [main:105] - GENERATED CALL = (sum).toByte().toString(895151856)
2021-03-11 12:50:01,609 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]]
2021-03-11 12:50:01,609 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:50:01,609 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]
2021-03-11 12:50:01,609 [main:105] - GENERATED CALL = (sum).toChar().lowercase()
2021-03-11 12:50:01,609 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]]
2021-03-11 12:50:01,609 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:50:01,609 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]
2021-03-11 12:50:01,609 [main:105] - GENERATED CALL = (sum).toChar().titlecase()
2021-03-11 12:50:01,609 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:50:01,609 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:50:01,696 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:50:01,696 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:50:01,780 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:01,781 [main:105] - GENERATED CALL = (sum).div(2434771215908450007).toString(-224962014)
2021-03-11 12:50:01,781 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:50:01,781 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:50:01,781 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:50:01,862 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:01,862 [main:105] - GENERATED CALL = (sum).toInt().toString(1687551446)
2021-03-11 12:50:01,862 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:50:01,862 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:50:01,939 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:01,939 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:50:02,017 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:02,017 [main:105] - GENERATED CALL = (sum).compareTo(1699211875).toString(1288777986)
2021-03-11 12:50:02,017 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:50:02,017 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:50:02,017 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:50:02,095 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:02,095 [main:105] - GENERATED CALL = (sum).toLong().toString(-1019501798)
2021-03-11 12:50:02,095 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]]
2021-03-11 12:50:02,095 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:50:02,096 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]
2021-03-11 12:50:02,172 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:02,172 [main:105] - GENERATED CALL = (sum).toShort().toString(-573571839)
2021-03-11 12:50:02,172 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]]
2021-03-11 12:50:02,172 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:50:02,172 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]
2021-03-11 12:50:02,172 [main:105] - GENERATED CALL = (sum).toChar().uppercase()
2021-03-11 12:50:02,173 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]]
2021-03-11 12:50:02,173 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:50:02,173 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]
2021-03-11 12:50:02,250 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:02,250 [main:105] - GENERATED CALL = (sum).toChar().plus("vomss")
2021-03-11 12:50:02,250 [main:63] - replacement of str of type String is (sum).toChar().lowercase()
2021-03-11 12:50:02,326 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:50:02,327 [main:66] - Compilation checking started
2021-03-11 12:50:02,514 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        (sum).toChar().lowercase() += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:50:02,515 [main:56] - replacing (sum, Int)
2021-03-11 12:50:02,515 [main:38] - replacing sum Int
2021-03-11 12:50:02,515 [main:42] - Getting value of type Int
2021-03-11 12:50:02,618 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:02,618 [main:46] - GENERATED VALUE OF TYPE Int = -2068566463
2021-03-11 12:50:02,618 [main:49] - GENERATED IS CALL =false
2021-03-11 12:50:02,703 [main:55] - randomType = Long
2021-03-11 12:50:02,797 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:50:02,849 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2fea6abb]
2021-03-11 12:50:02,928 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:02,929 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e53c7a]
2021-03-11 12:50:03,006 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:03,007 [main:66] - Generated call from random type = (-5360973214327444205).compareTo(16).shr(1484169892)
2021-03-11 12:50:03,007 [main:94] - GETTING Int from Int
2021-03-11 12:50:03,046 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@6972dc2f]]
2021-03-11 12:50:03,046 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:50:03,124 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:50:03,124 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).div(-6331247825906046127).sign
2021-03-11 12:50:03,124 [main:101] - Case = [public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b80cd8f]]
2021-03-11 12:50:03,124 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b80cd8f]
2021-03-11 12:50:03,124 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).inc()
2021-03-11 12:50:03,125 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3ff9eaf8]]
2021-03-11 12:50:03,125 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:50:03,125 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3ff9eaf8]
2021-03-11 12:50:03,203 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:03,204 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toInt().coerceAtLeast(-828591637)
2021-03-11 12:50:03,204 [main:101] - Case = [@kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@55f9f89c]]
2021-03-11 12:50:03,204 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@55f9f89c]
2021-03-11 12:50:03,284 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:03,284 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).rem(72)
2021-03-11 12:50:03,284 [main:101] - Case = [public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d63158f]]
2021-03-11 12:50:03,284 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d63158f]
2021-03-11 12:50:03,284 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).dec()
2021-03-11 12:50:03,284 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@72cbb805]]
2021-03-11 12:50:03,284 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169]
2021-03-11 12:50:03,284 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@72cbb805]
2021-03-11 12:50:03,285 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toFloat().toRawBits()
2021-03-11 12:50:03,285 [main:101] - Case = [public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f655756]]
2021-03-11 12:50:03,285 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f655756]
2021-03-11 12:50:03,285 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).unaryMinus()
2021-03-11 12:50:03,285 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ec35323]]
2021-03-11 12:50:03,285 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:50:03,362 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:03,363 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ec35323]
2021-03-11 12:50:03,439 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:03,440 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).compareTo(356926882).rotateLeft(1495355375)
2021-03-11 12:50:03,440 [main:101] - Case = [public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@39041b0c], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@72cbb805]]
2021-03-11 12:50:03,440 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@39041b0c]
2021-03-11 12:50:03,517 [main:302] - generating value of type = Float true depth = 0
2021-03-11 12:50:03,518 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@72cbb805]
2021-03-11 12:50:03,518 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).div(0.6090902f).toRawBits()
2021-03-11 12:50:03,518 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c9f5998]]
2021-03-11 12:50:03,518 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:50:03,596 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:03,596 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c9f5998]
2021-03-11 12:50:03,697 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:03,698 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).compareTo(538229771).shl(289776888)
2021-03-11 12:50:03,698 [main:63] - replacement of sum of type Int is (-5360973214327444205).compareTo(16).shr(1484169892)
2021-03-11 12:50:03,782 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:50:03,782 [main:66] - Compilation checking started
2021-03-11 12:50:03,990 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (-5360973214327444205).compareTo(16).shr(1484169892) += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:50:03,992 [main:56] - replacing (sum, Int)
2021-03-11 12:50:03,992 [main:38] - replacing sum Int
2021-03-11 12:50:03,992 [main:42] - Getting value of type Int
2021-03-11 12:50:04,068 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:04,069 [main:46] - GENERATED VALUE OF TYPE Int = -293623252
2021-03-11 12:50:04,069 [main:49] - GENERATED IS CALL =false
2021-03-11 12:50:04,148 [main:55] - randomType = ULong
2021-03-11 12:50:04,225 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:50:04,265 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@36766740]
2021-03-11 12:50:04,265 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4ba73279]
2021-03-11 12:50:04,265 [main:66] - Generated call from random type = (7534080789937122921.toULong()).toShort().unaryMinus()
2021-03-11 12:50:04,265 [main:94] - GETTING Int from Int
2021-03-11 12:50:04,299 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c9f5998]]
2021-03-11 12:50:04,299 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:50:04,375 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:04,375 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c9f5998]
2021-03-11 12:50:04,452 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:04,452 [main:105] - GENERATED CALL = (0+1).compareTo(-855889129).shl(858006411)
2021-03-11 12:50:04,453 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6561e48]]
2021-03-11 12:50:04,453 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6561e48]
2021-03-11 12:50:04,529 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:04,529 [main:105] - GENERATED CALL = (0+1).compareTo(-76)
2021-03-11 12:50:04,530 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1baa65c8]]
2021-03-11 12:50:04,530 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:50:04,530 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1baa65c8]
2021-03-11 12:50:04,530 [main:105] - GENERATED CALL = (0+1).toShort().unaryPlus()
2021-03-11 12:50:04,530 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ed6eedb]]
2021-03-11 12:50:04,530 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:50:04,530 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ed6eedb]
2021-03-11 12:50:04,607 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:04,607 [main:105] - GENERATED CALL = (0+1).toInt().div(90)
2021-03-11 12:50:04,607 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36bf0f77]]
2021-03-11 12:50:04,607 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:50:04,607 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36bf0f77]
2021-03-11 12:50:04,607 [main:105] - GENERATED CALL = (0+1).toInt().takeHighestOneBit()
2021-03-11 12:50:04,607 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@5052b22e]]
2021-03-11 12:50:04,607 [main:105] - GENERATED CALL = (0+1).absoluteValue
2021-03-11 12:50:04,607 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@a5b3754]]
2021-03-11 12:50:04,607 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:50:04,684 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:04,684 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@a5b3754]
2021-03-11 12:50:04,684 [main:105] - GENERATED CALL = (0+1).compareTo(-1212456720).countLeadingZeroBits()
2021-03-11 12:50:04,685 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36bf0f77]]
2021-03-11 12:50:04,685 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:50:04,762 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:04,762 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36bf0f77]
2021-03-11 12:50:04,763 [main:105] - GENERATED CALL = (0+1).compareTo(2003337707).takeHighestOneBit()
2021-03-11 12:50:04,763 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d868003]]
2021-03-11 12:50:04,763 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:50:04,763 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d868003]
2021-03-11 12:50:04,866 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:04,867 [main:105] - GENERATED CALL = (0+1).toInt().minus(98)
2021-03-11 12:50:04,867 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6561e48]]
2021-03-11 12:50:04,867 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:50:04,867 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6561e48]
2021-03-11 12:50:04,950 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:04,951 [main:105] - GENERATED CALL = (0+1).toInt().compareTo(48)
2021-03-11 12:50:04,951 [main:63] - replacement of sum of type Int is (7534080789937122921.toULong()).toShort().unaryMinus()
2021-03-11 12:50:05,033 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:50:05,033 [main:66] - Compilation checking started
2021-03-11 12:50:05,240 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (7534080789937122921.toULong()).toShort().unaryMinus() += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:50:05,241 [main:56] - replacing (sum, Int)
2021-03-11 12:50:05,242 [main:38] - replacing sum Int
2021-03-11 12:50:05,242 [main:42] - Getting value of type Int
2021-03-11 12:50:05,319 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:05,319 [main:46] - GENERATED VALUE OF TYPE Int = -2054723961
2021-03-11 12:50:05,319 [main:49] - GENERATED IS CALL =false
2021-03-11 12:50:05,320 [main:55] - randomType = String
2021-03-11 12:50:05,397 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:05,422 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:50:05,499 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:05,499 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7d291fed]
2021-03-11 12:50:05,499 [main:66] - Generated call from random type = ("ejluh").compareTo("gagyo").countOneBits()
2021-03-11 12:50:05,500 [main:94] - GETTING Int from Int
2021-03-11 12:50:05,530 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6561e48]]
2021-03-11 12:50:05,530 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6561e48]
2021-03-11 12:50:05,607 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:05,607 [main:105] - GENERATED CALL = (0+1).compareTo(120)
2021-03-11 12:50:05,607 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1f1092b7]]
2021-03-11 12:50:05,607 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:50:05,608 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1f1092b7]
2021-03-11 12:50:05,608 [main:105] - GENERATED CALL = (0+1).toByte().toInt()
2021-03-11 12:50:05,608 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76034fc0]]
2021-03-11 12:50:05,608 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:50:05,608 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76034fc0]
2021-03-11 12:50:05,608 [main:105] - GENERATED CALL = (0+1).toInt().countTrailingZeroBits()
2021-03-11 12:50:05,608 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3ff9eaf8]]
2021-03-11 12:50:05,608 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:50:05,684 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:05,685 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3ff9eaf8]
2021-03-11 12:50:05,762 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:05,763 [main:105] - GENERATED CALL = (0+1).compareTo(-1717495862).coerceAtLeast(-1431904044)
2021-03-11 12:50:05,763 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d63158f]]
2021-03-11 12:50:05,763 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:50:05,763 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d63158f]
2021-03-11 12:50:05,763 [main:105] - GENERATED CALL = (0+1).toInt().dec()
2021-03-11 12:50:05,763 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ebc0bf5]]
2021-03-11 12:50:05,763 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:50:05,840 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:05,841 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ebc0bf5]
2021-03-11 12:50:05,917 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:05,918 [main:105] - GENERATED CALL = (0+1).compareTo(15616965).and(1542212225)
2021-03-11 12:50:05,918 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@32278335]]
2021-03-11 12:50:05,918 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:50:05,918 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@32278335]
2021-03-11 12:50:05,995 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:05,995 [main:105] - GENERATED CALL = (0+1).toShort().compareTo(-33)
2021-03-11 12:50:05,996 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@5052b22e]]
2021-03-11 12:50:05,996 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:50:05,996 [main:105] - GENERATED CALL = (0+1).toInt().absoluteValue
2021-03-11 12:50:05,996 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e], public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@1ca46bf]]
2021-03-11 12:50:05,996 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e]
2021-03-11 12:50:06,111 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:06,112 [main:105] - GENERATED CALL = (0+1).rangeTo(73).endInclusive
2021-03-11 12:50:06,112 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@7760e931]]
2021-03-11 12:50:06,112 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:50:06,112 [main:105] - GENERATED CALL = (0+1).toChar().code
2021-03-11 12:50:06,112 [main:63] - replacement of sum of type Int is (0+1).rangeTo(73).endInclusive
2021-03-11 12:50:06,193 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:50:06,194 [main:66] - Compilation checking started
2021-03-11 12:50:06,457 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (0+1).rangeTo(73).endInclusive += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:50:06,459 [main:56] - replacing (str, String)
2021-03-11 12:50:06,459 [main:38] - replacing str String
2021-03-11 12:50:06,459 [main:42] - Getting value of type String
2021-03-11 12:50:06,537 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:06,538 [main:46] - GENERATED VALUE OF TYPE String = "bcxdt"
2021-03-11 12:50:06,538 [main:49] - GENERATED IS CALL =false
2021-03-11 12:50:06,863 [main:55] - randomType = LinkedHashSet<ArrayDeque<Short>>
2021-03-11 12:50:06,941 [main:302] - generating value of type = LinkedHashSet<ArrayDeque<Short>> false depth = 0
2021-03-11 12:50:07,023 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(): LinkedHashSet<ArrayDeque<Short>> = TODO()
2021-03-11 12:50:07,024 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(): LinkedHashSet<ArrayDeque<Short>> = TODO()
2021-03-11 12:50:07,103 [main:95] - GENERATED = LinkedHashSet<ArrayDeque<Short>>()
2021-03-11 12:50:07,242 [main:137] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@1c7d579c]
2021-03-11 12:50:07,242 [main:137] - GENERATING call of type public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3def229f]
2021-03-11 12:50:07,319 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:50:07,430 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:50:07,510 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:50:07,511 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:50:07,670 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:50:07,671 [main:95] - GENERATED = StringBuilder("ogegc")
2021-03-11 12:50:07,748 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:50:07,829 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:07,907 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:50:07,989 [main:66] - Generated call from random type = (LinkedHashSet<ArrayDeque<Short>>()).toArray().joinToString("nhezc", StringBuilder("ogegc"), StringBuilder(), -452666423, StringBuilder(), null)
2021-03-11 12:50:07,990 [main:94] - GETTING String from Int
2021-03-11 12:50:08,037 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:50:08,038 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:50:08,115 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:50:08,115 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:50:08,193 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:08,193 [main:105] - GENERATED CALL = (0+1).div(-8120723556544851463).toString(-1598831313)
2021-03-11 12:50:08,194 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]]
2021-03-11 12:50:08,194 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:50:08,194 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]
2021-03-11 12:50:08,271 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:08,272 [main:105] - GENERATED CALL = (0+1).toShort().toString(-1017798760)
2021-03-11 12:50:08,272 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:50:08,272 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:50:08,350 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:08,351 [main:105] - GENERATED CALL = (0+1).toString(1971587389)
2021-03-11 12:50:08,351 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:50:08,351 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:50:08,351 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:50:08,431 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:08,432 [main:105] - GENERATED CALL = (0+1).toInt().toString(1409109727)
2021-03-11 12:50:08,432 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]]
2021-03-11 12:50:08,432 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:50:08,432 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]
2021-03-11 12:50:08,432 [main:105] - GENERATED CALL = (0+1).toChar().titlecase()
2021-03-11 12:50:08,433 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:50:08,433 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:50:08,565 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:08,565 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:50:08,648 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:08,648 [main:105] - GENERATED CALL = (0+1).compareTo(-339951646).toString(1857911507)
2021-03-11 12:50:08,648 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]]
2021-03-11 12:50:08,649 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:50:08,649 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]
2021-03-11 12:50:08,741 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:08,741 [main:105] - GENERATED CALL = (0+1).toChar().plus("sepju")
2021-03-11 12:50:08,741 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]]
2021-03-11 12:50:08,741 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:50:08,742 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]
2021-03-11 12:50:08,742 [main:105] - GENERATED CALL = (0+1).toChar().uppercase()
2021-03-11 12:50:08,742 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:50:08,742 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:50:08,742 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:50:08,821 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:08,822 [main:105] - GENERATED CALL = (0+1).toLong().toString(1247208507)
2021-03-11 12:50:08,822 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]]
2021-03-11 12:50:08,822 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:50:08,822 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]
2021-03-11 12:50:08,901 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:08,902 [main:105] - GENERATED CALL = (0+1).toByte().toString(1273836800)
2021-03-11 12:50:08,902 [main:63] - replacement of str of type String is (0+1).toChar().uppercase()
2021-03-11 12:50:08,978 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:50:08,978 [main:66] - Compilation checking started
2021-03-11 12:50:09,172 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        (0+1).toChar().uppercase() += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:50:09,174 [main:56] - replacing (sum, Int)
2021-03-11 12:50:09,174 [main:38] - replacing sum Int
2021-03-11 12:50:09,174 [main:42] - Getting value of type Int
2021-03-11 12:50:09,252 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:09,253 [main:46] - GENERATED VALUE OF TYPE Int = -763966103
2021-03-11 12:50:09,253 [main:49] - GENERATED IS CALL =false
2021-03-11 12:50:09,334 [main:55] - randomType = UByte
2021-03-11 12:50:09,411 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:50:09,448 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@3e938ec6]
2021-03-11 12:50:09,526 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:50:09,526 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e53c7a]
2021-03-11 12:50:09,604 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:09,605 [main:66] - Generated call from random type = (89.toUByte()).compareTo(0.toUByte()).shr(-1389829472)
2021-03-11 12:50:09,606 [main:94] - GETTING Int from Boolean
2021-03-11 12:50:09,618 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6561e48]]
2021-03-11 12:50:09,618 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:50:09,695 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:50:09,695 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6561e48]
2021-03-11 12:50:09,798 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:09,799 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(true).compareTo(-106)
2021-03-11 12:50:09,799 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@5052b22e]]
2021-03-11 12:50:09,799 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:50:09,881 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:50:09,882 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(true).absoluteValue
2021-03-11 12:50:09,882 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e53c7a]]
2021-03-11 12:50:09,882 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:50:09,964 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:50:09,964 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e53c7a]
2021-03-11 12:50:10,063 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:10,064 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).shr(-1524667555)
2021-03-11 12:50:10,064 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@d0efe34]]
2021-03-11 12:50:10,064 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:50:10,142 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:50:10,142 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@d0efe34]
2021-03-11 12:50:10,218 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:10,219 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).rotateRight(1552261726)
2021-03-11 12:50:10,219 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d868003]]
2021-03-11 12:50:10,219 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:50:10,297 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:50:10,298 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d868003]
2021-03-11 12:50:10,376 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:10,376 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).minus(7)
2021-03-11 12:50:10,376 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ec35323]]
2021-03-11 12:50:10,376 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:50:10,454 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:50:10,454 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ec35323]
2021-03-11 12:50:10,531 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:10,532 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(true).rotateLeft(1453246676)
2021-03-11 12:50:10,532 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76034fc0]]
2021-03-11 12:50:10,532 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:50:10,608 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:50:10,609 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76034fc0]
2021-03-11 12:50:10,609 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).countTrailingZeroBits()
2021-03-11 12:50:10,609 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@a5b3754]]
2021-03-11 12:50:10,609 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:50:10,687 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:50:10,688 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@a5b3754]
2021-03-11 12:50:10,688 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(true).countLeadingZeroBits()
2021-03-11 12:50:10,688 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1d132288], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]]
2021-03-11 12:50:10,688 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1d132288]
2021-03-11 12:50:10,790 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:50:10,872 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:50:10,872 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).equals(null).compareTo(false)
2021-03-11 12:50:10,872 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d4a80]]
2021-03-11 12:50:10,872 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:50:10,954 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:50:10,955 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d4a80]
2021-03-11 12:50:10,955 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(true).unaryPlus()
2021-03-11 12:50:10,955 [main:63] - replacement of sum of type Int is (sum == 0+1+2+3+4).compareTo(false).rotateRight(1552261726)
2021-03-11 12:50:11,041 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:50:11,041 [main:66] - Compilation checking started
2021-03-11 12:50:11,249 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (sum == 0+1+2+3+4).compareTo(false).rotateRight(1552261726) += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:50:11,250 [main:56] - replacing (sum, Int)
2021-03-11 12:50:11,250 [main:38] - replacing sum Int
2021-03-11 12:50:11,250 [main:42] - Getting value of type Int
2021-03-11 12:50:11,326 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:11,327 [main:46] - GENERATED VALUE OF TYPE Int = -1045344897
2021-03-11 12:50:11,327 [main:49] - GENERATED IS CALL =false
2021-03-11 12:50:11,486 [main:55] - randomType = LinkedHashSet<Double>
2021-03-11 12:50:11,563 [main:302] - generating value of type = LinkedHashSet<Double> false depth = 0
2021-03-11 12:50:11,643 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Double): LkedHashSet<Double> = TODO()
2021-03-11 12:50:11,644 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Double): LkedHashSet<Double> = TODO()
2021-03-11 12:50:11,722 [main:302] - generating value of type = Double true depth = 3
2021-03-11 12:50:11,722 [main:95] - GENERATED = linkedSetOf<Double>(0.4422631486097436)
2021-03-11 12:50:11,837 [main:137] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@85ea4a7]
2021-03-11 12:50:11,837 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.sumOf(selector: (T) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@34ae4fd9]
2021-03-11 12:50:11,914 [main:302] - generating value of type = Function1<T, Int> false depth = 0
2021-03-11 12:50:11,915 [main:302] - generating value of type = Int true depth = 1
2021-03-11 12:50:11,915 [main:66] - Generated call from random type = (linkedSetOf<Double>(0.4422631486097436)).toArray().sumOf({a: T -> -1050888511})
2021-03-11 12:50:11,915 [main:63] - replacement of sum of type Int is (linkedSetOf<Double>(0.4422631486097436)).toArray().sumOf({a: T -> -1050888511})
2021-03-11 12:50:11,991 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:50:11,992 [main:66] - Compilation checking started
2021-03-11 12:50:12,288 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (linkedSetOf<Double>(0.4422631486097436)).toArray().sumOf({a: T -> -1050888511}) += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:50:12,289 [main:56] - replacing (sum, Int)
2021-03-11 12:50:12,290 [main:38] - replacing sum Int
2021-03-11 12:50:12,290 [main:42] - Getting value of type Int
2021-03-11 12:50:12,368 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:12,368 [main:46] - GENERATED VALUE OF TYPE Int = -797955972
2021-03-11 12:50:12,368 [main:49] - GENERATED IS CALL =false
2021-03-11 12:50:12,531 [main:55] - randomType = Pair<Int, Function1<A, A>>
2021-03-11 12:50:12,608 [main:302] - generating value of type = Pair<Int, Function1<A, A>> false depth = 0
2021-03-11 12:50:12,691 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Int, second: Function1<A, A>): Pair<Int, Function1<A, A>> = TODO()
2021-03-11 12:50:12,692 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Int, second: Function1<A, A>): Pair<Int, Function1<A, A>> = TODO()
2021-03-11 12:50:12,772 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:50:12,772 [main:302] - generating value of type = Function1<A, A> false depth = 3
2021-03-11 12:50:12,773 [main:302] - generating value of type = A false depth = 4
2021-03-11 12:50:12,773 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:50:12,852 [main:194] - Type params = []
2021-03-11 12:50:12,932 [main:302] - generating value of type = Int true depth = 6
2021-03-11 12:50:12,933 [main:302] - generating value of type = String true depth = 6
2021-03-11 12:50:12,933 [main:95] - GENERATED = Pair<Int, Function1<A, A>>(507308688, {a: A -> A(-328055646, "kciwv")})
2021-03-11 12:50:12,953 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b80cd8f]
2021-03-11 12:50:12,954 [main:66] - Generated call from random type = (Pair<Int, Function1<A, A>>(507308688, {a: A -> A(-328055646, "kciwv")})).first.inc()
2021-03-11 12:50:12,954 [main:94] - GETTING Int from Int
2021-03-11 12:50:12,998 [main:101] - Case = [public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62a877f4]]
2021-03-11 12:50:12,998 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62a877f4]
2021-03-11 12:50:12,999 [main:105] - GENERATED CALL = (0+1+2).toInt()
2021-03-11 12:50:12,999 [main:101] - Case = [@kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@55f9f89c]]
2021-03-11 12:50:12,999 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@55f9f89c]
2021-03-11 12:50:13,077 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:13,078 [main:105] - GENERATED CALL = (0+1+2).rem(36)
2021-03-11 12:50:13,078 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ec35323]]
2021-03-11 12:50:13,078 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:50:13,078 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ec35323]
2021-03-11 12:50:13,156 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:13,157 [main:105] - GENERATED CALL = (0+1+2).toInt().rotateLeft(-514824773)
2021-03-11 12:50:13,157 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d], @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@33616e79]]
2021-03-11 12:50:13,157 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d]
2021-03-11 12:50:13,234 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:50:13,234 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@33616e79]
2021-03-11 12:50:13,235 [main:105] - GENERATED CALL = (0+1+2).div(0.17027372755657688).roundToInt()
2021-03-11 12:50:13,235 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@5052b22e]]
2021-03-11 12:50:13,235 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:50:13,235 [main:105] - GENERATED CALL = (0+1+2).toInt().absoluteValue
2021-03-11 12:50:13,235 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1baa65c8]]
2021-03-11 12:50:13,235 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:50:13,235 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1baa65c8]
2021-03-11 12:50:13,235 [main:105] - GENERATED CALL = (0+1+2).toShort().unaryPlus()
2021-03-11 12:50:13,235 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@216b8aa8]]
2021-03-11 12:50:13,235 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:50:13,235 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@216b8aa8]
2021-03-11 12:50:13,312 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:13,313 [main:105] - GENERATED CALL = (0+1+2).toInt().ushr(-2125150618)
2021-03-11 12:50:13,313 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2d4ffd58]]
2021-03-11 12:50:13,313 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:50:13,313 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2d4ffd58]
2021-03-11 12:50:13,313 [main:105] - GENERATED CALL = (0+1+2).toLong().countTrailingZeroBits()
2021-03-11 12:50:13,313 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3ae3dfd2]]
2021-03-11 12:50:13,313 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:50:13,313 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3ae3dfd2]
2021-03-11 12:50:13,392 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:13,392 [main:105] - GENERATED CALL = (0+1+2).toByte().times(112)
2021-03-11 12:50:13,392 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.ranges.IntRange.random(): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1c24ca3b]]
2021-03-11 12:50:13,392 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e]
2021-03-11 12:50:13,514 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:13,514 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.ranges.IntRange.random(): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1c24ca3b]
2021-03-11 12:50:13,515 [main:105] - GENERATED CALL = (0+1+2).rangeTo(102).random()
2021-03-11 12:50:13,515 [main:63] - replacement of sum of type Int is (0+1+2).div(0.17027372755657688).roundToInt()
2021-03-11 12:50:13,598 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:50:13,598 [main:66] - Compilation checking started
2021-03-11 12:50:13,833 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (0+1+2).div(0.17027372755657688).roundToInt() += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:50:13,835 [main:56] - replacing (sum, Int)
2021-03-11 12:50:13,835 [main:38] - replacing sum Int
2021-03-11 12:50:13,835 [main:42] - Getting value of type Int
2021-03-11 12:50:13,912 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:13,912 [main:46] - GENERATED VALUE OF TYPE Int = 1722566330
2021-03-11 12:50:13,912 [main:49] - GENERATED IS CALL =false
2021-03-11 12:50:13,991 [main:55] - randomType = Long
2021-03-11 12:50:14,068 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:50:14,097 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:50:14,098 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ebc0bf5]
2021-03-11 12:50:14,174 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:14,174 [main:66] - Generated call from random type = (-1092969908099914652).toInt().and(1949280377)
2021-03-11 12:50:14,174 [main:94] - GETTING Int from Int
2021-03-11 12:50:14,205 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@7760e931]]
2021-03-11 12:50:14,205 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:50:14,206 [main:105] - GENERATED CALL = (0+1+2+3).toChar().code
2021-03-11 12:50:14,206 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@216b8aa8]]
2021-03-11 12:50:14,206 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:50:14,282 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:14,282 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@216b8aa8]
2021-03-11 12:50:14,359 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:14,360 [main:105] - GENERATED CALL = (0+1+2+3).compareTo(-299154083).ushr(1310603476)
2021-03-11 12:50:14,360 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18626c8c]]
2021-03-11 12:50:14,360 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:50:14,437 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:14,438 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18626c8c]
2021-03-11 12:50:14,514 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:14,515 [main:105] - GENERATED CALL = (0+1+2+3).compareTo(-1659857593).plus(98)
2021-03-11 12:50:14,515 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d868003]]
2021-03-11 12:50:14,515 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:50:14,515 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d868003]
2021-03-11 12:50:14,592 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:14,592 [main:105] - GENERATED CALL = (0+1+2+3).toInt().minus(13)
2021-03-11 12:50:14,592 [main:101] - Case = [public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ed6eedb]]
2021-03-11 12:50:14,592 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ed6eedb]
2021-03-11 12:50:14,668 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:14,668 [main:105] - GENERATED CALL = (0+1+2+3).div(-60)
2021-03-11 12:50:14,668 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@446340cf]]
2021-03-11 12:50:14,668 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@446340cf]
2021-03-11 12:50:14,669 [main:105] - GENERATED CALL = (0+1+2+3).takeLowestOneBit()
2021-03-11 12:50:14,669 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76034fc0]]
2021-03-11 12:50:14,669 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76034fc0]
2021-03-11 12:50:14,669 [main:105] - GENERATED CALL = (0+1+2+3).countTrailingZeroBits()
2021-03-11 12:50:14,669 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ed6eedb]]
2021-03-11 12:50:14,669 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:50:14,669 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ed6eedb]
2021-03-11 12:50:14,781 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:14,782 [main:105] - GENERATED CALL = (0+1+2+3).toInt().div(-34)
2021-03-11 12:50:14,782 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@241f9269]]
2021-03-11 12:50:14,782 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:50:14,865 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:14,865 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@241f9269]
2021-03-11 12:50:14,948 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:14,948 [main:105] - GENERATED CALL = (0+1+2+3).compareTo(1823725437).or(-770325247)
2021-03-11 12:50:14,948 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e], public final val last: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@1e6a92d2]]
2021-03-11 12:50:14,948 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e]
2021-03-11 12:50:15,038 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:15,039 [main:105] - GENERATED CALL = (0+1+2+3).rangeTo(55).last
2021-03-11 12:50:15,039 [main:63] - replacement of sum of type Int is (0+1+2+3).toInt().minus(13)
2021-03-11 12:50:15,124 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:50:15,124 [main:66] - Compilation checking started
2021-03-11 12:50:15,319 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (0+1+2+3).toInt().minus(13) += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:50:15,321 [main:56] - replacing (str, String)
2021-03-11 12:50:15,321 [main:38] - replacing str String
2021-03-11 12:50:15,321 [main:42] - Getting value of type String
2021-03-11 12:50:15,399 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:15,399 [main:46] - GENERATED VALUE OF TYPE String = "eptyz"
2021-03-11 12:50:15,399 [main:49] - GENERATED IS CALL =false
2021-03-11 12:50:15,559 [main:55] - randomType = MutableMap<Boolean, Float>
2021-03-11 12:50:15,560 [main:94] - GETTING String from Int
2021-03-11 12:50:15,591 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]]
2021-03-11 12:50:15,592 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:50:15,592 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]
2021-03-11 12:50:15,592 [main:105] - GENERATED CALL = (0+1+2+3).toChar().uppercase()
2021-03-11 12:50:15,592 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:50:15,592 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:50:15,669 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:15,670 [main:105] - GENERATED CALL = (0+1+2+3).toString(-1303996892)
2021-03-11 12:50:15,670 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]]
2021-03-11 12:50:15,670 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:50:15,670 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]
2021-03-11 12:50:15,670 [main:105] - GENERATED CALL = (0+1+2+3).toChar().titlecase()
2021-03-11 12:50:15,670 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:50:15,670 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:50:15,748 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:15,748 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:50:15,827 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:15,828 [main:105] - GENERATED CALL = (0+1+2+3).compareTo(-2013901442).toString(-891042255)
2021-03-11 12:50:15,828 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:50:15,828 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:50:15,828 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:50:15,905 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:15,905 [main:105] - GENERATED CALL = (0+1+2+3).toLong().toString(1385733594)
2021-03-11 12:50:15,906 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]]
2021-03-11 12:50:15,906 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:50:15,906 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]
2021-03-11 12:50:15,906 [main:105] - GENERATED CALL = (0+1+2+3).toChar().lowercase()
2021-03-11 12:50:15,906 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]]
2021-03-11 12:50:15,906 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:50:15,906 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]
2021-03-11 12:50:15,983 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:15,984 [main:105] - GENERATED CALL = (0+1+2+3).toByte().toString(-1249229365)
2021-03-11 12:50:15,984 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]]
2021-03-11 12:50:15,984 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:50:15,984 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]
2021-03-11 12:50:16,090 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:16,090 [main:105] - GENERATED CALL = (0+1+2+3).toShort().toString(-130211145)
2021-03-11 12:50:16,090 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:50:16,091 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:50:16,174 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:50:16,174 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:50:16,264 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:16,265 [main:105] - GENERATED CALL = (0+1+2+3).div(-1060338242566787546).toString(-357501534)
2021-03-11 12:50:16,265 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:50:16,265 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:50:16,265 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:50:16,347 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:16,347 [main:105] - GENERATED CALL = (0+1+2+3).toInt().toString(242933751)
2021-03-11 12:50:16,347 [main:63] - replacement of str of type String is "eptyz"
2021-03-11 12:50:16,427 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 12:50:16,427 [main:66] - Compilation checking started
2021-03-11 12:50:16,632 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        "eptyz" += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:50:16,633 [main:56] - replacing (sum, Int)
2021-03-11 12:50:16,634 [main:38] - replacing sum Int
2021-03-11 12:50:16,634 [main:42] - Getting value of type Int
2021-03-11 12:50:16,711 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:16,711 [main:46] - GENERATED VALUE OF TYPE Int = 9644354
2021-03-11 12:50:16,711 [main:49] - GENERATED IS CALL =false
2021-03-11 12:50:16,875 [main:55] - randomType = Short?
2021-03-11 12:50:16,952 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:50:16,986 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@636fb5ae]
2021-03-11 12:50:16,986 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@4966235c]
2021-03-11 12:50:17,062 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:17,063 [main:66] - Generated call from random type = (14352)?.toByte().div(18)
2021-03-11 12:50:17,063 [main:94] - GETTING Int from Int
2021-03-11 12:50:17,094 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ebc0bf5]]
2021-03-11 12:50:17,094 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:50:17,170 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:17,170 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ebc0bf5]
2021-03-11 12:50:17,246 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:17,247 [main:105] - GENERATED CALL = (0+1+2).compareTo(1540260603).and(1749515528)
2021-03-11 12:50:17,247 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c9f5998]]
2021-03-11 12:50:17,247 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:50:17,247 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c9f5998]
2021-03-11 12:50:17,348 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:17,348 [main:105] - GENERATED CALL = (0+1+2).toInt().shl(-1132914629)
2021-03-11 12:50:17,348 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2814a4a]]
2021-03-11 12:50:17,348 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:50:17,430 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:17,431 [main:105] - GENERATED CALL = (0+1+2).compareTo(1530574367).sign
2021-03-11 12:50:17,431 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7d291fed]]
2021-03-11 12:50:17,431 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7d291fed]
2021-03-11 12:50:17,431 [main:105] - GENERATED CALL = (0+1+2).countOneBits()
2021-03-11 12:50:17,431 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@745deaed]]
2021-03-11 12:50:17,431 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:50:17,431 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@745deaed]
2021-03-11 12:50:17,432 [main:105] - GENERATED CALL = (0+1+2).toByte().countOneBits()
2021-03-11 12:50:17,432 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d], public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@632c8bb9]]
2021-03-11 12:50:17,432 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d]
2021-03-11 12:50:17,514 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:50:17,515 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@632c8bb9]
2021-03-11 12:50:17,515 [main:105] - GENERATED CALL = (0+1+2).div(0.26553098546134923).toInt()
2021-03-11 12:50:17,515 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1c62794d]]
2021-03-11 12:50:17,515 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:50:17,515 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1c62794d]
2021-03-11 12:50:17,603 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:17,604 [main:105] - GENERATED CALL = (0+1+2).toByte().compareTo(50)
2021-03-11 12:50:17,604 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76034fc0]]
2021-03-11 12:50:17,604 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:50:17,604 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76034fc0]
2021-03-11 12:50:17,604 [main:105] - GENERATED CALL = (0+1+2).toInt().countTrailingZeroBits()
2021-03-11 12:50:17,604 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@241f9269]]
2021-03-11 12:50:17,604 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:50:17,684 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:17,684 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@241f9269]
2021-03-11 12:50:17,760 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:17,761 [main:105] - GENERATED CALL = (0+1+2).compareTo(-96369731).or(-721898447)
2021-03-11 12:50:17,761 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62a877f4]]
2021-03-11 12:50:17,761 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:50:17,761 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62a877f4]
2021-03-11 12:50:17,761 [main:105] - GENERATED CALL = (0+1+2).toInt().toInt()
2021-03-11 12:50:17,761 [main:63] - replacement of sum of type Int is (0+1+2).countOneBits()
2021-03-11 12:50:17,837 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:50:17,837 [main:66] - Compilation checking started
2021-03-11 12:50:18,032 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (0+1+2).countOneBits() += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:50:18,034 [main:56] - replacing (str, String)
2021-03-11 12:50:18,034 [main:38] - replacing str String
2021-03-11 12:50:18,034 [main:42] - Getting value of type String
2021-03-11 12:50:18,111 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:18,111 [main:46] - GENERATED VALUE OF TYPE String = "fyrvx"
2021-03-11 12:50:18,112 [main:49] - GENERATED IS CALL =false
2021-03-11 12:50:18,112 [main:55] - randomType = A
2021-03-11 12:50:18,189 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:50:18,189 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:50:18,267 [main:194] - Type params = []
2021-03-11 12:50:18,343 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:50:18,344 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:50:18,353 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30dba167]
2021-03-11 12:50:18,353 [main:66] - Generated call from random type = (A(-2091079785, "qbgkc")).y.reversed()
2021-03-11 12:50:18,354 [main:63] - replacement of str of type String is (A(-2091079785, "qbgkc")).y.reversed()
2021-03-11 12:50:18,430 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:50:18,430 [main:66] - Compilation checking started
2021-03-11 12:50:18,642 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        (A(-2091079785, "qbgkc")).y.reversed() += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:50:18,644 [main:56] - replacing (str, String)
2021-03-11 12:50:18,644 [main:38] - replacing str String
2021-03-11 12:50:18,644 [main:42] - Getting value of type String
2021-03-11 12:50:18,747 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:18,747 [main:46] - GENERATED VALUE OF TYPE String = "pjoim"
2021-03-11 12:50:18,747 [main:49] - GENERATED IS CALL =false
2021-03-11 12:50:18,912 [main:55] - randomType = Map<Long, A>
2021-03-11 12:50:18,912 [main:94] - GETTING String from String
2021-03-11 12:50:18,940 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d3a6837]]
2021-03-11 12:50:18,940 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d3a6837]
2021-03-11 12:50:18,940 [main:105] - GENERATED CALL = (str).trimStart()
2021-03-11 12:50:18,940 [main:101] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@863c31e]]
2021-03-11 12:50:18,940 [main:137] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@863c31e]
2021-03-11 12:50:19,017 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:50:19,017 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:50:19,018 [main:105] - GENERATED CALL = (str).filterNot({a: Char -> true})
2021-03-11 12:50:19,018 [main:101] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1eb803d8]]
2021-03-11 12:50:19,018 [main:137] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1eb803d8]
2021-03-11 12:50:19,094 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:19,095 [main:105] - GENERATED CALL = (str).repeat(-136122093)
2021-03-11 12:50:19,095 [main:101] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31fa72b]]
2021-03-11 12:50:19,095 [main:137] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31fa72b]
2021-03-11 12:50:19,172 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:19,172 [main:105] - GENERATED CALL = (str).dropLast(-1730359327)
2021-03-11 12:50:19,172 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b6d023e]]
2021-03-11 12:50:19,172 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b6d023e]
2021-03-11 12:50:19,250 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 12:50:19,333 [main:43] - GENERATING CALL OF fun <E> buildList(capacity: kotlin.Int, builderAction: kotlin.collections.MutableList<Int>.()->kotlin.Unit): Iterable<Int> = TODO()
2021-03-11 12:50:19,334 [main:61] - WITHOUT TYPE PARAMS = fun <E> buildList(capacity: kotlin.Int, builderAction: kotlin.collections.MutableList<Int>.()->kotlin.Unit): Iterable<Int> = TODO()
2021-03-11 12:50:19,573 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:50:19,574 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<MutableList<Int>, Unit> false depth = 3
2021-03-11 12:50:19,574 [main:302] - generating value of type = Unit false depth = 4
2021-03-11 12:50:19,660 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:50:19,662 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:50:19,826 [main:302] - generating value of type = Boolean true depth = 7
2021-03-11 12:50:19,826 [main:95] - GENERATED = check(false)
2021-03-11 12:50:19,827 [main:95] - GENERATED = buildList<Int>(1832161743, { check(false)})
2021-03-11 12:50:19,827 [main:105] - GENERATED CALL = (str).slice(buildList<Int>(1832161743, { check(false)}))
2021-03-11 12:50:19,827 [main:101] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a0c6009]]
2021-03-11 12:50:19,827 [main:137] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a0c6009]
2021-03-11 12:50:19,948 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:50:19,948 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:50:19,949 [main:105] - GENERATED CALL = (str).takeLastWhile({a: Char -> false})
2021-03-11 12:50:19,949 [main:101] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49d8da2a]]
2021-03-11 12:50:19,949 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49d8da2a]
2021-03-11 12:50:20,030 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:50:20,114 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:50:20,115 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:50:20,285 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 12:50:20,288 [main:95] - GENERATED = StringBuilder("qgysh")
2021-03-11 12:50:20,365 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:50:20,365 [main:105] - GENERATED CALL = (str).commonPrefixWith(StringBuilder("qgysh"), false)
2021-03-11 12:50:20,365 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21280b00], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]]
2021-03-11 12:50:20,365 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21280b00]
2021-03-11 12:50:20,443 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:20,443 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]
2021-03-11 12:50:20,443 [main:105] - GENERATED CALL = (str).get(-1660685891).titlecase()
2021-03-11 12:50:20,443 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a1cf14c]]
2021-03-11 12:50:20,443 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:50:20,520 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:20,597 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:20,597 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a1cf14c]
2021-03-11 12:50:20,674 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:20,751 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:20,752 [main:105] - GENERATED CALL = (str).subSequence(686173890, 389015371).substring(572489132, -1704908950)
2021-03-11 12:50:20,753 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@340b14f4]]
2021-03-11 12:50:20,753 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@340b14f4]
2021-03-11 12:50:20,829 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:20,906 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:21,010 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:50:21,095 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:50:21,096 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:50:21,277 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 12:50:21,281 [main:95] - GENERATED = StringBuilder("edwyq")
2021-03-11 12:50:21,281 [main:105] - GENERATED CALL = (str).replaceRange(-1088127183, 192413524, StringBuilder("edwyq"))
2021-03-11 12:50:21,281 [main:63] - replacement of str of type String is (str).takeLastWhile({a: Char -> false})
2021-03-11 12:50:21,366 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:50:21,366 [main:66] - Compilation checking started
2021-03-11 12:50:21,573 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        (str).takeLastWhile({a: Char -> false}) += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:50:21,575 [main:56] - replacing (sum, Int)
2021-03-11 12:50:21,575 [main:38] - replacing sum Int
2021-03-11 12:50:21,575 [main:42] - Getting value of type Int
2021-03-11 12:50:21,656 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:21,656 [main:46] - GENERATED VALUE OF TYPE Int = -272768335
2021-03-11 12:50:21,656 [main:49] - GENERATED IS CALL =false
2021-03-11 12:50:21,913 [main:55] - randomType = Pair<LinkedHashSet<Short>, A>
2021-03-11 12:50:21,994 [main:302] - generating value of type = Pair<LinkedHashSet<Short>, A> false depth = 0
2021-03-11 12:50:22,080 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: LinkedHashSet<Short>, second: A): Pair<LinkedHashSet<Short>, A> = TODO()
2021-03-11 12:50:22,082 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: LinkedHashSet<Short>, second: A): Pair<LinkedHashSet<Short>, A> = TODO()
2021-03-11 12:50:22,164 [main:302] - generating value of type = LinkedHashSet<Short> false depth = 3
2021-03-11 12:50:22,249 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Short): LkedHashSet<Short> = TODO()
2021-03-11 12:50:22,250 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Short): LkedHashSet<Short> = TODO()
2021-03-11 12:50:22,365 [main:302] - generating value of type = Short true depth = 6
2021-03-11 12:50:22,365 [main:95] - GENERATED = linkedSetOf<Short>(-2968)
2021-03-11 12:50:22,366 [main:302] - generating value of type = A false depth = 3
2021-03-11 12:50:22,366 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:50:22,449 [main:194] - Type params = []
2021-03-11 12:50:22,531 [main:302] - generating value of type = Int true depth = 5
2021-03-11 12:50:22,532 [main:302] - generating value of type = String true depth = 5
2021-03-11 12:50:22,532 [main:95] - GENERATED = Pair<LinkedHashSet<Short>, A>(linkedSetOf<Short>(-2968), A(1384237144, "tbezp"))
2021-03-11 12:50:22,560 [main:137] - GENERATING call of type public final operator fun component1(): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@70bb2ecf]
2021-03-11 12:50:22,561 [main:66] - Generated call from random type = (Pair<LinkedHashSet<Short>, A>(linkedSetOf<Short>(-2968), A(1384237144, "tbezp"))).second.component1()
2021-03-11 12:50:22,561 [main:94] - GETTING Int from Int
2021-03-11 12:50:22,612 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@588beded]]
2021-03-11 12:50:22,613 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:50:22,613 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@588beded]
2021-03-11 12:50:22,693 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:22,694 [main:105] - GENERATED CALL = (0+1+2+3).toShort().plus(88)
2021-03-11 12:50:22,694 [main:101] - Case = [public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@39041b0c], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4c4a428d]]
2021-03-11 12:50:22,694 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@39041b0c]
2021-03-11 12:50:22,772 [main:302] - generating value of type = Float true depth = 0
2021-03-11 12:50:22,772 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4c4a428d]
2021-03-11 12:50:22,773 [main:105] - GENERATED CALL = (0+1+2+3).div(0.5627068f).toBits()
2021-03-11 12:50:22,773 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1f1092b7]]
2021-03-11 12:50:22,773 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:50:22,773 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1f1092b7]
2021-03-11 12:50:22,773 [main:105] - GENERATED CALL = (0+1+2+3).toByte().toInt()
2021-03-11 12:50:22,773 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@446340cf]]
2021-03-11 12:50:22,773 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:50:22,851 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:22,852 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@446340cf]
2021-03-11 12:50:22,852 [main:105] - GENERATED CALL = (0+1+2+3).compareTo(1564092935).takeLowestOneBit()
2021-03-11 12:50:22,852 [main:101] - Case = [public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36845587]]
2021-03-11 12:50:22,852 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36845587]
2021-03-11 12:50:22,931 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:22,931 [main:105] - GENERATED CALL = (0+1+2+3).xor(517709657)
2021-03-11 12:50:22,931 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e], public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@1ca46bf]]
2021-03-11 12:50:22,931 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e]
2021-03-11 12:50:23,009 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:23,010 [main:105] - GENERATED CALL = (0+1+2+3).rangeTo(74).endInclusive
2021-03-11 12:50:23,010 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@5052b22e]]
2021-03-11 12:50:23,010 [main:105] - GENERATED CALL = (0+1+2+3).absoluteValue
2021-03-11 12:50:23,010 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62a877f4]]
2021-03-11 12:50:23,010 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:50:23,089 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:23,089 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62a877f4]
2021-03-11 12:50:23,090 [main:105] - GENERATED CALL = (0+1+2+3).compareTo(-2108388102).toInt()
2021-03-11 12:50:23,090 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@20381e51]]
2021-03-11 12:50:23,090 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:50:23,090 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@20381e51]
2021-03-11 12:50:23,168 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:50:23,169 [main:105] - GENERATED CALL = (0+1+2+3).toChar().compareTo('璺')
2021-03-11 12:50:23,169 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@d0efe34]]
2021-03-11 12:50:23,169 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:50:23,169 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@d0efe34]
2021-03-11 12:50:23,246 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:23,246 [main:105] - GENERATED CALL = (0+1+2+3).toInt().rotateRight(-316748037)
2021-03-11 12:50:23,246 [main:63] - replacement of sum of type Int is (0+1+2+3).toInt().rotateRight(-316748037)
2021-03-11 12:50:23,323 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:50:23,324 [main:66] - Compilation checking started
2021-03-11 12:50:23,518 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (0+1+2+3).toInt().rotateRight(-316748037) += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:50:23,520 [main:56] - replacing (sum, Int)
2021-03-11 12:50:23,521 [main:38] - replacing sum Int
2021-03-11 12:50:23,521 [main:42] - Getting value of type Int
2021-03-11 12:50:23,612 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:23,612 [main:46] - GENERATED VALUE OF TYPE Int = -1900601582
2021-03-11 12:50:23,612 [main:49] - GENERATED IS CALL =false
2021-03-11 12:50:23,613 [main:55] - randomType = A
2021-03-11 12:50:23,721 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:50:23,721 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:50:23,811 [main:194] - Type params = []
2021-03-11 12:50:23,903 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:50:23,903 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:50:23,914 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d63158f]
2021-03-11 12:50:23,914 [main:66] - Generated call from random type = (A(-1259051990, "tbqxu")).x.dec()
2021-03-11 12:50:23,914 [main:94] - GETTING Int from Int
2021-03-11 12:50:23,963 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76034fc0]]
2021-03-11 12:50:23,963 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:50:24,046 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:24,047 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76034fc0]
2021-03-11 12:50:24,047 [main:105] - GENERATED CALL = (0+1+2).compareTo(2085553647).countTrailingZeroBits()
2021-03-11 12:50:24,047 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f655756]]
2021-03-11 12:50:24,047 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:50:24,128 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:24,128 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f655756]
2021-03-11 12:50:24,129 [main:105] - GENERATED CALL = (0+1+2).compareTo(1374401348).unaryMinus()
2021-03-11 12:50:24,129 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d63158f]]
2021-03-11 12:50:24,129 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:50:24,209 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:24,209 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d63158f]
2021-03-11 12:50:24,209 [main:105] - GENERATED CALL = (0+1+2).compareTo(1895582979).dec()
2021-03-11 12:50:24,209 [main:101] - Case = [@kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@55f9f89c]]
2021-03-11 12:50:24,209 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@55f9f89c]
2021-03-11 12:50:24,287 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:24,287 [main:105] - GENERATED CALL = (0+1+2).rem(96)
2021-03-11 12:50:24,287 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@61aa5dbf]]
2021-03-11 12:50:24,287 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:50:24,287 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@61aa5dbf]
2021-03-11 12:50:24,364 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:24,364 [main:105] - GENERATED CALL = (0+1+2).toShort().rem(-88)
2021-03-11 12:50:24,364 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62a877f4]]
2021-03-11 12:50:24,364 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:50:24,364 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62a877f4]
2021-03-11 12:50:24,365 [main:105] - GENERATED CALL = (0+1+2).toInt().toInt()
2021-03-11 12:50:24,365 [main:101] - Case = [public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ebc0bf5]]
2021-03-11 12:50:24,365 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ebc0bf5]
2021-03-11 12:50:24,441 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:24,441 [main:105] - GENERATED CALL = (0+1+2).and(996968234)
2021-03-11 12:50:24,442 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7f28a29], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@58fd4e05]]
2021-03-11 12:50:24,442 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7f28a29]
2021-03-11 12:50:24,442 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@58fd4e05]
2021-03-11 12:50:24,518 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:24,519 [main:105] - GENERATED CALL = (0+1+2).toDouble().compareTo(84)
2021-03-11 12:50:24,519 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@d0efe34]]
2021-03-11 12:50:24,519 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:50:24,596 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:24,596 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@d0efe34]
2021-03-11 12:50:24,672 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:24,672 [main:105] - GENERATED CALL = (0+1+2).compareTo(1551830558).rotateRight(-2104708767)
2021-03-11 12:50:24,672 [main:101] - Case = [public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ed6eedb]]
2021-03-11 12:50:24,672 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ed6eedb]
2021-03-11 12:50:24,748 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:24,749 [main:105] - GENERATED CALL = (0+1+2).div(-74)
2021-03-11 12:50:24,749 [main:63] - replacement of sum of type Int is (0+1+2).toInt().toInt()
2021-03-11 12:50:24,849 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:50:24,850 [main:66] - Compilation checking started
2021-03-11 12:50:25,087 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (0+1+2).toInt().toInt() += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:50:25,089 [main:56] - replacing (str, String)
2021-03-11 12:50:25,089 [main:38] - replacing str String
2021-03-11 12:50:25,089 [main:42] - Getting value of type String
2021-03-11 12:50:25,172 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:25,172 [main:46] - GENERATED VALUE OF TYPE String = "zlasy"
2021-03-11 12:50:25,172 [main:49] - GENERATED IS CALL =false
2021-03-11 12:50:25,767 [main:55] - randomType = HashSet<Map<LinkedHashSet<UShort?>, Short>?>
2021-03-11 12:50:25,847 [main:302] - generating value of type = HashSet<Map<LinkedHashSet<UShort?>, Short>?> false depth = 0
2021-03-11 12:50:25,934 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Map<LinkedHashSet<UShort?>, Short>?): HashSet<Map<LkedHashSet<UShort?>, Short>?> = TODO()
2021-03-11 12:50:25,935 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Map<LinkedHashSet<UShort?>, Short>?): HashSet<Map<LkedHashSet<UShort?>, Short>?> = TODO()
2021-03-11 12:50:26,015 [main:302] - generating value of type = Map<LinkedHashSet<UShort?>, Short> false depth = 3
2021-03-11 12:50:26,140 [main:43] - GENERATING CALL OF fun <K, V> mutableMapOf(): Map<LkedHashSet<UShort?>, Short> = TODO()
2021-03-11 12:50:26,142 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> mutableMapOf(): Map<LkedHashSet<UShort?>, Short> = TODO()
2021-03-11 12:50:26,225 [main:95] - GENERATED = mutableMapOf<LinkedHashSet<UShort?>, Short>()
2021-03-11 12:50:26,226 [main:95] - GENERATED = linkedSetOf<Map<LinkedHashSet<UShort?>, Short>?>(mutableMapOf<LinkedHashSet<UShort?>, Short>())
2021-03-11 12:50:26,446 [main:137] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@6fc0438b]
2021-03-11 12:50:26,446 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4fc5f450]
2021-03-11 12:50:26,446 [main:66] - Generated call from random type = (linkedSetOf<Map<LinkedHashSet<UShort?>, Short>?>(mutableMapOf<LinkedHashSet<UShort?>, Short>())).toArray().contentDeepToString()
2021-03-11 12:50:26,448 [main:94] - GETTING String from Int
2021-03-11 12:50:26,499 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]]
2021-03-11 12:50:26,500 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:50:26,500 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]
2021-03-11 12:50:26,580 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:26,581 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toShort().toString(-2005704130)
2021-03-11 12:50:26,581 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:50:26,581 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:50:26,581 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:50:26,657 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:26,657 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toInt().toString(1445037366)
2021-03-11 12:50:26,657 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]]
2021-03-11 12:50:26,657 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:50:26,657 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]
2021-03-11 12:50:26,734 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:26,734 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toChar().plus("pppcp")
2021-03-11 12:50:26,734 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:50:26,734 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:50:26,811 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:26,811 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:50:26,887 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:26,888 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).compareTo(-1044964848).toString(-598843246)
2021-03-11 12:50:26,888 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]]
2021-03-11 12:50:26,888 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:50:26,888 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]
2021-03-11 12:50:26,965 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:26,966 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toByte().toString(899110692)
2021-03-11 12:50:26,966 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:50:26,966 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:50:27,042 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:50:27,043 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:50:27,120 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:27,120 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).div(-1030032651411721244).toString(1588665249)
2021-03-11 12:50:27,120 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]]
2021-03-11 12:50:27,120 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:50:27,120 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]
2021-03-11 12:50:27,120 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toChar().titlecase()
2021-03-11 12:50:27,120 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]]
2021-03-11 12:50:27,121 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:50:27,121 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]
2021-03-11 12:50:27,121 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toChar().uppercase()
2021-03-11 12:50:27,121 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:50:27,121 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:50:27,121 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:50:27,198 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:27,198 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toLong().toString(-829966444)
2021-03-11 12:50:27,199 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]]
2021-03-11 12:50:27,199 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:50:27,199 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]
2021-03-11 12:50:27,199 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toChar().lowercase()
2021-03-11 12:50:27,199 [main:63] - replacement of str of type String is "zlasy"
2021-03-11 12:50:27,278 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 12:50:27,279 [main:66] - Compilation checking started
2021-03-11 12:50:27,474 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        "zlasy" += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:50:27,475 [main:56] - replacing (str, String)
2021-03-11 12:50:27,475 [main:38] - replacing str String
2021-03-11 12:50:27,476 [main:42] - Getting value of type String
2021-03-11 12:50:27,582 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:27,582 [main:46] - GENERATED VALUE OF TYPE String = "aryca"
2021-03-11 12:50:27,582 [main:49] - GENERATED IS CALL =false
2021-03-11 12:50:27,667 [main:55] - randomType = Array<Int>
2021-03-11 12:50:27,747 [main:302] - generating value of type = Array<Int> false depth = 0
2021-03-11 12:50:27,831 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: Int): Array<Int> = TODO()
2021-03-11 12:50:27,832 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: Int): Array<Int> = TODO()
2021-03-11 12:50:27,915 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:50:27,915 [main:95] - GENERATED = arrayOf<Int>(1648358486)
2021-03-11 12:50:27,925 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4fc5f450]
2021-03-11 12:50:27,925 [main:66] - Generated call from random type = (arrayOf<Int>(1648358486)).contentDeepToString()
2021-03-11 12:50:27,925 [main:63] - replacement of str of type String is (arrayOf<Int>(1648358486)).contentDeepToString()
2021-03-11 12:50:28,006 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:50:28,006 [main:66] - Compilation checking started
2021-03-11 12:50:28,208 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        (arrayOf<Int>(1648358486)).contentDeepToString() += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:50:28,210 [main:56] - replacing (sum, Int)
2021-03-11 12:50:28,210 [main:38] - replacing sum Int
2021-03-11 12:50:28,210 [main:42] - Getting value of type Int
2021-03-11 12:50:28,293 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:28,293 [main:46] - GENERATED VALUE OF TYPE Int = 1164644619
2021-03-11 12:50:28,293 [main:49] - GENERATED IS CALL =false
2021-03-11 12:50:28,380 [main:55] - randomType = Long
2021-03-11 12:50:28,459 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:50:28,511 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2fea6abb]
2021-03-11 12:50:28,590 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:28,590 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18626c8c]
2021-03-11 12:50:28,667 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:28,667 [main:66] - Generated call from random type = (-980058184288863319).compareTo(5).plus(-55)
2021-03-11 12:50:28,668 [main:94] - GETTING Int from String
2021-03-11 12:50:28,685 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d868003]]
2021-03-11 12:50:28,685 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d868003]
2021-03-11 12:50:28,762 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:28,762 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).length.minus(58)
2021-03-11 12:50:28,762 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21280b00], public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@19b4dbb0]]
2021-03-11 12:50:28,763 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21280b00]
2021-03-11 12:50:28,839 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:28,839 [main:137] - GENERATING call of type public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@19b4dbb0]
2021-03-11 12:50:28,840 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).get(1313577877).toInt()
2021-03-11 12:50:28,840 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12698afb]]
2021-03-11 12:50:28,840 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:50:28,919 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:29,037 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:29,037 [main:137] - GENERATING call of type public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12698afb]
2021-03-11 12:50:29,144 [main:302] - generating value of type = CharArray false depth = 0
2021-03-11 12:50:29,238 [main:43] - GENERATING CALL OF fun CharArray(size: kotlin.Int): CharArray = TODO()
2021-03-11 12:50:29,239 [main:61] - WITHOUT TYPE PARAMS = fun CharArray(size: kotlin.Int): CharArray = TODO()
2021-03-11 12:50:29,400 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:50:29,401 [main:95] - GENERATED = CharArray(-148595097)
2021-03-11 12:50:29,480 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:29,558 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:50:29,559 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).subSequence(623521064, 1051942988).indexOfAny(CharArray(-148595097), -1505737804, false)
2021-03-11 12:50:29,559 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18626c8c]]
2021-03-11 12:50:29,559 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18626c8c]
2021-03-11 12:50:29,635 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:29,636 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).length.plus(-55)
2021-03-11 12:50:29,636 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d63158f]]
2021-03-11 12:50:29,636 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:50:29,713 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:29,714 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d63158f]
2021-03-11 12:50:29,714 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).compareTo("rdmxb").dec()
2021-03-11 12:50:29,714 [main:101] - Case = [public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a1076df]]
2021-03-11 12:50:29,714 [main:137] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a1076df]
2021-03-11 12:50:29,790 [main:302] - generating value of type = CharArray false depth = 0
2021-03-11 12:50:29,870 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 12:50:29,871 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 12:50:29,949 [main:302] - generating value of type = Char true depth = 3
2021-03-11 12:50:29,950 [main:95] - GENERATED = charArrayOf('㉮')
2021-03-11 12:50:30,027 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:30,146 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:50:30,147 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).lastIndexOfAny(charArrayOf('㉮'), 1871544202, false)
2021-03-11 12:50:30,147 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f664709]]
2021-03-11 12:50:30,147 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f664709]
2021-03-11 12:50:30,231 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:30,314 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:30,314 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).length.coerceIn(2033373319, -1420570002)
2021-03-11 12:50:30,315 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f664709]]
2021-03-11 12:50:30,315 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:50:30,402 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:30,402 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f664709]
2021-03-11 12:50:30,482 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:30,566 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:30,566 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).compareTo("cxtnc").coerceIn(-579876979, 105510282)
2021-03-11 12:50:30,566 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@a5b3754]]
2021-03-11 12:50:30,566 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@a5b3754]
2021-03-11 12:50:30,567 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).length.countLeadingZeroBits()
2021-03-11 12:50:30,567 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2814a4a]]
2021-03-11 12:50:30,567 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).length.sign
2021-03-11 12:50:30,567 [main:63] - replacement of sum of type Int is (A(-1427813506, "vtkln").y).length.coerceIn(2033373319, -1420570002)
2021-03-11 12:50:30,648 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:50:30,648 [main:66] - Compilation checking started
2021-03-11 12:50:30,853 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (A(-1427813506, "vtkln").y).length.coerceIn(2033373319, -1420570002) += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:50:30,854 [main:56] - replacing (str, String)
2021-03-11 12:50:30,855 [main:38] - replacing str String
2021-03-11 12:50:30,855 [main:42] - Getting value of type String
2021-03-11 12:50:30,939 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:30,939 [main:46] - GENERATED VALUE OF TYPE String = "txhap"
2021-03-11 12:50:30,939 [main:49] - GENERATED IS CALL =false
2021-03-11 12:50:31,026 [main:55] - randomType = A?
2021-03-11 12:50:31,110 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:50:31,110 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:50:31,197 [main:194] - Type params = []
2021-03-11 12:50:31,281 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:50:31,282 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:50:31,290 [main:137] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d460c5b]
2021-03-11 12:50:31,290 [main:66] - Generated call from random type = (A(1078093436, "yrsgp"))?.y.decapitalize()
2021-03-11 12:50:31,291 [main:94] - GETTING String from Int
2021-03-11 12:50:31,325 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]]
2021-03-11 12:50:31,325 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:50:31,325 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]
2021-03-11 12:50:31,325 [main:105] - GENERATED CALL = (0+1+2+3).toChar().lowercase()
2021-03-11 12:50:31,325 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]]
2021-03-11 12:50:31,325 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:50:31,325 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]
2021-03-11 12:50:31,407 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:31,408 [main:105] - GENERATED CALL = (0+1+2+3).toChar().plus("qeapt")
2021-03-11 12:50:31,408 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]]
2021-03-11 12:50:31,408 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:50:31,408 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]
2021-03-11 12:50:31,408 [main:105] - GENERATED CALL = (0+1+2+3).toChar().titlecase()
2021-03-11 12:50:31,408 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]]
2021-03-11 12:50:31,408 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:50:31,408 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]
2021-03-11 12:50:31,517 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:31,518 [main:105] - GENERATED CALL = (0+1+2+3).toShort().toString(-1662016990)
2021-03-11 12:50:31,518 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]]
2021-03-11 12:50:31,518 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:50:31,518 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]
2021-03-11 12:50:31,518 [main:105] - GENERATED CALL = (0+1+2+3).toChar().uppercase()
2021-03-11 12:50:31,518 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:50:31,518 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:50:31,518 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:50:31,608 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:31,608 [main:105] - GENERATED CALL = (0+1+2+3).toInt().toString(-590088372)
2021-03-11 12:50:31,608 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:50:31,608 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:50:31,696 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:31,697 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:50:31,790 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:31,791 [main:105] - GENERATED CALL = (0+1+2+3).compareTo(1608393014).toString(-1564322737)
2021-03-11 12:50:31,791 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:50:31,791 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:50:31,872 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:50:31,872 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:50:31,950 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:31,950 [main:105] - GENERATED CALL = (0+1+2+3).div(2913964936573327182).toString(1002799043)
2021-03-11 12:50:31,950 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:50:31,950 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:50:31,951 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:50:32,031 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:32,032 [main:105] - GENERATED CALL = (0+1+2+3).toLong().toString(73724431)
2021-03-11 12:50:32,032 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:50:32,032 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:50:32,110 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:32,111 [main:105] - GENERATED CALL = (0+1+2+3).toString(-889787139)
2021-03-11 12:50:32,111 [main:63] - replacement of str of type String is (0+1+2+3).toLong().toString(73724431)
2021-03-11 12:50:32,208 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:50:32,209 [main:66] - Compilation checking started
2021-03-11 12:50:32,400 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        (0+1+2+3).toLong().toString(73724431) += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:50:32,402 [main:56] - replacing (str, String)
2021-03-11 12:50:32,402 [main:38] - replacing str String
2021-03-11 12:50:32,402 [main:42] - Getting value of type String
2021-03-11 12:50:32,479 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:32,479 [main:46] - GENERATED VALUE OF TYPE String = "axnzr"
2021-03-11 12:50:32,479 [main:49] - GENERATED IS CALL =false
2021-03-11 12:50:32,558 [main:55] - randomType = A?
2021-03-11 12:50:32,634 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:50:32,635 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:50:32,711 [main:194] - Type params = []
2021-03-11 12:50:32,831 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:50:32,831 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:50:32,840 [main:137] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a963ec3]
2021-03-11 12:50:32,923 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:50:33,005 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:33,005 [main:66] - Generated call from random type = (A(482069492, "comuv"))?.y.substringBeforeLast('', "qgpdc")
2021-03-11 12:50:33,006 [main:94] - GETTING String from String
2021-03-11 12:50:33,035 [main:101] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@268eb547]]
2021-03-11 12:50:33,035 [main:137] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@268eb547]
2021-03-11 12:50:33,121 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:50:33,122 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:50:33,122 [main:105] - GENERATED CALL = (str).filter({a: Char -> false})
2021-03-11 12:50:33,122 [main:101] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6dd07784]]
2021-03-11 12:50:33,122 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6dd07784]
2021-03-11 12:50:33,202 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:50:33,281 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:33,358 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:33,359 [main:105] - GENERATED CALL = (str).replaceAfter('ケ', "cmpsr", "mwpsi")
2021-03-11 12:50:33,359 [main:101] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6921c9d]]
2021-03-11 12:50:33,359 [main:137] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6921c9d]
2021-03-11 12:50:33,435 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:50:33,439 [main:105] - GENERATED CALL = (str).removePrefix("uqkmy")
2021-03-11 12:50:33,439 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21280b00], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]]
2021-03-11 12:50:33,439 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21280b00]
2021-03-11 12:50:33,515 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:33,516 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]
2021-03-11 12:50:33,516 [main:105] - GENERATED CALL = (str).get(1994300977).titlecase()
2021-03-11 12:50:33,516 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1121d038]]
2021-03-11 12:50:33,516 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:50:33,592 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:33,670 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:33,671 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1121d038]
2021-03-11 12:50:33,747 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 12:50:33,827 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-11 12:50:33,828 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-11 12:50:34,106 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:50:34,107 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-11 12:50:34,197 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(): Set<RegexOption> = TODO()
2021-03-11 12:50:34,199 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(): Set<RegexOption> = TODO()
2021-03-11 12:50:34,283 [main:95] - GENERATED = LinkedHashSet<RegexOption>()
2021-03-11 12:50:34,283 [main:95] - GENERATED = Regex("obumb", LinkedHashSet<RegexOption>())
2021-03-11 12:50:34,363 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-11 12:50:34,364 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 12:50:34,444 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:50:34,445 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:50:34,602 [main:302] - generating value of type = Int true depth = 4
2021-03-11 12:50:34,602 [main:95] - GENERATED = StringBuilder(-577061199)
2021-03-11 12:50:34,603 [main:105] - GENERATED CALL = (str).subSequence(353521124, 978338993).replace(Regex("obumb", LinkedHashSet<RegexOption>()), {a: MatchResult -> StringBuilder(-577061199)})
2021-03-11 12:50:34,603 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49d8da2a]]
2021-03-11 12:50:34,603 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:50:34,680 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:34,756 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:34,756 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49d8da2a]
2021-03-11 12:50:34,833 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:50:34,911 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:50:34,912 [main:105] - GENERATED CALL = (str).subSequence(-132422554, 1074830881).commonPrefixWith("vhkfz", false)
2021-03-11 12:50:34,912 [main:101] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@500bf82d]]
2021-03-11 12:50:34,912 [main:137] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@500bf82d]
2021-03-11 12:50:35,019 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:50:35,106 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:50:35,107 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:50:35,277 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:50:35,277 [main:95] - GENERATED = StringBuilder("zrpkj")
2021-03-11 12:50:35,278 [main:105] - GENERATED CALL = (str).removeSuffix(StringBuilder("zrpkj"))
2021-03-11 12:50:35,278 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d3a6837]]
2021-03-11 12:50:35,278 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d3a6837]
2021-03-11 12:50:35,278 [main:105] - GENERATED CALL = (str).trimStart()
2021-03-11 12:50:35,278 [main:101] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a3ba1fe]]
2021-03-11 12:50:35,278 [main:137] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a3ba1fe]
2021-03-11 12:50:35,355 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:35,432 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:50:35,433 [main:105] - GENERATED CALL = (str).padEnd(979376206, '劳')
2021-03-11 12:50:35,433 [main:101] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70979509]]
2021-03-11 12:50:35,433 [main:137] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70979509]
2021-03-11 12:50:35,433 [main:105] - GENERATED CALL = (str).trimIndent()
2021-03-11 12:50:35,433 [main:63] - replacement of str of type String is (str).filter({a: Char -> false})
2021-03-11 12:50:35,510 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:50:35,510 [main:66] - Compilation checking started
2021-03-11 12:50:35,700 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        (str).filter({a: Char -> false}) += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:50:35,702 [main:56] - replacing (str, String)
2021-03-11 12:50:35,702 [main:38] - replacing str String
2021-03-11 12:50:35,702 [main:42] - Getting value of type String
2021-03-11 12:50:35,777 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:35,778 [main:46] - GENERATED VALUE OF TYPE String = "xanht"
2021-03-11 12:50:35,778 [main:49] - GENERATED IS CALL =false
2021-03-11 12:50:35,857 [main:55] - randomType = Byte
2021-03-11 12:50:35,934 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:35,972 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6178c6b]
2021-03-11 12:50:36,048 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:50:36,049 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:50:36,125 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:36,126 [main:66] - Generated call from random type = (-52).div(1068626666058525306).toString(-82255433)
2021-03-11 12:50:36,127 [main:94] - GETTING String from Int
2021-03-11 12:50:36,163 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]]
2021-03-11 12:50:36,164 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:50:36,164 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]
2021-03-11 12:50:36,164 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toChar().uppercase()
2021-03-11 12:50:36,164 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:50:36,164 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:50:36,240 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:36,240 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toString(654163012)
2021-03-11 12:50:36,240 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:50:36,240 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:50:36,240 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:50:36,343 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:36,344 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toLong().toString(1292110530)
2021-03-11 12:50:36,344 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]]
2021-03-11 12:50:36,344 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:50:36,344 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]
2021-03-11 12:50:36,344 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toChar().titlecase()
2021-03-11 12:50:36,344 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:50:36,344 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:50:36,426 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:50:36,427 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:50:36,509 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:36,510 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).div(-3421864895615415321).toString(-2092838242)
2021-03-11 12:50:36,510 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]]
2021-03-11 12:50:36,510 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:50:36,510 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]
2021-03-11 12:50:36,605 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:36,606 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toShort().toString(824178177)
2021-03-11 12:50:36,606 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:50:36,606 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:50:36,685 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:36,685 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:50:36,762 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:36,762 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).compareTo(340964044).toString(1631953471)
2021-03-11 12:50:36,762 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:50:36,762 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:50:36,762 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:50:36,838 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:36,839 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toInt().toString(191892862)
2021-03-11 12:50:36,839 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]]
2021-03-11 12:50:36,839 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:50:36,839 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]
2021-03-11 12:50:36,839 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toChar().lowercase()
2021-03-11 12:50:36,839 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]]
2021-03-11 12:50:36,839 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:50:36,839 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]
2021-03-11 12:50:36,915 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:36,916 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toByte().toString(1458780420)
2021-03-11 12:50:36,916 [main:63] - replacement of str of type String is "xanht"
2021-03-11 12:50:36,992 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 12:50:36,992 [main:66] - Compilation checking started
2021-03-11 12:50:37,174 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        "xanht" += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:50:37,176 [main:56] - replacing (sum, Int)
2021-03-11 12:50:37,176 [main:38] - replacing sum Int
2021-03-11 12:50:37,176 [main:42] - Getting value of type Int
2021-03-11 12:50:37,252 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:37,252 [main:46] - GENERATED VALUE OF TYPE Int = -1830710130
2021-03-11 12:50:37,253 [main:49] - GENERATED IS CALL =false
2021-03-11 12:50:37,253 [main:55] - randomType = A
2021-03-11 12:50:37,329 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:50:37,329 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:50:37,405 [main:194] - Type params = []
2021-03-11 12:50:37,482 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:50:37,482 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:50:37,489 [main:66] - Generated call from random type = (A(-775945013, "wvdwm")).x.absoluteValue
2021-03-11 12:50:37,490 [main:94] - GETTING Int from Boolean
2021-03-11 12:50:37,498 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62a877f4]]
2021-03-11 12:50:37,498 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:50:37,599 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:50:37,599 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62a877f4]
2021-03-11 12:50:37,600 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).toInt()
2021-03-11 12:50:37,600 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d63158f]]
2021-03-11 12:50:37,600 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:50:37,682 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:50:37,683 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d63158f]
2021-03-11 12:50:37,683 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).dec()
2021-03-11 12:50:37,683 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ec35323]]
2021-03-11 12:50:37,683 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:50:37,765 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:50:37,766 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ec35323]
2021-03-11 12:50:37,860 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:37,861 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).rotateLeft(-189785016)
2021-03-11 12:50:37,861 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36bf0f77]]
2021-03-11 12:50:37,861 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:50:37,938 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:50:37,938 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36bf0f77]
2021-03-11 12:50:37,939 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).takeHighestOneBit()
2021-03-11 12:50:37,939 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c9f5998]]
2021-03-11 12:50:37,939 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:50:38,017 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:50:38,018 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c9f5998]
2021-03-11 12:50:38,093 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:38,094 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(true).shl(659950467)
2021-03-11 12:50:38,094 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6736791a]]
2021-03-11 12:50:38,094 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:50:38,170 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:50:38,170 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6736791a]
2021-03-11 12:50:38,170 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(true).inv()
2021-03-11 12:50:38,170 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@216b8aa8]]
2021-03-11 12:50:38,170 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:50:38,246 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:50:38,246 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@216b8aa8]
2021-03-11 12:50:38,322 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:38,322 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(true).ushr(432843316)
2021-03-11 12:50:38,322 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18626c8c]]
2021-03-11 12:50:38,323 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:50:38,399 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:50:38,400 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18626c8c]
2021-03-11 12:50:38,475 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:38,476 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).plus(4)
2021-03-11 12:50:38,476 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f161575]]
2021-03-11 12:50:38,476 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:50:38,552 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:50:38,552 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f161575]
2021-03-11 12:50:38,653 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:38,654 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).times(-125)
2021-03-11 12:50:38,654 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3b8291ff]]
2021-03-11 12:50:38,654 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:50:38,735 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:50:38,735 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3b8291ff]
2021-03-11 12:50:38,817 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:38,818 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(true).coerceAtMost(-760764716)
2021-03-11 12:50:38,818 [main:63] - replacement of sum of type Int is (sum == 0+1+2+3+4).compareTo(true).ushr(432843316)
2021-03-11 12:50:38,902 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:50:38,902 [main:66] - Compilation checking started
2021-03-11 12:50:39,115 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (sum == 0+1+2+3+4).compareTo(true).ushr(432843316) += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:50:39,116 [main:56] - replacing (str, String)
2021-03-11 12:50:39,116 [main:38] - replacing str String
2021-03-11 12:50:39,116 [main:42] - Getting value of type String
2021-03-11 12:50:39,192 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:39,192 [main:46] - GENERATED VALUE OF TYPE String = "ivnlx"
2021-03-11 12:50:39,192 [main:49] - GENERATED IS CALL =false
2021-03-11 12:50:39,348 [main:55] - randomType = Short?
2021-03-11 12:50:39,424 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:50:39,456 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@5e0bed5a]
2021-03-11 12:50:39,457 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]
2021-03-11 12:50:39,533 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:39,533 [main:66] - Generated call from random type = (31901)?.toChar().plus("iimqv")
2021-03-11 12:50:39,534 [main:94] - GETTING String from Boolean
2021-03-11 12:50:39,542 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:50:39,542 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:50:39,618 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:50:39,619 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:50:39,694 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:39,694 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).toString(1634325502)
2021-03-11 12:50:39,694 [main:63] - replacement of str of type String is "ivnlx"
2021-03-11 12:50:39,770 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 12:50:39,770 [main:66] - Compilation checking started
2021-03-11 12:50:39,954 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        "ivnlx" += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:50:39,956 [main:56] - replacing (sum, Int)
2021-03-11 12:50:39,956 [main:38] - replacing sum Int
2021-03-11 12:50:39,956 [main:42] - Getting value of type Int
2021-03-11 12:50:40,034 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:40,034 [main:46] - GENERATED VALUE OF TYPE Int = -661556960
2021-03-11 12:50:40,034 [main:49] - GENERATED IS CALL =false
2021-03-11 12:50:40,452 [main:55] - randomType = Function2<ULong, A?, LinkedHashSet<UShort>>
2021-03-11 12:50:40,453 [main:94] - GETTING Int from String
2021-03-11 12:50:40,471 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6561e48]]
2021-03-11 12:50:40,471 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:50:40,546 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:40,547 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6561e48]
2021-03-11 12:50:40,623 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:40,623 [main:105] - GENERATED CALL = (str).compareTo("peunl").compareTo(-108)
2021-03-11 12:50:40,623 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d4a80]]
2021-03-11 12:50:40,623 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d4a80]
2021-03-11 12:50:40,623 [main:105] - GENERATED CALL = (str).length.unaryPlus()
2021-03-11 12:50:40,623 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b80cd8f]]
2021-03-11 12:50:40,623 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:50:40,699 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:40,699 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b80cd8f]
2021-03-11 12:50:40,699 [main:105] - GENERATED CALL = (str).compareTo("poxoj").inc()
2021-03-11 12:50:40,700 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7d291fed]]
2021-03-11 12:50:40,700 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7d291fed]
2021-03-11 12:50:40,700 [main:105] - GENERATED CALL = (str).length.countOneBits()
2021-03-11 12:50:40,700 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f655756]]
2021-03-11 12:50:40,700 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f655756]
2021-03-11 12:50:40,700 [main:105] - GENERATED CALL = (str).length.unaryMinus()
2021-03-11 12:50:40,700 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7d291fed]]
2021-03-11 12:50:40,700 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:50:40,776 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:40,776 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7d291fed]
2021-03-11 12:50:40,776 [main:105] - GENERATED CALL = (str).compareTo("dvxni").countOneBits()
2021-03-11 12:50:40,776 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ef300a9]]
2021-03-11 12:50:40,777 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:50:40,853 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:40,929 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:40,929 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ef300a9]
2021-03-11 12:50:41,008 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-11 12:50:41,009 [main:302] - generating value of type = Int true depth = 1
2021-03-11 12:50:41,009 [main:105] - GENERATED CALL = (str).subSequence(1583432908, -19768777).sumBy({a: Char -> 1046714057})
2021-03-11 12:50:41,009 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ebc0bf5]]
2021-03-11 12:50:41,009 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ebc0bf5]
2021-03-11 12:50:41,085 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:41,086 [main:105] - GENERATED CALL = (str).length.and(-1529008524)
2021-03-11 12:50:41,086 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@446340cf]]
2021-03-11 12:50:41,086 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:50:41,195 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:41,196 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@446340cf]
2021-03-11 12:50:41,196 [main:105] - GENERATED CALL = (str).compareTo("fgsfz").takeLowestOneBit()
2021-03-11 12:50:41,196 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fb80e1e]]
2021-03-11 12:50:41,196 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:50:41,282 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:41,363 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:41,363 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fb80e1e]
2021-03-11 12:50:41,449 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:50:41,449 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:50:41,450 [main:105] - GENERATED CALL = (str).subSequence(-188771022, 1767978270).indexOfFirst({a: Char -> true})
2021-03-11 12:50:41,450 [main:63] - replacement of sum of type Int is (str).length.and(-1529008524)
2021-03-11 12:50:41,527 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:50:41,527 [main:66] - Compilation checking started
2021-03-11 12:50:41,721 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (str).length.and(-1529008524) += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:50:41,723 [main:56] - replacing (sum, Int)
2021-03-11 12:50:41,723 [main:38] - replacing sum Int
2021-03-11 12:50:41,723 [main:42] - Getting value of type Int
2021-03-11 12:50:41,806 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:41,806 [main:46] - GENERATED VALUE OF TYPE Int = -2010048939
2021-03-11 12:50:41,807 [main:49] - GENERATED IS CALL =false
2021-03-11 12:50:41,889 [main:55] - randomType = A?
2021-03-11 12:50:41,965 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:50:41,965 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:50:42,041 [main:194] - Type params = []
2021-03-11 12:50:42,116 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:50:42,117 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:50:42,126 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36845587]
2021-03-11 12:50:42,202 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:42,203 [main:66] - Generated call from random type = (A(1035170633, "axtxg"))?.x.xor(-1173278789)
2021-03-11 12:50:42,203 [main:94] - GETTING Int from String
2021-03-11 12:50:42,229 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21280b00], public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@20381e51]]
2021-03-11 12:50:42,229 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21280b00]
2021-03-11 12:50:42,306 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:42,307 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@20381e51]
2021-03-11 12:50:42,383 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:50:42,383 [main:105] - GENERATED CALL = (str).get(-1667584530).compareTo('⫄')
2021-03-11 12:50:42,384 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b85d444]]
2021-03-11 12:50:42,384 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:50:42,490 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:42,573 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:42,573 [main:137] - GENERATING call of type public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b85d444]
2021-03-11 12:50:42,656 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:50:42,744 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:42,823 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:50:42,823 [main:105] - GENERATED CALL = (str).subSequence(-482110470, 2011895546).indexOf('흃', 1099764409, true)
2021-03-11 12:50:42,823 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@5052b22e]]
2021-03-11 12:50:42,823 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:50:42,902 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:42,903 [main:105] - GENERATED CALL = (str).compareTo("xwxdz").absoluteValue
2021-03-11 12:50:42,903 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36bf0f77]]
2021-03-11 12:50:42,903 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:50:42,980 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:42,980 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36bf0f77]
2021-03-11 12:50:42,981 [main:105] - GENERATED CALL = (str).compareTo("oqcpl").takeHighestOneBit()
2021-03-11 12:50:42,981 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e53c7a]]
2021-03-11 12:50:42,981 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:50:43,057 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:43,058 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e53c7a]
2021-03-11 12:50:43,135 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:43,135 [main:105] - GENERATED CALL = (str).compareTo("kgyew").shr(-1846393782)
2021-03-11 12:50:43,135 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ed6eedb]]
2021-03-11 12:50:43,135 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:50:43,211 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:43,212 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ed6eedb]
2021-03-11 12:50:43,288 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:43,289 [main:105] - GENERATED CALL = (str).compareTo("qzevz").div(-78)
2021-03-11 12:50:43,289 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3b8291ff]]
2021-03-11 12:50:43,289 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:50:43,366 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:43,367 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3b8291ff]
2021-03-11 12:50:43,444 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:43,445 [main:105] - GENERATED CALL = (str).compareTo("fyzzg").coerceAtMost(-978654572)
2021-03-11 12:50:43,445 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ef300a9]]
2021-03-11 12:50:43,445 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:50:43,550 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:43,632 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:43,632 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ef300a9]
2021-03-11 12:50:43,712 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-11 12:50:43,713 [main:302] - generating value of type = Int true depth = 1
2021-03-11 12:50:43,713 [main:105] - GENERATED CALL = (str).subSequence(376948373, -923591857).sumBy({a: Char -> 656255099})
2021-03-11 12:50:43,713 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ec35323]]
2021-03-11 12:50:43,713 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:50:43,800 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:43,801 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ec35323]
2021-03-11 12:50:43,880 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:43,880 [main:105] - GENERATED CALL = (str).compareTo("vyxrf").rotateLeft(-850873496)
2021-03-11 12:50:43,880 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d63158f]]
2021-03-11 12:50:43,880 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:50:43,961 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:43,961 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d63158f]
2021-03-11 12:50:43,961 [main:105] - GENERATED CALL = (str).compareTo("nvfuf").dec()
2021-03-11 12:50:43,961 [main:63] - replacement of sum of type Int is (str).compareTo("xwxdz").absoluteValue
2021-03-11 12:50:44,040 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:50:44,041 [main:66] - Compilation checking started
2021-03-11 12:50:44,226 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (str).compareTo("xwxdz").absoluteValue += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:50:44,228 [main:56] - replacing (str, String)
2021-03-11 12:50:44,228 [main:38] - replacing str String
2021-03-11 12:50:44,228 [main:42] - Getting value of type String
2021-03-11 12:50:44,306 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:44,306 [main:46] - GENERATED VALUE OF TYPE String = "ahcpc"
2021-03-11 12:50:44,306 [main:49] - GENERATED IS CALL =false
2021-03-11 12:50:44,307 [main:55] - randomType = Array<A>
2021-03-11 12:50:44,385 [main:302] - generating value of type = Array<A> false depth = 0
2021-03-11 12:50:44,466 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<A> = TODO()
2021-03-11 12:50:44,467 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<A> = TODO()
2021-03-11 12:50:44,545 [main:95] - GENERATED = emptyArray<A>()
2021-03-11 12:50:44,561 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:50:44,637 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:44,637 [main:66] - Generated call from random type = (emptyArray<A>()).size.toString(-466117830)
2021-03-11 12:50:44,638 [main:94] - GETTING String from Int
2021-03-11 12:50:44,669 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]]
2021-03-11 12:50:44,670 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:50:44,670 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]
2021-03-11 12:50:44,746 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:44,747 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toShort().toString(-1592362073)
2021-03-11 12:50:44,747 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:50:44,747 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:50:44,863 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:44,864 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:50:44,945 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:44,945 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).compareTo(-1017254605).toString(1566907850)
2021-03-11 12:50:44,945 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:50:44,945 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:50:45,028 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:50:45,029 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:50:45,117 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:45,117 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).div(9183101399689995900).toString(747221434)
2021-03-11 12:50:45,117 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:50:45,117 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:50:45,117 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:50:45,195 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:45,196 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toInt().toString(693710652)
2021-03-11 12:50:45,196 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]]
2021-03-11 12:50:45,196 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:50:45,196 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]
2021-03-11 12:50:45,196 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toChar().titlecase()
2021-03-11 12:50:45,196 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:50:45,196 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:50:45,274 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:45,275 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toString(-872421416)
2021-03-11 12:50:45,275 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]]
2021-03-11 12:50:45,275 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:50:45,275 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]
2021-03-11 12:50:45,275 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toChar().lowercase()
2021-03-11 12:50:45,275 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:50:45,275 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:50:45,275 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:50:45,354 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:45,355 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toLong().toString(-213371750)
2021-03-11 12:50:45,355 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]]
2021-03-11 12:50:45,355 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:50:45,355 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]
2021-03-11 12:50:45,433 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:45,433 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toChar().plus("rtaoh")
2021-03-11 12:50:45,433 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]]
2021-03-11 12:50:45,433 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:50:45,433 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]
2021-03-11 12:50:45,434 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toChar().uppercase()
2021-03-11 12:50:45,434 [main:63] - replacement of str of type String is (A(-1427813506, "vtkln").x).toInt().toString(693710652)
2021-03-11 12:50:45,511 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:50:45,512 [main:66] - Compilation checking started
2021-03-11 12:50:45,701 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        (A(-1427813506, "vtkln").x).toInt().toString(693710652) += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:50:45,702 [main:56] - replacing (str, String)
2021-03-11 12:50:45,703 [main:38] - replacing str String
2021-03-11 12:50:45,703 [main:42] - Getting value of type String
2021-03-11 12:50:45,780 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:45,781 [main:46] - GENERATED VALUE OF TYPE String = "osjnf"
2021-03-11 12:50:45,781 [main:49] - GENERATED IS CALL =false
2021-03-11 12:50:45,860 [main:55] - randomType = Boolean
2021-03-11 12:50:45,936 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:50:45,945 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:50:46,024 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:50:46,025 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:50:46,135 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:46,135 [main:66] - Generated call from random type = (false).compareTo(true).toString(626526662)
2021-03-11 12:50:46,136 [main:94] - GETTING String from Int
2021-03-11 12:50:46,184 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]]
2021-03-11 12:50:46,184 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:50:46,184 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]
2021-03-11 12:50:46,184 [main:105] - GENERATED CALL = (0+1+2).toChar().uppercase()
2021-03-11 12:50:46,184 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]]
2021-03-11 12:50:46,184 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:50:46,184 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]
2021-03-11 12:50:46,265 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:46,265 [main:105] - GENERATED CALL = (0+1+2).toChar().plus("podkp")
2021-03-11 12:50:46,265 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:50:46,265 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:50:46,373 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:46,374 [main:105] - GENERATED CALL = (0+1+2).toString(-1164279942)
2021-03-11 12:50:46,374 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]]
2021-03-11 12:50:46,374 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:50:46,374 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]
2021-03-11 12:50:46,374 [main:105] - GENERATED CALL = (0+1+2).toChar().titlecase()
2021-03-11 12:50:46,374 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:50:46,374 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:50:46,374 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:50:46,461 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:46,461 [main:105] - GENERATED CALL = (0+1+2).toLong().toString(826965759)
2021-03-11 12:50:46,461 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:50:46,461 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:50:46,546 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:46,547 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:50:46,630 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:46,630 [main:105] - GENERATED CALL = (0+1+2).compareTo(1972920102).toString(-358007117)
2021-03-11 12:50:46,630 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]]
2021-03-11 12:50:46,630 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:50:46,630 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]
2021-03-11 12:50:46,630 [main:105] - GENERATED CALL = (0+1+2).toChar().lowercase()
2021-03-11 12:50:46,630 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]]
2021-03-11 12:50:46,631 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:50:46,631 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]
2021-03-11 12:50:46,714 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:46,715 [main:105] - GENERATED CALL = (0+1+2).toShort().toString(337812624)
2021-03-11 12:50:46,715 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:50:46,715 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:50:46,799 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:50:46,799 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:50:46,884 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:46,884 [main:105] - GENERATED CALL = (0+1+2).div(5153799553575982846).toString(353669213)
2021-03-11 12:50:46,884 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:50:46,884 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:50:46,885 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:50:46,961 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:46,962 [main:105] - GENERATED CALL = (0+1+2).toInt().toString(1616126377)
2021-03-11 12:50:46,962 [main:63] - replacement of str of type String is (0+1+2).div(5153799553575982846).toString(353669213)
2021-03-11 12:50:47,038 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:50:47,039 [main:66] - Compilation checking started
2021-03-11 12:50:47,233 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        (0+1+2).div(5153799553575982846).toString(353669213) += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:50:47,235 [main:56] - replacing (sum, Int)
2021-03-11 12:50:47,235 [main:38] - replacing sum Int
2021-03-11 12:50:47,235 [main:42] - Getting value of type Int
2021-03-11 12:50:47,312 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:47,312 [main:46] - GENERATED VALUE OF TYPE Int = -1099050024
2021-03-11 12:50:47,312 [main:49] - GENERATED IS CALL =false
2021-03-11 12:50:47,394 [main:55] - randomType = LinkedHashSet<A>
2021-03-11 12:50:47,503 [main:302] - generating value of type = LinkedHashSet<A> false depth = 0
2021-03-11 12:50:47,589 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: A): LkedHashSet<A> = TODO()
2021-03-11 12:50:47,590 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: A): LkedHashSet<A> = TODO()
2021-03-11 12:50:47,674 [main:302] - generating value of type = A false depth = 3
2021-03-11 12:50:47,675 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:50:47,762 [main:194] - Type params = []
2021-03-11 12:50:47,840 [main:302] - generating value of type = Int true depth = 5
2021-03-11 12:50:47,841 [main:302] - generating value of type = String true depth = 5
2021-03-11 12:50:47,841 [main:95] - GENERATED = linkedSetOf<A>(A(1274603415, "zgzlw"))
2021-03-11 12:50:47,981 [main:137] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.indexOfLast(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@39dcff06]
2021-03-11 12:50:48,058 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-11 12:50:48,058 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:50:48,058 [main:66] - Generated call from random type = (linkedSetOf<A>(A(1274603415, "zgzlw"))).indexOfLast({a: T -> false})
2021-03-11 12:50:48,059 [main:94] - GETTING Int from Int
2021-03-11 12:50:48,089 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@61aa5dbf]]
2021-03-11 12:50:48,089 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:50:48,090 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@61aa5dbf]
2021-03-11 12:50:48,167 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:48,167 [main:105] - GENERATED CALL = (0+1+2).toShort().rem(116)
2021-03-11 12:50:48,167 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76034fc0]]
2021-03-11 12:50:48,167 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:50:48,167 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76034fc0]
2021-03-11 12:50:48,167 [main:105] - GENERATED CALL = (0+1+2).toInt().countTrailingZeroBits()
2021-03-11 12:50:48,168 [main:101] - Case = [public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f664709]]
2021-03-11 12:50:48,168 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f664709]
2021-03-11 12:50:48,244 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:48,320 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:48,321 [main:105] - GENERATED CALL = (0+1+2).coerceIn(1061532608, -785766808)
2021-03-11 12:50:48,321 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3ae3dfd2]]
2021-03-11 12:50:48,321 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:50:48,321 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3ae3dfd2]
2021-03-11 12:50:48,397 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:48,397 [main:105] - GENERATED CALL = (0+1+2).toByte().times(-88)
2021-03-11 12:50:48,397 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d868003]]
2021-03-11 12:50:48,397 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:50:48,397 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d868003]
2021-03-11 12:50:48,473 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:48,474 [main:105] - GENERATED CALL = (0+1+2).toInt().minus(60)
2021-03-11 12:50:48,474 [main:101] - Case = [public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ed6eedb]]
2021-03-11 12:50:48,474 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ed6eedb]
2021-03-11 12:50:48,551 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:48,552 [main:105] - GENERATED CALL = (0+1+2).div(-119)
2021-03-11 12:50:48,552 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7d291fed]]
2021-03-11 12:50:48,552 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:50:48,552 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7d291fed]
2021-03-11 12:50:48,552 [main:105] - GENERATED CALL = (0+1+2).toInt().countOneBits()
2021-03-11 12:50:48,552 [main:101] - Case = [public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c9f5998]]
2021-03-11 12:50:48,552 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c9f5998]
2021-03-11 12:50:48,633 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:48,633 [main:105] - GENERATED CALL = (0+1+2).shl(-210642310)
2021-03-11 12:50:48,633 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c9f5998]]
2021-03-11 12:50:48,634 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:50:48,747 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:48,747 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c9f5998]
2021-03-11 12:50:48,835 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:48,835 [main:105] - GENERATED CALL = (0+1+2).compareTo(466768088).shl(1634768332)
2021-03-11 12:50:48,835 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6561e48]]
2021-03-11 12:50:48,835 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6561e48]
2021-03-11 12:50:48,923 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:48,924 [main:105] - GENERATED CALL = (0+1+2).compareTo(79)
2021-03-11 12:50:48,924 [main:63] - replacement of sum of type Int is (0+1+2).coerceIn(1061532608, -785766808)
2021-03-11 12:50:49,017 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:50:49,017 [main:66] - Compilation checking started
2021-03-11 12:50:49,208 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (0+1+2).coerceIn(1061532608, -785766808) += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:50:49,210 [main:56] - replacing (sum, Int)
2021-03-11 12:50:49,210 [main:38] - replacing sum Int
2021-03-11 12:50:49,210 [main:42] - Getting value of type Int
2021-03-11 12:50:49,288 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:49,289 [main:46] - GENERATED VALUE OF TYPE Int = -1898667248
2021-03-11 12:50:49,289 [main:49] - GENERATED IS CALL =false
2021-03-11 12:50:49,290 [main:55] - randomType = A
2021-03-11 12:50:49,366 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:50:49,367 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:50:49,443 [main:194] - Type params = []
2021-03-11 12:50:49,519 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:50:49,519 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:50:49,526 [main:137] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e9ce37f]
2021-03-11 12:50:49,526 [main:66] - Generated call from random type = (A(-71340290, "wbuun")).y.toInt()
2021-03-11 12:50:49,526 [main:63] - replacement of sum of type Int is (A(-71340290, "wbuun")).y.toInt()
2021-03-11 12:50:49,602 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:50:49,602 [main:66] - Compilation checking started
2021-03-11 12:50:49,791 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (A(-71340290, "wbuun")).y.toInt() += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:50:49,793 [main:56] - replacing (str, String)
2021-03-11 12:50:49,793 [main:38] - replacing str String
2021-03-11 12:50:49,793 [main:42] - Getting value of type String
2021-03-11 12:50:49,870 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:49,870 [main:46] - GENERATED VALUE OF TYPE String = "fhzoi"
2021-03-11 12:50:49,870 [main:49] - GENERATED IS CALL =false
2021-03-11 12:50:50,032 [main:55] - randomType = HashSet<UByte>
2021-03-11 12:50:50,109 [main:302] - generating value of type = HashSet<UByte> false depth = 0
2021-03-11 12:50:50,220 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): HashSet<UByte> = TODO()
2021-03-11 12:50:50,221 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): HashSet<UByte> = TODO()
2021-03-11 12:50:50,307 [main:95] - GENERATED = linkedSetOf<UByte>()
2021-03-11 12:50:50,450 [main:137] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@4afbca8b]
2021-03-11 12:50:50,450 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4fc5f450]
2021-03-11 12:50:50,451 [main:66] - Generated call from random type = (linkedSetOf<UByte>()).toArray().contentDeepToString()
2021-03-11 12:50:50,451 [main:94] - GETTING String from Boolean
2021-03-11 12:50:50,464 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:50:50,464 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:50:50,543 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:50:50,543 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:50:50,623 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:50,623 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).toString(-1256561815)
2021-03-11 12:50:50,623 [main:63] - replacement of str of type String is (linkedSetOf<UByte>()).toArray().contentDeepToString()
2021-03-11 12:50:50,700 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:50:50,700 [main:66] - Compilation checking started
2021-03-11 12:50:50,913 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        (linkedSetOf<UByte>()).toArray().contentDeepToString() += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:50:50,915 [main:56] - replacing (str, String)
2021-03-11 12:50:50,916 [main:38] - replacing str String
2021-03-11 12:50:50,916 [main:42] - Getting value of type String
2021-03-11 12:50:51,005 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:51,005 [main:46] - GENERATED VALUE OF TYPE String = "jwlfg"
2021-03-11 12:50:51,006 [main:49] - GENERATED IS CALL =false
2021-03-11 12:50:51,093 [main:55] - randomType = HashSet<Int>
2021-03-11 12:50:51,173 [main:302] - generating value of type = HashSet<Int> false depth = 0
2021-03-11 12:50:51,255 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: Int): HashSet<Int> = TODO()
2021-03-11 12:50:51,255 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: Int): HashSet<Int> = TODO()
2021-03-11 12:50:51,333 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:50:51,333 [main:95] - GENERATED = hashSetOf<Int>(1846241539)
2021-03-11 12:50:51,428 [main:137] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@3e8b7fff]
2021-03-11 12:50:51,429 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4fc5f450]
2021-03-11 12:50:51,429 [main:66] - Generated call from random type = (hashSetOf<Int>(1846241539)).toArray().contentDeepToString()
2021-03-11 12:50:51,430 [main:94] - GETTING String from Int
2021-03-11 12:50:51,460 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]]
2021-03-11 12:50:51,460 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:50:51,460 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]
2021-03-11 12:50:51,536 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:51,537 [main:105] - GENERATED CALL = (0+1+2).toShort().toString(1109064805)
2021-03-11 12:50:51,537 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]]
2021-03-11 12:50:51,537 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:50:51,537 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]
2021-03-11 12:50:51,613 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:51,614 [main:105] - GENERATED CALL = (0+1+2).toChar().plus("qoxhq")
2021-03-11 12:50:51,614 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]]
2021-03-11 12:50:51,614 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:50:51,614 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]
2021-03-11 12:50:51,614 [main:105] - GENERATED CALL = (0+1+2).toChar().titlecase()
2021-03-11 12:50:51,614 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:50:51,614 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:50:51,614 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:50:51,690 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:51,690 [main:105] - GENERATED CALL = (0+1+2).toInt().toString(-293254200)
2021-03-11 12:50:51,690 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]]
2021-03-11 12:50:51,690 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:50:51,690 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]
2021-03-11 12:50:51,690 [main:105] - GENERATED CALL = (0+1+2).toChar().uppercase()
2021-03-11 12:50:51,690 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:50:51,690 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:50:51,810 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:51,811 [main:105] - GENERATED CALL = (0+1+2).toString(-1273893984)
2021-03-11 12:50:51,811 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:50:51,811 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:50:51,898 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:51,899 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:50:51,985 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:51,985 [main:105] - GENERATED CALL = (0+1+2).compareTo(1771305082).toString(-473804465)
2021-03-11 12:50:51,986 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]]
2021-03-11 12:50:51,986 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:50:51,986 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]
2021-03-11 12:50:52,073 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:52,074 [main:105] - GENERATED CALL = (0+1+2).toByte().toString(1975413924)
2021-03-11 12:50:52,074 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:50:52,074 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:50:52,153 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:50:52,153 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:50:52,233 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:52,233 [main:105] - GENERATED CALL = (0+1+2).div(3982278098523125396).toString(354801970)
2021-03-11 12:50:52,233 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:50:52,234 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:50:52,234 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:50:52,311 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:52,311 [main:105] - GENERATED CALL = (0+1+2).toLong().toString(179512023)
2021-03-11 12:50:52,311 [main:63] - replacement of str of type String is (0+1+2).toChar().plus("qoxhq")
2021-03-11 12:50:52,388 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:50:52,388 [main:66] - Compilation checking started
2021-03-11 12:50:52,591 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        (0+1+2).toChar().plus("qoxhq") += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:50:52,593 [main:56] - replacing (sum, Int)
2021-03-11 12:50:52,593 [main:38] - replacing sum Int
2021-03-11 12:50:52,593 [main:42] - Getting value of type Int
2021-03-11 12:50:52,670 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:52,670 [main:46] - GENERATED VALUE OF TYPE Int = -1603935595
2021-03-11 12:50:52,671 [main:49] - GENERATED IS CALL =false
2021-03-11 12:50:52,671 [main:55] - randomType = A
2021-03-11 12:50:52,748 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:50:52,749 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:50:52,825 [main:194] - Type params = []
2021-03-11 12:50:52,902 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:50:52,902 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:50:52,909 [main:66] - Generated call from random type = (A(-765191882, "eidbw")).y.length
2021-03-11 12:50:52,909 [main:94] - GETTING Int from Int
2021-03-11 12:50:52,939 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6561e48]]
2021-03-11 12:50:52,939 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:50:53,016 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:53,017 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6561e48]
2021-03-11 12:50:53,123 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:53,123 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).compareTo(-38310170).compareTo(-42)
2021-03-11 12:50:53,123 [main:101] - Case = [public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b80cd8f]]
2021-03-11 12:50:53,123 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b80cd8f]
2021-03-11 12:50:53,123 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).inc()
2021-03-11 12:50:53,124 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62a877f4]]
2021-03-11 12:50:53,124 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:50:53,206 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:53,206 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62a877f4]
2021-03-11 12:50:53,206 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).compareTo(-2023036633).toInt()
2021-03-11 12:50:53,207 [main:101] - Case = [public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36845587]]
2021-03-11 12:50:53,207 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36845587]
2021-03-11 12:50:53,289 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:53,290 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).xor(-1867504531)
2021-03-11 12:50:53,290 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2d4ffd58]]
2021-03-11 12:50:53,290 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:50:53,379 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:50:53,379 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2d4ffd58]
2021-03-11 12:50:53,379 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).div(-7840476400312384299).countTrailingZeroBits()
2021-03-11 12:50:53,379 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e], public open val start: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@48a2522d]]
2021-03-11 12:50:53,379 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e]
2021-03-11 12:50:53,457 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:53,458 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).rangeTo(-108).start
2021-03-11 12:50:53,458 [main:101] - Case = [public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6736791a]]
2021-03-11 12:50:53,458 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6736791a]
2021-03-11 12:50:53,458 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).inv()
2021-03-11 12:50:53,458 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@208e2fd]]
2021-03-11 12:50:53,458 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:50:53,458 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@208e2fd]
2021-03-11 12:50:53,458 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toShort().countLeadingZeroBits()
2021-03-11 12:50:53,458 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@13ad634b]]
2021-03-11 12:50:53,459 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:50:53,459 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@13ad634b]
2021-03-11 12:50:53,459 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toLong().countOneBits()
2021-03-11 12:50:53,459 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7f28a29], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@58fd4e05]]
2021-03-11 12:50:53,459 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7f28a29]
2021-03-11 12:50:53,459 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@58fd4e05]
2021-03-11 12:50:53,541 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:53,541 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toDouble().compareTo(50)
2021-03-11 12:50:53,541 [main:63] - replacement of sum of type Int is A(-1427813506, "vtkln").x
2021-03-11 12:50:53,617 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:50:53,618 [main:66] - Compilation checking started
2021-03-11 12:50:53,796 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        A(-1427813506, "vtkln").x += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:50:53,797 [main:56] - replacing (sum, Int)
2021-03-11 12:50:53,798 [main:38] - replacing sum Int
2021-03-11 12:50:53,798 [main:42] - Getting value of type Int
2021-03-11 12:50:53,874 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:53,874 [main:46] - GENERATED VALUE OF TYPE Int = -409317181
2021-03-11 12:50:53,874 [main:49] - GENERATED IS CALL =false
2021-03-11 12:50:54,035 [main:55] - randomType = Triple<UShort, A, Int>
2021-03-11 12:50:54,112 [main:302] - generating value of type = Triple<UShort, A, Int> false depth = 0
2021-03-11 12:50:54,194 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: UShort, second: A, third: Int): Triple<UShort, A, Int> = TODO()
2021-03-11 12:50:54,195 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: UShort, second: A, third: Int): Triple<UShort, A, Int> = TODO()
2021-03-11 12:50:54,274 [main:302] - generating value of type = UShort true depth = 3
2021-03-11 12:50:54,274 [main:302] - generating value of type = A false depth = 3
2021-03-11 12:50:54,274 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:50:54,401 [main:194] - Type params = []
2021-03-11 12:50:54,482 [main:302] - generating value of type = Int true depth = 5
2021-03-11 12:50:54,483 [main:302] - generating value of type = String true depth = 5
2021-03-11 12:50:54,483 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:50:54,484 [main:95] - GENERATED = Triple<UShort, A, Int>(31982.toUShort(), A(-1267310858, "kdfhq"), 1454944838)
2021-03-11 12:50:54,502 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@d0efe34]
2021-03-11 12:50:54,583 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:54,584 [main:66] - Generated call from random type = (Triple<UShort, A, Int>(31982.toUShort(), A(-1267310858, "kdfhq"), 1454944838)).third.rotateRight(1323829030)
2021-03-11 12:50:54,584 [main:63] - replacement of sum of type Int is (Triple<UShort, A, Int>(31982.toUShort(), A(-1267310858, "kdfhq"), 1454944838)).third.rotateRight(1323829030)
2021-03-11 12:50:54,671 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:50:54,671 [main:66] - Compilation checking started
2021-03-11 12:50:54,883 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (Triple<UShort, A, Int>(31982.toUShort(), A(-1267310858, "kdfhq"), 1454944838)).third.rotateRight(1323829030) += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:50:54,885 [main:56] - replacing (str, String)
2021-03-11 12:50:54,885 [main:38] - replacing str String
2021-03-11 12:50:54,885 [main:42] - Getting value of type String
2021-03-11 12:50:54,963 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:54,963 [main:46] - GENERATED VALUE OF TYPE String = "upitj"
2021-03-11 12:50:54,963 [main:49] - GENERATED IS CALL =false
2021-03-11 12:50:55,047 [main:55] - randomType = UShort
2021-03-11 12:50:55,124 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 12:50:55,151 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@5b5c5972]
2021-03-11 12:50:55,151 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]
2021-03-11 12:50:55,229 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:55,229 [main:66] - Generated call from random type = (17622.toUShort()).toByte().toString(-514752838)
2021-03-11 12:50:55,229 [main:94] - GETTING String from String
2021-03-11 12:50:55,247 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d3a6837]]
2021-03-11 12:50:55,247 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d3a6837]
2021-03-11 12:50:55,247 [main:105] - GENERATED CALL = (str).trimStart()
2021-03-11 12:50:55,247 [main:101] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61b5cf30]]
2021-03-11 12:50:55,247 [main:137] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61b5cf30]
2021-03-11 12:50:55,325 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:55,401 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:50:55,401 [main:105] - GENERATED CALL = (str).padStart(-2063265495, 'Ộ')
2021-03-11 12:50:55,402 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69aea4dc]]
2021-03-11 12:50:55,402 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69aea4dc]
2021-03-11 12:50:55,478 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:55,478 [main:105] - GENERATED CALL = (str).concat("qghqe")
2021-03-11 12:50:55,478 [main:101] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6dd07784]]
2021-03-11 12:50:55,478 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6dd07784]
2021-03-11 12:50:55,554 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:50:55,631 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:55,708 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:55,709 [main:105] - GENERATED CALL = (str).replaceAfter('タ', "neomd", "cadbd")
2021-03-11 12:50:55,709 [main:101] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7422651e]]
2021-03-11 12:50:55,709 [main:137] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7422651e]
2021-03-11 12:50:55,822 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:50:55,904 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:55,904 [main:105] - GENERATED CALL = (str).substringAfterLast('촾', "yijft")
2021-03-11 12:50:55,905 [main:101] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b2b861]]
2021-03-11 12:50:55,905 [main:137] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b2b861]
2021-03-11 12:50:55,988 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:50:55,989 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:50:55,989 [main:105] - GENERATED CALL = (str).dropWhile({a: Char -> false})
2021-03-11 12:50:55,989 [main:101] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ff4584d]]
2021-03-11 12:50:55,989 [main:137] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3ff4584d]
2021-03-11 12:50:56,074 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:56,074 [main:105] - GENERATED CALL = (str).take(-1965726200)
2021-03-11 12:50:56,078 [main:101] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26682bd2]]
2021-03-11 12:50:56,078 [main:137] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26682bd2]
2021-03-11 12:50:56,181 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:50:56,259 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:56,339 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:56,340 [main:105] - GENERATED CALL = (str).replaceBefore('', "uuvxa", "oilhb")
2021-03-11 12:50:56,340 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49d8da2a]]
2021-03-11 12:50:56,340 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:50:56,419 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:56,496 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:56,497 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49d8da2a]
2021-03-11 12:50:56,573 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:50:56,652 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:50:56,652 [main:105] - GENERATED CALL = (str).subSequence(1867264155, -1363201518).commonPrefixWith(StringBuilder(), false)
2021-03-11 12:50:56,652 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21280b00], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]]
2021-03-11 12:50:56,652 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21280b00]
2021-03-11 12:50:56,728 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:56,729 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]
2021-03-11 12:50:56,805 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:50:56,806 [main:105] - GENERATED CALL = (str).get(-518344144).plus("vxdkq")
2021-03-11 12:50:56,806 [main:63] - replacement of str of type String is str
2021-03-11 12:50:56,914 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:50:56,916 [main:56] - replacing (sum, Int)
2021-03-11 12:50:56,916 [main:38] - replacing sum Int
2021-03-11 12:50:56,916 [main:42] - Getting value of type Int
2021-03-11 12:50:57,004 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:57,005 [main:46] - GENERATED VALUE OF TYPE Int = 1207944054
2021-03-11 12:50:57,005 [main:49] - GENERATED IS CALL =false
2021-03-11 12:50:57,200 [main:55] - randomType = Set<UInt>
2021-03-11 12:50:57,201 [main:94] - GETTING Int from Int
2021-03-11 12:50:57,258 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d], @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@33616e79]]
2021-03-11 12:50:57,258 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d]
2021-03-11 12:50:57,336 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:50:57,337 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@33616e79]
2021-03-11 12:50:57,337 [main:105] - GENERATED CALL = (0+1).div(0.2329209354120234).roundToInt()
2021-03-11 12:50:57,337 [main:101] - Case = [public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@39041b0c], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@72cbb805]]
2021-03-11 12:50:57,337 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@39041b0c]
2021-03-11 12:50:57,413 [main:302] - generating value of type = Float true depth = 0
2021-03-11 12:50:57,414 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@72cbb805]
2021-03-11 12:50:57,414 [main:105] - GENERATED CALL = (0+1).div(0.4868964f).toRawBits()
2021-03-11 12:50:57,414 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@745deaed]]
2021-03-11 12:50:57,414 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:50:57,414 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@745deaed]
2021-03-11 12:50:57,414 [main:105] - GENERATED CALL = (0+1).toByte().countOneBits()
2021-03-11 12:50:57,414 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f655756]]
2021-03-11 12:50:57,414 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:50:57,490 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:57,491 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f655756]
2021-03-11 12:50:57,491 [main:105] - GENERATED CALL = (0+1).compareTo(602077915).unaryMinus()
2021-03-11 12:50:57,491 [main:101] - Case = [public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d868003]]
2021-03-11 12:50:57,491 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d868003]
2021-03-11 12:50:57,568 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:57,568 [main:105] - GENERATED CALL = (0+1).minus(-127)
2021-03-11 12:50:57,568 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f664709]]
2021-03-11 12:50:57,568 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:50:57,644 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:57,644 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f664709]
2021-03-11 12:50:57,721 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:57,797 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:57,797 [main:105] - GENERATED CALL = (0+1).compareTo(-615461439).coerceIn(1299355256, -1887545604)
2021-03-11 12:50:57,797 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e53c7a]]
2021-03-11 12:50:57,797 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:50:57,797 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e53c7a]
2021-03-11 12:50:57,874 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:57,874 [main:105] - GENERATED CALL = (0+1).toInt().shr(1882977309)
2021-03-11 12:50:57,874 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@58fd4e05]]
2021-03-11 12:50:57,874 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d]
2021-03-11 12:50:57,951 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:50:57,951 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@58fd4e05]
2021-03-11 12:50:58,056 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:58,057 [main:105] - GENERATED CALL = (0+1).div(0.09211683615829824).compareTo(-27)
2021-03-11 12:50:58,057 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4ba73279]]
2021-03-11 12:50:58,057 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:50:58,057 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4ba73279]
2021-03-11 12:50:58,057 [main:105] - GENERATED CALL = (0+1).toShort().unaryMinus()
2021-03-11 12:50:58,057 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ec35323]]
2021-03-11 12:50:58,057 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:50:58,057 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ec35323]
2021-03-11 12:50:58,139 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:58,139 [main:105] - GENERATED CALL = (0+1).toInt().rotateLeft(392740481)
2021-03-11 12:50:58,139 [main:63] - replacement of sum of type Int is (0+1).div(0.09211683615829824).compareTo(-27)
2021-03-11 12:50:58,221 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:50:58,221 [main:66] - Compilation checking started
2021-03-11 12:50:58,441 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (0+1).div(0.09211683615829824).compareTo(-27) += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:50:58,442 [main:56] - replacing (sum, Int)
2021-03-11 12:50:58,443 [main:38] - replacing sum Int
2021-03-11 12:50:58,443 [main:42] - Getting value of type Int
2021-03-11 12:50:58,522 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:58,522 [main:46] - GENERATED VALUE OF TYPE Int = 2071372238
2021-03-11 12:50:58,523 [main:49] - GENERATED IS CALL =false
2021-03-11 12:50:58,524 [main:55] - randomType = A
2021-03-11 12:50:58,601 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:50:58,601 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:50:58,678 [main:194] - Type params = []
2021-03-11 12:50:58,754 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:50:58,754 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:50:58,761 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@55f9f89c]
2021-03-11 12:50:58,837 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:58,838 [main:66] - Generated call from random type = (A(-2057209624, "mklzk")).x.rem(-94)
2021-03-11 12:50:58,838 [main:63] - replacement of sum of type Int is (A(-2057209624, "mklzk")).x.rem(-94)
2021-03-11 12:50:58,914 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:50:58,914 [main:66] - Compilation checking started
2021-03-11 12:50:59,096 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (A(-2057209624, "mklzk")).x.rem(-94) += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:50:59,098 [main:56] - replacing (sum, Int)
2021-03-11 12:50:59,098 [main:38] - replacing sum Int
2021-03-11 12:50:59,098 [main:42] - Getting value of type Int
2021-03-11 12:50:59,176 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:59,176 [main:46] - GENERATED VALUE OF TYPE Int = 642173127
2021-03-11 12:50:59,176 [main:49] - GENERATED IS CALL =false
2021-03-11 12:50:59,336 [main:55] - randomType = Short?
2021-03-11 12:50:59,412 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:50:59,453 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@32278335]
2021-03-11 12:50:59,555 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:59,555 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6561e48]
2021-03-11 12:50:59,636 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:50:59,637 [main:66] - Generated call from random type = (13393)?.compareTo(88).compareTo(83)
2021-03-11 12:50:59,638 [main:94] - GETTING Int from Boolean
2021-03-11 12:50:59,649 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7d291fed]]
2021-03-11 12:50:59,650 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:50:59,732 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:50:59,732 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7d291fed]
2021-03-11 12:50:59,732 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(true).countOneBits()
2021-03-11 12:50:59,732 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f664709]]
2021-03-11 12:50:59,732 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:50:59,827 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:50:59,827 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f664709]
2021-03-11 12:50:59,912 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:59,995 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:50:59,995 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(true).coerceIn(-294315210, 393198469)
2021-03-11 12:50:59,995 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@446340cf]]
2021-03-11 12:50:59,995 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:51:00,077 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:51:00,077 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@446340cf]
2021-03-11 12:51:00,078 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).takeLowestOneBit()
2021-03-11 12:51:00,078 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e53c7a]]
2021-03-11 12:51:00,078 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:51:00,159 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:51:00,159 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e53c7a]
2021-03-11 12:51:00,239 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:00,239 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).shr(-1408412979)
2021-03-11 12:51:00,239 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d4a80]]
2021-03-11 12:51:00,239 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:51:00,315 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:51:00,315 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d4a80]
2021-03-11 12:51:00,315 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).unaryPlus()
2021-03-11 12:51:00,316 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d868003]]
2021-03-11 12:51:00,316 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:51:00,391 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:51:00,392 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d868003]
2021-03-11 12:51:00,467 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:00,468 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(true).minus(-102)
2021-03-11 12:51:00,468 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3ff9eaf8]]
2021-03-11 12:51:00,468 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:51:00,543 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:51:00,544 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3ff9eaf8]
2021-03-11 12:51:00,648 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:00,649 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).coerceAtLeast(1026129244)
2021-03-11 12:51:00,649 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ebc0bf5]]
2021-03-11 12:51:00,649 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:51:00,731 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:51:00,731 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ebc0bf5]
2021-03-11 12:51:00,813 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:00,814 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(true).and(-2000583730)
2021-03-11 12:51:00,814 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3b8291ff]]
2021-03-11 12:51:00,814 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:51:00,897 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:51:00,897 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3b8291ff]
2021-03-11 12:51:00,983 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:00,983 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(true).coerceAtMost(575537848)
2021-03-11 12:51:00,983 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36bf0f77]]
2021-03-11 12:51:00,983 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:51:01,062 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:51:01,062 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36bf0f77]
2021-03-11 12:51:01,062 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(true).takeHighestOneBit()
2021-03-11 12:51:01,062 [main:63] - replacement of sum of type Int is (sum == 0+1+2+3+4).compareTo(true).coerceAtMost(575537848)
2021-03-11 12:51:01,140 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:51:01,140 [main:66] - Compilation checking started
2021-03-11 12:51:01,340 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (sum == 0+1+2+3+4).compareTo(true).coerceAtMost(575537848) += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:51:01,341 [main:56] - replacing (sum, Int)
2021-03-11 12:51:01,342 [main:38] - replacing sum Int
2021-03-11 12:51:01,342 [main:42] - Getting value of type Int
2021-03-11 12:51:01,418 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:01,418 [main:46] - GENERATED VALUE OF TYPE Int = 1388752151
2021-03-11 12:51:01,419 [main:49] - GENERATED IS CALL =false
2021-03-11 12:51:01,497 [main:55] - randomType = Byte
2021-03-11 12:51:01,574 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:01,608 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1c62794d]
2021-03-11 12:51:01,685 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:01,685 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3ff9eaf8]
2021-03-11 12:51:01,762 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:01,763 [main:66] - Generated call from random type = (28).compareTo(31).coerceAtLeast(752893351)
2021-03-11 12:51:01,763 [main:94] - GETTING Int from String
2021-03-11 12:51:01,782 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], public abstract val length: kotlin.Int defined in kotlin.CharSequence[DeserializedPropertyDescriptor@10c0cf8d]]
2021-03-11 12:51:01,782 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:51:01,858 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:01,962 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:01,962 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).subSequence(191299877, 886897974).length
2021-03-11 12:51:01,962 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@d0efe34]]
2021-03-11 12:51:01,962 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@d0efe34]
2021-03-11 12:51:02,045 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:02,045 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).length.rotateRight(-704367031)
2021-03-11 12:51:02,045 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ed6eedb]]
2021-03-11 12:51:02,045 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:51:02,126 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:51:02,126 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ed6eedb]
2021-03-11 12:51:02,215 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:02,215 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).compareTo("yyeyk").div(-31)
2021-03-11 12:51:02,215 [main:101] - Case = [public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fb80e1e]]
2021-03-11 12:51:02,215 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fb80e1e]
2021-03-11 12:51:02,293 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:51:02,294 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:51:02,294 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).indexOfFirst({a: Char -> true})
2021-03-11 12:51:02,294 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fb80e1e]]
2021-03-11 12:51:02,294 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:51:02,377 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:02,455 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:02,455 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fb80e1e]
2021-03-11 12:51:02,535 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:51:02,535 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:51:02,536 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).subSequence(1963818699, -2097019489).indexOfFirst({a: Char -> false})
2021-03-11 12:51:02,536 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6736791a]]
2021-03-11 12:51:02,536 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6736791a]
2021-03-11 12:51:02,536 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).length.inv()
2021-03-11 12:51:02,536 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c9f5998]]
2021-03-11 12:51:02,536 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:51:02,615 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:51:02,616 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c9f5998]
2021-03-11 12:51:02,694 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:02,694 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).compareTo("aupdb").shl(332537924)
2021-03-11 12:51:02,694 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cca13b8]]
2021-03-11 12:51:02,694 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cca13b8]
2021-03-11 12:51:02,771 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-11 12:51:02,772 [main:302] - generating value of type = Int true depth = 1
2021-03-11 12:51:02,772 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).sumOf({a: Char -> 1867566103})
2021-03-11 12:51:02,772 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d63158f]]
2021-03-11 12:51:02,772 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:51:02,849 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:51:02,849 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d63158f]
2021-03-11 12:51:02,849 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).compareTo("edgbc").dec()
2021-03-11 12:51:02,849 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f655756]]
2021-03-11 12:51:02,850 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f655756]
2021-03-11 12:51:02,850 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).length.unaryMinus()
2021-03-11 12:51:02,850 [main:63] - replacement of sum of type Int is (A(-1427813506, "vtkln").y).compareTo("edgbc").dec()
2021-03-11 12:51:02,926 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:51:02,926 [main:66] - Compilation checking started
2021-03-11 12:51:03,113 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (A(-1427813506, "vtkln").y).compareTo("edgbc").dec() += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:51:03,115 [main:56] - replacing (sum, Int)
2021-03-11 12:51:03,115 [main:38] - replacing sum Int
2021-03-11 12:51:03,115 [main:42] - Getting value of type Int
2021-03-11 12:51:03,218 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:03,219 [main:46] - GENERATED VALUE OF TYPE Int = 1925180616
2021-03-11 12:51:03,219 [main:49] - GENERATED IS CALL =false
2021-03-11 12:51:03,561 [main:55] - randomType = Triple<Short, A, A?>?
2021-03-11 12:51:03,639 [main:302] - generating value of type = Triple<Short, A, A?> false depth = 0
2021-03-11 12:51:03,722 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Short, second: A, third: A?): Triple<Short, A, A?> = TODO()
2021-03-11 12:51:03,723 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Short, second: A, third: A?): Triple<Short, A, A?> = TODO()
2021-03-11 12:51:03,802 [main:302] - generating value of type = Short true depth = 3
2021-03-11 12:51:03,802 [main:302] - generating value of type = A false depth = 3
2021-03-11 12:51:03,802 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:51:03,879 [main:194] - Type params = []
2021-03-11 12:51:03,957 [main:302] - generating value of type = Int true depth = 5
2021-03-11 12:51:03,957 [main:302] - generating value of type = String true depth = 5
2021-03-11 12:51:03,957 [main:302] - generating value of type = A false depth = 3
2021-03-11 12:51:03,957 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:51:04,034 [main:194] - Type params = []
2021-03-11 12:51:04,111 [main:302] - generating value of type = Int true depth = 5
2021-03-11 12:51:04,111 [main:302] - generating value of type = String true depth = 5
2021-03-11 12:51:04,112 [main:95] - GENERATED = Triple<Short, A, A?>(12002, A(-1960401115, "tppzi"), A(-1493547789, "gwhky"))
2021-03-11 12:51:04,129 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4ba73279]
2021-03-11 12:51:04,129 [main:66] - Generated call from random type = (Triple<Short, A, A?>(12002, A(-1960401115, "tppzi"), A(-1493547789, "gwhky")))?.first.unaryMinus()
2021-03-11 12:51:04,129 [main:94] - GETTING Int from Int
2021-03-11 12:51:04,161 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@a5b3754]]
2021-03-11 12:51:04,161 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@a5b3754]
2021-03-11 12:51:04,162 [main:105] - GENERATED CALL = (0+1).countLeadingZeroBits()
2021-03-11 12:51:04,162 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f161575]]
2021-03-11 12:51:04,162 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:04,239 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:04,239 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f161575]
2021-03-11 12:51:04,344 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:04,345 [main:105] - GENERATED CALL = (0+1).compareTo(256550767).times(26)
2021-03-11 12:51:04,345 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@208e2fd]]
2021-03-11 12:51:04,345 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:51:04,345 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@208e2fd]
2021-03-11 12:51:04,345 [main:105] - GENERATED CALL = (0+1).toShort().countLeadingZeroBits()
2021-03-11 12:51:04,345 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@a5b3754]]
2021-03-11 12:51:04,345 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:04,427 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:04,427 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@a5b3754]
2021-03-11 12:51:04,427 [main:105] - GENERATED CALL = (0+1).compareTo(-2078730540).countLeadingZeroBits()
2021-03-11 12:51:04,427 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d868003]]
2021-03-11 12:51:04,427 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:51:04,427 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d868003]
2021-03-11 12:51:04,512 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:04,513 [main:105] - GENERATED CALL = (0+1).toInt().minus(-31)
2021-03-11 12:51:04,513 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@446340cf]]
2021-03-11 12:51:04,513 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:04,601 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:04,601 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@446340cf]
2021-03-11 12:51:04,602 [main:105] - GENERATED CALL = (0+1).compareTo(-952635807).takeLowestOneBit()
2021-03-11 12:51:04,602 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76034fc0]]
2021-03-11 12:51:04,602 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:04,680 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:04,680 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76034fc0]
2021-03-11 12:51:04,680 [main:105] - GENERATED CALL = (0+1).compareTo(-292460781).countTrailingZeroBits()
2021-03-11 12:51:04,680 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36845587]]
2021-03-11 12:51:04,681 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:51:04,681 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36845587]
2021-03-11 12:51:04,759 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:04,759 [main:105] - GENERATED CALL = (0+1).toInt().xor(-2086388942)
2021-03-11 12:51:04,759 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e53c7a]]
2021-03-11 12:51:04,760 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:04,837 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:04,838 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e53c7a]
2021-03-11 12:51:04,914 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:04,914 [main:105] - GENERATED CALL = (0+1).compareTo(781748083).shr(1217169406)
2021-03-11 12:51:04,914 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1f1092b7]]
2021-03-11 12:51:04,914 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:51:04,914 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1f1092b7]
2021-03-11 12:51:04,915 [main:105] - GENERATED CALL = (0+1).toByte().toInt()
2021-03-11 12:51:04,915 [main:63] - replacement of sum of type Int is 1925180616
2021-03-11 12:51:04,990 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 12:51:04,990 [main:66] - Compilation checking started
2021-03-11 12:51:05,173 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        1925180616 += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:51:05,174 [main:56] - replacing (sum, Int)
2021-03-11 12:51:05,174 [main:38] - replacing sum Int
2021-03-11 12:51:05,174 [main:42] - Getting value of type Int
2021-03-11 12:51:05,251 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:05,251 [main:46] - GENERATED VALUE OF TYPE Int = 1192642366
2021-03-11 12:51:05,251 [main:49] - GENERATED IS CALL =false
2021-03-11 12:51:05,332 [main:55] - randomType = UByte
2021-03-11 12:51:05,408 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:51:05,435 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7f34191]
2021-03-11 12:51:05,436 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6c27f2a5]
2021-03-11 12:51:05,436 [main:66] - Generated call from random type = (117.toUByte()).toShort().toInt()
2021-03-11 12:51:05,436 [main:94] - GETTING Int from Int
2021-03-11 12:51:05,468 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@ccd075b]]
2021-03-11 12:51:05,468 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:51:05,468 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@ccd075b]
2021-03-11 12:51:05,573 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:05,574 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toByte().rem(-86)
2021-03-11 12:51:05,574 [main:101] - Case = [@kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@55f9f89c]]
2021-03-11 12:51:05,574 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@55f9f89c]
2021-03-11 12:51:05,654 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:05,654 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).rem(-115)
2021-03-11 12:51:05,655 [main:101] - Case = [public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f664709]]
2021-03-11 12:51:05,655 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f664709]
2021-03-11 12:51:05,736 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:05,816 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:05,817 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).coerceIn(-998071766, -1367979895)
2021-03-11 12:51:05,817 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Float.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@65926c63]]
2021-03-11 12:51:05,817 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169]
2021-03-11 12:51:05,817 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Float.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@65926c63]
2021-03-11 12:51:05,817 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toFloat().roundToInt()
2021-03-11 12:51:05,817 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7d291fed]]
2021-03-11 12:51:05,817 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:05,902 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:05,903 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7d291fed]
2021-03-11 12:51:05,903 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).compareTo(1637778213).countOneBits()
2021-03-11 12:51:05,903 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@68b11d5c]]
2021-03-11 12:51:05,903 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:51:05,903 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@68b11d5c]
2021-03-11 12:51:05,903 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toShort().countOneBits()
2021-03-11 12:51:05,903 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4da4fc25]]
2021-03-11 12:51:05,903 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:51:05,903 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4da4fc25]
2021-03-11 12:51:05,981 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:05,981 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toShort().div(102)
2021-03-11 12:51:05,981 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d], @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@33616e79]]
2021-03-11 12:51:05,981 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d]
2021-03-11 12:51:06,060 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:51:06,061 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@33616e79]
2021-03-11 12:51:06,061 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).div(0.42558763991224524).roundToInt()
2021-03-11 12:51:06,061 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@5052b22e]]
2021-03-11 12:51:06,061 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:51:06,061 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toInt().absoluteValue
2021-03-11 12:51:06,061 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d63158f]]
2021-03-11 12:51:06,061 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:06,138 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:06,138 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d63158f]
2021-03-11 12:51:06,139 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).compareTo(-77254117).dec()
2021-03-11 12:51:06,139 [main:63] - replacement of sum of type Int is (A(-1427813506, "vtkln").x).toInt().absoluteValue
2021-03-11 12:51:06,215 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:51:06,215 [main:66] - Compilation checking started
2021-03-11 12:51:06,399 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (A(-1427813506, "vtkln").x).toInt().absoluteValue += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:51:06,401 [main:56] - replacing (sum, Int)
2021-03-11 12:51:06,401 [main:38] - replacing sum Int
2021-03-11 12:51:06,401 [main:42] - Getting value of type Int
2021-03-11 12:51:06,479 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:06,479 [main:46] - GENERATED VALUE OF TYPE Int = 1956867388
2021-03-11 12:51:06,479 [main:49] - GENERATED IS CALL =false
2021-03-11 12:51:06,560 [main:55] - randomType = Function1<Float, A>
2021-03-11 12:51:06,560 [main:94] - GETTING Int from String
2021-03-11 12:51:06,583 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18626c8c]]
2021-03-11 12:51:06,583 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:51:06,659 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:51:06,660 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18626c8c]
2021-03-11 12:51:06,736 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:06,737 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).compareTo("xojlf").plus(109)
2021-03-11 12:51:06,737 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ec35323]]
2021-03-11 12:51:06,737 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:51:06,843 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:51:06,843 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ec35323]
2021-03-11 12:51:06,927 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:06,927 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).compareTo("vynnh").rotateLeft(-1857029528)
2021-03-11 12:51:06,927 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3b8291ff]]
2021-03-11 12:51:06,927 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:51:07,011 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:51:07,012 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3b8291ff]
2021-03-11 12:51:07,095 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:07,096 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).compareTo("eewsp").coerceAtMost(-1692146785)
2021-03-11 12:51:07,096 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f655756]]
2021-03-11 12:51:07,096 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:51:07,183 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:51:07,184 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f655756]
2021-03-11 12:51:07,184 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).compareTo("iwdfj").unaryMinus()
2021-03-11 12:51:07,184 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cca13b8]]
2021-03-11 12:51:07,184 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cca13b8]
2021-03-11 12:51:07,264 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-11 12:51:07,264 [main:302] - generating value of type = Int true depth = 1
2021-03-11 12:51:07,264 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).sumOf({a: Char -> 952495220})
2021-03-11 12:51:07,264 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12ba5a1a]]
2021-03-11 12:51:07,264 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12ba5a1a]
2021-03-11 12:51:07,265 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).count()
2021-03-11 12:51:07,265 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c9f5998]]
2021-03-11 12:51:07,265 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:51:07,343 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:51:07,344 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c9f5998]
2021-03-11 12:51:07,419 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:07,420 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).compareTo("bvlys").shl(-1658746213)
2021-03-11 12:51:07,420 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62a877f4]]
2021-03-11 12:51:07,420 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62a877f4]
2021-03-11 12:51:07,420 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).length.toInt()
2021-03-11 12:51:07,420 [main:101] - Case = [public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b85d444]]
2021-03-11 12:51:07,420 [main:137] - GENERATING call of type public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b85d444]
2021-03-11 12:51:07,496 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:51:07,572 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:07,648 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:51:07,648 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).indexOf('ϊ', -1885641476, true)
2021-03-11 12:51:07,648 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12ba5a1a]]
2021-03-11 12:51:07,648 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:51:07,724 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:07,800 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:07,800 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12ba5a1a]
2021-03-11 12:51:07,800 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).subSequence(-859047844, 409284971).count()
2021-03-11 12:51:07,800 [main:63] - replacement of sum of type Int is (A(-1427813506, "vtkln").y).sumOf({a: Char -> 952495220})
2021-03-11 12:51:07,902 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:51:07,902 [main:66] - Compilation checking started
2021-03-11 12:51:08,147 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (A(-1427813506, "vtkln").y).sumOf({a: Char -> 952495220}) += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:51:08,150 [main:56] - replacing (sum, Int)
2021-03-11 12:51:08,150 [main:38] - replacing sum Int
2021-03-11 12:51:08,150 [main:42] - Getting value of type Int
2021-03-11 12:51:08,266 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:08,267 [main:46] - GENERATED VALUE OF TYPE Int = -1916506562
2021-03-11 12:51:08,267 [main:49] - GENERATED IS CALL =false
2021-03-11 12:51:08,346 [main:55] - randomType = A?
2021-03-11 12:51:08,424 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:51:08,425 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:51:08,501 [main:194] - Type params = []
2021-03-11 12:51:08,577 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:51:08,577 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:51:08,586 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@216b8aa8]
2021-03-11 12:51:08,662 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:08,663 [main:66] - Generated call from random type = (A(819708269, "ozkhx"))?.x.ushr(846290831)
2021-03-11 12:51:08,663 [main:63] - replacement of sum of type Int is (A(819708269, "ozkhx"))?.x.ushr(846290831)
2021-03-11 12:51:08,737 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:51:08,738 [main:66] - Compilation checking started
2021-03-11 12:51:08,920 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (A(819708269, "ozkhx"))?.x.ushr(846290831) += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:51:08,921 [main:56] - replacing (sum, Int)
2021-03-11 12:51:08,921 [main:38] - replacing sum Int
2021-03-11 12:51:08,921 [main:42] - Getting value of type Int
2021-03-11 12:51:08,998 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:08,998 [main:46] - GENERATED VALUE OF TYPE Int = 997129836
2021-03-11 12:51:08,998 [main:49] - GENERATED IS CALL =false
2021-03-11 12:51:08,999 [main:55] - randomType = A
2021-03-11 12:51:09,074 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:51:09,075 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:51:09,151 [main:194] - Type params = []
2021-03-11 12:51:09,226 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:51:09,226 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:51:09,233 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d63158f]
2021-03-11 12:51:09,233 [main:66] - Generated call from random type = (A(-2087359894, "sugva")).x.dec()
2021-03-11 12:51:09,234 [main:94] - GETTING Int from String
2021-03-11 12:51:09,250 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d63158f]]
2021-03-11 12:51:09,251 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:51:09,353 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:51:09,354 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d63158f]
2021-03-11 12:51:09,354 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).compareTo("neokx").dec()
2021-03-11 12:51:09,354 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cca13b8]]
2021-03-11 12:51:09,354 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:51:09,438 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:09,521 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:09,522 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cca13b8]
2021-03-11 12:51:09,605 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-11 12:51:09,606 [main:302] - generating value of type = Int true depth = 1
2021-03-11 12:51:09,606 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).subSequence(309952725, -1279520946).sumOf({a: Char -> -1264492828})
2021-03-11 12:51:09,606 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36bf0f77]]
2021-03-11 12:51:09,606 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:51:09,694 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:51:09,694 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36bf0f77]
2021-03-11 12:51:09,694 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).compareTo("yqtto").takeHighestOneBit()
2021-03-11 12:51:09,694 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@216b8aa8]]
2021-03-11 12:51:09,695 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:51:09,775 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:51:09,775 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@216b8aa8]
2021-03-11 12:51:09,855 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:09,856 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).compareTo("fmcfq").ushr(1964427102)
2021-03-11 12:51:09,856 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b80cd8f]]
2021-03-11 12:51:09,856 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:51:09,934 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:51:09,935 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b80cd8f]
2021-03-11 12:51:09,935 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).compareTo("zaxff").inc()
2021-03-11 12:51:09,935 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2814a4a]]
2021-03-11 12:51:09,935 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).length.sign
2021-03-11 12:51:09,935 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d4a80]]
2021-03-11 12:51:09,935 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d4a80]
2021-03-11 12:51:09,935 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).length.unaryPlus()
2021-03-11 12:51:09,935 [main:101] - Case = [public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f1f36c0]]
2021-03-11 12:51:09,935 [main:137] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f1f36c0]
2021-03-11 12:51:10,013 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:51:10,092 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:10,170 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:51:10,171 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).lastIndexOf('瑡', -222866830, false)
2021-03-11 12:51:10,171 [main:101] - Case = [public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fb80e1e]]
2021-03-11 12:51:10,171 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fb80e1e]
2021-03-11 12:51:10,249 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:51:10,250 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:51:10,250 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).indexOfFirst({a: Char -> true})
2021-03-11 12:51:10,250 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f1f36c0]]
2021-03-11 12:51:10,250 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:51:10,354 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:10,437 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:10,437 [main:137] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f1f36c0]
2021-03-11 12:51:10,520 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:51:10,605 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:10,692 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:51:10,692 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).subSequence(1987519297, -1341938940).lastIndexOf('됺', -823016041, true)
2021-03-11 12:51:10,692 [main:63] - replacement of sum of type Int is (A(-1427813506, "vtkln").y).compareTo("fmcfq").ushr(1964427102)
2021-03-11 12:51:10,772 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:51:10,772 [main:66] - Compilation checking started
2021-03-11 12:51:10,956 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (A(-1427813506, "vtkln").y).compareTo("fmcfq").ushr(1964427102) += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:51:10,957 [main:56] - replacing (sum, Int)
2021-03-11 12:51:10,958 [main:38] - replacing sum Int
2021-03-11 12:51:10,958 [main:42] - Getting value of type Int
2021-03-11 12:51:11,034 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:11,034 [main:46] - GENERATED VALUE OF TYPE Int = -628548562
2021-03-11 12:51:11,034 [main:49] - GENERATED IS CALL =false
2021-03-11 12:51:11,035 [main:55] - randomType = A
2021-03-11 12:51:11,112 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:51:11,112 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:51:11,188 [main:194] - Type params = []
2021-03-11 12:51:11,263 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:51:11,264 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:51:11,275 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3ff9eaf8]
2021-03-11 12:51:11,351 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:11,351 [main:66] - Generated call from random type = (A(-68922862, "ljjen")).x.coerceAtLeast(2057113802)
2021-03-11 12:51:11,352 [main:94] - GETTING Int from Int
2021-03-11 12:51:11,384 [main:101] - Case = [public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ed6eedb]]
2021-03-11 12:51:11,385 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ed6eedb]
2021-03-11 12:51:11,461 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:11,461 [main:105] - GENERATED CALL = (0+1).div(-74)
2021-03-11 12:51:11,462 [main:101] - Case = [@kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@55f9f89c]]
2021-03-11 12:51:11,462 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@55f9f89c]
2021-03-11 12:51:11,538 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:11,538 [main:105] - GENERATED CALL = (0+1).rem(-28)
2021-03-11 12:51:11,539 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@29a1d850]]
2021-03-11 12:51:11,539 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:51:11,539 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@29a1d850]
2021-03-11 12:51:11,539 [main:105] - GENERATED CALL = (0+1).toByte().countTrailingZeroBits()
2021-03-11 12:51:11,539 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@390b15c0]]
2021-03-11 12:51:11,539 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:51:11,539 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@390b15c0]
2021-03-11 12:51:11,641 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:51:11,642 [main:105] - GENERATED CALL = (0+1).toChar().minus('蒔')
2021-03-11 12:51:11,642 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2814a4a]]
2021-03-11 12:51:11,642 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:11,722 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:11,723 [main:105] - GENERATED CALL = (0+1).compareTo(-1137809874).sign
2021-03-11 12:51:11,723 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36845587]]
2021-03-11 12:51:11,723 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:11,804 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:11,804 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36845587]
2021-03-11 12:51:11,885 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:11,885 [main:105] - GENERATED CALL = (0+1).compareTo(-328147683).xor(-1724836961)
2021-03-11 12:51:11,885 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@5052b22e]]
2021-03-11 12:51:11,885 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:11,970 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:11,970 [main:105] - GENERATED CALL = (0+1).compareTo(-1295002532).absoluteValue
2021-03-11 12:51:11,970 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c9f5998]]
2021-03-11 12:51:11,970 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:51:11,970 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c9f5998]
2021-03-11 12:51:12,048 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:12,049 [main:105] - GENERATED CALL = (0+1).toInt().shl(1961070150)
2021-03-11 12:51:12,049 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2d4ffd58]]
2021-03-11 12:51:12,049 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:51:12,126 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:51:12,127 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2d4ffd58]
2021-03-11 12:51:12,127 [main:105] - GENERATED CALL = (0+1).div(-8915802988434419791).countTrailingZeroBits()
2021-03-11 12:51:12,127 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@241f9269]]
2021-03-11 12:51:12,127 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:12,203 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:12,203 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@241f9269]
2021-03-11 12:51:12,279 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:12,279 [main:105] - GENERATED CALL = (0+1).compareTo(926296159).or(921573877)
2021-03-11 12:51:12,279 [main:63] - replacement of sum of type Int is (0+1).compareTo(-328147683).xor(-1724836961)
2021-03-11 12:51:12,355 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:51:12,355 [main:66] - Compilation checking started
2021-03-11 12:51:12,536 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (0+1).compareTo(-328147683).xor(-1724836961) += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:51:12,537 [main:56] - replacing (sum, Int)
2021-03-11 12:51:12,538 [main:38] - replacing sum Int
2021-03-11 12:51:12,538 [main:42] - Getting value of type Int
2021-03-11 12:51:12,614 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:12,614 [main:46] - GENERATED VALUE OF TYPE Int = 521401920
2021-03-11 12:51:12,615 [main:49] - GENERATED IS CALL =false
2021-03-11 12:51:12,694 [main:55] - randomType = Char?
2021-03-11 12:51:12,796 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:51:12,829 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@20381e51]
2021-03-11 12:51:12,911 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:51:12,911 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d63158f]
2021-03-11 12:51:12,912 [main:66] - Generated call from random type = ('')?.compareTo('').dec()
2021-03-11 12:51:12,912 [main:94] - GETTING Int from Int
2021-03-11 12:51:12,953 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ed6eedb]]
2021-03-11 12:51:12,953 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:13,035 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:13,035 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ed6eedb]
2021-03-11 12:51:13,123 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:13,123 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).compareTo(394872902).div(118)
2021-03-11 12:51:13,123 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@a5b3754]]
2021-03-11 12:51:13,123 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:13,201 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:13,202 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@a5b3754]
2021-03-11 12:51:13,202 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).compareTo(-1757727943).countLeadingZeroBits()
2021-03-11 12:51:13,202 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@8c6da7c]]
2021-03-11 12:51:13,202 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:51:13,280 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:51:13,280 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@8c6da7c]
2021-03-11 12:51:13,280 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).div(-4262736607538307084).countLeadingZeroBits()
2021-03-11 12:51:13,280 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d868003]]
2021-03-11 12:51:13,280 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:51:13,280 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d868003]
2021-03-11 12:51:13,358 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:13,358 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toInt().minus(-26)
2021-03-11 12:51:13,358 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e], public open val start: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@48a2522d]]
2021-03-11 12:51:13,358 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e]
2021-03-11 12:51:13,435 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:13,435 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).rangeTo(102).start
2021-03-11 12:51:13,436 [main:101] - Case = [public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f664709]]
2021-03-11 12:51:13,436 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f664709]
2021-03-11 12:51:13,512 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:13,588 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:13,588 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).coerceIn(1169461135, 266342647)
2021-03-11 12:51:13,588 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76034fc0]]
2021-03-11 12:51:13,588 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:13,664 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:13,665 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76034fc0]
2021-03-11 12:51:13,665 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).compareTo(-2081536736).countTrailingZeroBits()
2021-03-11 12:51:13,665 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4c4a428d]]
2021-03-11 12:51:13,665 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169]
2021-03-11 12:51:13,665 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4c4a428d]
2021-03-11 12:51:13,665 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toFloat().toBits()
2021-03-11 12:51:13,665 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2fea6abb]]
2021-03-11 12:51:13,665 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:51:13,665 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2fea6abb]
2021-03-11 12:51:13,741 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:13,742 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toLong().compareTo(45)
2021-03-11 12:51:13,742 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@5052b22e]]
2021-03-11 12:51:13,742 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:13,842 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:13,842 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).compareTo(-1973483165).absoluteValue
2021-03-11 12:51:13,843 [main:63] - replacement of sum of type Int is (A(-1427813506, "vtkln").x).compareTo(394872902).div(118)
2021-03-11 12:51:13,923 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:51:13,923 [main:66] - Compilation checking started
2021-03-11 12:51:14,123 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (A(-1427813506, "vtkln").x).compareTo(394872902).div(118) += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:51:14,125 [main:56] - replacing (sum, Int)
2021-03-11 12:51:14,125 [main:38] - replacing sum Int
2021-03-11 12:51:14,125 [main:42] - Getting value of type Int
2021-03-11 12:51:14,210 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:14,211 [main:46] - GENERATED VALUE OF TYPE Int = 1841804400
2021-03-11 12:51:14,211 [main:49] - GENERATED IS CALL =false
2021-03-11 12:51:14,211 [main:55] - randomType = A
2021-03-11 12:51:14,289 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:51:14,289 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:51:14,368 [main:194] - Type params = []
2021-03-11 12:51:14,445 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:51:14,445 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:51:14,455 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@a5b3754]
2021-03-11 12:51:14,455 [main:66] - Generated call from random type = (A(-2105057833, "lbrnm")).x.countLeadingZeroBits()
2021-03-11 12:51:14,456 [main:94] - GETTING Int from String
2021-03-11 12:51:14,478 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21280b00], public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@20381e51]]
2021-03-11 12:51:14,478 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21280b00]
2021-03-11 12:51:14,555 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:14,555 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@20381e51]
2021-03-11 12:51:14,632 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:51:14,632 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).get(1712122740).compareTo('ඖ')
2021-03-11 12:51:14,633 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fb80e1e]]
2021-03-11 12:51:14,633 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:51:14,709 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:14,784 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:14,785 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fb80e1e]
2021-03-11 12:51:14,860 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:51:14,860 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:51:14,861 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).subSequence(-205072498, -1459689079).indexOfFirst({a: Char -> true})
2021-03-11 12:51:14,861 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e53c7a]]
2021-03-11 12:51:14,861 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:51:14,936 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:51:14,937 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e53c7a]
2021-03-11 12:51:15,038 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:15,039 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).compareTo("ojboq").shr(846163857)
2021-03-11 12:51:15,039 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ed6eedb]]
2021-03-11 12:51:15,039 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ed6eedb]
2021-03-11 12:51:15,121 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:15,121 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).length.div(-57)
2021-03-11 12:51:15,121 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36845587]]
2021-03-11 12:51:15,121 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:51:15,203 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:51:15,204 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36845587]
2021-03-11 12:51:15,284 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:15,285 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).compareTo("dyazx").xor(-1764936626)
2021-03-11 12:51:15,285 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62a877f4]]
2021-03-11 12:51:15,285 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62a877f4]
2021-03-11 12:51:15,285 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).length.toInt()
2021-03-11 12:51:15,285 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@55f9f89c]]
2021-03-11 12:51:15,285 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:51:15,372 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:51:15,372 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@55f9f89c]
2021-03-11 12:51:15,450 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:15,450 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).compareTo("bgruf").rem(55)
2021-03-11 12:51:15,450 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ebc0bf5]]
2021-03-11 12:51:15,450 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ebc0bf5]
2021-03-11 12:51:15,529 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:15,529 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).length.and(257547764)
2021-03-11 12:51:15,529 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3ff9eaf8]]
2021-03-11 12:51:15,529 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:51:15,607 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:51:15,607 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3ff9eaf8]
2021-03-11 12:51:15,684 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:15,684 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).compareTo("qjmku").coerceAtLeast(1167586479)
2021-03-11 12:51:15,684 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36bf0f77]]
2021-03-11 12:51:15,684 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:51:15,759 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:51:15,760 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36bf0f77]
2021-03-11 12:51:15,760 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).compareTo("uxfaw").takeHighestOneBit()
2021-03-11 12:51:15,760 [main:63] - replacement of sum of type Int is (A(-1427813506, "vtkln").y).compareTo("dyazx").xor(-1764936626)
2021-03-11 12:51:15,836 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:51:15,836 [main:66] - Compilation checking started
2021-03-11 12:51:16,025 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (A(-1427813506, "vtkln").y).compareTo("dyazx").xor(-1764936626) += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:51:16,027 [main:56] - replacing (sum, Int)
2021-03-11 12:51:16,027 [main:38] - replacing sum Int
2021-03-11 12:51:16,027 [main:42] - Getting value of type Int
2021-03-11 12:51:16,108 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:16,108 [main:46] - GENERATED VALUE OF TYPE Int = 2050553699
2021-03-11 12:51:16,108 [main:49] - GENERATED IS CALL =false
2021-03-11 12:51:16,214 [main:55] - randomType = UByte
2021-03-11 12:51:16,297 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:51:16,333 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@4244b72e]
2021-03-11 12:51:16,333 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2d4ffd58]
2021-03-11 12:51:16,333 [main:66] - Generated call from random type = (95.toUByte()).toLong().countTrailingZeroBits()
2021-03-11 12:51:16,333 [main:94] - GETTING Int from Int
2021-03-11 12:51:16,373 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d], public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@632c8bb9]]
2021-03-11 12:51:16,373 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d]
2021-03-11 12:51:16,454 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:51:16,454 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@632c8bb9]
2021-03-11 12:51:16,455 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).div(0.36565513872252875).toInt()
2021-03-11 12:51:16,455 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1f1092b7]]
2021-03-11 12:51:16,455 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:51:16,455 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1f1092b7]
2021-03-11 12:51:16,455 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toByte().toInt()
2021-03-11 12:51:16,455 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62a877f4]]
2021-03-11 12:51:16,455 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:16,542 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:16,543 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62a877f4]
2021-03-11 12:51:16,543 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).compareTo(-855763074).toInt()
2021-03-11 12:51:16,543 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ec35323]]
2021-03-11 12:51:16,543 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:51:16,543 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ec35323]
2021-03-11 12:51:16,620 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:16,621 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toInt().rotateLeft(307890283)
2021-03-11 12:51:16,621 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Float.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@65926c63]]
2021-03-11 12:51:16,621 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169]
2021-03-11 12:51:16,621 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Float.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@65926c63]
2021-03-11 12:51:16,621 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toFloat().roundToInt()
2021-03-11 12:51:16,621 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ec35323]]
2021-03-11 12:51:16,621 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:16,703 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:16,703 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ec35323]
2021-03-11 12:51:16,783 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:16,783 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).compareTo(1449202564).rotateLeft(1421451658)
2021-03-11 12:51:16,783 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76034fc0]]
2021-03-11 12:51:16,783 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:51:16,783 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76034fc0]
2021-03-11 12:51:16,783 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toInt().countTrailingZeroBits()
2021-03-11 12:51:16,783 [main:101] - Case = [@kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@55f9f89c]]
2021-03-11 12:51:16,783 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@55f9f89c]
2021-03-11 12:51:16,862 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:16,862 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).rem(89)
2021-03-11 12:51:16,862 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f161575]]
2021-03-11 12:51:16,862 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:16,941 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:16,941 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f161575]
2021-03-11 12:51:17,020 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:17,020 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).compareTo(1680595634).times(-127)
2021-03-11 12:51:17,020 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@61aa5dbf]]
2021-03-11 12:51:17,020 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:51:17,020 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@61aa5dbf]
2021-03-11 12:51:17,100 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:17,100 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toShort().rem(107)
2021-03-11 12:51:17,100 [main:63] - replacement of sum of type Int is (95.toUByte()).toLong().countTrailingZeroBits()
2021-03-11 12:51:17,179 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:51:17,179 [main:66] - Compilation checking started
2021-03-11 12:51:17,367 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (95.toUByte()).toLong().countTrailingZeroBits() += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:51:17,368 [main:56] - replacing (sum, Int)
2021-03-11 12:51:17,368 [main:38] - replacing sum Int
2021-03-11 12:51:17,369 [main:42] - Getting value of type Int
2021-03-11 12:51:17,470 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:17,470 [main:46] - GENERATED VALUE OF TYPE Int = 1082428106
2021-03-11 12:51:17,470 [main:49] - GENERATED IS CALL =false
2021-03-11 12:51:17,892 [main:55] - randomType = List<Map<Byte?, ULong>>
2021-03-11 12:51:17,893 [main:94] - GETTING Int from String
2021-03-11 12:51:17,921 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6736791a]]
2021-03-11 12:51:17,921 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:51:18,001 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:51:18,001 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6736791a]
2021-03-11 12:51:18,001 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).compareTo("htxpz").inv()
2021-03-11 12:51:18,001 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3b8291ff]]
2021-03-11 12:51:18,001 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3b8291ff]
2021-03-11 12:51:18,078 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:18,078 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).length.coerceAtMost(-1540346765)
2021-03-11 12:51:18,078 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d63158f]]
2021-03-11 12:51:18,078 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:51:18,155 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:51:18,156 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d63158f]
2021-03-11 12:51:18,156 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).compareTo("ilorf").dec()
2021-03-11 12:51:18,156 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f664709]]
2021-03-11 12:51:18,156 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:51:18,235 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:51:18,236 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f664709]
2021-03-11 12:51:18,314 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:18,392 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:18,392 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).compareTo("lwtet").coerceIn(-815518360, -1161819254)
2021-03-11 12:51:18,393 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e53c7a]]
2021-03-11 12:51:18,393 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:51:18,494 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:51:18,494 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e53c7a]
2021-03-11 12:51:18,574 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:18,575 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).compareTo("ldxss").shr(1200909819)
2021-03-11 12:51:18,575 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12698afb]]
2021-03-11 12:51:18,575 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:51:18,656 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:18,738 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:18,739 [main:137] - GENERATING call of type public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12698afb]
2021-03-11 12:51:18,833 [main:302] - generating value of type = CharArray false depth = 0
2021-03-11 12:51:18,924 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 12:51:18,925 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 12:51:19,004 [main:302] - generating value of type = Char true depth = 3
2021-03-11 12:51:19,004 [main:95] - GENERATED = charArrayOf('祱')
2021-03-11 12:51:19,080 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:19,158 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:51:19,158 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).subSequence(401132115, -589400419).indexOfAny(charArrayOf('祱'), 1535742623, true)
2021-03-11 12:51:19,159 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a1076df]]
2021-03-11 12:51:19,159 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:51:19,250 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:19,328 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:19,328 [main:137] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a1076df]
2021-03-11 12:51:19,403 [main:302] - generating value of type = CharArray false depth = 0
2021-03-11 12:51:19,549 [main:43] - GENERATING CALL OF fun CharArray(size: kotlin.Int, init: (kotlin.Int)->kotlin.Char): CharArray = TODO()
2021-03-11 12:51:19,551 [main:61] - WITHOUT TYPE PARAMS = fun CharArray(size: kotlin.Int, init: (kotlin.Int)->kotlin.Char): CharArray = TODO()
2021-03-11 12:51:19,853 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:51:19,853 [main:302] - generating value of type = Function1<Int, Char> false depth = 3
2021-03-11 12:51:19,853 [main:302] - generating value of type = Char true depth = 4
2021-03-11 12:51:19,854 [main:95] - GENERATED = CharArray(510942126, {a: Int -> '䫓'})
2021-03-11 12:51:19,940 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:20,018 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:51:20,019 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).subSequence(607371061, 1048289169).lastIndexOfAny(CharArray(510942126, {a: Int -> '䫓'}), -1989541156, true)
2021-03-11 12:51:20,019 [main:101] - Case = [public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b3faa6c]]
2021-03-11 12:51:20,019 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b3faa6c]
2021-03-11 12:51:20,098 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:51:20,098 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:51:20,098 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).indexOfLast({a: Char -> true})
2021-03-11 12:51:20,098 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@216b8aa8]]
2021-03-11 12:51:20,098 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:51:20,175 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:51:20,175 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@216b8aa8]
2021-03-11 12:51:20,251 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:20,252 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).compareTo("jnvbt").ushr(-358706916)
2021-03-11 12:51:20,252 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b80cd8f]]
2021-03-11 12:51:20,252 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:51:20,327 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:51:20,328 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b80cd8f]
2021-03-11 12:51:20,328 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).compareTo("wbjcc").inc()
2021-03-11 12:51:20,328 [main:63] - replacement of sum of type Int is (A(-1427813506, "vtkln").y).indexOfLast({a: Char -> true})
2021-03-11 12:51:20,409 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:51:20,409 [main:66] - Compilation checking started
2021-03-11 12:51:20,602 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (A(-1427813506, "vtkln").y).indexOfLast({a: Char -> true}) += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:51:20,603 [main:56] - replacing (sum, Int)
2021-03-11 12:51:20,604 [main:38] - replacing sum Int
2021-03-11 12:51:20,604 [main:42] - Getting value of type Int
2021-03-11 12:51:20,681 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:20,682 [main:46] - GENERATED VALUE OF TYPE Int = 262191427
2021-03-11 12:51:20,682 [main:49] - GENERATED IS CALL =false
2021-03-11 12:51:20,885 [main:55] - randomType = HashSet<A>
2021-03-11 12:51:20,967 [main:302] - generating value of type = HashSet<A> false depth = 0
2021-03-11 12:51:21,052 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): HashSet<A> = TODO()
2021-03-11 12:51:21,053 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): HashSet<A> = TODO()
2021-03-11 12:51:21,140 [main:95] - GENERATED = linkedSetOf<A>()
2021-03-11 12:51:21,290 [main:137] - GENERATING call of type public fun <@kotlin.internal.OnlyInputTypes T> kotlin.collections.Iterable<T>.indexOf(element: T): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4cd775f3]
2021-03-11 12:51:21,367 [main:302] - generating value of type = T false depth = 0
2021-03-11 12:51:21,450 [main:43] - GENERATING CALL OF fun <T> maxOf(a: A, other: A, comparator: kotlin.Comparator<A>): T = TODO()
2021-03-11 12:51:21,450 [main:61] - WITHOUT TYPE PARAMS = fun <T> maxOf(a: A, other: A, comparator: kotlin.Comparator<A>): T = TODO()
2021-03-11 12:51:21,609 [main:302] - generating value of type = A false depth = 3
2021-03-11 12:51:21,609 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:51:21,684 [main:194] - Type params = []
2021-03-11 12:51:21,761 [main:302] - generating value of type = Int true depth = 5
2021-03-11 12:51:21,761 [main:302] - generating value of type = String true depth = 5
2021-03-11 12:51:21,761 [main:302] - generating value of type = A false depth = 3
2021-03-11 12:51:21,762 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:51:21,871 [main:194] - Type params = []
2021-03-11 12:51:21,952 [main:302] - generating value of type = Int true depth = 5
2021-03-11 12:51:21,953 [main:302] - generating value of type = String true depth = 5
2021-03-11 12:51:21,953 [main:302] - generating value of type = Comparator<A> false depth = 3
2021-03-11 12:51:22,123 [main:43] - GENERATING CALL OF fun <T, K> compareBy(comparator: kotlin.Comparator<UInt>, selector: (A)->UInt): Comparator<A> = TODO()
2021-03-11 12:51:22,124 [main:61] - WITHOUT TYPE PARAMS = fun <T, K> compareBy(comparator: kotlin.Comparator<UInt>, selector: (A)->UInt): Comparator<A> = TODO()
2021-03-11 12:51:22,375 [main:302] - generating value of type = Comparator<UInt> false depth = 6
2021-03-11 12:51:22,463 [main:43] - GENERATING CALL OF fun <T> nullsFirst(comparator: kotlin.Comparator<UInt>): Comparator<UInt> = TODO()
2021-03-11 12:51:22,464 [main:61] - WITHOUT TYPE PARAMS = fun <T> nullsFirst(comparator: kotlin.Comparator<UInt>): Comparator<UInt> = TODO()
2021-03-11 12:51:22,634 [main:302] - generating value of type = Comparator<UInt> false depth = 9
2021-03-11 12:51:22,719 [main:43] - GENERATING CALL OF fun <T> naturalOrder(): Comparator<UInt> = TODO()
2021-03-11 12:51:22,720 [main:61] - WITHOUT TYPE PARAMS = fun <T> naturalOrder(): Comparator<UInt> = TODO()
2021-03-11 12:51:22,805 [main:95] - GENERATED = naturalOrder<UInt>()
2021-03-11 12:51:22,805 [main:95] - GENERATED = nullsFirst<UInt>(naturalOrder<UInt>())
2021-03-11 12:51:22,805 [main:302] - generating value of type = Function1<A, UInt> false depth = 6
2021-03-11 12:51:22,806 [main:302] - generating value of type = UInt true depth = 7
2021-03-11 12:51:22,806 [main:95] - GENERATED = compareBy<A, UInt>(nullsFirst<UInt>(naturalOrder<UInt>()), {a: A -> 162389509.toUInt()})
2021-03-11 12:51:22,806 [main:95] - GENERATED = maxOf<A>(A(-752464822, "syuee"), A(1817965465, "qiryp"), compareBy<A, UInt>(nullsFirst<UInt>(naturalOrder<UInt>()), {a: A -> 162389509.toUInt()}))
2021-03-11 12:51:22,807 [main:66] - Generated call from random type = (linkedSetOf<A>()).indexOf(maxOf<A>(A(-752464822, "syuee"), A(1817965465, "qiryp"), compareBy<A, UInt>(nullsFirst<UInt>(naturalOrder<UInt>()), {a: A -> 162389509.toUInt()})))
2021-03-11 12:51:22,807 [main:94] - GETTING Int from Int
2021-03-11 12:51:22,843 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@32278335]]
2021-03-11 12:51:22,843 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:51:22,843 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@32278335]
2021-03-11 12:51:22,951 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:22,952 [main:105] - GENERATED CALL = (sum).toShort().compareTo(-110)
2021-03-11 12:51:22,952 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@d0efe34]]
2021-03-11 12:51:22,952 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:51:22,952 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@d0efe34]
2021-03-11 12:51:23,034 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:23,034 [main:105] - GENERATED CALL = (sum).toInt().rotateRight(-716139740)
2021-03-11 12:51:23,034 [main:101] - Case = [public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62a877f4]]
2021-03-11 12:51:23,034 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62a877f4]
2021-03-11 12:51:23,034 [main:105] - GENERATED CALL = (sum).toInt()
2021-03-11 12:51:23,034 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10809a26]]
2021-03-11 12:51:23,034 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:51:23,034 [main:137] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10809a26]
2021-03-11 12:51:23,034 [main:105] - GENERATED CALL = (sum).toChar().digitToInt()
2021-03-11 12:51:23,035 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@d0efe34]]
2021-03-11 12:51:23,035 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:23,116 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:23,116 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@d0efe34]
2021-03-11 12:51:23,199 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:23,199 [main:105] - GENERATED CALL = (sum).compareTo(789034767).rotateRight(316622951)
2021-03-11 12:51:23,199 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e], public final val last: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@1e6a92d2]]
2021-03-11 12:51:23,199 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e]
2021-03-11 12:51:23,286 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:23,286 [main:105] - GENERATED CALL = (sum).rangeTo(-128).last
2021-03-11 12:51:23,286 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@43b701b6]]
2021-03-11 12:51:23,286 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:51:23,286 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@43b701b6]
2021-03-11 12:51:23,286 [main:105] - GENERATED CALL = (sum).toByte().unaryPlus()
2021-03-11 12:51:23,286 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f664709]]
2021-03-11 12:51:23,287 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:51:23,287 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f664709]
2021-03-11 12:51:23,364 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:23,442 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:23,442 [main:105] - GENERATED CALL = (sum).toInt().coerceIn(406457179, -1674785476)
2021-03-11 12:51:23,442 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7d291fed]]
2021-03-11 12:51:23,442 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7d291fed]
2021-03-11 12:51:23,442 [main:105] - GENERATED CALL = (sum).countOneBits()
2021-03-11 12:51:23,442 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@29a1d850]]
2021-03-11 12:51:23,442 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:51:23,442 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@29a1d850]
2021-03-11 12:51:23,443 [main:105] - GENERATED CALL = (sum).toByte().countTrailingZeroBits()
2021-03-11 12:51:23,443 [main:63] - replacement of sum of type Int is (sum).countOneBits()
2021-03-11 12:51:23,520 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:51:23,521 [main:66] - Compilation checking started
2021-03-11 12:51:23,706 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (sum).countOneBits() += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:51:23,708 [main:56] - replacing (sum, Int)
2021-03-11 12:51:23,708 [main:38] - replacing sum Int
2021-03-11 12:51:23,708 [main:42] - Getting value of type Int
2021-03-11 12:51:23,793 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:23,793 [main:46] - GENERATED VALUE OF TYPE Int = -428860977
2021-03-11 12:51:23,793 [main:49] - GENERATED IS CALL =false
2021-03-11 12:51:23,957 [main:55] - randomType = ArrayDeque<UInt>
2021-03-11 12:51:24,062 [main:302] - generating value of type = ArrayDeque<UInt> false depth = 0
2021-03-11 12:51:24,151 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<UInt> = TODO()
2021-03-11 12:51:24,152 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<UInt> = TODO()
2021-03-11 12:51:24,322 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:51:24,322 [main:95] - GENERATED = ArrayDeque<UInt>(2035397)
2021-03-11 12:51:24,569 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ebc0bf5]
2021-03-11 12:51:24,646 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:24,646 [main:66] - Generated call from random type = (ArrayDeque<UInt>(2035397)).size.and(213794491)
2021-03-11 12:51:24,646 [main:94] - GETTING Int from Int
2021-03-11 12:51:24,678 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d], @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@33616e79]]
2021-03-11 12:51:24,678 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d]
2021-03-11 12:51:24,753 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:51:24,754 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@33616e79]
2021-03-11 12:51:24,754 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).div(0.399829542037458).roundToInt()
2021-03-11 12:51:24,754 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Float.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@65926c63]]
2021-03-11 12:51:24,754 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169]
2021-03-11 12:51:24,754 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Float.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@65926c63]
2021-03-11 12:51:24,754 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toFloat().roundToInt()
2021-03-11 12:51:24,754 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2d4ffd58]]
2021-03-11 12:51:24,754 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:51:24,754 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2d4ffd58]
2021-03-11 12:51:24,754 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toLong().countTrailingZeroBits()
2021-03-11 12:51:24,754 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@17001499]]
2021-03-11 12:51:24,754 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:51:24,755 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@17001499]
2021-03-11 12:51:24,755 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toByte().countLeadingZeroBits()
2021-03-11 12:51:24,755 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@5e10d1c0]]
2021-03-11 12:51:24,755 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:51:24,755 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@5e10d1c0]
2021-03-11 12:51:24,831 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:24,831 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toByte().minus(-79)
2021-03-11 12:51:24,831 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@a5b3754]]
2021-03-11 12:51:24,832 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@a5b3754]
2021-03-11 12:51:24,832 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).countLeadingZeroBits()
2021-03-11 12:51:24,832 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]]
2021-03-11 12:51:24,832 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]
2021-03-11 12:51:24,907 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:51:24,908 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:51:24,984 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:51:24,984 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).equals("tgbjv").compareTo(false)
2021-03-11 12:51:24,984 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f664709]]
2021-03-11 12:51:24,984 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:51:24,984 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f664709]
2021-03-11 12:51:25,061 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:25,137 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:25,138 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toInt().coerceIn(-1069532406, 1389923620)
2021-03-11 12:51:25,138 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76034fc0]]
2021-03-11 12:51:25,138 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:25,259 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:25,260 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76034fc0]
2021-03-11 12:51:25,260 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).compareTo(1614677110).countTrailingZeroBits()
2021-03-11 12:51:25,260 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3b8291ff]]
2021-03-11 12:51:25,260 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:51:25,260 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3b8291ff]
2021-03-11 12:51:25,346 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:25,346 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toInt().coerceAtMost(2066255196)
2021-03-11 12:51:25,346 [main:63] - replacement of sum of type Int is (A(-1427813506, "vtkln").x).compareTo(1614677110).countTrailingZeroBits()
2021-03-11 12:51:25,435 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:51:25,435 [main:66] - Compilation checking started
2021-03-11 12:51:25,643 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (A(-1427813506, "vtkln").x).compareTo(1614677110).countTrailingZeroBits() += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:51:25,644 [main:56] - replacing (sum, Int)
2021-03-11 12:51:25,645 [main:38] - replacing sum Int
2021-03-11 12:51:25,645 [main:42] - Getting value of type Int
2021-03-11 12:51:25,724 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:25,725 [main:46] - GENERATED VALUE OF TYPE Int = -748835701
2021-03-11 12:51:25,725 [main:49] - GENERATED IS CALL =false
2021-03-11 12:51:25,725 [main:55] - randomType = A
2021-03-11 12:51:25,808 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:51:25,808 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:51:25,886 [main:194] - Type params = []
2021-03-11 12:51:25,962 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:51:25,962 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:51:25,969 [main:66] - Generated call from random type = (A(-440229400, "vjzig")).x.sign
2021-03-11 12:51:25,969 [main:94] - GETTING Int from Int
2021-03-11 12:51:25,999 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@745deaed]]
2021-03-11 12:51:26,000 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:51:26,000 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@745deaed]
2021-03-11 12:51:26,000 [main:105] - GENERATED CALL = (sum).toByte().countOneBits()
2021-03-11 12:51:26,000 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@58fd4e05]]
2021-03-11 12:51:26,000 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d]
2021-03-11 12:51:26,077 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:51:26,077 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@58fd4e05]
2021-03-11 12:51:26,153 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:26,153 [main:105] - GENERATED CALL = (sum).div(0.18297604668345313).compareTo(-2)
2021-03-11 12:51:26,154 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f655756]]
2021-03-11 12:51:26,154 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:26,231 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:26,231 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f655756]
2021-03-11 12:51:26,231 [main:105] - GENERATED CALL = (sum).compareTo(1983930142).unaryMinus()
2021-03-11 12:51:26,231 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@5052b22e]]
2021-03-11 12:51:26,232 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:51:26,232 [main:105] - GENERATED CALL = (sum).toInt().absoluteValue
2021-03-11 12:51:26,232 [main:101] - Case = [public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6736791a]]
2021-03-11 12:51:26,232 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6736791a]
2021-03-11 12:51:26,232 [main:105] - GENERATED CALL = (sum).inv()
2021-03-11 12:51:26,232 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62a877f4]]
2021-03-11 12:51:26,232 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:26,308 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:26,308 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62a877f4]
2021-03-11 12:51:26,309 [main:105] - GENERATED CALL = (sum).compareTo(-1662382099).toInt()
2021-03-11 12:51:26,309 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@5052b22e]]
2021-03-11 12:51:26,309 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:26,385 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:26,385 [main:105] - GENERATED CALL = (sum).compareTo(-276568390).absoluteValue
2021-03-11 12:51:26,387 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6736791a]]
2021-03-11 12:51:26,387 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:26,491 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:26,491 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6736791a]
2021-03-11 12:51:26,492 [main:105] - GENERATED CALL = (sum).compareTo(-1272939969).inv()
2021-03-11 12:51:26,492 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2d4ffd58]]
2021-03-11 12:51:26,492 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:51:26,580 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:51:26,580 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2d4ffd58]
2021-03-11 12:51:26,580 [main:105] - GENERATED CALL = (sum).div(6985771319722821401).countTrailingZeroBits()
2021-03-11 12:51:26,580 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3b8291ff]]
2021-03-11 12:51:26,580 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:51:26,580 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3b8291ff]
2021-03-11 12:51:26,662 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:26,662 [main:105] - GENERATED CALL = (sum).toInt().coerceAtMost(-2129791177)
2021-03-11 12:51:26,662 [main:63] - replacement of sum of type Int is (sum).toInt().coerceAtMost(-2129791177)
2021-03-11 12:51:26,743 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:51:26,744 [main:66] - Compilation checking started
2021-03-11 12:51:26,947 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (sum).toInt().coerceAtMost(-2129791177) += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:51:26,950 [main:56] - replacing (sum, Int)
2021-03-11 12:51:26,950 [main:38] - replacing sum Int
2021-03-11 12:51:26,950 [main:42] - Getting value of type Int
2021-03-11 12:51:27,043 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:27,043 [main:46] - GENERATED VALUE OF TYPE Int = -731315887
2021-03-11 12:51:27,043 [main:49] - GENERATED IS CALL =false
2021-03-11 12:51:27,204 [main:55] - randomType = Pair<A, A?>
2021-03-11 12:51:27,281 [main:302] - generating value of type = Pair<A, A?> false depth = 0
2021-03-11 12:51:27,362 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: A, second: A?): Pair<A, A?> = TODO()
2021-03-11 12:51:27,363 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: A, second: A?): Pair<A, A?> = TODO()
2021-03-11 12:51:27,441 [main:302] - generating value of type = A false depth = 3
2021-03-11 12:51:27,442 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:51:27,518 [main:194] - Type params = []
2021-03-11 12:51:27,646 [main:302] - generating value of type = Int true depth = 5
2021-03-11 12:51:27,646 [main:302] - generating value of type = String true depth = 5
2021-03-11 12:51:27,647 [main:302] - generating value of type = A false depth = 3
2021-03-11 12:51:27,647 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:51:27,728 [main:194] - Type params = []
2021-03-11 12:51:27,809 [main:302] - generating value of type = Int true depth = 5
2021-03-11 12:51:27,809 [main:302] - generating value of type = String true depth = 5
2021-03-11 12:51:27,809 [main:95] - GENERATED = Pair<A, A?>(A(959283498, "veswg"), A(185456490, "umkqb"))
2021-03-11 12:51:27,822 [main:66] - Generated call from random type = (Pair<A, A?>(A(959283498, "veswg"), A(185456490, "umkqb"))).first.x
2021-03-11 12:51:27,822 [main:94] - GETTING Int from Int
2021-03-11 12:51:27,862 [main:101] - Case = [public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@241f9269]]
2021-03-11 12:51:27,862 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@241f9269]
2021-03-11 12:51:27,951 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:27,951 [main:105] - GENERATED CALL = (sum).or(294401238)
2021-03-11 12:51:27,951 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4c4a428d]]
2021-03-11 12:51:27,951 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169]
2021-03-11 12:51:27,951 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4c4a428d]
2021-03-11 12:51:27,952 [main:105] - GENERATED CALL = (sum).toFloat().toBits()
2021-03-11 12:51:27,952 [main:101] - Case = [public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ed6eedb]]
2021-03-11 12:51:27,952 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ed6eedb]
2021-03-11 12:51:28,066 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:28,067 [main:105] - GENERATED CALL = (sum).div(-28)
2021-03-11 12:51:28,067 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3ff9eaf8]]
2021-03-11 12:51:28,067 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:28,158 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:28,158 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3ff9eaf8]
2021-03-11 12:51:28,238 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:28,239 [main:105] - GENERATED CALL = (sum).compareTo(-498363304).coerceAtLeast(-1279077854)
2021-03-11 12:51:28,239 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@58fd4e05]]
2021-03-11 12:51:28,239 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d]
2021-03-11 12:51:28,316 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:51:28,317 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@58fd4e05]
2021-03-11 12:51:28,395 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:28,396 [main:105] - GENERATED CALL = (sum).div(0.1717341972813391).compareTo(-11)
2021-03-11 12:51:28,396 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@ccd075b]]
2021-03-11 12:51:28,396 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:51:28,396 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@ccd075b]
2021-03-11 12:51:28,474 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:28,474 [main:105] - GENERATED CALL = (sum).toByte().rem(-37)
2021-03-11 12:51:28,474 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@55f9f89c]]
2021-03-11 12:51:28,474 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:28,552 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:28,552 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@55f9f89c]
2021-03-11 12:51:28,653 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:28,654 [main:105] - GENERATED CALL = (sum).compareTo(1639809586).rem(-47)
2021-03-11 12:51:28,654 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@5052b22e]]
2021-03-11 12:51:28,654 [main:105] - GENERATED CALL = (sum).absoluteValue
2021-03-11 12:51:28,654 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@a5b3754]]
2021-03-11 12:51:28,654 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@a5b3754]
2021-03-11 12:51:28,654 [main:105] - GENERATED CALL = (sum).countLeadingZeroBits()
2021-03-11 12:51:28,654 [main:101] - Case = [@kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2814a4a]]
2021-03-11 12:51:28,654 [main:105] - GENERATED CALL = (sum).sign
2021-03-11 12:51:28,654 [main:63] - replacement of sum of type Int is (sum).sign
2021-03-11 12:51:28,734 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:51:28,735 [main:66] - Compilation checking started
2021-03-11 12:51:28,934 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (sum).sign += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:51:28,936 [main:56] - replacing (sum, Int)
2021-03-11 12:51:28,936 [main:38] - replacing sum Int
2021-03-11 12:51:28,936 [main:42] - Getting value of type Int
2021-03-11 12:51:29,020 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:29,021 [main:46] - GENERATED VALUE OF TYPE Int = 5080044
2021-03-11 12:51:29,021 [main:49] - GENERATED IS CALL =false
2021-03-11 12:51:29,110 [main:55] - randomType = ULong
2021-03-11 12:51:29,214 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:51:29,242 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@6db7ed99]
2021-03-11 12:51:29,318 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:51:29,318 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18626c8c]
2021-03-11 12:51:29,394 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:29,394 [main:66] - Generated call from random type = (2338120674800764027.toULong()).compareTo(45.toUByte()).plus(59)
2021-03-11 12:51:29,394 [main:94] - GETTING Int from Int
2021-03-11 12:51:29,426 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@241f9269]]
2021-03-11 12:51:29,426 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:51:29,427 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@241f9269]
2021-03-11 12:51:29,503 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:29,503 [main:105] - GENERATED CALL = (0+1).toInt().or(-1901746889)
2021-03-11 12:51:29,503 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76034fc0]]
2021-03-11 12:51:29,503 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:51:29,503 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76034fc0]
2021-03-11 12:51:29,503 [main:105] - GENERATED CALL = (0+1).toInt().countTrailingZeroBits()
2021-03-11 12:51:29,503 [main:101] - Case = [public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6736791a]]
2021-03-11 12:51:29,503 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6736791a]
2021-03-11 12:51:29,504 [main:105] - GENERATED CALL = (0+1).inv()
2021-03-11 12:51:29,504 [main:101] - Case = [public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b80cd8f]]
2021-03-11 12:51:29,504 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b80cd8f]
2021-03-11 12:51:29,504 [main:105] - GENERATED CALL = (0+1).inc()
2021-03-11 12:51:29,504 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@7760e931]]
2021-03-11 12:51:29,504 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:51:29,504 [main:105] - GENERATED CALL = (0+1).toChar().code
2021-03-11 12:51:29,504 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18626c8c]]
2021-03-11 12:51:29,504 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:29,581 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:29,581 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18626c8c]
2021-03-11 12:51:29,657 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:29,657 [main:105] - GENERATED CALL = (0+1).compareTo(-1247507429).plus(-96)
2021-03-11 12:51:29,657 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6736791a]]
2021-03-11 12:51:29,657 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:29,734 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:29,734 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6736791a]
2021-03-11 12:51:29,734 [main:105] - GENERATED CALL = (0+1).compareTo(-621299696).inv()
2021-03-11 12:51:29,734 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@5052b22e]]
2021-03-11 12:51:29,735 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:29,836 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:29,836 [main:105] - GENERATED CALL = (0+1).compareTo(182785612).absoluteValue
2021-03-11 12:51:29,836 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@ccd075b]]
2021-03-11 12:51:29,836 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:51:29,836 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@ccd075b]
2021-03-11 12:51:29,917 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:29,918 [main:105] - GENERATED CALL = (0+1).toByte().rem(-99)
2021-03-11 12:51:29,918 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36845587]]
2021-03-11 12:51:29,918 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:29,999 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:29,999 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36845587]
2021-03-11 12:51:30,081 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:30,081 [main:105] - GENERATED CALL = (0+1).compareTo(-628247880).xor(-1364334754)
2021-03-11 12:51:30,081 [main:63] - replacement of sum of type Int is (0+1).compareTo(-1247507429).plus(-96)
2021-03-11 12:51:30,168 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:51:30,169 [main:66] - Compilation checking started
2021-03-11 12:51:30,359 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (0+1).compareTo(-1247507429).plus(-96) += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:51:30,360 [main:56] - replacing (sum, Int)
2021-03-11 12:51:30,361 [main:38] - replacing sum Int
2021-03-11 12:51:30,361 [main:42] - Getting value of type Int
2021-03-11 12:51:30,436 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:30,436 [main:46] - GENERATED VALUE OF TYPE Int = -2119684283
2021-03-11 12:51:30,436 [main:49] - GENERATED IS CALL =false
2021-03-11 12:51:30,593 [main:55] - randomType = Short?
2021-03-11 12:51:30,668 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:51:30,700 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@636fb5ae]
2021-03-11 12:51:30,700 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@5e10d1c0]
2021-03-11 12:51:30,775 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:30,775 [main:66] - Generated call from random type = (12082)?.toByte().minus(76)
2021-03-11 12:51:30,776 [main:94] - GETTING Int from String
2021-03-11 12:51:30,793 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f161575]]
2021-03-11 12:51:30,793 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:51:30,869 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:51:30,870 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f161575]
2021-03-11 12:51:30,969 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:30,970 [main:105] - GENERATED CALL = (str).compareTo("pfpho").times(-73)
2021-03-11 12:51:30,970 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6736791a]]
2021-03-11 12:51:30,970 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:51:31,050 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:51:31,051 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6736791a]
2021-03-11 12:51:31,051 [main:105] - GENERATED CALL = (str).compareTo("jihot").inv()
2021-03-11 12:51:31,051 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ed6eedb]]
2021-03-11 12:51:31,051 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:51:31,136 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:51:31,136 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ed6eedb]
2021-03-11 12:51:31,221 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:31,221 [main:105] - GENERATED CALL = (str).compareTo("eyhqm").div(-14)
2021-03-11 12:51:31,221 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2814a4a]]
2021-03-11 12:51:31,221 [main:105] - GENERATED CALL = (str).length.sign
2021-03-11 12:51:31,221 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@241f9269]]
2021-03-11 12:51:31,221 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@241f9269]
2021-03-11 12:51:31,311 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:31,312 [main:105] - GENERATED CALL = (str).length.or(1594026392)
2021-03-11 12:51:31,312 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f655756]]
2021-03-11 12:51:31,312 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f655756]
2021-03-11 12:51:31,312 [main:105] - GENERATED CALL = (str).length.unaryMinus()
2021-03-11 12:51:31,312 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b80cd8f]]
2021-03-11 12:51:31,312 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:51:31,390 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:51:31,390 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b80cd8f]
2021-03-11 12:51:31,394 [main:105] - GENERATED CALL = (str).compareTo("ymxxr").inc()
2021-03-11 12:51:31,394 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76034fc0]]
2021-03-11 12:51:31,395 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76034fc0]
2021-03-11 12:51:31,395 [main:105] - GENERATED CALL = (str).length.countTrailingZeroBits()
2021-03-11 12:51:31,395 [main:101] - Case = [public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fb80e1e]]
2021-03-11 12:51:31,395 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fb80e1e]
2021-03-11 12:51:31,473 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:51:31,473 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:51:31,474 [main:105] - GENERATED CALL = (str).indexOfFirst({a: Char -> true})
2021-03-11 12:51:31,474 [main:101] - Case = [public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b3faa6c]]
2021-03-11 12:51:31,474 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b3faa6c]
2021-03-11 12:51:31,552 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:51:31,553 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:51:31,553 [main:105] - GENERATED CALL = (str).indexOfLast({a: Char -> false})
2021-03-11 12:51:31,553 [main:63] - replacement of sum of type Int is (str).length.countTrailingZeroBits()
2021-03-11 12:51:31,629 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:51:31,629 [main:66] - Compilation checking started
2021-03-11 12:51:31,810 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (str).length.countTrailingZeroBits() += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:51:31,812 [main:56] - replacing (sum, Int)
2021-03-11 12:51:31,812 [main:38] - replacing sum Int
2021-03-11 12:51:31,812 [main:42] - Getting value of type Int
2021-03-11 12:51:31,888 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:31,888 [main:46] - GENERATED VALUE OF TYPE Int = -2017525453
2021-03-11 12:51:31,888 [main:49] - GENERATED IS CALL =false
2021-03-11 12:51:31,967 [main:55] - randomType = Sequence<A>
2021-03-11 12:51:31,968 [main:94] - GETTING Int from Int
2021-03-11 12:51:31,998 [main:101] - Case = [public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@39041b0c], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4c4a428d]]
2021-03-11 12:51:31,998 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@39041b0c]
2021-03-11 12:51:32,098 [main:302] - generating value of type = Float true depth = 0
2021-03-11 12:51:32,098 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4c4a428d]
2021-03-11 12:51:32,098 [main:105] - GENERATED CALL = (sum).div(0.066289544f).toBits()
2021-03-11 12:51:32,098 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@29a1d850]]
2021-03-11 12:51:32,098 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:51:32,099 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@29a1d850]
2021-03-11 12:51:32,099 [main:105] - GENERATED CALL = (sum).toByte().countTrailingZeroBits()
2021-03-11 12:51:32,099 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4b0ed578]]
2021-03-11 12:51:32,099 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:51:32,099 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4b0ed578]
2021-03-11 12:51:32,099 [main:105] - GENERATED CALL = (sum).toShort().countTrailingZeroBits()
2021-03-11 12:51:32,099 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@58fd4e05]]
2021-03-11 12:51:32,099 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d]
2021-03-11 12:51:32,182 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:51:32,182 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@58fd4e05]
2021-03-11 12:51:32,270 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:32,271 [main:105] - GENERATED CALL = (sum).div(0.8876524537832142).compareTo(-74)
2021-03-11 12:51:32,271 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@7760e931]]
2021-03-11 12:51:32,271 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:51:32,271 [main:105] - GENERATED CALL = (sum).toChar().code
2021-03-11 12:51:32,271 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e], public open val start: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@48a2522d]]
2021-03-11 12:51:32,271 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e]
2021-03-11 12:51:32,362 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:32,362 [main:105] - GENERATED CALL = (sum).rangeTo(53).start
2021-03-11 12:51:32,363 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@7e8d0d69]]
2021-03-11 12:51:32,363 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:51:32,363 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@7e8d0d69]
2021-03-11 12:51:32,450 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:32,450 [main:105] - GENERATED CALL = (sum).toShort().times(14)
2021-03-11 12:51:32,450 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@72cbb805]]
2021-03-11 12:51:32,450 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169]
2021-03-11 12:51:32,450 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@72cbb805]
2021-03-11 12:51:32,451 [main:105] - GENERATED CALL = (sum).toFloat().toRawBits()
2021-03-11 12:51:32,451 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7f28a29], @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@33616e79]]
2021-03-11 12:51:32,451 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7f28a29]
2021-03-11 12:51:32,451 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@33616e79]
2021-03-11 12:51:32,451 [main:105] - GENERATED CALL = (sum).toDouble().roundToInt()
2021-03-11 12:51:32,451 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b80cd8f]]
2021-03-11 12:51:32,451 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:51:32,451 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b80cd8f]
2021-03-11 12:51:32,451 [main:105] - GENERATED CALL = (sum).toInt().inc()
2021-03-11 12:51:32,451 [main:63] - replacement of sum of type Int is (sum).toShort().countTrailingZeroBits()
2021-03-11 12:51:32,530 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:51:32,530 [main:66] - Compilation checking started
2021-03-11 12:51:32,722 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (sum).toShort().countTrailingZeroBits() += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:51:32,725 [main:56] - replacing (sum, Int)
2021-03-11 12:51:32,725 [main:38] - replacing sum Int
2021-03-11 12:51:32,725 [main:42] - Getting value of type Int
2021-03-11 12:51:32,818 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:32,818 [main:46] - GENERATED VALUE OF TYPE Int = -932792798
2021-03-11 12:51:32,818 [main:49] - GENERATED IS CALL =false
2021-03-11 12:51:32,899 [main:55] - randomType = UByte
2021-03-11 12:51:32,975 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:51:33,001 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@4ec604ca]
2021-03-11 12:51:33,078 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:51:33,078 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c9f5998]
2021-03-11 12:51:33,154 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:33,154 [main:66] - Generated call from random type = (126.toUByte()).compareTo(72.toUByte()).shl(-280014551)
2021-03-11 12:51:33,155 [main:94] - GETTING Int from Int
2021-03-11 12:51:33,185 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f664709]]
2021-03-11 12:51:33,185 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:51:33,185 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f664709]
2021-03-11 12:51:33,286 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:33,367 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:33,367 [main:105] - GENERATED CALL = (0+1+2+3).toInt().coerceIn(-548096643, -1471127745)
2021-03-11 12:51:33,368 [main:101] - Case = [public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3ff9eaf8]]
2021-03-11 12:51:33,368 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3ff9eaf8]
2021-03-11 12:51:33,449 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:33,450 [main:105] - GENERATED CALL = (0+1+2+3).coerceAtLeast(1251196755)
2021-03-11 12:51:33,450 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36845587]]
2021-03-11 12:51:33,450 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:33,532 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:33,532 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36845587]
2021-03-11 12:51:33,619 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:33,620 [main:105] - GENERATED CALL = (0+1+2+3).compareTo(929226417).xor(211102017)
2021-03-11 12:51:33,620 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@19b4dbb0]]
2021-03-11 12:51:33,620 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:51:33,620 [main:137] - GENERATING call of type public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@19b4dbb0]
2021-03-11 12:51:33,620 [main:105] - GENERATED CALL = (0+1+2+3).toChar().toInt()
2021-03-11 12:51:33,620 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7f28a29], @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@33616e79]]
2021-03-11 12:51:33,620 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7f28a29]
2021-03-11 12:51:33,620 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@33616e79]
2021-03-11 12:51:33,620 [main:105] - GENERATED CALL = (0+1+2+3).toDouble().roundToInt()
2021-03-11 12:51:33,620 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3b8291ff]]
2021-03-11 12:51:33,620 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:51:33,621 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3b8291ff]
2021-03-11 12:51:33,698 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:33,698 [main:105] - GENERATED CALL = (0+1+2+3).toInt().coerceAtMost(-684313588)
2021-03-11 12:51:33,698 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@446340cf]]
2021-03-11 12:51:33,698 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:33,777 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:33,777 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@446340cf]
2021-03-11 12:51:33,777 [main:105] - GENERATED CALL = (0+1+2+3).compareTo(-506239628).takeLowestOneBit()
2021-03-11 12:51:33,777 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3ff9eaf8]]
2021-03-11 12:51:33,777 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:33,855 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:33,856 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3ff9eaf8]
2021-03-11 12:51:33,932 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:33,932 [main:105] - GENERATED CALL = (0+1+2+3).compareTo(-1115163942).coerceAtLeast(-818461694)
2021-03-11 12:51:33,932 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f161575]]
2021-03-11 12:51:33,932 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:34,009 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:34,009 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f161575]
2021-03-11 12:51:34,086 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:34,086 [main:105] - GENERATED CALL = (0+1+2+3).compareTo(-1804265932).times(107)
2021-03-11 12:51:34,086 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.ranges.IntRange.random(): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1c24ca3b]]
2021-03-11 12:51:34,086 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e]
2021-03-11 12:51:34,202 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:34,202 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.ranges.IntRange.random(): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1c24ca3b]
2021-03-11 12:51:34,203 [main:105] - GENERATED CALL = (0+1+2+3).rangeTo(-48).random()
2021-03-11 12:51:34,203 [main:63] - replacement of sum of type Int is (0+1+2+3).rangeTo(-48).random()
2021-03-11 12:51:34,289 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:51:34,289 [main:66] - Compilation checking started
2021-03-11 12:51:34,527 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (0+1+2+3).rangeTo(-48).random() += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:51:34,528 [main:56] - replacing (sum, Int)
2021-03-11 12:51:34,529 [main:38] - replacing sum Int
2021-03-11 12:51:34,529 [main:42] - Getting value of type Int
2021-03-11 12:51:34,607 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:34,607 [main:46] - GENERATED VALUE OF TYPE Int = 554049668
2021-03-11 12:51:34,607 [main:49] - GENERATED IS CALL =false
2021-03-11 12:51:34,769 [main:55] - randomType = Array<String>
2021-03-11 12:51:34,845 [main:302] - generating value of type = Array<String> false depth = 0
2021-03-11 12:51:34,925 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: String): Array<Strg> = TODO()
2021-03-11 12:51:34,925 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: String): Array<Strg> = TODO()
2021-03-11 12:51:35,004 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:51:35,004 [main:95] - GENERATED = arrayOf<String>("cerro")
2021-03-11 12:51:35,019 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36845587]
2021-03-11 12:51:35,096 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:35,096 [main:66] - Generated call from random type = (arrayOf<String>("cerro")).size.xor(1613845678)
2021-03-11 12:51:35,096 [main:94] - GETTING Int from Int
2021-03-11 12:51:35,141 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169], public open fun toInt(): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@65cf0468]]
2021-03-11 12:51:35,141 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169]
2021-03-11 12:51:35,141 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@65cf0468]
2021-03-11 12:51:35,141 [main:105] - GENERATED CALL = (sum).toFloat().toInt()
2021-03-11 12:51:35,141 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36bf0f77]]
2021-03-11 12:51:35,141 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36bf0f77]
2021-03-11 12:51:35,141 [main:105] - GENERATED CALL = (sum).takeHighestOneBit()
2021-03-11 12:51:35,141 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]]
2021-03-11 12:51:35,141 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]
2021-03-11 12:51:35,217 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:51:35,218 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:51:35,294 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:51:35,295 [main:105] - GENERATED CALL = (sum).equals("teovj").compareTo(false)
2021-03-11 12:51:35,295 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@19388119]]
2021-03-11 12:51:35,295 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:51:35,295 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@19388119]
2021-03-11 12:51:35,295 [main:105] - GENERATED CALL = (sum).toLong().toInt()
2021-03-11 12:51:35,295 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@a5b3754]]
2021-03-11 12:51:35,295 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:51:35,295 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@a5b3754]
2021-03-11 12:51:35,295 [main:105] - GENERATED CALL = (sum).toInt().countLeadingZeroBits()
2021-03-11 12:51:35,295 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ec35323]]
2021-03-11 12:51:35,295 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ec35323]
2021-03-11 12:51:35,396 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:35,397 [main:105] - GENERATED CALL = (sum).rotateLeft(845744006)
2021-03-11 12:51:35,397 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@5052b22e]]
2021-03-11 12:51:35,397 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:51:35,397 [main:105] - GENERATED CALL = (sum).toInt().absoluteValue
2021-03-11 12:51:35,397 [main:101] - Case = [public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e53c7a]]
2021-03-11 12:51:35,397 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e53c7a]
2021-03-11 12:51:35,480 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:35,481 [main:105] - GENERATED CALL = (sum).shr(1228722273)
2021-03-11 12:51:35,481 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4ba73279]]
2021-03-11 12:51:35,481 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:51:35,481 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4ba73279]
2021-03-11 12:51:35,481 [main:105] - GENERATED CALL = (sum).toShort().unaryMinus()
2021-03-11 12:51:35,481 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@a5b3754]]
2021-03-11 12:51:35,481 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@a5b3754]
2021-03-11 12:51:35,482 [main:105] - GENERATED CALL = (sum).countLeadingZeroBits()
2021-03-11 12:51:35,482 [main:63] - replacement of sum of type Int is (sum).toInt().absoluteValue
2021-03-11 12:51:35,563 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:51:35,563 [main:66] - Compilation checking started
2021-03-11 12:51:35,771 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (sum).toInt().absoluteValue += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:51:35,773 [main:56] - replacing (sum, Int)
2021-03-11 12:51:35,773 [main:38] - replacing sum Int
2021-03-11 12:51:35,773 [main:42] - Getting value of type Int
2021-03-11 12:51:35,852 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:35,852 [main:46] - GENERATED VALUE OF TYPE Int = 513787913
2021-03-11 12:51:35,852 [main:49] - GENERATED IS CALL =false
2021-03-11 12:51:35,935 [main:55] - randomType = Short
2021-03-11 12:51:36,014 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:51:36,053 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:51:36,053 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18626c8c]
2021-03-11 12:51:36,129 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:36,130 [main:66] - Generated call from random type = (11539).toInt().plus(-124)
2021-03-11 12:51:36,131 [main:94] - GETTING Int from Boolean
2021-03-11 12:51:36,143 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62a877f4]]
2021-03-11 12:51:36,143 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:51:36,220 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:51:36,220 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62a877f4]
2021-03-11 12:51:36,221 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(true).toInt()
2021-03-11 12:51:36,221 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]]
2021-03-11 12:51:36,221 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:51:36,297 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:51:36,298 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false)
2021-03-11 12:51:36,298 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d4a80]]
2021-03-11 12:51:36,298 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:51:36,374 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:51:36,374 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d4a80]
2021-03-11 12:51:36,374 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(true).unaryPlus()
2021-03-11 12:51:36,374 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@d0efe34]]
2021-03-11 12:51:36,375 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:51:36,452 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:51:36,452 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@d0efe34]
2021-03-11 12:51:36,553 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:36,553 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).rotateRight(1605705554)
2021-03-11 12:51:36,553 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ebc0bf5]]
2021-03-11 12:51:36,553 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:51:36,636 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:51:36,636 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ebc0bf5]
2021-03-11 12:51:36,719 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:36,719 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(true).and(-473812613)
2021-03-11 12:51:36,719 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18626c8c]]
2021-03-11 12:51:36,719 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:51:36,802 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:51:36,802 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18626c8c]
2021-03-11 12:51:36,891 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:36,892 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(true).plus(118)
2021-03-11 12:51:36,892 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f161575]]
2021-03-11 12:51:36,892 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:51:36,969 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:51:36,970 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f161575]
2021-03-11 12:51:37,050 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:37,050 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(true).times(-45)
2021-03-11 12:51:37,050 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f664709]]
2021-03-11 12:51:37,050 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:51:37,130 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:51:37,131 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f664709]
2021-03-11 12:51:37,215 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:37,290 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:37,291 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).coerceIn(1280878229, 1844668903)
2021-03-11 12:51:37,291 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c9f5998]]
2021-03-11 12:51:37,291 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:51:37,392 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:51:37,392 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c9f5998]
2021-03-11 12:51:37,474 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:37,475 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).shl(-598933127)
2021-03-11 12:51:37,475 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@446340cf]]
2021-03-11 12:51:37,475 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:51:37,557 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:51:37,557 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@446340cf]
2021-03-11 12:51:37,557 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(true).takeLowestOneBit()
2021-03-11 12:51:37,557 [main:63] - replacement of sum of type Int is (sum == 0+1+2+3+4).compareTo(true).and(-473812613)
2021-03-11 12:51:37,639 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:51:37,639 [main:66] - Compilation checking started
2021-03-11 12:51:37,844 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (sum == 0+1+2+3+4).compareTo(true).and(-473812613) += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:51:37,847 [main:56] - replacing (sum, Int)
2021-03-11 12:51:37,847 [main:38] - replacing sum Int
2021-03-11 12:51:37,847 [main:42] - Getting value of type Int
2021-03-11 12:51:37,928 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:37,928 [main:46] - GENERATED VALUE OF TYPE Int = 661705615
2021-03-11 12:51:37,928 [main:49] - GENERATED IS CALL =false
2021-03-11 12:51:37,928 [main:55] - randomType = Float
2021-03-11 12:51:38,007 [main:302] - generating value of type = Float true depth = 0
2021-03-11 12:51:38,039 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@64d6d42b]
2021-03-11 12:51:38,116 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:38,116 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7d291fed]
2021-03-11 12:51:38,116 [main:66] - Generated call from random type = (0.20655227f).compareTo(-120).countOneBits()
2021-03-11 12:51:38,116 [main:63] - replacement of sum of type Int is (0.20655227f).compareTo(-120).countOneBits()
2021-03-11 12:51:38,193 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:51:38,193 [main:66] - Compilation checking started
2021-03-11 12:51:38,381 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (0.20655227f).compareTo(-120).countOneBits() += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:51:38,383 [main:56] - replacing (sum, Int)
2021-03-11 12:51:38,383 [main:38] - replacing sum Int
2021-03-11 12:51:38,383 [main:42] - Getting value of type Int
2021-03-11 12:51:38,459 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:38,459 [main:46] - GENERATED VALUE OF TYPE Int = 1461655394
2021-03-11 12:51:38,459 [main:49] - GENERATED IS CALL =false
2021-03-11 12:51:38,539 [main:55] - randomType = ULong
2021-03-11 12:51:38,615 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:51:38,647 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@6d2f722f]
2021-03-11 12:51:38,647 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4ba73279]
2021-03-11 12:51:38,648 [main:66] - Generated call from random type = (7630855074896603331.toULong()).toShort().unaryMinus()
2021-03-11 12:51:38,648 [main:94] - GETTING Int from String
2021-03-11 12:51:38,672 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@55f9f89c]]
2021-03-11 12:51:38,672 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@55f9f89c]
2021-03-11 12:51:38,789 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:38,790 [main:105] - GENERATED CALL = (str).length.rem(-26)
2021-03-11 12:51:38,790 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3b8291ff]]
2021-03-11 12:51:38,790 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:51:38,871 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:51:38,871 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3b8291ff]
2021-03-11 12:51:38,954 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:38,954 [main:105] - GENERATED CALL = (str).compareTo("uvqvb").coerceAtMost(172102730)
2021-03-11 12:51:38,954 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f655756]]
2021-03-11 12:51:38,954 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f655756]
2021-03-11 12:51:38,954 [main:105] - GENERATED CALL = (str).length.unaryMinus()
2021-03-11 12:51:38,954 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d63158f]]
2021-03-11 12:51:38,954 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:51:39,037 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:51:39,038 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d63158f]
2021-03-11 12:51:39,038 [main:105] - GENERATED CALL = (str).compareTo("qqrur").dec()
2021-03-11 12:51:39,038 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2814a4a]]
2021-03-11 12:51:39,038 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:51:39,120 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:51:39,120 [main:105] - GENERATED CALL = (str).compareTo("yidbt").sign
2021-03-11 12:51:39,120 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@216b8aa8]]
2021-03-11 12:51:39,120 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:51:39,233 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:51:39,233 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@216b8aa8]
2021-03-11 12:51:39,312 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:39,312 [main:105] - GENERATED CALL = (str).compareTo("kbuoq").ushr(-363823425)
2021-03-11 12:51:39,312 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a1076df]]
2021-03-11 12:51:39,313 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:51:39,390 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:39,467 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:39,467 [main:137] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a1076df]
2021-03-11 12:51:39,544 [main:302] - generating value of type = CharArray false depth = 0
2021-03-11 12:51:39,623 [main:43] - GENERATING CALL OF fun CharArray(size: kotlin.Int, init: (kotlin.Int)->kotlin.Char): CharArray = TODO()
2021-03-11 12:51:39,624 [main:61] - WITHOUT TYPE PARAMS = fun CharArray(size: kotlin.Int, init: (kotlin.Int)->kotlin.Char): CharArray = TODO()
2021-03-11 12:51:39,896 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:51:39,896 [main:302] - generating value of type = Function1<Int, Char> false depth = 3
2021-03-11 12:51:39,896 [main:302] - generating value of type = Char true depth = 4
2021-03-11 12:51:39,897 [main:95] - GENERATED = CharArray(329870815, {a: Int -> 'ё'})
2021-03-11 12:51:39,988 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:40,074 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:51:40,075 [main:105] - GENERATED CALL = (str).subSequence(235645115, 566363997).lastIndexOfAny(CharArray(329870815, {a: Int -> 'ё'}), 1296579948, true)
2021-03-11 12:51:40,075 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21280b00], public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@20381e51]]
2021-03-11 12:51:40,075 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21280b00]
2021-03-11 12:51:40,153 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:40,153 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@20381e51]
2021-03-11 12:51:40,231 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:51:40,231 [main:105] - GENERATED CALL = (str).get(406260121).compareTo('ￔ')
2021-03-11 12:51:40,231 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b3faa6c]]
2021-03-11 12:51:40,231 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:51:40,310 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:40,389 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:40,389 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b3faa6c]
2021-03-11 12:51:40,467 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:51:40,467 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:51:40,468 [main:105] - GENERATED CALL = (str).subSequence(433655844, 1321715727).indexOfLast({a: Char -> false})
2021-03-11 12:51:40,468 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7d291fed]]
2021-03-11 12:51:40,468 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:51:40,573 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:51:40,574 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7d291fed]
2021-03-11 12:51:40,574 [main:105] - GENERATED CALL = (str).compareTo("chpsy").countOneBits()
2021-03-11 12:51:40,574 [main:63] - replacement of sum of type Int is (str).compareTo("kbuoq").ushr(-363823425)
2021-03-11 12:51:40,656 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:51:40,656 [main:66] - Compilation checking started
2021-03-11 12:51:40,927 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (str).compareTo("kbuoq").ushr(-363823425) += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:51:40,930 [main:56] - replacing (sum, Int)
2021-03-11 12:51:40,930 [main:38] - replacing sum Int
2021-03-11 12:51:40,930 [main:42] - Getting value of type Int
2021-03-11 12:51:41,031 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:41,032 [main:46] - GENERATED VALUE OF TYPE Int = -995294303
2021-03-11 12:51:41,032 [main:49] - GENERATED IS CALL =false
2021-03-11 12:51:41,113 [main:55] - randomType = A?
2021-03-11 12:51:41,192 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:51:41,192 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:51:41,270 [main:194] - Type params = []
2021-03-11 12:51:41,346 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:51:41,346 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:51:41,355 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6736791a]
2021-03-11 12:51:41,355 [main:66] - Generated call from random type = (A(560521028, "nouym"))?.x.inv()
2021-03-11 12:51:41,356 [main:94] - GETTING Int from Int
2021-03-11 12:51:41,385 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@17001499]]
2021-03-11 12:51:41,385 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:51:41,386 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@17001499]
2021-03-11 12:51:41,386 [main:105] - GENERATED CALL = (0+1+2+3).toByte().countLeadingZeroBits()
2021-03-11 12:51:41,386 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36bf0f77]]
2021-03-11 12:51:41,386 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:51:41,386 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36bf0f77]
2021-03-11 12:51:41,386 [main:105] - GENERATED CALL = (0+1+2+3).toInt().takeHighestOneBit()
2021-03-11 12:51:41,386 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36845587]]
2021-03-11 12:51:41,386 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:41,462 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:41,463 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36845587]
2021-03-11 12:51:41,540 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:41,541 [main:105] - GENERATED CALL = (0+1+2+3).compareTo(194171787).xor(607704522)
2021-03-11 12:51:41,541 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1f1092b7]]
2021-03-11 12:51:41,541 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:51:41,541 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1f1092b7]
2021-03-11 12:51:41,541 [main:105] - GENERATED CALL = (0+1+2+3).toByte().toInt()
2021-03-11 12:51:41,541 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e53c7a]]
2021-03-11 12:51:41,541 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:41,618 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:41,619 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e53c7a]
2021-03-11 12:51:41,695 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:41,696 [main:105] - GENERATED CALL = (0+1+2+3).compareTo(-415094309).shr(-581444778)
2021-03-11 12:51:41,696 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@55f9f89c]]
2021-03-11 12:51:41,696 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:41,800 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:41,800 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@55f9f89c]
2021-03-11 12:51:41,881 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:41,882 [main:105] - GENERATED CALL = (0+1+2+3).compareTo(934472463).rem(-61)
2021-03-11 12:51:41,882 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@7e8d0d69]]
2021-03-11 12:51:41,882 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:51:41,882 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@7e8d0d69]
2021-03-11 12:51:41,963 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:41,964 [main:105] - GENERATED CALL = (0+1+2+3).toShort().times(-117)
2021-03-11 12:51:41,964 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e], public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@1ca46bf]]
2021-03-11 12:51:41,964 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e]
2021-03-11 12:51:42,046 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:42,046 [main:105] - GENERATED CALL = (0+1+2+3).rangeTo(-37).endInclusive
2021-03-11 12:51:42,046 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4da4fc25]]
2021-03-11 12:51:42,046 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:51:42,046 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4da4fc25]
2021-03-11 12:51:42,135 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:42,136 [main:105] - GENERATED CALL = (0+1+2+3).toShort().div(76)
2021-03-11 12:51:42,136 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d], @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@33616e79]]
2021-03-11 12:51:42,136 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d]
2021-03-11 12:51:42,217 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:51:42,218 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@33616e79]
2021-03-11 12:51:42,218 [main:105] - GENERATED CALL = (0+1+2+3).div(0.2684651283274727).roundToInt()
2021-03-11 12:51:42,218 [main:63] - replacement of sum of type Int is (0+1+2).toInt().and(-1121279207)+(0+1+2+3).toShort().countTrailingZeroBits()
2021-03-11 12:51:42,300 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-11 12:51:42,300 [main:66] - Compilation checking started
2021-03-11 12:51:42,486 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (0+1+2).toInt().and(-1121279207)+(0+1+2+3).toShort().countTrailingZeroBits() += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:51:42,488 [main:56] - replacing (sum, Int)
2021-03-11 12:51:42,488 [main:38] - replacing sum Int
2021-03-11 12:51:42,488 [main:42] - Getting value of type Int
2021-03-11 12:51:42,564 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:42,564 [main:46] - GENERATED VALUE OF TYPE Int = -1783207083
2021-03-11 12:51:42,564 [main:49] - GENERATED IS CALL =false
2021-03-11 12:51:42,564 [main:55] - randomType = Char
2021-03-11 12:51:42,639 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:51:42,657 [main:137] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10809a26]
2021-03-11 12:51:42,657 [main:66] - Generated call from random type = ('蔖').digitToInt()
2021-03-11 12:51:42,657 [main:94] - GETTING Int from Int
2021-03-11 12:51:42,687 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4da4fc25]]
2021-03-11 12:51:42,687 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:51:42,687 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4da4fc25]
2021-03-11 12:51:42,762 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:42,763 [main:105] - GENERATED CALL = (0+1+2+3).toShort().div(-52)
2021-03-11 12:51:42,763 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@5052b22e]]
2021-03-11 12:51:42,763 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:51:42,763 [main:105] - GENERATED CALL = (0+1+2+3).toInt().absoluteValue
2021-03-11 12:51:42,763 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4ba73279]]
2021-03-11 12:51:42,763 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:51:42,763 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4ba73279]
2021-03-11 12:51:42,763 [main:105] - GENERATED CALL = (0+1+2+3).toShort().unaryMinus()
2021-03-11 12:51:42,763 [main:101] - Case = [public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b80cd8f]]
2021-03-11 12:51:42,763 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b80cd8f]
2021-03-11 12:51:42,763 [main:105] - GENERATED CALL = (0+1+2+3).inc()
2021-03-11 12:51:42,763 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36bf0f77]]
2021-03-11 12:51:42,763 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:42,862 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:42,862 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36bf0f77]
2021-03-11 12:51:42,862 [main:105] - GENERATED CALL = (0+1+2+3).compareTo(-220832842).takeHighestOneBit()
2021-03-11 12:51:42,862 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@446340cf]]
2021-03-11 12:51:42,862 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:51:42,862 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@446340cf]
2021-03-11 12:51:42,863 [main:105] - GENERATED CALL = (0+1+2+3).toInt().takeLowestOneBit()
2021-03-11 12:51:42,863 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3b8291ff]]
2021-03-11 12:51:42,863 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:42,943 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:42,943 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3b8291ff]
2021-03-11 12:51:43,024 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:43,025 [main:105] - GENERATED CALL = (0+1+2+3).compareTo(-449194710).coerceAtMost(-2054638959)
2021-03-11 12:51:43,025 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f664709]]
2021-03-11 12:51:43,025 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:43,107 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:43,107 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f664709]
2021-03-11 12:51:43,189 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:43,274 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:43,275 [main:105] - GENERATED CALL = (0+1+2+3).compareTo(-426563790).coerceIn(-2131820989, 1226053534)
2021-03-11 12:51:43,275 [main:101] - Case = [public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6736791a]]
2021-03-11 12:51:43,275 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6736791a]
2021-03-11 12:51:43,275 [main:105] - GENERATED CALL = (0+1+2+3).inv()
2021-03-11 12:51:43,275 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@5052b22e]]
2021-03-11 12:51:43,275 [main:105] - GENERATED CALL = (0+1+2+3).absoluteValue
2021-03-11 12:51:43,275 [main:63] - replacement of sum of type Int is (0+1+2+3).inv()
2021-03-11 12:51:43,354 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:51:43,354 [main:66] - Compilation checking started
2021-03-11 12:51:43,537 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (0+1+2+3).inv() += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:51:43,538 [main:56] - replacing (sum, Int)
2021-03-11 12:51:43,539 [main:38] - replacing sum Int
2021-03-11 12:51:43,539 [main:42] - Getting value of type Int
2021-03-11 12:51:43,615 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:43,615 [main:46] - GENERATED VALUE OF TYPE Int = -1528353689
2021-03-11 12:51:43,615 [main:49] - GENERATED IS CALL =false
2021-03-11 12:51:44,052 [main:55] - randomType = Map<List<UInt>, UShort>?
2021-03-11 12:51:44,052 [main:94] - GETTING Int from Int
2021-03-11 12:51:44,092 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3ff9eaf8]]
2021-03-11 12:51:44,093 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:44,174 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:44,174 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3ff9eaf8]
2021-03-11 12:51:44,259 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:44,260 [main:105] - GENERATED CALL = (0+1).compareTo(1374620293).coerceAtLeast(-938169536)
2021-03-11 12:51:44,260 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@13ad634b]]
2021-03-11 12:51:44,260 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:51:44,337 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:51:44,337 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@13ad634b]
2021-03-11 12:51:44,337 [main:105] - GENERATED CALL = (0+1).div(3180173300958708146).countOneBits()
2021-03-11 12:51:44,337 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7f28a29], public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@632c8bb9]]
2021-03-11 12:51:44,337 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7f28a29]
2021-03-11 12:51:44,337 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@632c8bb9]
2021-03-11 12:51:44,338 [main:105] - GENERATED CALL = (0+1).toDouble().toInt()
2021-03-11 12:51:44,338 [main:101] - Case = [public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c9f5998]]
2021-03-11 12:51:44,338 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c9f5998]
2021-03-11 12:51:44,416 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:44,416 [main:105] - GENERATED CALL = (0+1).shl(-1543504159)
2021-03-11 12:51:44,416 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ed6eedb]]
2021-03-11 12:51:44,416 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:51:44,417 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ed6eedb]
2021-03-11 12:51:44,495 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:44,496 [main:105] - GENERATED CALL = (0+1).toInt().div(-49)
2021-03-11 12:51:44,496 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@29a1d850]]
2021-03-11 12:51:44,496 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:51:44,496 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@29a1d850]
2021-03-11 12:51:44,496 [main:105] - GENERATED CALL = (0+1).toByte().countTrailingZeroBits()
2021-03-11 12:51:44,496 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@390b15c0]]
2021-03-11 12:51:44,496 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:51:44,496 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@390b15c0]
2021-03-11 12:51:44,572 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:51:44,572 [main:105] - GENERATED CALL = (0+1).toChar().minus('?')
2021-03-11 12:51:44,572 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@5052b22e]]
2021-03-11 12:51:44,572 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:44,648 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:44,648 [main:105] - GENERATED CALL = (0+1).compareTo(774077964).absoluteValue
2021-03-11 12:51:44,649 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@8c6da7c]]
2021-03-11 12:51:44,649 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:51:44,748 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:51:44,749 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@8c6da7c]
2021-03-11 12:51:44,749 [main:105] - GENERATED CALL = (0+1).div(7714432197469108025).countLeadingZeroBits()
2021-03-11 12:51:44,749 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4c4a428d]]
2021-03-11 12:51:44,749 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169]
2021-03-11 12:51:44,749 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4c4a428d]
2021-03-11 12:51:44,749 [main:105] - GENERATED CALL = (0+1).toFloat().toBits()
2021-03-11 12:51:44,749 [main:63] - replacement of sum of type Int is (0+1).div(7714432197469108025).countLeadingZeroBits()
2021-03-11 12:51:44,837 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:51:44,837 [main:66] - Compilation checking started
2021-03-11 12:51:45,050 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (0+1).div(7714432197469108025).countLeadingZeroBits() += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:51:45,052 [main:56] - replacing (sum, Int)
2021-03-11 12:51:45,052 [main:38] - replacing sum Int
2021-03-11 12:51:45,052 [main:42] - Getting value of type Int
2021-03-11 12:51:45,144 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:45,144 [main:46] - GENERATED VALUE OF TYPE Int = 554710810
2021-03-11 12:51:45,144 [main:49] - GENERATED IS CALL =false
2021-03-11 12:51:45,232 [main:55] - randomType = Long
2021-03-11 12:51:45,320 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:51:45,359 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@556c7eff]
2021-03-11 12:51:45,359 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4ba73279]
2021-03-11 12:51:45,359 [main:66] - Generated call from random type = (-7969587265890541367).toShort().unaryMinus()
2021-03-11 12:51:45,359 [main:94] - GETTING Int from Int
2021-03-11 12:51:45,392 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3ae3dfd2]]
2021-03-11 12:51:45,392 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:51:45,393 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3ae3dfd2]
2021-03-11 12:51:45,475 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:45,475 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toByte().times(110)
2021-03-11 12:51:45,475 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6561e48]]
2021-03-11 12:51:45,475 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:45,551 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:45,552 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6561e48]
2021-03-11 12:51:45,628 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:45,629 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).compareTo(1388379779).compareTo(52)
2021-03-11 12:51:45,629 [main:101] - Case = [@kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2814a4a]]
2021-03-11 12:51:45,629 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).sign
2021-03-11 12:51:45,629 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e], public open val start: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@48a2522d]]
2021-03-11 12:51:45,629 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e]
2021-03-11 12:51:45,705 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:45,705 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).rangeTo(-100).start
2021-03-11 12:51:45,705 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e], public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@1ca46bf]]
2021-03-11 12:51:45,705 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e]
2021-03-11 12:51:45,782 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:45,782 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).rangeTo(97).endInclusive
2021-03-11 12:51:45,782 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7f28a29], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@58fd4e05]]
2021-03-11 12:51:45,782 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7f28a29]
2021-03-11 12:51:45,783 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@58fd4e05]
2021-03-11 12:51:45,882 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:45,883 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toDouble().compareTo(13)
2021-03-11 12:51:45,883 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@446340cf]]
2021-03-11 12:51:45,883 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@446340cf]
2021-03-11 12:51:45,883 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).takeLowestOneBit()
2021-03-11 12:51:45,883 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4da4fc25]]
2021-03-11 12:51:45,883 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:51:45,883 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4da4fc25]
2021-03-11 12:51:45,971 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:45,972 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toShort().div(-55)
2021-03-11 12:51:45,972 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2d4ffd58]]
2021-03-11 12:51:45,972 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:51:46,061 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:51:46,061 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2d4ffd58]
2021-03-11 12:51:46,061 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).div(4929162949483572436).countTrailingZeroBits()
2021-03-11 12:51:46,061 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@32278335]]
2021-03-11 12:51:46,061 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:51:46,061 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@32278335]
2021-03-11 12:51:46,147 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:46,147 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toShort().compareTo(75)
2021-03-11 12:51:46,147 [main:63] - replacement of sum of type Int is (-7969587265890541367).toShort().unaryMinus()
2021-03-11 12:51:46,235 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:51:46,236 [main:66] - Compilation checking started
2021-03-11 12:51:46,425 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (-7969587265890541367).toShort().unaryMinus() += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:51:46,426 [main:56] - replacing (sum, Int)
2021-03-11 12:51:46,426 [main:38] - replacing sum Int
2021-03-11 12:51:46,426 [main:42] - Getting value of type Int
2021-03-11 12:51:46,504 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:46,504 [main:46] - GENERATED VALUE OF TYPE Int = -138136941
2021-03-11 12:51:46,505 [main:49] - GENERATED IS CALL =false
2021-03-11 12:51:46,506 [main:55] - randomType = A
2021-03-11 12:51:46,582 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:51:46,582 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:51:46,659 [main:194] - Type params = []
2021-03-11 12:51:46,734 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:51:46,734 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:51:46,742 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14b2aac4]
2021-03-11 12:51:46,817 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:51:46,918 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:51:46,918 [main:66] - Generated call from random type = (A(1789064406, "nsmac")).y.compareTo("cdeij", false)
2021-03-11 12:51:46,919 [main:94] - GETTING Int from String
2021-03-11 12:51:46,944 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14b2aac4]]
2021-03-11 12:51:46,944 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14b2aac4]
2021-03-11 12:51:47,026 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:51:47,109 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:51:47,109 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).compareTo("vifvc", false)
2021-03-11 12:51:47,109 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2814a4a]]
2021-03-11 12:51:47,109 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:51:47,190 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:51:47,191 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).compareTo("wsvps").sign
2021-03-11 12:51:47,191 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18626c8c]]
2021-03-11 12:51:47,191 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:51:47,277 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:51:47,277 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18626c8c]
2021-03-11 12:51:47,356 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:47,356 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).compareTo("dvyta").plus(100)
2021-03-11 12:51:47,356 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18626c8c]]
2021-03-11 12:51:47,356 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18626c8c]
2021-03-11 12:51:47,436 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:47,437 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).length.plus(-9)
2021-03-11 12:51:47,437 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c9f5998]]
2021-03-11 12:51:47,437 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c9f5998]
2021-03-11 12:51:47,517 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:47,517 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).length.shl(49962794)
2021-03-11 12:51:47,517 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f161575]]
2021-03-11 12:51:47,517 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:51:47,594 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:51:47,594 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f161575]
2021-03-11 12:51:47,671 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:47,671 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).compareTo("ckuty").times(103)
2021-03-11 12:51:47,671 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7d291fed]]
2021-03-11 12:51:47,671 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7d291fed]
2021-03-11 12:51:47,672 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).length.countOneBits()
2021-03-11 12:51:47,672 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21280b00], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10809a26]]
2021-03-11 12:51:47,672 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21280b00]
2021-03-11 12:51:47,772 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:47,773 [main:137] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10809a26]
2021-03-11 12:51:47,773 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).get(-466721106).digitToInt()
2021-03-11 12:51:47,773 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@446340cf]]
2021-03-11 12:51:47,773 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@446340cf]
2021-03-11 12:51:47,773 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).length.takeLowestOneBit()
2021-03-11 12:51:47,773 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4df1bec], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]]
2021-03-11 12:51:47,773 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4df1bec]
2021-03-11 12:51:47,864 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:51:47,865 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:51:47,945 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:51:47,946 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").y).equals("cykoy").compareTo(true)
2021-03-11 12:51:47,946 [main:63] - replacement of sum of type Int is (A(-1427813506, "vtkln").y).get(-466721106).digitToInt()
2021-03-11 12:51:48,028 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:51:48,028 [main:66] - Compilation checking started
2021-03-11 12:51:48,243 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (A(-1427813506, "vtkln").y).get(-466721106).digitToInt() += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:51:48,245 [main:56] - replacing (sum, Int)
2021-03-11 12:51:48,245 [main:38] - replacing sum Int
2021-03-11 12:51:48,245 [main:42] - Getting value of type Int
2021-03-11 12:51:48,323 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:48,324 [main:46] - GENERATED VALUE OF TYPE Int = -671030510
2021-03-11 12:51:48,324 [main:49] - GENERATED IS CALL =false
2021-03-11 12:51:48,325 [main:55] - randomType = A
2021-03-11 12:51:48,404 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:51:48,404 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:51:48,480 [main:194] - Type params = []
2021-03-11 12:51:48,556 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:51:48,557 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:51:48,565 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f161575]
2021-03-11 12:51:48,641 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:48,641 [main:66] - Generated call from random type = (A(-1628476317, "toxpv")).x.times(-105)
2021-03-11 12:51:48,641 [main:63] - replacement of sum of type Int is (A(-1628476317, "toxpv")).x.times(-105)
2021-03-11 12:51:48,718 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:51:48,718 [main:66] - Compilation checking started
2021-03-11 12:51:48,899 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (A(-1628476317, "toxpv")).x.times(-105) += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:51:48,901 [main:56] - replacing (sum, Int)
2021-03-11 12:51:48,902 [main:38] - replacing sum Int
2021-03-11 12:51:48,902 [main:42] - Getting value of type Int
2021-03-11 12:51:49,024 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:49,024 [main:46] - GENERATED VALUE OF TYPE Int = -916349241
2021-03-11 12:51:49,025 [main:49] - GENERATED IS CALL =false
2021-03-11 12:51:49,025 [main:55] - randomType = A
2021-03-11 12:51:49,106 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:51:49,106 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:51:49,192 [main:194] - Type params = []
2021-03-11 12:51:49,283 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:51:49,283 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:51:49,294 [main:137] - GENERATING call of type public final operator fun component1(): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@a3d0393]
2021-03-11 12:51:49,294 [main:66] - Generated call from random type = (A(1676405756, "iemew")).component1()
2021-03-11 12:51:49,294 [main:94] - GETTING Int from Int
2021-03-11 12:51:49,353 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@19b4dbb0]]
2021-03-11 12:51:49,353 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:51:49,353 [main:137] - GENERATING call of type public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@19b4dbb0]
2021-03-11 12:51:49,354 [main:105] - GENERATED CALL = (0+1+2+3).toChar().toInt()
2021-03-11 12:51:49,354 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36bf0f77]]
2021-03-11 12:51:49,354 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:51:49,354 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36bf0f77]
2021-03-11 12:51:49,354 [main:105] - GENERATED CALL = (0+1+2+3).toInt().takeHighestOneBit()
2021-03-11 12:51:49,354 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36845587]]
2021-03-11 12:51:49,354 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:49,440 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:49,440 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36845587]
2021-03-11 12:51:49,527 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:49,527 [main:105] - GENERATED CALL = (0+1+2+3).compareTo(796607355).xor(-849210911)
2021-03-11 12:51:49,528 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@d0efe34]]
2021-03-11 12:51:49,528 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:51:49,528 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@d0efe34]
2021-03-11 12:51:49,615 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:49,616 [main:105] - GENERATED CALL = (0+1+2+3).toInt().rotateRight(337413813)
2021-03-11 12:51:49,616 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f161575]]
2021-03-11 12:51:49,616 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:51:49,616 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f161575]
2021-03-11 12:51:49,701 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:49,701 [main:105] - GENERATED CALL = (0+1+2+3).toInt().times(36)
2021-03-11 12:51:49,701 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@208e2fd]]
2021-03-11 12:51:49,701 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:51:49,701 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@208e2fd]
2021-03-11 12:51:49,702 [main:105] - GENERATED CALL = (0+1+2+3).toShort().countLeadingZeroBits()
2021-03-11 12:51:49,702 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e], public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@1ca46bf]]
2021-03-11 12:51:49,702 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e]
2021-03-11 12:51:49,789 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:49,789 [main:105] - GENERATED CALL = (0+1+2+3).rangeTo(-94).endInclusive
2021-03-11 12:51:49,789 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169], public open fun toInt(): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@65cf0468]]
2021-03-11 12:51:49,789 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169]
2021-03-11 12:51:49,789 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@65cf0468]
2021-03-11 12:51:49,789 [main:105] - GENERATED CALL = (0+1+2+3).toFloat().toInt()
2021-03-11 12:51:49,789 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@446340cf]]
2021-03-11 12:51:49,790 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@446340cf]
2021-03-11 12:51:49,790 [main:105] - GENERATED CALL = (0+1+2+3).takeLowestOneBit()
2021-03-11 12:51:49,790 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7d291fed]]
2021-03-11 12:51:49,790 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:51:49,790 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7d291fed]
2021-03-11 12:51:49,790 [main:105] - GENERATED CALL = (0+1+2+3).toInt().countOneBits()
2021-03-11 12:51:49,790 [main:63] - replacement of sum of type Int is (0+1+2).toInt().and(-1121279207)+(0+1+2+3).toShort().countTrailingZeroBits()
2021-03-11 12:51:49,875 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-11 12:51:49,875 [main:66] - Compilation checking started
2021-03-11 12:51:50,066 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (0+1+2).toInt().and(-1121279207)+(0+1+2+3).toShort().countTrailingZeroBits() += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:51:50,068 [main:56] - replacing (sum, Int)
2021-03-11 12:51:50,068 [main:38] - replacing sum Int
2021-03-11 12:51:50,068 [main:42] - Getting value of type Int
2021-03-11 12:51:50,177 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:50,177 [main:46] - GENERATED VALUE OF TYPE Int = 371526431
2021-03-11 12:51:50,177 [main:49] - GENERATED IS CALL =false
2021-03-11 12:51:50,262 [main:55] - randomType = UByte
2021-03-11 12:51:50,343 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:51:50,378 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@644aa38e]
2021-03-11 12:51:50,460 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:51:50,460 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e53c7a]
2021-03-11 12:51:50,546 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:50,547 [main:66] - Generated call from random type = (33.toUByte()).compareTo(114.toUByte()).shr(-2094252791)
2021-03-11 12:51:50,547 [main:94] - GETTING Int from Int
2021-03-11 12:51:50,592 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@5e10d1c0]]
2021-03-11 12:51:50,592 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:51:50,592 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@5e10d1c0]
2021-03-11 12:51:50,669 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:50,670 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toByte().minus(4)
2021-03-11 12:51:50,670 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e], public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@1ca46bf]]
2021-03-11 12:51:50,670 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e]
2021-03-11 12:51:50,750 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:50,750 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).rangeTo(57).endInclusive
2021-03-11 12:51:50,750 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@241f9269]]
2021-03-11 12:51:50,750 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:51:50,750 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@241f9269]
2021-03-11 12:51:50,827 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:50,827 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toInt().or(2075317812)
2021-03-11 12:51:50,827 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18626c8c]]
2021-03-11 12:51:50,827 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:51:50,827 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18626c8c]
2021-03-11 12:51:50,905 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:50,906 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toInt().plus(-100)
2021-03-11 12:51:50,906 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62a877f4]]
2021-03-11 12:51:50,906 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:50,984 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:50,984 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62a877f4]
2021-03-11 12:51:50,984 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).compareTo(952750827).toInt()
2021-03-11 12:51:50,984 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@8c6da7c]]
2021-03-11 12:51:50,984 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:51:50,984 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@8c6da7c]
2021-03-11 12:51:50,985 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toLong().countLeadingZeroBits()
2021-03-11 12:51:50,985 [main:101] - Case = [public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@216b8aa8]]
2021-03-11 12:51:50,985 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@216b8aa8]
2021-03-11 12:51:51,112 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:51,113 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).ushr(-1747326873)
2021-03-11 12:51:51,113 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d4a80]]
2021-03-11 12:51:51,113 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:51,202 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:51,203 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d4a80]
2021-03-11 12:51:51,203 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).compareTo(1226241844).unaryPlus()
2021-03-11 12:51:51,203 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1baa65c8]]
2021-03-11 12:51:51,203 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:51:51,203 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1baa65c8]
2021-03-11 12:51:51,203 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).toShort().unaryPlus()
2021-03-11 12:51:51,203 [main:101] - Case = [public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f655756]]
2021-03-11 12:51:51,203 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f655756]
2021-03-11 12:51:51,203 [main:105] - GENERATED CALL = (A(-1427813506, "vtkln").x).unaryMinus()
2021-03-11 12:51:51,203 [main:63] - replacement of sum of type Int is A(-1427813506, "vtkln").x
2021-03-11 12:51:51,284 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:51:51,285 [main:66] - Compilation checking started
2021-03-11 12:51:51,488 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        A(-1427813506, "vtkln").x += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:51:51,490 [main:56] - replacing (sum, Int)
2021-03-11 12:51:51,490 [main:38] - replacing sum Int
2021-03-11 12:51:51,490 [main:42] - Getting value of type Int
2021-03-11 12:51:51,572 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:51,572 [main:46] - GENERATED VALUE OF TYPE Int = 1561429509
2021-03-11 12:51:51,573 [main:49] - GENERATED IS CALL =false
2021-03-11 12:51:52,327 [main:55] - randomType = Map<A, HashMap<Triple<Byte?, Int, Function2<A?, A?, ULong>>, String>>
2021-03-11 12:51:52,327 [main:94] - GETTING Int from Int
2021-03-11 12:51:52,371 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b80cd8f]]
2021-03-11 12:51:52,371 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:51:52,371 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b80cd8f]
2021-03-11 12:51:52,372 [main:105] - GENERATED CALL = (sum).toInt().inc()
2021-03-11 12:51:52,372 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@43b701b6]]
2021-03-11 12:51:52,372 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:51:52,372 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@43b701b6]
2021-03-11 12:51:52,372 [main:105] - GENERATED CALL = (sum).toByte().unaryPlus()
2021-03-11 12:51:52,372 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@d0efe34]]
2021-03-11 12:51:52,372 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:52,454 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:52,454 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@d0efe34]
2021-03-11 12:51:52,540 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:52,540 [main:105] - GENERATED CALL = (sum).compareTo(-2079594613).rotateRight(-1477785982)
2021-03-11 12:51:52,540 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@68b11d5c]]
2021-03-11 12:51:52,540 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:51:52,540 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@68b11d5c]
2021-03-11 12:51:52,540 [main:105] - GENERATED CALL = (sum).toShort().countOneBits()
2021-03-11 12:51:52,540 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2fea6abb]]
2021-03-11 12:51:52,540 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:51:52,540 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2fea6abb]
2021-03-11 12:51:52,627 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:52,628 [main:105] - GENERATED CALL = (sum).toLong().compareTo(-90)
2021-03-11 12:51:52,628 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@588beded]]
2021-03-11 12:51:52,628 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:51:52,628 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@588beded]
2021-03-11 12:51:52,706 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:52,706 [main:105] - GENERATED CALL = (sum).toShort().plus(-5)
2021-03-11 12:51:52,706 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76034fc0]]
2021-03-11 12:51:52,706 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:52,784 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:52,784 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76034fc0]
2021-03-11 12:51:52,784 [main:105] - GENERATED CALL = (sum).compareTo(1008152147).countTrailingZeroBits()
2021-03-11 12:51:52,784 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2814a4a]]
2021-03-11 12:51:52,784 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:52,861 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:52,861 [main:105] - GENERATED CALL = (sum).compareTo(-1203556000).sign
2021-03-11 12:51:52,861 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b80cd8f]]
2021-03-11 12:51:52,861 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:52,938 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:52,938 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b80cd8f]
2021-03-11 12:51:52,938 [main:105] - GENERATED CALL = (sum).compareTo(721336429).inc()
2021-03-11 12:51:52,938 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36845587]]
2021-03-11 12:51:52,938 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:53,037 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:53,038 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36845587]
2021-03-11 12:51:53,118 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:53,119 [main:105] - GENERATED CALL = (sum).compareTo(1155350361).xor(415786851)
2021-03-11 12:51:53,119 [main:63] - replacement of sum of type Int is (sum).toShort().countOneBits()
2021-03-11 12:51:53,199 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:51:53,200 [main:66] - Compilation checking started
2021-03-11 12:51:53,421 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo(1599849716).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        (sum).toShort().countOneBits() += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:51:53,423 [main:56] - replacing (sum, Int)
2021-03-11 12:51:53,423 [main:38] - replacing sum Int
2021-03-11 12:51:53,423 [main:42] - Getting value of type Int
2021-03-11 12:51:53,501 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:53,501 [main:46] - GENERATED VALUE OF TYPE Int = -1700901126
2021-03-11 12:51:53,501 [main:49] - GENERATED IS CALL =false
2021-03-11 12:51:53,904 [main:55] - randomType = LinkedHashMap<Array<A>, HashSet<Long>>
2021-03-11 12:51:54,005 [main:302] - generating value of type = LinkedHashMap<Array<A>, HashSet<Long>> false depth = 0
2021-03-11 12:51:54,094 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Array<A>, HashSet<Long>>): LkedHashMap<Array<A>, HashSet<Long>> = TODO()
2021-03-11 12:51:54,096 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Array<A>, HashSet<Long>>): LkedHashMap<Array<A>, HashSet<Long>> = TODO()
2021-03-11 12:51:54,185 [main:302] - generating value of type = Pair<Array<A>, HashSet<Long>> false depth = 3
2021-03-11 12:51:54,271 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Array<A>, second: HashSet<Long>): Pair<Array<A>, HashSet<Long>> = TODO()
2021-03-11 12:51:54,272 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Array<A>, second: HashSet<Long>): Pair<Array<A>, HashSet<Long>> = TODO()
2021-03-11 12:51:54,363 [main:302] - generating value of type = Array<A> false depth = 6
2021-03-11 12:51:54,461 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->A): Array<A> = TODO()
2021-03-11 12:51:54,462 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->A): Array<A> = TODO()
2021-03-11 12:51:54,724 [main:302] - generating value of type = Int true depth = 9
2021-03-11 12:51:54,725 [main:302] - generating value of type = Function1<Int, A> false depth = 9
2021-03-11 12:51:54,725 [main:302] - generating value of type = A false depth = 10
2021-03-11 12:51:54,725 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:51:54,810 [main:194] - Type params = []
2021-03-11 12:51:54,930 [main:302] - generating value of type = Int true depth = 12
2021-03-11 12:51:54,930 [main:302] - generating value of type = String true depth = 12
2021-03-11 12:51:54,931 [main:95] - GENERATED = Array<A>(971621519, {a: Int -> A(956571261, "rduqu")})
2021-03-11 12:51:54,931 [main:302] - generating value of type = HashSet<Long> false depth = 6
2021-03-11 12:51:55,024 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(): HashSet<Long> = TODO()
2021-03-11 12:51:55,025 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(): HashSet<Long> = TODO()
2021-03-11 12:51:55,115 [main:95] - GENERATED = LinkedHashSet<Long>()
2021-03-11 12:51:55,116 [main:95] - GENERATED = Pair<Array<A>, HashSet<Long>>(Array<A>(971621519, {a: Int -> A(956571261, "rduqu")}), LinkedHashSet<Long>())
2021-03-11 12:51:55,116 [main:95] - GENERATED = linkedMapOf<Array<A>, HashSet<Long>>(Pair<Array<A>, HashSet<Long>>(Array<A>(971621519, {a: Int -> A(956571261, "rduqu")}), LinkedHashSet<Long>()))
2021-03-11 12:51:55,337 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d4a80]
2021-03-11 12:51:55,338 [main:66] - Generated call from random type = (linkedMapOf<Array<A>, HashSet<Long>>(Pair<Array<A>, HashSet<Long>>(Array<A>(971621519, {a: Int -> A(956571261, "rduqu")}), LinkedHashSet<Long>()))).size.unaryPlus()
2021-03-11 12:51:55,338 [main:94] - GETTING Int from Int
2021-03-11 12:51:55,382 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@6972dc2f]]
2021-03-11 12:51:55,383 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:51:55,461 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:51:55,462 [main:105] - GENERATED CALL = (sum).div(-8633308161469524691).sign
2021-03-11 12:51:55,462 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2d4ffd58]]
2021-03-11 12:51:55,462 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:51:55,541 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:51:55,542 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2d4ffd58]
2021-03-11 12:51:55,542 [main:105] - GENERATED CALL = (sum).div(8136256588598609472).countTrailingZeroBits()
2021-03-11 12:51:55,542 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6561e48]]
2021-03-11 12:51:55,542 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:51:55,542 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6561e48]
2021-03-11 12:51:55,620 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:55,621 [main:105] - GENERATED CALL = (sum).toInt().compareTo(-22)
2021-03-11 12:51:55,621 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e], public final val first: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@271f9a43]]
2021-03-11 12:51:55,621 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e]
2021-03-11 12:51:55,700 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:55,700 [main:105] - GENERATED CALL = (sum).rangeTo(-89).first
2021-03-11 12:51:55,701 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1f1092b7]]
2021-03-11 12:51:55,701 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:51:55,701 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1f1092b7]
2021-03-11 12:51:55,701 [main:105] - GENERATED CALL = (sum).toByte().toInt()
2021-03-11 12:51:55,701 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ec35323]]
2021-03-11 12:51:55,701 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:55,778 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:55,779 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ec35323]
2021-03-11 12:51:55,856 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:55,856 [main:105] - GENERATED CALL = (sum).compareTo(1254152660).rotateLeft(202946475)
2021-03-11 12:51:55,856 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@13ad634b]]
2021-03-11 12:51:55,856 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:51:55,933 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:51:55,933 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@13ad634b]
2021-03-11 12:51:55,933 [main:105] - GENERATED CALL = (sum).div(-8249382733751470895).countOneBits()
2021-03-11 12:51:55,934 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@390b15c0]]
2021-03-11 12:51:55,934 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:51:55,934 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@390b15c0]
2021-03-11 12:51:56,033 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:51:56,033 [main:105] - GENERATED CALL = (sum).toChar().minus('댳')
2021-03-11 12:51:56,033 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62a877f4]]
2021-03-11 12:51:56,033 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:51:56,116 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:51:56,116 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62a877f4]
2021-03-11 12:51:56,116 [main:105] - GENERATED CALL = (sum).compareTo(-621379372).toInt()
2021-03-11 12:51:56,117 [main:101] - Case = [public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ed6eedb]]
2021-03-11 12:51:56,117 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ed6eedb]
2021-03-11 12:51:56,199 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:51:56,199 [main:105] - GENERATED CALL = (sum).div(-122)
2021-03-11 12:51:56,199 [main:63] - replacement of sum of type Int is sum
2021-03-11 12:51:56,282 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:51:56,378 [main:90] - TRYING TO REPLACE CONSTANT 0.1955623f
2021-03-11 12:51:56,455 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(FLOAT_CONSTANT)
2021-03-11 12:51:56,455 [main:66] - Compilation checking started
2021-03-11 12:51:56,738 [main:90] - TRYING TO REPLACE CONSTANT 1599849716
2021-03-11 12:51:56,819 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PARENTHESIZED)
2021-03-11 12:51:56,819 [main:66] - Compilation checking started
2021-03-11 12:51:57,099 [main:53] - Result = true
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo((0+1)).plus(-50)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:51:57,100 [main:90] - TRYING TO REPLACE CONSTANT 50
2021-03-11 12:51:57,181 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-11 12:51:57,182 [main:66] - Compilation checking started
2021-03-11 12:51:57,444 [main:53] - Result = true
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(-1427813506, "vtkln").x).compareTo((0+1)).plus(-753882918)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:51:57,444 [main:90] - TRYING TO REPLACE CONSTANT 1427813506
2021-03-11 12:51:57,521 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 12:51:57,521 [main:66] - Compilation checking started
2021-03-11 12:51:57,819 [main:53] - Result = true
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(1, "vtkln").x).compareTo((0+1)).plus(-753882918)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:51:57,819 [main:90] - TRYING TO REPLACE CONSTANT 2
2021-03-11 12:51:57,901 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(BINARY_EXPRESSION)
2021-03-11 12:51:57,902 [main:66] - Compilation checking started
2021-03-11 12:51:58,169 [main:53] - Result = true
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(1, "vtkln").x).compareTo((0+1)).plus(-753882918)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (0+1+0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:51:58,169 [main:90] - TRYING TO REPLACE CONSTANT 0
2021-03-11 12:51:58,246 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 12:51:58,247 [main:66] - Compilation checking started
2021-03-11 12:51:58,506 [main:53] - Result = true
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(1, "vtkln").x).compareTo((0+1)).plus(-753882918)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (1427813506+1+0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:51:58,506 [main:90] - TRYING TO REPLACE CONSTANT 1
2021-03-11 12:51:58,583 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 12:51:58,583 [main:66] - Compilation checking started
2021-03-11 12:51:58,858 [main:53] - Result = true
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(1, "vtkln").x).compareTo((0+1)).plus(-753882918)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (1427813506+74383045+0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:51:58,858 [main:90] - TRYING TO REPLACE CONSTANT 74383045
2021-03-11 12:51:58,938 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PROPERTY)
2021-03-11 12:51:58,938 [main:66] - Compilation checking started
2021-03-11 12:51:58,939 [main:71] - Wrong syntax or breaks conditions
2021-03-11 12:51:58,940 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(1, "vtkln").x).compareTo((0+1)).plus(-753882918)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (1427813506+74383045+0+1+2).compareTo(var sum = (A(1, "vtkln").x).compareTo((0+1)).plus(-753882918)).toString(-753882918)
}


2021-03-11 12:51:58,940 [main:90] - TRYING TO REPLACE CONSTANT 753882918
2021-03-11 12:51:59,018 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:51:59,019 [main:66] - Compilation checking started
2021-03-11 12:51:59,203 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(1, "vtkln").x).compareTo((0+1)).plus(-753882918)
    var str = (A(-1427813506, "vtkln").x).compareTo(358841914).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (1427813506+74383045+0+1+2).compareTo(74383045).toString(size)
}


2021-03-11 12:51:59,203 [main:90] - TRYING TO REPLACE CONSTANT 358841914
2021-03-11 12:51:59,281 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:51:59,281 [main:66] - Compilation checking started
2021-03-11 12:51:59,549 [main:53] - Result = true
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(1, "vtkln").x).compareTo((0+1)).plus(-753882918)
    var str = (A(-1427813506, "vtkln").x).compareTo(sum).toString(-1288822813)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (1427813506+74383045+0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:51:59,550 [main:90] - TRYING TO REPLACE CONSTANT 1288822813
2021-03-11 12:51:59,642 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:51:59,643 [main:66] - Compilation checking started
2021-03-11 12:51:59,921 [main:53] - Result = true
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(1, "vtkln").x).compareTo((0+1)).plus(-753882918)
    var str = (A(-1427813506, "vtkln").x).compareTo(sum).toString(sum)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (1427813506+74383045+0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:51:59,921 [main:90] - TRYING TO REPLACE CONSTANT 1427813506
2021-03-11 12:52:00,002 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:52:00,002 [main:66] - Compilation checking started
2021-03-11 12:52:00,210 [main:49] - Result = false
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(1, "vtkln").x).compareTo((0+1)).plus(-753882918)
    var str = (A(plus(-753882918), "vtkln").x).compareTo(sum).toString(sum)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1).toChar().titlecase()
    }
    
    return (1427813506+74383045+0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:52:00,210 [main:90] - TRYING TO REPLACE CONSTANT 0
2021-03-11 12:52:00,287 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(BINARY_EXPRESSION)
2021-03-11 12:52:00,288 [main:66] - Compilation checking started
2021-03-11 12:52:00,544 [main:53] - Result = true
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(1, "vtkln").x).compareTo((0+1)).plus(-753882918)
    var str = (A(-1427813506, "vtkln").x).compareTo(sum).toString(sum)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1+1).toChar().titlecase()
    }
    
    return (1427813506+74383045+0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:52:00,544 [main:90] - TRYING TO REPLACE CONSTANT 1
2021-03-11 12:52:00,624 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(BINARY_EXPRESSION)
2021-03-11 12:52:00,624 [main:66] - Compilation checking started
2021-03-11 12:52:00,885 [main:53] - Result = true
Text:
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = emptyArray<A>()
    
    var sum = (A(1, "vtkln").x).compareTo((0+1)).plus(-753882918)
    var str = (A(-1427813506, "vtkln").x).compareTo(sum).toString(sum)
    
    for ((x, y) in emptyArray<A>()) {
        sum += (linkedSetOf<Float>(0.1955623f)).size.toInt()
        str += (0+1+1427813506+74383045).toChar().titlecase()
    }
    
    return (1427813506+74383045+0+1+2).compareTo(74383045).toString(-753882918)
}


2021-03-11 12:52:00,905 [main:46] - AFTER TRY 0 res = data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}
2021-03-11 12:52:01,055 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:52:01,127 [main:194] - Type params = []
2021-03-11 12:52:01,199 [main:302] - generating value of type = Int true depth = 1
2021-03-11 12:52:01,199 [main:302] - generating value of type = String true depth = 1
2021-03-11 12:52:01,350 [main:48] - Try №0
2021-03-11 12:52:10,462 [main:48] - Already checked
2021-03-11 12:52:14,097 [main:71] - Trying to insert abstract fun fu4(exception: Throwable)
2021-03-11 12:52:14,284 [main:66] - Compilation checking started
2021-03-11 12:52:15,418 [main:99] - Trying to change 157 nodes
2021-03-11 12:52:15,418 [main:103] - replacing (method, String)
2021-03-11 12:52:15,420 [main:38] - replacing method String
2021-03-11 12:52:15,420 [main:42] - Getting value of type String
2021-03-11 12:52:15,590 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:52:15,592 [main:46] - GENERATED VALUE OF TYPE String = "uibou"
2021-03-11 12:52:15,592 [main:49] - GENERATED IS CALL =false
2021-03-11 12:52:15,600 [main:55] - randomType = Kla0
2021-03-11 12:52:15,759 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 12:52:15,761 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}
2021-03-11 12:52:15,904 [main:194] - Type params = []
2021-03-11 12:52:16,048 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 12:52:16,199 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:52:16,202 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:52:16,531 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 12:52:16,683 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:52:16,686 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:52:17,241 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:52:17,241 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:52:17,270 [main:94] - GETTING String from String
2021-03-11 12:52:17,312 [main:101] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1eb803d8]]
2021-03-11 12:52:17,312 [main:137] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1eb803d8]
2021-03-11 12:52:17,487 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:17,490 [main:105] - GENERATED CALL = (str).repeat(-2094167258)
2021-03-11 12:52:17,490 [main:101] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33bff40f]]
2021-03-11 12:52:17,490 [main:137] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33bff40f]
2021-03-11 12:52:17,645 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:52:17,647 [main:105] - GENERATED CALL = (str).trimMargin("scwxz")
2021-03-11 12:52:17,647 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d2ec174]]
2021-03-11 12:52:17,647 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d2ec174]
2021-03-11 12:52:17,647 [main:105] - GENERATED CALL = (str).lowercase()
2021-03-11 12:52:17,648 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21280b00], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]]
2021-03-11 12:52:17,648 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21280b00]
2021-03-11 12:52:17,795 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:17,797 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]
2021-03-11 12:52:17,797 [main:105] - GENERATED CALL = (str).get(737705173).titlecase()
2021-03-11 12:52:17,797 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c7e5dcd]]
2021-03-11 12:52:17,797 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c7e5dcd]
2021-03-11 12:52:17,797 [main:105] - GENERATED CALL = (str).uppercase()
2021-03-11 12:52:17,797 [main:101] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@161cf1b0]]
2021-03-11 12:52:17,797 [main:137] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@161cf1b0]
2021-03-11 12:52:17,924 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:52:18,054 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:52:18,193 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:52:18,195 [main:105] - GENERATED CALL = (str).replace('녦', 'ꦐ', false)
2021-03-11 12:52:18,196 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30dba167]]
2021-03-11 12:52:18,196 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30dba167]
2021-03-11 12:52:18,196 [main:105] - GENERATED CALL = (str).reversed()
2021-03-11 12:52:18,196 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a1cf14c]]
2021-03-11 12:52:18,196 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:52:18,327 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:18,460 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:18,462 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a1cf14c]
2021-03-11 12:52:18,629 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:18,773 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:18,775 [main:105] - GENERATED CALL = (str).subSequence(-1307838455, -1030386819).substring(1111522148, -545258246)
2021-03-11 12:52:18,775 [main:101] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a3ba1fe]]
2021-03-11 12:52:18,775 [main:137] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a3ba1fe]
2021-03-11 12:52:18,916 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:19,070 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:52:19,073 [main:105] - GENERATED CALL = (str).padEnd(-1337246161, '䏻')
2021-03-11 12:52:19,073 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d3a6837]]
2021-03-11 12:52:19,073 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d3a6837]
2021-03-11 12:52:19,074 [main:105] - GENERATED CALL = (str).trimStart()
2021-03-11 12:52:19,074 [main:110] - replacement of method of type String is (str).get(737705173).titlecase()
2021-03-11 12:52:19,206 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:52:19,207 [main:66] - Compilation checking started
2021-03-11 12:52:19,820 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = 1

fun box337(): String {
    var prope3 = "fail 1"
    fu1 {
        // Initialize var with Int value
        for (i in 1..prope0) {
            if ("".length > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if (fu0() == "OK") {
            prope9 = "OK"
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return prope3
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { it?.methodName?.startsWith((str).get(737705173).titlecase()) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:52:19,823 [main:103] - replacing (true, Boolean)
2021-03-11 12:52:19,825 [main:38] - replacing true Boolean
2021-03-11 12:52:19,825 [main:42] - Getting value of type Boolean
2021-03-11 12:52:19,992 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:52:19,994 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 12:52:19,994 [main:49] - GENERATED IS CALL =false
2021-03-11 12:52:20,481 [main:55] - randomType = MutableMap<Double, Long>
2021-03-11 12:52:20,481 [main:94] - GETTING Boolean from Boolean
2021-03-11 12:52:20,496 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@63c6a639]]
2021-03-11 12:52:20,496 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@63c6a639]
2021-03-11 12:52:20,497 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).not()
2021-03-11 12:52:20,497 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@66871f61]]
2021-03-11 12:52:20,497 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@66871f61]
2021-03-11 12:52:20,636 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:52:20,639 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).or(true)
2021-03-11 12:52:20,639 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1a38040]]
2021-03-11 12:52:20,639 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1a38040]
2021-03-11 12:52:20,790 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:52:20,792 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).xor(false)
2021-03-11 12:52:20,792 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]]
2021-03-11 12:52:20,792 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:52:20,980 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:52:20,983 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]
2021-03-11 12:52:21,141 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:52:21,141 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).equals("jrmnc")
2021-03-11 12:52:21,141 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1d132288], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1a38040]]
2021-03-11 12:52:21,141 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1d132288]
2021-03-11 12:52:21,316 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:52:21,316 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1a38040]
2021-03-11 12:52:21,476 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:52:21,479 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).equals("qbqwa").xor(true)
2021-03-11 12:52:21,479 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@53884783]]
2021-03-11 12:52:21,479 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@53884783]
2021-03-11 12:52:21,622 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).equals(null)
2021-03-11 12:52:21,622 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1d132288], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@63c6a639]]
2021-03-11 12:52:21,622 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1d132288]
2021-03-11 12:52:21,746 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:52:21,747 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@63c6a639]
2021-03-11 12:52:21,747 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).equals("fvsfm").not()
2021-03-11 12:52:21,747 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1d132288], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@66871f61]]
2021-03-11 12:52:21,747 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1d132288]
2021-03-11 12:52:21,870 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:52:21,870 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@66871f61]
2021-03-11 12:52:21,995 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:52:21,997 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).equals("lmzgm").or(false)
2021-03-11 12:52:21,997 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4063f07e]]
2021-03-11 12:52:21,997 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4063f07e]
2021-03-11 12:52:22,125 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:52:22,127 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).and(false)
2021-03-11 12:52:22,127 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1d132288], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4063f07e]]
2021-03-11 12:52:22,127 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1d132288]
2021-03-11 12:52:22,254 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:52:22,255 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4063f07e]
2021-03-11 12:52:22,422 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:52:22,424 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).equals("zefxh").and(false)
2021-03-11 12:52:22,424 [main:110] - replacement of true of type Boolean is (sum == 0+1+2+3+4).equals("fvsfm").not()
2021-03-11 12:52:22,567 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:52:22,568 [main:66] - Compilation checking started
2021-03-11 12:52:23,271 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = 1

fun box337(): String {
    var prope3 = "fail 1"
    fu1 {
        // Initialize var with Int value
        for (i in 1..prope0) {
            if ("".length > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if (fu0() == "OK") {
            prope9 = "OK"
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return prope3
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { it?.methodName?.startsWith((str).get(737705173).titlecase()) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope2.prope7 = {
            prope2.prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:52:23,274 [main:103] - replacing ("fail 1", String)
2021-03-11 12:52:23,275 [main:38] - replacing "fail 1" String
2021-03-11 12:52:23,276 [main:42] - Getting value of type String
2021-03-11 12:52:23,443 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:52:23,445 [main:46] - GENERATED VALUE OF TYPE String = "prvai"
2021-03-11 12:52:23,445 [main:49] - GENERATED IS CALL =false
2021-03-11 12:52:23,449 [main:55] - randomType = String
2021-03-11 12:52:23,577 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:52:23,613 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@340b14f4]
2021-03-11 12:52:23,753 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:23,889 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:24,023 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:52:24,161 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:52:24,164 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:52:24,455 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:52:24,458 [main:95] - GENERATED = StringBuilder("nvhgv")
2021-03-11 12:52:24,458 [main:66] - Generated call from random type = ("tduqw").replaceRange(-563263454, 1205632987, StringBuilder("nvhgv"))
2021-03-11 12:52:24,459 [main:94] - GETTING String from Int
2021-03-11 12:52:24,504 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:52:24,504 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:52:24,639 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:24,642 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:52:24,851 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:24,854 [main:105] - GENERATED CALL = (0+1).compareTo(-520498937).toString(-1819731552)
2021-03-11 12:52:24,855 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]]
2021-03-11 12:52:24,855 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:52:24,855 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]
2021-03-11 12:52:24,855 [main:105] - GENERATED CALL = (0+1).toChar().titlecase()
2021-03-11 12:52:24,855 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:52:24,855 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:52:24,855 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:52:25,047 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:25,051 [main:105] - GENERATED CALL = (0+1).toInt().toString(-1928881319)
2021-03-11 12:52:25,051 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]]
2021-03-11 12:52:25,051 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:52:25,051 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]
2021-03-11 12:52:25,210 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:52:25,214 [main:105] - GENERATED CALL = (0+1).toChar().plus("fyavk")
2021-03-11 12:52:25,214 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:52:25,214 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:52:25,356 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:52:25,358 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:52:25,492 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:25,494 [main:105] - GENERATED CALL = (0+1).div(792398688235383027).toString(1646835245)
2021-03-11 12:52:25,494 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:52:25,494 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:52:25,615 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:25,617 [main:105] - GENERATED CALL = (0+1).toString(1927981626)
2021-03-11 12:52:25,617 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:52:25,617 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:52:25,617 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:52:25,741 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:25,743 [main:105] - GENERATED CALL = (0+1).toLong().toString(-679011109)
2021-03-11 12:52:25,743 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]]
2021-03-11 12:52:25,743 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:52:25,743 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]
2021-03-11 12:52:25,744 [main:105] - GENERATED CALL = (0+1).toChar().lowercase()
2021-03-11 12:52:25,744 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]]
2021-03-11 12:52:25,744 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:52:25,744 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]
2021-03-11 12:52:25,871 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:25,873 [main:105] - GENERATED CALL = (0+1).toShort().toString(-1124747110)
2021-03-11 12:52:25,873 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]]
2021-03-11 12:52:25,873 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:52:25,874 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]
2021-03-11 12:52:25,874 [main:105] - GENERATED CALL = (0+1).toChar().uppercase()
2021-03-11 12:52:25,874 [main:110] - replacement of "fail 1" of type String is (0+1).toChar().uppercase()
2021-03-11 12:52:26,001 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:52:26,002 [main:66] - Compilation checking started
2021-03-11 12:52:26,581 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = 1

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in 1..prope0) {
            if ("".length > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if (fu0() == "OK") {
            prope9 = "OK"
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return prope3
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { it?.methodName?.startsWith((str).get(737705173).titlecase()) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope2.prope7 = {
            prope2.prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:52:26,584 [main:103] - replacing (checkFinished && !prope6, Boolean)
2021-03-11 12:52:26,586 [main:38] - replacing checkFinished && !prope6 Boolean
2021-03-11 12:52:26,586 [main:42] - Getting value of type Boolean
2021-03-11 12:52:26,712 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:52:26,714 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 12:52:26,714 [main:49] - GENERATED IS CALL =false
2021-03-11 12:52:27,042 [main:55] - randomType = Sequence<Byte>
2021-03-11 12:52:27,043 [main:94] - GETTING Boolean from String
2021-03-11 12:52:27,067 [main:101] - Case = [public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@190b24ad]]
2021-03-11 12:52:27,067 [main:137] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@190b24ad]
2021-03-11 12:52:27,067 [main:105] - GENERATED CALL = (str).any()
2021-03-11 12:52:27,067 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f383a64]]
2021-03-11 12:52:27,068 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f383a64]
2021-03-11 12:52:27,068 [main:105] - GENERATED CALL = (str).isEmpty()
2021-03-11 12:52:27,068 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b11e6fc]]
2021-03-11 12:52:27,068 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:52:27,204 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:27,343 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:27,346 [main:137] - GENERATING call of type public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b11e6fc]
2021-03-11 12:52:27,484 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:52:27,613 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:52:27,615 [main:105] - GENERATED CALL = (str).subSequence(-868995544, -659462048).endsWith('ꨴ', true)
2021-03-11 12:52:27,615 [main:101] - Case = [public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4941aed4]]
2021-03-11 12:52:27,615 [main:137] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4941aed4]
2021-03-11 12:52:27,744 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:52:27,870 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:52:27,873 [main:105] - GENERATED CALL = (str).endsWith("itrmd", true)
2021-03-11 12:52:27,873 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4df1bec], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@53884783]]
2021-03-11 12:52:27,873 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4df1bec]
2021-03-11 12:52:27,998 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:52:27,998 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@53884783]
2021-03-11 12:52:28,134 [main:105] - GENERATED CALL = (str).equals("ybmvx").equals(null)
2021-03-11 12:52:28,134 [main:101] - Case = [public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c0f4df1]]
2021-03-11 12:52:28,134 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c0f4df1]
2021-03-11 12:52:28,265 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:52:28,267 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:52:28,270 [main:105] - GENERATED CALL = (str).all({a: Char -> false})
2021-03-11 12:52:28,270 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4df1bec], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@66871f61]]
2021-03-11 12:52:28,270 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4df1bec]
2021-03-11 12:52:28,448 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:52:28,448 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@66871f61]
2021-03-11 12:52:28,602 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:52:28,605 [main:105] - GENERATED CALL = (str).equals("koraa").or(false)
2021-03-11 12:52:28,605 [main:101] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62ecbcd6]]
2021-03-11 12:52:28,605 [main:137] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62ecbcd6]
2021-03-11 12:52:28,605 [main:105] - GENERATED CALL = (str).toBoolean()
2021-03-11 12:52:28,605 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21280b00], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12b66b2d]]
2021-03-11 12:52:28,605 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21280b00]
2021-03-11 12:52:28,744 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:28,748 [main:137] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12b66b2d]
2021-03-11 12:52:28,748 [main:105] - GENERATED CALL = (str).get(761638767).isTitleCase()
2021-03-11 12:52:28,748 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21280b00], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@216b78]]
2021-03-11 12:52:28,748 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21280b00]
2021-03-11 12:52:28,905 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:28,909 [main:137] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@216b78]
2021-03-11 12:52:28,909 [main:105] - GENERATED CALL = (str).get(-1364646628).isWhitespace()
2021-03-11 12:52:28,909 [main:110] - replacement of checkFinished && !prope6 of type Boolean is (str).all({a: Char -> false})
2021-03-11 12:52:29,058 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:52:29,059 [main:66] - Compilation checking started
2021-03-11 12:52:29,824 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = 1

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in 1..prope0) {
            if ("".length > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if (fu0() == "OK") {
            prope9 = "OK"
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return prope3
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { it?.methodName?.startsWith((str).get(737705173).titlecase()) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope2.prope7 = {
            prope2.prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:52:29,826 [main:103] - replacing (prope5 != numberOfSuspensions, Boolean)
2021-03-11 12:52:29,827 [main:38] - replacing prope5 != numberOfSuspensions Boolean
2021-03-11 12:52:29,827 [main:42] - Getting value of type Boolean
2021-03-11 12:52:29,955 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:52:29,957 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 12:52:29,958 [main:49] - GENERATED IS CALL =false
2021-03-11 12:52:30,113 [main:55] - randomType = MutableMap<Int, String>
2021-03-11 12:52:30,114 [main:94] - GETTING Boolean from Int
2021-03-11 12:52:30,147 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@216b78]]
2021-03-11 12:52:30,147 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:52:30,147 [main:137] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@216b78]
2021-03-11 12:52:30,147 [main:105] - GENERATED CALL = (0+1+2+3).toChar().isWhitespace()
2021-03-11 12:52:30,147 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@98474c2]]
2021-03-11 12:52:30,147 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d]
2021-03-11 12:52:30,270 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:52:30,272 [main:137] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@98474c2]
2021-03-11 12:52:30,273 [main:105] - GENERATED CALL = (0+1+2+3).div(0.8151252147019243).isNaN()
2021-03-11 12:52:30,273 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@628f3477]]
2021-03-11 12:52:30,273 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:52:30,273 [main:137] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@628f3477]
2021-03-11 12:52:30,273 [main:105] - GENERATED CALL = (0+1+2+3).toChar().isSurrogate()
2021-03-11 12:52:30,273 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f9daf84]]
2021-03-11 12:52:30,273 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:52:30,273 [main:137] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f9daf84]
2021-03-11 12:52:30,273 [main:105] - GENERATED CALL = (0+1+2+3).toChar().isDefined()
2021-03-11 12:52:30,273 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24bd4c6b]]
2021-03-11 12:52:30,273 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:52:30,273 [main:137] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24bd4c6b]
2021-03-11 12:52:30,273 [main:105] - GENERATED CALL = (0+1+2+3).toChar().isDigit()
2021-03-11 12:52:30,273 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]]
2021-03-11 12:52:30,273 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:52:30,274 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]
2021-03-11 12:52:30,397 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:52:30,397 [main:105] - GENERATED CALL = (0+1+2+3).toInt().equals("wvoae")
2021-03-11 12:52:30,397 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7f28a29], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@98474c2]]
2021-03-11 12:52:30,397 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7f28a29]
2021-03-11 12:52:30,397 [main:137] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@98474c2]
2021-03-11 12:52:30,397 [main:105] - GENERATED CALL = (0+1+2+3).toDouble().isNaN()
2021-03-11 12:52:30,397 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@27eff770]]
2021-03-11 12:52:30,398 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d]
2021-03-11 12:52:30,532 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:52:30,534 [main:137] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@27eff770]
2021-03-11 12:52:30,534 [main:105] - GENERATED CALL = (0+1+2+3).div(0.8081500083007596).isInfinite()
2021-03-11 12:52:30,534 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169], public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@5e365ad0]]
2021-03-11 12:52:30,534 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169]
2021-03-11 12:52:30,534 [main:137] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@5e365ad0]
2021-03-11 12:52:30,535 [main:105] - GENERATED CALL = (0+1+2+3).toFloat().isNaN()
2021-03-11 12:52:30,535 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@512146ca]]
2021-03-11 12:52:30,535 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:52:30,535 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@512146ca]
2021-03-11 12:52:30,714 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:52:30,715 [main:105] - GENERATED CALL = (0+1+2+3).toLong().equals("ueiyo")
2021-03-11 12:52:30,715 [main:110] - replacement of prope5 != numberOfSuspensions of type Boolean is false
2021-03-11 12:52:30,868 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-11 12:52:30,868 [main:66] - Compilation checking started
2021-03-11 12:52:31,562 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = 1

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in 1..prope0) {
            if ("".length > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if (fu0() == "OK") {
            prope9 = "OK"
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return prope3
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { it?.methodName?.startsWith((str).get(737705173).titlecase()) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (false)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope2.prope7 = {
            prope2.prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:52:31,565 [main:103] - replacing (prope0, Int)
2021-03-11 12:52:31,565 [main:38] - replacing prope0 Int
2021-03-11 12:52:31,565 [main:42] - Getting value of type Int
2021-03-11 12:52:31,690 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:31,692 [main:46] - GENERATED VALUE OF TYPE Int = -1706951133
2021-03-11 12:52:31,693 [main:49] - GENERATED IS CALL =false
2021-03-11 12:52:32,281 [main:55] - randomType = Kla2<Short?>?
2021-03-11 12:52:32,405 [main:302] - generating value of type = Kla2<Short?> false depth = 0
2021-03-11 12:52:32,407 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 12:52:33,016 [main:302] - generating value of type = Kla5 false depth = 2
2021-03-11 12:52:33,018 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope2.prope7 = {
            prope2.prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}
2021-03-11 12:52:33,039 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla2[DeserializedSimpleFunctionDescriptor@65211a91]
2021-03-11 12:52:33,173 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:52:33,173 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:52:33,318 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:52:33,321 [main:66] - Generated call from random type = (Kla5)?.equals("ydfwh").compareTo(false)
2021-03-11 12:52:33,321 [main:94] - GETTING Int from Int
2021-03-11 12:52:33,373 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f664709]]
2021-03-11 12:52:33,373 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:52:33,499 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:33,502 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f664709]
2021-03-11 12:52:33,624 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:33,750 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:33,753 [main:105] - GENERATED CALL = (0+1+2+3).compareTo(-2039043141).coerceIn(-1078960642, 1674695137)
2021-03-11 12:52:33,753 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36bf0f77]]
2021-03-11 12:52:33,754 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:52:33,889 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:33,891 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36bf0f77]
2021-03-11 12:52:33,892 [main:105] - GENERATED CALL = (0+1+2+3).compareTo(1258535659).takeHighestOneBit()
2021-03-11 12:52:33,892 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@58fd4e05]]
2021-03-11 12:52:33,892 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d]
2021-03-11 12:52:34,019 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:52:34,021 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@58fd4e05]
2021-03-11 12:52:34,146 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:52:34,148 [main:105] - GENERATED CALL = (0+1+2+3).div(0.17236330008045686).compareTo(-30)
2021-03-11 12:52:34,149 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@241f9269]]
2021-03-11 12:52:34,149 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:52:34,149 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@241f9269]
2021-03-11 12:52:34,272 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:34,274 [main:105] - GENERATED CALL = (0+1+2+3).toInt().or(803870091)
2021-03-11 12:52:34,274 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@5052b22e]]
2021-03-11 12:52:34,274 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:52:34,439 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:34,441 [main:105] - GENERATED CALL = (0+1+2+3).compareTo(-1558662332).absoluteValue
2021-03-11 12:52:34,442 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1c62794d]]
2021-03-11 12:52:34,442 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:52:34,442 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1c62794d]
2021-03-11 12:52:34,579 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:52:34,581 [main:105] - GENERATED CALL = (0+1+2+3).toByte().compareTo(-38)
2021-03-11 12:52:34,581 [main:101] - Case = [public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62a877f4]]
2021-03-11 12:52:34,581 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62a877f4]
2021-03-11 12:52:34,581 [main:105] - GENERATED CALL = (0+1+2+3).toInt()
2021-03-11 12:52:34,581 [main:101] - Case = [@kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@55f9f89c]]
2021-03-11 12:52:34,581 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@55f9f89c]
2021-03-11 12:52:34,720 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:52:34,722 [main:105] - GENERATED CALL = (0+1+2+3).rem(-70)
2021-03-11 12:52:34,723 [main:101] - Case = [public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ebc0bf5]]
2021-03-11 12:52:34,723 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ebc0bf5]
2021-03-11 12:52:34,865 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:34,867 [main:105] - GENERATED CALL = (0+1+2+3).and(559972151)
2021-03-11 12:52:34,867 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7f28a29], public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@632c8bb9]]
2021-03-11 12:52:34,867 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7f28a29]
2021-03-11 12:52:34,867 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@632c8bb9]
2021-03-11 12:52:34,867 [main:105] - GENERATED CALL = (0+1+2+3).toDouble().toInt()
2021-03-11 12:52:34,867 [main:110] - replacement of prope0 of type Int is (0+1+2+3).toInt().or(803870091)
2021-03-11 12:52:34,992 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:52:34,993 [main:66] - Compilation checking started
2021-03-11 12:52:35,564 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = 1

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in 1..(0+1+2+3).toInt().or(803870091)) {
            if ("".length > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if (fu0() == "OK") {
            prope9 = "OK"
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return prope3
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { it?.methodName?.startsWith((str).get(737705173).titlecase()) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (false)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope2.prope7 = {
            prope2.prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:52:35,568 [main:103] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got ", String)
2021-03-11 12:52:35,568 [main:38] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " String
2021-03-11 12:52:35,568 [main:42] - Getting value of type String
2021-03-11 12:52:35,699 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:52:35,701 [main:46] - GENERATED VALUE OF TYPE String = "mlema"
2021-03-11 12:52:35,701 [main:49] - GENERATED IS CALL =false
2021-03-11 12:52:35,706 [main:55] - randomType = Boolean
2021-03-11 12:52:35,848 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:52:35,864 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:52:35,992 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:52:35,994 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:52:36,118 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:36,121 [main:66] - Generated call from random type = (false).compareTo(true).toString(299080889)
2021-03-11 12:52:36,121 [main:94] - GETTING String from String
2021-03-11 12:52:36,143 [main:101] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@255dc6aa]]
2021-03-11 12:52:36,143 [main:137] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@255dc6aa]
2021-03-11 12:52:36,266 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:52:36,268 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).prependIndent("ejxhl")
2021-03-11 12:52:36,268 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49e8af12]]
2021-03-11 12:52:36,268 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49e8af12]
2021-03-11 12:52:36,431 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-11 12:52:36,433 [main:302] - generating value of type = Char true depth = 1
2021-03-11 12:52:36,436 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).replaceFirstChar({a: Char -> '䘲'})
2021-03-11 12:52:36,436 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b6d023e]]
2021-03-11 12:52:36,436 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b6d023e]
2021-03-11 12:52:36,584 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 12:52:36,739 [main:43] - GENERATING CALL OF fun <T> setOfNotNull(elements: Int): Iterable<Int> = TODO()
2021-03-11 12:52:36,743 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOfNotNull(elements: Int): Iterable<Int> = TODO()
2021-03-11 12:52:36,890 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:52:36,893 [main:95] - GENERATED = setOfNotNull<Int>(-1021067192)
2021-03-11 12:52:36,893 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).slice(setOfNotNull<Int>(-1021067192))
2021-03-11 12:52:36,893 [main:101] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c4864ba]]
2021-03-11 12:52:36,893 [main:137] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c4864ba]
2021-03-11 12:52:37,023 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:52:37,025 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:52:37,027 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).takeWhile({a: Char -> true})
2021-03-11 12:52:37,028 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21280b00], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]]
2021-03-11 12:52:37,028 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21280b00]
2021-03-11 12:52:37,153 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:37,155 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]
2021-03-11 12:52:37,280 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:52:37,282 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu")
2021-03-11 12:52:37,282 [main:101] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2976238d]]
2021-03-11 12:52:37,282 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2976238d]
2021-03-11 12:52:37,405 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:52:37,408 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).replaceIndent("rzvxr")
2021-03-11 12:52:37,408 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30dba167]]
2021-03-11 12:52:37,408 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30dba167]
2021-03-11 12:52:37,408 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).reversed()
2021-03-11 12:52:37,408 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21280b00], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]]
2021-03-11 12:52:37,408 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21280b00]
2021-03-11 12:52:37,535 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:37,537 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]
2021-03-11 12:52:37,538 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).get(-417251672).lowercase()
2021-03-11 12:52:37,538 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1eb803d8]]
2021-03-11 12:52:37,538 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:52:37,661 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:37,825 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:37,827 [main:137] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1eb803d8]
2021-03-11 12:52:37,961 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:37,964 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).subSequence(-783883912, 818682739).repeat(-90719264)
2021-03-11 12:52:37,964 [main:101] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21284ead]]
2021-03-11 12:52:37,964 [main:137] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21284ead]
2021-03-11 12:52:37,964 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).capitalize()
2021-03-11 12:52:37,964 [main:110] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " of type String is (A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu")
2021-03-11 12:52:38,121 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:52:38,121 [main:66] - Compilation checking started
2021-03-11 12:52:38,751 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = 1

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in 1..(0+1+2+3).toInt().or(803870091)) {
            if ("".length > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if (fu0() == "OK") {
            prope9 = "OK"
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return prope3
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { it?.methodName?.startsWith((str).get(737705173).titlecase()) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + prope5)
            prope7()
        }
        if (false)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope2.prope7 = {
            prope2.prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:52:38,755 [main:103] - replacing (fu0(), String)
2021-03-11 12:52:38,755 [main:38] - replacing fu0() String
2021-03-11 12:52:38,755 [main:42] - Getting value of type String
2021-03-11 12:52:38,909 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:52:38,913 [main:46] - GENERATED VALUE OF TYPE String = "hsejy"
2021-03-11 12:52:38,913 [main:49] - GENERATED IS CALL =false
2021-03-11 12:52:39,382 [main:55] - randomType = Collection<Short?>
2021-03-11 12:52:39,382 [main:94] - GETTING String from String
2021-03-11 12:52:39,400 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:52:39,400 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:52:39,537 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:39,540 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).length.toString(436641059)
2021-03-11 12:52:39,540 [main:101] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33bff40f]]
2021-03-11 12:52:39,540 [main:137] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33bff40f]
2021-03-11 12:52:39,668 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:52:39,670 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).trimMargin("fmtvc")
2021-03-11 12:52:39,670 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21280b00], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]]
2021-03-11 12:52:39,670 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21280b00]
2021-03-11 12:52:39,795 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:39,798 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]
2021-03-11 12:52:39,964 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:52:39,968 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).get(-1104006761).plus("kwchw")
2021-03-11 12:52:39,968 [main:101] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b2b861]]
2021-03-11 12:52:39,968 [main:137] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b2b861]
2021-03-11 12:52:40,121 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:52:40,123 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:52:40,126 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).dropWhile({a: Char -> true})
2021-03-11 12:52:40,126 [main:101] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49fcf9e1]]
2021-03-11 12:52:40,126 [main:137] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49fcf9e1]
2021-03-11 12:52:40,263 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 12:52:40,266 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:52:40,268 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).filterIndexed({a: Int, b: Char -> false})
2021-03-11 12:52:40,268 [main:101] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e343344]]
2021-03-11 12:52:40,268 [main:137] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e343344]
2021-03-11 12:52:40,410 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:52:40,545 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:52:40,547 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).substringAfter('钐', "rbzip")
2021-03-11 12:52:40,547 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@340b14f4]]
2021-03-11 12:52:40,547 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@340b14f4]
2021-03-11 12:52:40,679 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:40,807 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:40,937 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:52:40,943 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).replaceRange(518040681, -284730415, "lawex")
2021-03-11 12:52:40,943 [main:101] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a3ba1fe]]
2021-03-11 12:52:40,943 [main:137] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a3ba1fe]
2021-03-11 12:52:41,076 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:41,204 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:52:41,206 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).padEnd(-1417298547, '♼')
2021-03-11 12:52:41,206 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30dba167]]
2021-03-11 12:52:41,206 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30dba167]
2021-03-11 12:52:41,207 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).reversed()
2021-03-11 12:52:41,207 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a1cf14c]]
2021-03-11 12:52:41,207 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:52:41,369 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:41,508 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:41,510 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a1cf14c]
2021-03-11 12:52:41,647 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:41,789 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:41,792 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).subSequence(-1568028904, 278256408).substring(-1838605560, -2086572893)
2021-03-11 12:52:41,792 [main:110] - replacement of fu0() of type String is (A(-1649075752, "cfyuz").y).filterIndexed({a: Int, b: Char -> false})
2021-03-11 12:52:41,923 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:52:41,923 [main:66] - Compilation checking started
2021-03-11 12:52:42,574 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = 1

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in 1..(0+1+2+3).toInt().or(803870091)) {
            if ("".length > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((A(-1649075752, "cfyuz").y).filterIndexed({a: Int, b: Char -> false}) == "OK") {
            prope9 = "OK"
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return prope3
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { it?.methodName?.startsWith((str).get(737705173).titlecase()) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + prope5)
            prope7()
        }
        if (false)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope2.prope7 = {
            prope2.prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:52:42,576 [main:103] - replacing (0, Int)
2021-03-11 12:52:42,577 [main:38] - replacing 0 Int
2021-03-11 12:52:42,577 [main:42] - Getting value of type Int
2021-03-11 12:52:42,722 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:42,724 [main:46] - GENERATED VALUE OF TYPE Int = -706744753
2021-03-11 12:52:42,724 [main:49] - GENERATED IS CALL =false
2021-03-11 12:52:42,878 [main:55] - randomType = Double
2021-03-11 12:52:43,011 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:52:43,045 [main:137] - GENERATING call of type @kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@934ac8]
2021-03-11 12:52:43,045 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4b0ed578]
2021-03-11 12:52:43,045 [main:66] - Generated call from random type = (0.7511218562860321).toShort().countTrailingZeroBits()
2021-03-11 12:52:43,045 [main:94] - GETTING Int from Int
2021-03-11 12:52:43,075 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d63158f]]
2021-03-11 12:52:43,075 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:52:43,202 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:43,205 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d63158f]
2021-03-11 12:52:43,205 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).compareTo(-359018774).dec()
2021-03-11 12:52:43,205 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@446340cf]]
2021-03-11 12:52:43,205 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:52:43,372 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:43,374 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@446340cf]
2021-03-11 12:52:43,375 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
2021-03-11 12:52:43,375 [main:101] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6561e48]]
2021-03-11 12:52:43,375 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6561e48]
2021-03-11 12:52:43,525 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:52:43,527 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).compareTo(-66)
2021-03-11 12:52:43,527 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@390b15c0]]
2021-03-11 12:52:43,528 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:52:43,528 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@390b15c0]
2021-03-11 12:52:43,674 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:52:43,677 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).toChar().minus('叚')
2021-03-11 12:52:43,677 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4c4a428d]]
2021-03-11 12:52:43,677 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169]
2021-03-11 12:52:43,677 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4c4a428d]
2021-03-11 12:52:43,677 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).toFloat().toBits()
2021-03-11 12:52:43,677 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@208e2fd]]
2021-03-11 12:52:43,677 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:52:43,677 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@208e2fd]
2021-03-11 12:52:43,677 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).toShort().countLeadingZeroBits()
2021-03-11 12:52:43,678 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4da4fc25]]
2021-03-11 12:52:43,678 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:52:43,678 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4da4fc25]
2021-03-11 12:52:43,824 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:52:43,826 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).toShort().div(59)
2021-03-11 12:52:43,826 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e], public final val first: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@271f9a43]]
2021-03-11 12:52:43,826 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e]
2021-03-11 12:52:43,957 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:52:43,960 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).rangeTo(25).first
2021-03-11 12:52:43,960 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62a877f4]]
2021-03-11 12:52:43,960 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:52:43,960 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62a877f4]
2021-03-11 12:52:43,960 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).toInt().toInt()
2021-03-11 12:52:43,960 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ec35323]]
2021-03-11 12:52:43,960 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ec35323]
2021-03-11 12:52:44,092 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:44,094 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).rotateLeft(551594416)
2021-03-11 12:52:44,094 [main:110] - replacement of 0 of type Int is (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
2021-03-11 12:52:44,221 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:52:44,222 [main:66] - Compilation checking started
2021-03-11 12:52:45,012 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = 1

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in 1..(0+1+2+3).toInt().or(803870091)) {
            if ("".length > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((A(-1649075752, "cfyuz").y).filterIndexed({a: Int, b: Char -> false}) == "OK") {
            prope9 = "OK"
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return prope3
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { it?.methodName?.startsWith((str).get(737705173).titlecase()) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + prope5)
            prope7()
        }
        if (false)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope2.prope7 = {
            prope2.prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:52:45,016 [main:103] - replacing (prope2, Kla4)
2021-03-11 12:52:45,016 [main:38] - replacing prope2 Kla4
2021-03-11 12:52:45,016 [main:42] - Getting value of type Kla4
2021-03-11 12:52:45,156 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 12:52:45,159 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + prope5)
            prope7()
        }
        if (false)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 12:52:45,159 [main:46] - GENERATED VALUE OF TYPE Kla4 = Kla4()
2021-03-11 12:52:45,160 [main:49] - GENERATED IS CALL =true
2021-03-11 12:52:45,846 [main:55] - randomType = Function1<Boolean?, HashMap<Kla3?, Kla4>>
2021-03-11 12:52:45,847 [main:94] - GETTING Kla4 from Int
2021-03-11 12:52:45,892 [main:94] - GETTING Kla4 from Boolean
2021-03-11 12:52:45,904 [main:94] - GETTING Kla4 from String
2021-03-11 12:52:45,930 [main:94] - GETTING Kla4 from Int
2021-03-11 12:52:45,931 [main:94] - GETTING Kla4 from Int
2021-03-11 12:52:45,932 [main:94] - GETTING Kla4 from Int
2021-03-11 12:52:45,933 [main:94] - GETTING Kla4 from Int
2021-03-11 12:52:45,933 [main:94] - GETTING Kla4 from String
2021-03-11 12:52:45,933 [main:110] - replacement of prope2 of type Kla4 is Kla4()
2021-03-11 12:52:46,079 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:52:46,079 [main:66] - Compilation checking started
2021-03-11 12:52:46,668 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = 1

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in 1..(0+1+2+3).toInt().or(803870091)) {
            if ("".length > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((A(-1649075752, "cfyuz").y).filterIndexed({a: Int, b: Char -> false}) == "OK") {
            prope9 = "OK"
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return prope3
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { it?.methodName?.startsWith((str).get(737705173).titlecase()) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + prope5)
            prope7()
        }
        if (false)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope2.prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:52:46,671 [main:103] - replacing (prope5, Int)
2021-03-11 12:52:46,671 [main:38] - replacing prope5 Int
2021-03-11 12:52:46,671 [main:42] - Getting value of type Int
2021-03-11 12:52:46,817 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:46,819 [main:46] - GENERATED VALUE OF TYPE Int = -1540773304
2021-03-11 12:52:46,819 [main:49] - GENERATED IS CALL =false
2021-03-11 12:52:46,969 [main:55] - randomType = Short
2021-03-11 12:52:47,101 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:52:47,160 [main:137] - GENERATING call of type public abstract fun toShort(): kotlin.Short defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5c508c56]
2021-03-11 12:52:47,160 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@32278335]
2021-03-11 12:52:47,298 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:52:47,300 [main:66] - Generated call from random type = (-18591).toShort().compareTo(-79)
2021-03-11 12:52:47,301 [main:94] - GETTING Int from Int
2021-03-11 12:52:47,332 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f655756]]
2021-03-11 12:52:47,332 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:52:47,461 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:47,463 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f655756]
2021-03-11 12:52:47,463 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).compareTo(-688274456).unaryMinus()
2021-03-11 12:52:47,463 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@390b15c0]]
2021-03-11 12:52:47,463 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:52:47,463 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@390b15c0]
2021-03-11 12:52:47,591 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:52:47,593 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).toChar().minus('㌅')
2021-03-11 12:52:47,593 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6561e48]]
2021-03-11 12:52:47,594 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:52:47,594 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6561e48]
2021-03-11 12:52:47,779 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:52:47,781 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).toInt().compareTo(-58)
2021-03-11 12:52:47,781 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@446340cf]]
2021-03-11 12:52:47,782 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:52:47,922 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:47,924 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@446340cf]
2021-03-11 12:52:47,924 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).compareTo(1416424978).takeLowestOneBit()
2021-03-11 12:52:47,924 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e53c7a]]
2021-03-11 12:52:47,924 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:52:48,065 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:48,068 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e53c7a]
2021-03-11 12:52:48,214 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:48,216 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).compareTo(1343336869).shr(-1217180345)
2021-03-11 12:52:48,217 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2814a4a]]
2021-03-11 12:52:48,217 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:52:48,350 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:48,353 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).compareTo(-216830601).sign
2021-03-11 12:52:48,353 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@569639ef]]
2021-03-11 12:52:48,353 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:52:48,353 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@569639ef]
2021-03-11 12:52:48,353 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).toByte().unaryMinus()
2021-03-11 12:52:48,353 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f655756]]
2021-03-11 12:52:48,353 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:52:48,353 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f655756]
2021-03-11 12:52:48,353 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).toInt().unaryMinus()
2021-03-11 12:52:48,353 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d63158f]]
2021-03-11 12:52:48,353 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:52:48,483 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:48,485 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d63158f]
2021-03-11 12:52:48,485 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).compareTo(2135127474).dec()
2021-03-11 12:52:48,485 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2d4ffd58]]
2021-03-11 12:52:48,485 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:52:48,613 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:52:48,616 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2d4ffd58]
2021-03-11 12:52:48,616 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).div(4408231348461585821).countTrailingZeroBits()
2021-03-11 12:52:48,616 [main:110] - replacement of prope5 of type Int is (A(-1649075752, "cfyuz").x).toInt().compareTo(-58)
2021-03-11 12:52:48,744 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:52:48,744 [main:66] - Compilation checking started
2021-03-11 12:52:49,134 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = 1

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in 1..(0+1+2+3).toInt().or(803870091)) {
            if ("".length > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((A(-1649075752, "cfyuz").y).filterIndexed({a: Int, b: Char -> false}) == "OK") {
            prope9 = "OK"
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return prope3
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { it?.methodName?.startsWith((str).get(737705173).titlecase()) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (A(-1649075752, "cfyuz").x).toInt().compareTo(-58)++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + prope5)
            prope7()
        }
        if (false)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope2.prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:52:49,137 [main:103] - replacing (prope3.isSuccess, Boolean)
2021-03-11 12:52:49,139 [main:38] - replacing prope3.isSuccess Boolean
2021-03-11 12:52:49,139 [main:42] - Getting value of type Boolean
2021-03-11 12:52:49,282 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:52:49,284 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 12:52:49,285 [main:49] - GENERATED IS CALL =false
2021-03-11 12:52:49,470 [main:55] - randomType = Set<A>
2021-03-11 12:52:49,470 [main:94] - GETTING Boolean from Boolean
2021-03-11 12:52:49,481 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1d132288], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@63c6a639]]
2021-03-11 12:52:49,481 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1d132288]
2021-03-11 12:52:49,621 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:52:49,621 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@63c6a639]
2021-03-11 12:52:49,621 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).equals("jimbq").not()
2021-03-11 12:52:49,621 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1a38040]]
2021-03-11 12:52:49,621 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1a38040]
2021-03-11 12:52:49,761 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:52:49,763 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).xor(false)
2021-03-11 12:52:49,763 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1d132288], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4063f07e]]
2021-03-11 12:52:49,763 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1d132288]
2021-03-11 12:52:49,908 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:52:49,908 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4063f07e]
2021-03-11 12:52:50,049 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:52:50,051 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).equals("veigm").and(true)
2021-03-11 12:52:50,051 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1d132288], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@53884783]]
2021-03-11 12:52:50,051 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1d132288]
2021-03-11 12:52:50,186 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:52:50,187 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@53884783]
2021-03-11 12:52:50,320 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:52:50,320 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).equals("hwsld").equals("jbmof")
2021-03-11 12:52:50,320 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@63c6a639]]
2021-03-11 12:52:50,320 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@63c6a639]
2021-03-11 12:52:50,321 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).not()
2021-03-11 12:52:50,321 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1d132288], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@66871f61]]
2021-03-11 12:52:50,321 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1d132288]
2021-03-11 12:52:50,448 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:52:50,448 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@66871f61]
2021-03-11 12:52:50,577 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:52:50,580 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).equals("qhvpg").or(false)
2021-03-11 12:52:50,580 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4063f07e]]
2021-03-11 12:52:50,580 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4063f07e]
2021-03-11 12:52:50,707 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:52:50,709 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).and(false)
2021-03-11 12:52:50,709 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]]
2021-03-11 12:52:50,709 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:52:50,881 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:52:50,883 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]
2021-03-11 12:52:51,034 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:52:51,034 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(true).equals("htesk")
2021-03-11 12:52:51,034 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@66871f61]]
2021-03-11 12:52:51,034 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@66871f61]
2021-03-11 12:52:51,183 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:52:51,185 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).or(false)
2021-03-11 12:52:51,185 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@53884783]]
2021-03-11 12:52:51,185 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@53884783]
2021-03-11 12:52:51,336 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:52:51,336 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).equals("rfzyo")
2021-03-11 12:52:51,336 [main:110] - replacement of prope3.isSuccess of type Boolean is (sum == 0+1+2+3+4).equals("hwsld").equals("jbmof")
2021-03-11 12:52:51,481 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:52:51,483 [main:103] - replacing (prope5++, Int)
2021-03-11 12:52:51,483 [main:38] - replacing prope5++ Int
2021-03-11 12:52:51,483 [main:42] - Getting value of type Int
2021-03-11 12:52:51,613 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:51,615 [main:46] - GENERATED VALUE OF TYPE Int = 1658399918
2021-03-11 12:52:51,615 [main:49] - GENERATED IS CALL =false
2021-03-11 12:52:51,624 [main:55] - randomType = Kla4
2021-03-11 12:52:51,754 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 12:52:51,757 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + prope5)
            prope7()
        }
        if (false)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 12:52:51,766 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:52:51,911 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:52:51,913 [main:66] - Generated call from random type = (Kla4()).prope6.compareTo(true)
2021-03-11 12:52:51,914 [main:94] - GETTING Int from String
2021-03-11 12:52:51,942 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@446340cf]]
2021-03-11 12:52:51,942 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:52:52,080 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:52:52,082 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@446340cf]
2021-03-11 12:52:52,082 [main:105] - GENERATED CALL = (str).compareTo("zoaub").takeLowestOneBit()
2021-03-11 12:52:52,082 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cca13b8]]
2021-03-11 12:52:52,082 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cca13b8]
2021-03-11 12:52:52,239 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-11 12:52:52,241 [main:302] - generating value of type = Int true depth = 1
2021-03-11 12:52:52,244 [main:105] - GENERATED CALL = (str).sumOf({a: Char -> 1816202030})
2021-03-11 12:52:52,244 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ec35323]]
2021-03-11 12:52:52,244 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ec35323]
2021-03-11 12:52:52,383 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:52,386 [main:105] - GENERATED CALL = (str).length.rotateLeft(-1058900539)
2021-03-11 12:52:52,386 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@446340cf]]
2021-03-11 12:52:52,386 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@446340cf]
2021-03-11 12:52:52,386 [main:105] - GENERATED CALL = (str).length.takeLowestOneBit()
2021-03-11 12:52:52,386 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@5052b22e]]
2021-03-11 12:52:52,386 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:52:52,527 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:52:52,530 [main:105] - GENERATED CALL = (str).compareTo("vqasn").absoluteValue
2021-03-11 12:52:52,531 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f655756]]
2021-03-11 12:52:52,531 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f655756]
2021-03-11 12:52:52,531 [main:105] - GENERATED CALL = (str).length.unaryMinus()
2021-03-11 12:52:52,531 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f664709]]
2021-03-11 12:52:52,531 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:52:52,677 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:52:52,679 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f664709]
2021-03-11 12:52:52,815 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:52,948 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:52,951 [main:105] - GENERATED CALL = (str).compareTo("eouft").coerceIn(1829764322, -766324761)
2021-03-11 12:52:52,951 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d4a80]]
2021-03-11 12:52:52,951 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:52:53,081 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:52:53,083 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d4a80]
2021-03-11 12:52:53,083 [main:105] - GENERATED CALL = (str).compareTo("igxqg").unaryPlus()
2021-03-11 12:52:53,083 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f655756]]
2021-03-11 12:52:53,083 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:52:53,212 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:52:53,215 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f655756]
2021-03-11 12:52:53,215 [main:105] - GENERATED CALL = (str).compareTo("otqvi").unaryMinus()
2021-03-11 12:52:53,215 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3ff9eaf8]]
2021-03-11 12:52:53,215 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3ff9eaf8]
2021-03-11 12:52:53,351 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:53,353 [main:105] - GENERATED CALL = (str).length.coerceAtLeast(8037155)
2021-03-11 12:52:53,354 [main:110] - replacement of prope5++ of type Int is (str).compareTo("igxqg").unaryPlus()
2021-03-11 12:52:53,510 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:52:53,511 [main:66] - Compilation checking started
2021-03-11 12:52:53,924 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = 1

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in 1..(0+1+2+3).toInt().or(803870091)) {
            if ("".length > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((A(-1649075752, "cfyuz").y).filterIndexed({a: Int, b: Char -> false}) == "OK") {
            prope9 = "OK"
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return prope3
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { it?.methodName?.startsWith((str).get(737705173).titlecase()) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (str).compareTo("igxqg").unaryPlus()
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + prope5)
            prope7()
        }
        if (false)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope2.prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:52:53,927 [main:103] - replacing (prope3.exceptionOrNull(), Throwable?)
2021-03-11 12:52:53,928 [main:38] - replacing prope3.exceptionOrNull() Throwable?
2021-03-11 12:52:53,928 [main:42] - Getting value of type Throwable?
2021-03-11 12:52:54,107 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 12:52:54,114 [main:46] - GENERATED VALUE OF TYPE Throwable? = NumberFormatException()
2021-03-11 12:52:54,115 [main:49] - GENERATED IS CALL =true
2021-03-11 12:52:54,421 [main:55] - randomType = ArrayDeque<Short>
2021-03-11 12:52:54,558 [main:302] - generating value of type = ArrayDeque<Short> false depth = 0
2021-03-11 12:52:54,700 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<Short>): ArrayDeque<Short> = TODO()
2021-03-11 12:52:54,703 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<Short>): ArrayDeque<Short> = TODO()
2021-03-11 12:52:55,001 [main:302] - generating value of type = Collection<Short> false depth = 3
2021-03-11 12:52:55,143 [main:43] - GENERATING CALL OF fun <T> MutableList(size: kotlin.Int, init: (index: kotlin.Int)->Short): Collection<Short> = TODO()
2021-03-11 12:52:55,146 [main:61] - WITHOUT TYPE PARAMS = fun <T> MutableList(size: kotlin.Int, init: (index: kotlin.Int)->Short): Collection<Short> = TODO()
2021-03-11 12:52:55,664 [main:302] - generating value of type = Int true depth = 6
2021-03-11 12:52:55,666 [main:302] - generating value of type = Function1<[@kotlin.ParameterName] Int, Short> false depth = 6
2021-03-11 12:52:55,668 [main:302] - generating value of type = Short true depth = 7
2021-03-11 12:52:55,671 [main:95] - GENERATED = MutableList<Short>(-1652526320, {a: Int -> 210})
2021-03-11 12:52:55,671 [main:95] - GENERATED = ArrayDeque<Short>(MutableList<Short>(-1652526320, {a: Int -> 210}))
2021-03-11 12:52:55,859 [main:94] - GETTING Throwable? from String
2021-03-11 12:52:55,886 [main:94] - GETTING Throwable? from Int
2021-03-11 12:52:55,936 [main:94] - GETTING Throwable? from Int
2021-03-11 12:52:55,937 [main:94] - GETTING Throwable? from Boolean
2021-03-11 12:52:55,951 [main:94] - GETTING Throwable? from Int
2021-03-11 12:52:55,951 [main:94] - GETTING Throwable? from String
2021-03-11 12:52:55,952 [main:94] - GETTING Throwable? from Int
2021-03-11 12:52:55,953 [main:94] - GETTING Throwable? from Int
2021-03-11 12:52:55,953 [main:110] - replacement of prope3.exceptionOrNull() of type Throwable? is NumberFormatException()
2021-03-11 12:52:56,082 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:52:56,084 [main:103] - replacing ("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n"), String)
2021-03-11 12:52:56,084 [main:38] - replacing "tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n") String
2021-03-11 12:52:56,084 [main:42] - Getting value of type String
2021-03-11 12:52:56,213 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:52:56,215 [main:46] - GENERATED VALUE OF TYPE String = "dilrx"
2021-03-11 12:52:56,215 [main:49] - GENERATED IS CALL =false
2021-03-11 12:52:56,357 [main:55] - randomType = Float
2021-03-11 12:52:56,485 [main:302] - generating value of type = Float true depth = 0
2021-03-11 12:52:56,519 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@679ddc68]
2021-03-11 12:52:56,520 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]
2021-03-11 12:52:56,520 [main:66] - Generated call from random type = (0.46497506f).toChar().lowercase()
2021-03-11 12:52:56,520 [main:94] - GETTING String from String
2021-03-11 12:52:56,537 [main:101] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@863c31e]]
2021-03-11 12:52:56,537 [main:137] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@863c31e]
2021-03-11 12:52:56,665 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:52:56,667 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:52:56,669 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).filterNot({a: Char -> true})
2021-03-11 12:52:56,670 [main:101] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32ee4d0a]]
2021-03-11 12:52:56,670 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32ee4d0a]
2021-03-11 12:52:56,805 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:52:56,964 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:52:56,966 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).replaceIndentByMargin("udyvm", "mkbrx")
2021-03-11 12:52:56,966 [main:101] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49cba0e9]]
2021-03-11 12:52:56,966 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49cba0e9]
2021-03-11 12:52:57,108 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:52:57,252 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:52:57,255 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).commonSuffixWith("ilpwl", true)
2021-03-11 12:52:57,255 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22fce58d]]
2021-03-11 12:52:57,255 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22fce58d]
2021-03-11 12:52:57,255 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).toLowerCase()
2021-03-11 12:52:57,255 [main:101] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7e5ed9ce]]
2021-03-11 12:52:57,255 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7e5ed9ce]
2021-03-11 12:52:57,400 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:52:57,401 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).plus("dicfy")
2021-03-11 12:52:57,401 [main:101] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31fa72b]]
2021-03-11 12:52:57,401 [main:137] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31fa72b]
2021-03-11 12:52:57,532 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:57,534 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).dropLast(-1922181486)
2021-03-11 12:52:57,535 [main:101] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21284ead]]
2021-03-11 12:52:57,535 [main:137] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21284ead]
2021-03-11 12:52:57,535 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).capitalize()
2021-03-11 12:52:57,535 [main:101] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35a2566b]]
2021-03-11 12:52:57,535 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35a2566b]
2021-03-11 12:52:57,666 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:52:57,795 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:52:57,924 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:52:57,927 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).replaceAfterLast('㼴', "zedyz", "axils")
2021-03-11 12:52:57,927 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21280b00], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]]
2021-03-11 12:52:57,927 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21280b00]
2021-03-11 12:52:58,054 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:58,056 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]
2021-03-11 12:52:58,057 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).get(-1259724687).titlecase()
2021-03-11 12:52:58,057 [main:101] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a963ec3]]
2021-03-11 12:52:58,057 [main:137] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a963ec3]
2021-03-11 12:52:58,225 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:52:58,377 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:52:58,379 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")
2021-03-11 12:52:58,379 [main:110] - replacement of "tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n") of type String is (A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")
2021-03-11 12:52:58,518 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:52:58,518 [main:66] - Compilation checking started
2021-03-11 12:52:59,168 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = 1

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in 1..(0+1+2+3).toInt().or(803870091)) {
            if ("".length > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((A(-1649075752, "cfyuz").y).filterIndexed({a: Int, b: Char -> false}) == "OK") {
            prope9 = "OK"
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return prope3
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { it?.methodName?.startsWith((str).get(737705173).titlecase()) == true }?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + prope5)
            prope7()
        }
        if (false)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope2.prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:52:59,170 [main:103] - replacing (1, Int)
2021-03-11 12:52:59,170 [main:38] - replacing 1 Int
2021-03-11 12:52:59,170 [main:42] - Getting value of type Int
2021-03-11 12:52:59,310 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:59,312 [main:46] - GENERATED VALUE OF TYPE Int = -1567011138
2021-03-11 12:52:59,312 [main:49] - GENERATED IS CALL =false
2021-03-11 12:52:59,461 [main:55] - randomType = UByte
2021-03-11 12:52:59,591 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:52:59,627 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.UByte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@153b8af9]
2021-03-11 12:52:59,627 [main:66] - Generated call from random type = (14.toUByte()).countLeadingZeroBits()
2021-03-11 12:52:59,628 [main:94] - GETTING Int from String
2021-03-11 12:52:59,645 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36845587]]
2021-03-11 12:52:59,645 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:52:59,772 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:52:59,774 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36845587]
2021-03-11 12:52:59,904 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:52:59,906 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).compareTo("zhgsp").xor(-52404287)
2021-03-11 12:52:59,906 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cca13b8]]
2021-03-11 12:52:59,906 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:53:00,034 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:00,193 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:00,196 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cca13b8]
2021-03-11 12:53:00,336 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-11 12:53:00,338 [main:302] - generating value of type = Int true depth = 1
2021-03-11 12:53:00,340 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).subSequence(1083464817, 1973066377).sumOf({a: Char -> 274814033})
2021-03-11 12:53:00,341 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4df1bec], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]]
2021-03-11 12:53:00,341 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4df1bec]
2021-03-11 12:53:00,480 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:53:00,481 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:53:00,626 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:53:00,629 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).equals("ozych").compareTo(true)
2021-03-11 12:53:00,629 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2814a4a]]
2021-03-11 12:53:00,629 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:53:00,764 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:53:00,767 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).compareTo("zhhsu").sign
2021-03-11 12:53:00,767 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a1076df]]
2021-03-11 12:53:00,767 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:53:00,897 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:01,026 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:01,029 [main:137] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a1076df]
2021-03-11 12:53:01,157 [main:302] - generating value of type = CharArray false depth = 0
2021-03-11 12:53:01,289 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 12:53:01,292 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 12:53:01,460 [main:302] - generating value of type = Char true depth = 3
2021-03-11 12:53:01,462 [main:95] - GENERATED = charArrayOf('봃')
2021-03-11 12:53:01,609 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:01,773 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:53:01,776 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).subSequence(1083826060, 2112079816).lastIndexOfAny(charArrayOf('봃'), -670446513, false)
2021-03-11 12:53:01,776 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@a5b3754]]
2021-03-11 12:53:01,776 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:53:01,921 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:53:01,923 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@a5b3754]
2021-03-11 12:53:01,923 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()
2021-03-11 12:53:01,923 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], public val kotlin.CharSequence.lastIndex: kotlin.Int defined in kotlin.text[DeserializedPropertyDescriptor@6df3c7bf]]
2021-03-11 12:53:01,923 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:53:02,059 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:02,198 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:02,200 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).subSequence(1671067686, -1470278082).lastIndex
2021-03-11 12:53:02,200 [main:101] - Case = [public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b85d444]]
2021-03-11 12:53:02,200 [main:137] - GENERATING call of type public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b85d444]
2021-03-11 12:53:02,334 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:53:02,465 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:02,601 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:53:02,603 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).indexOf('ࣶ', -616273912, true)
2021-03-11 12:53:02,603 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6736791a]]
2021-03-11 12:53:02,604 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:53:02,766 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:53:02,768 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6736791a]
2021-03-11 12:53:02,768 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).compareTo("xkozl").inv()
2021-03-11 12:53:02,768 [main:101] - Case = [public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ef300a9]]
2021-03-11 12:53:02,768 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ef300a9]
2021-03-11 12:53:02,911 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-11 12:53:02,913 [main:302] - generating value of type = Int true depth = 1
2021-03-11 12:53:02,916 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).sumBy({a: Char -> 1008402002})
2021-03-11 12:53:02,916 [main:110] - replacement of 1 of type Int is (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()
2021-03-11 12:53:03,056 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:53:03,056 [main:66] - Compilation checking started
2021-03-11 12:53:03,685 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in 1..(0+1+2+3).toInt().or(803870091)) {
            if ("".length > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((A(-1649075752, "cfyuz").y).filterIndexed({a: Int, b: Char -> false}) == "OK") {
            prope9 = "OK"
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return prope3
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { it?.methodName?.startsWith((str).get(737705173).titlecase()) == true }?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + prope5)
            prope7()
        }
        if (false)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope2.prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:53:03,687 [main:103] - replacing (c, Continuation<*>)
2021-03-11 12:53:03,688 [main:38] - replacing c Continuation<*>
2021-03-11 12:53:03,688 [main:42] - Getting value of type Continuation<*>
2021-03-11 12:53:03,819 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 12:53:03,957 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 12:53:03,962 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 12:53:04,407 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 12:53:04,540 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:53:04,543 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:53:04,925 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 12:53:05,101 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:53:05,106 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:53:05,561 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:53:05,561 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:53:05,561 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 12:53:05,561 [main:46] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 12:53:05,705 [main:55] - randomType = Double
2021-03-11 12:53:05,836 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:53:05,870 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:53:05,903 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:53:05,904 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:53:05,905 [main:94] - GETTING Continuation<*> from Boolean
2021-03-11 12:53:05,915 [main:94] - GETTING Continuation<*> from String
2021-03-11 12:53:05,938 [main:94] - GETTING Continuation<*> from String
2021-03-11 12:53:05,939 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:53:05,940 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:53:05,940 [main:107] - Cant find and generate replacement for c type Continuation<*>
2021-03-11 12:53:05,940 [main:103] - replacing ("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got ", String)
2021-03-11 12:53:05,940 [main:38] - replacing "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " String
2021-03-11 12:53:05,940 [main:42] - Getting value of type String
2021-03-11 12:53:06,102 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:53:06,105 [main:46] - GENERATED VALUE OF TYPE String = "mvnpf"
2021-03-11 12:53:06,105 [main:49] - GENERATED IS CALL =false
2021-03-11 12:53:07,113 [main:55] - randomType = Pair<MutableMap<Short, Kla3>, Kla2<Kla1>>?
2021-03-11 12:53:07,253 [main:302] - generating value of type = Pair<MutableMap<Short, Kla3>, Kla2<Kla1>> false depth = 0
2021-03-11 12:53:07,397 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: MutableMap<Short, Kla3>, second: Kla2<Kla1>): Pair<MutableMap<Short, Kla3>, Kla2<Kla1>> = TODO()
2021-03-11 12:53:07,401 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: MutableMap<Short, Kla3>, second: Kla2<Kla1>): Pair<MutableMap<Short, Kla3>, Kla2<Kla1>> = TODO()
2021-03-11 12:53:07,580 [main:302] - generating value of type = MutableMap<Short, Kla3> false depth = 3
2021-03-11 12:53:07,728 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Short, Kla3>): MutableMap<Short, Kla3> = TODO()
2021-03-11 12:53:07,731 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Short, Kla3>): MutableMap<Short, Kla3> = TODO()
2021-03-11 12:53:07,883 [main:302] - generating value of type = Pair<Short, Kla3> false depth = 6
2021-03-11 12:53:08,034 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Short, second: Kla3): Pair<Short, Kla3> = TODO()
2021-03-11 12:53:08,038 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Short, second: Kla3): Pair<Short, Kla3> = TODO()
2021-03-11 12:53:08,187 [main:302] - generating value of type = Short true depth = 9
2021-03-11 12:53:08,190 [main:302] - generating value of type = Kla3 false depth = 9
2021-03-11 12:53:08,192 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { it?.methodName?.startsWith((str).get(737705173).titlecase()) == true }?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}
2021-03-11 12:53:08,192 [main:95] - GENERATED = Pair<Short, Kla3>(32577, Kla3())
2021-03-11 12:53:08,192 [main:95] - GENERATED = linkedMapOf<Short, Kla3>(Pair<Short, Kla3>(32577, Kla3()))
2021-03-11 12:53:08,192 [main:302] - generating value of type = Kla2<Kla1> false depth = 3
2021-03-11 12:53:08,195 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 12:53:08,639 [main:302] - generating value of type = Kla5 false depth = 5
2021-03-11 12:53:08,641 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope2.prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}
2021-03-11 12:53:08,641 [main:95] - GENERATED = Pair<MutableMap<Short, Kla3>, Kla2<Kla1>>(linkedMapOf<Short, Kla3>(Pair<Short, Kla3>(32577, Kla3())), Kla5)
2021-03-11 12:53:08,666 [main:94] - GETTING String from Int
2021-03-11 12:53:08,695 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:53:08,695 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:53:08,874 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:53:08,877 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:53:09,025 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:09,028 [main:105] - GENERATED CALL = (sum).div(-107022462670845358).toString(-1384088745)
2021-03-11 12:53:09,028 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]]
2021-03-11 12:53:09,028 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:53:09,028 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]
2021-03-11 12:53:09,028 [main:105] - GENERATED CALL = (sum).toChar().lowercase()
2021-03-11 12:53:09,028 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:53:09,028 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:53:09,172 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:09,174 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:53:09,324 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:09,327 [main:105] - GENERATED CALL = (sum).compareTo(-793689525).toString(642681448)
2021-03-11 12:53:09,327 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:53:09,327 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:53:09,327 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:53:09,462 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:09,465 [main:105] - GENERATED CALL = (sum).toInt().toString(788373935)
2021-03-11 12:53:09,465 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]]
2021-03-11 12:53:09,465 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:53:09,465 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]
2021-03-11 12:53:09,465 [main:105] - GENERATED CALL = (sum).toChar().uppercase()
2021-03-11 12:53:09,465 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:53:09,465 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:53:09,465 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:53:09,600 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:09,602 [main:105] - GENERATED CALL = (sum).toLong().toString(-2023271345)
2021-03-11 12:53:09,603 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]]
2021-03-11 12:53:09,603 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:53:09,603 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]
2021-03-11 12:53:09,603 [main:105] - GENERATED CALL = (sum).toChar().titlecase()
2021-03-11 12:53:09,603 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]]
2021-03-11 12:53:09,603 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:53:09,603 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]
2021-03-11 12:53:09,734 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:09,736 [main:105] - GENERATED CALL = (sum).toShort().toString(-1444639225)
2021-03-11 12:53:09,736 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]]
2021-03-11 12:53:09,737 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:53:09,737 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]
2021-03-11 12:53:09,868 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:09,872 [main:105] - GENERATED CALL = (sum).toByte().toString(-1799342931)
2021-03-11 12:53:09,872 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]]
2021-03-11 12:53:09,872 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:53:09,872 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]
2021-03-11 12:53:10,005 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:53:10,007 [main:105] - GENERATED CALL = (sum).toChar().plus("fzyvm")
2021-03-11 12:53:10,007 [main:110] - replacement of "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " of type String is (sum).toInt().toString(788373935)
2021-03-11 12:53:10,167 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:53:10,167 [main:66] - Compilation checking started
2021-03-11 12:53:10,980 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in 1..(0+1+2+3).toInt().or(803870091)) {
            if ("".length > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((A(-1649075752, "cfyuz").y).filterIndexed({a: Int, b: Char -> false}) == "OK") {
            prope9 = "OK"
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return prope3
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { it?.methodName?.startsWith((str).get(737705173).titlecase()) == true }?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + prope5)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope2.prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:53:10,982 [main:103] - replacing (prope3.getOrThrow(), Ty0)
2021-03-11 12:53:10,983 [main:38] - replacing prope3.getOrThrow() Ty0
2021-03-11 12:53:10,983 [main:42] - Getting value of type Ty0
2021-03-11 12:53:11,129 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 12:53:11,134 [main:46] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 12:53:11,144 [main:55] - randomType = A
2021-03-11 12:53:11,276 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:53:11,279 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:53:11,410 [main:194] - Type params = []
2021-03-11 12:53:11,543 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:53:11,546 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:53:11,556 [main:94] - GETTING Ty0 from String
2021-03-11 12:53:11,576 [main:94] - GETTING Ty0 from Int
2021-03-11 12:53:11,608 [main:94] - GETTING Ty0 from Boolean
2021-03-11 12:53:11,616 [main:94] - GETTING Ty0 from Int
2021-03-11 12:53:11,617 [main:94] - GETTING Ty0 from Int
2021-03-11 12:53:11,618 [main:94] - GETTING Ty0 from Int
2021-03-11 12:53:11,618 [main:94] - GETTING Ty0 from String
2021-03-11 12:53:11,619 [main:94] - GETTING Ty0 from Int
2021-03-11 12:53:11,619 [main:107] - Cant find and generate replacement for prope3.getOrThrow() type Ty0
2021-03-11 12:53:11,619 [main:103] - replacing (prope5, Int)
2021-03-11 12:53:11,620 [main:38] - replacing prope5 Int
2021-03-11 12:53:11,620 [main:42] - Getting value of type Int
2021-03-11 12:53:11,767 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:11,769 [main:46] - GENERATED VALUE OF TYPE Int = -2120938939
2021-03-11 12:53:11,770 [main:49] - GENERATED IS CALL =false
2021-03-11 12:53:11,779 [main:55] - randomType = Kla0
2021-03-11 12:53:11,913 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 12:53:11,915 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}
2021-03-11 12:53:12,048 [main:194] - Type params = []
2021-03-11 12:53:12,225 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 12:53:12,377 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:53:12,380 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:53:12,716 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 12:53:12,867 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:53:12,870 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:53:13,347 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:53:13,347 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:53:13,361 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@9633341]
2021-03-11 12:53:13,501 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:53:13,501 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:53:13,680 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:53:13,683 [main:66] - Generated call from random type = (Kla0()).equals("fijml").compareTo(false)
2021-03-11 12:53:13,683 [main:94] - GETTING Int from Int
2021-03-11 12:53:13,726 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4ba73279]]
2021-03-11 12:53:13,726 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:53:13,726 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4ba73279]
2021-03-11 12:53:13,726 [main:105] - GENERATED CALL = (0+1+2).toShort().unaryMinus()
2021-03-11 12:53:13,726 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@446340cf]]
2021-03-11 12:53:13,726 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:53:13,887 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:13,891 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@446340cf]
2021-03-11 12:53:13,891 [main:105] - GENERATED CALL = (0+1+2).compareTo(74339597).takeLowestOneBit()
2021-03-11 12:53:13,891 [main:101] - Case = [public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@39041b0c], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@72cbb805]]
2021-03-11 12:53:13,891 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@39041b0c]
2021-03-11 12:53:14,054 [main:302] - generating value of type = Float true depth = 0
2021-03-11 12:53:14,057 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@72cbb805]
2021-03-11 12:53:14,057 [main:105] - GENERATED CALL = (0+1+2).div(0.8060136f).toRawBits()
2021-03-11 12:53:14,057 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@13ad634b]]
2021-03-11 12:53:14,057 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:53:14,208 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:53:14,211 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@13ad634b]
2021-03-11 12:53:14,211 [main:105] - GENERATED CALL = (0+1+2).div(-2022290843859449567).countOneBits()
2021-03-11 12:53:14,211 [main:101] - Case = [public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c9f5998]]
2021-03-11 12:53:14,211 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c9f5998]
2021-03-11 12:53:14,366 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:14,368 [main:105] - GENERATED CALL = (0+1+2).shl(1840625840)
2021-03-11 12:53:14,368 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@7e8d0d69]]
2021-03-11 12:53:14,368 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:53:14,368 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@7e8d0d69]
2021-03-11 12:53:14,509 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:53:14,512 [main:105] - GENERATED CALL = (0+1+2).toShort().times(-3)
2021-03-11 12:53:14,512 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@5e10d1c0]]
2021-03-11 12:53:14,512 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:53:14,512 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@5e10d1c0]
2021-03-11 12:53:14,654 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:53:14,656 [main:105] - GENERATED CALL = (0+1+2).toByte().minus(-127)
2021-03-11 12:53:14,656 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d63158f]]
2021-03-11 12:53:14,656 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:53:14,797 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:14,799 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d63158f]
2021-03-11 12:53:14,800 [main:105] - GENERATED CALL = (0+1+2).compareTo(-1248024808).dec()
2021-03-11 12:53:14,800 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@6972dc2f]]
2021-03-11 12:53:14,800 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:53:14,972 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:53:14,975 [main:105] - GENERATED CALL = (0+1+2).div(-7768775599533475087).sign
2021-03-11 12:53:14,975 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d], public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@632c8bb9]]
2021-03-11 12:53:14,975 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d]
2021-03-11 12:53:15,130 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:53:15,133 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@632c8bb9]
2021-03-11 12:53:15,133 [main:105] - GENERATED CALL = (0+1+2).div(0.6416138018199947).toInt()
2021-03-11 12:53:15,133 [main:110] - replacement of prope5 of type Int is (0+1+2).toShort().unaryMinus()
2021-03-11 12:53:15,290 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:53:15,454 [main:66] - Compilation checking started
2021-03-11 12:53:15,860 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in 1..(0+1+2+3).toInt().or(803870091)) {
            if ("".length > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((A(-1649075752, "cfyuz").y).filterIndexed({a: Int, b: Char -> false}) == "OK") {
            prope9 = "OK"
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return prope3
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { it?.methodName?.startsWith((str).get(737705173).titlecase()) == true }?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(0+1+2).toShort().unaryMinus() = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + prope5)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope2.prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:53:15,862 [main:103] - replacing ((A(-1649075752, "cfyuz").y).filterIndexed({a: Int, b: Char -> false}) == "OK", Boolean)
2021-03-11 12:53:15,863 [main:38] - replacing (A(-1649075752, "cfyuz").y).filterIndexed({a: Int, b: Char -> false}) == "OK" Boolean
2021-03-11 12:53:15,863 [main:42] - Getting value of type Boolean
2021-03-11 12:53:15,999 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:53:16,002 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 12:53:16,002 [main:49] - GENERATED IS CALL =false
2021-03-11 12:53:16,011 [main:55] - randomType = Kla1
2021-03-11 12:53:16,145 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 12:53:16,147 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}
2021-03-11 12:53:16,169 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1[DeserializedSimpleFunctionDescriptor@da87bf1]
2021-03-11 12:53:16,308 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:53:16,308 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4063f07e]
2021-03-11 12:53:16,451 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:53:16,454 [main:66] - Generated call from random type = (Kla1()).equals("sblnm").and(true)
2021-03-11 12:53:16,455 [main:94] - GETTING Boolean from Int
2021-03-11 12:53:16,495 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@a2ea05b]]
2021-03-11 12:53:16,496 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e]
2021-03-11 12:53:16,628 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:53:16,631 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@a2ea05b]
2021-03-11 12:53:16,793 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:53:16,793 [main:105] - GENERATED CALL = (sum).rangeTo(-17).equals("xctdf")
2021-03-11 12:53:16,793 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4063f07e]]
2021-03-11 12:53:16,793 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]
2021-03-11 12:53:16,939 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:53:16,939 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4063f07e]
2021-03-11 12:53:17,087 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:53:17,089 [main:105] - GENERATED CALL = (sum).equals("dlsts").and(true)
2021-03-11 12:53:17,089 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@53884783]]
2021-03-11 12:53:17,089 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]
2021-03-11 12:53:17,240 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:53:17,241 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@53884783]
2021-03-11 12:53:17,378 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:53:17,378 [main:105] - GENERATED CALL = (sum).equals("njcyh").equals("xvlld")
2021-03-11 12:53:17,378 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67b4957]]
2021-03-11 12:53:17,378 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:53:17,378 [main:137] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67b4957]
2021-03-11 12:53:17,517 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:53:17,652 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:53:17,655 [main:105] - GENERATED CALL = (sum).toChar().equals('痨', false)
2021-03-11 12:53:17,655 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24bd4c6b]]
2021-03-11 12:53:17,655 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:53:17,655 [main:137] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24bd4c6b]
2021-03-11 12:53:17,655 [main:105] - GENERATED CALL = (sum).toChar().isDigit()
2021-03-11 12:53:17,655 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1a38040]]
2021-03-11 12:53:17,655 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]
2021-03-11 12:53:17,787 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:53:17,787 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1a38040]
2021-03-11 12:53:17,920 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:53:17,923 [main:105] - GENERATED CALL = (sum).equals("wtnzw").xor(true)
2021-03-11 12:53:17,923 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]]
2021-03-11 12:53:17,923 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:53:18,084 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:18,087 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]
2021-03-11 12:53:18,231 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:53:18,232 [main:105] - GENERATED CALL = (sum).compareTo(-436559318).equals("wmztz")
2021-03-11 12:53:18,232 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]]
2021-03-11 12:53:18,232 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]
2021-03-11 12:53:18,375 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:53:18,375 [main:105] - GENERATED CALL = (sum).equals("rblco")
2021-03-11 12:53:18,375 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]]
2021-03-11 12:53:18,375 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:53:18,376 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]
2021-03-11 12:53:18,528 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:53:18,529 [main:105] - GENERATED CALL = (sum).toInt().equals("mcqlk")
2021-03-11 12:53:18,529 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@631e496]]
2021-03-11 12:53:18,529 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:53:18,529 [main:137] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@631e496]
2021-03-11 12:53:18,529 [main:105] - GENERATED CALL = (sum).toChar().isISOControl()
2021-03-11 12:53:18,529 [main:110] - replacement of (A(-1649075752, "cfyuz").y).filterIndexed({a: Int, b: Char -> false}) == "OK" of type Boolean is (sum).compareTo(-436559318).equals("wmztz")
2021-03-11 12:53:18,666 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:53:18,666 [main:66] - Compilation checking started
2021-03-11 12:53:19,259 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in 1..(0+1+2+3).toInt().or(803870091)) {
            if ("".length > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = "OK"
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return prope3
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { it?.methodName?.startsWith((str).get(737705173).titlecase()) == true }?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + prope5)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope2.prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:53:19,261 [main:103] - replacing (it?.methodName?.startsWith(method) == true, Boolean)
2021-03-11 12:53:19,262 [main:38] - replacing it?.methodName?.startsWith(method) == true Boolean
2021-03-11 12:53:19,262 [main:42] - Getting value of type Boolean
2021-03-11 12:53:19,396 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:53:19,399 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 12:53:19,399 [main:49] - GENERATED IS CALL =false
2021-03-11 12:53:19,693 [main:55] - randomType = Short?
2021-03-11 12:53:19,862 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:53:19,905 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169]
2021-03-11 12:53:19,905 [main:137] - GENERATING call of type public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6822e70d]
2021-03-11 12:53:19,905 [main:66] - Generated call from random type = (-11851)?.toFloat().isInfinite()
2021-03-11 12:53:19,906 [main:94] - GETTING Boolean from Int
2021-03-11 12:53:19,944 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12b66b2d]]
2021-03-11 12:53:19,944 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:53:19,944 [main:137] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12b66b2d]
2021-03-11 12:53:19,944 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).toChar().isTitleCase()
2021-03-11 12:53:19,944 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]]
2021-03-11 12:53:19,944 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:53:19,944 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]
2021-03-11 12:53:20,097 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:53:20,098 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).toInt().equals("oajcu")
2021-03-11 12:53:20,098 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@628f3477]]
2021-03-11 12:53:20,098 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:53:20,098 [main:137] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@628f3477]
2021-03-11 12:53:20,098 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).toChar().isSurrogate()
2021-03-11 12:53:20,098 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@27eff770]]
2021-03-11 12:53:20,098 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d]
2021-03-11 12:53:20,260 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:53:20,263 [main:137] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@27eff770]
2021-03-11 12:53:20,263 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).div(0.5169360273421958).isInfinite()
2021-03-11 12:53:20,263 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e], public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@3bf327e3]]
2021-03-11 12:53:20,263 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e]
2021-03-11 12:53:20,401 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:53:20,404 [main:137] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@3bf327e3]
2021-03-11 12:53:20,404 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).rangeTo(-35).isEmpty()
2021-03-11 12:53:20,404 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]]
2021-03-11 12:53:20,404 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]
2021-03-11 12:53:20,544 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:53:20,545 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).equals("pxnpl")
2021-03-11 12:53:20,545 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7f28a29], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@98474c2]]
2021-03-11 12:53:20,545 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7f28a29]
2021-03-11 12:53:20,545 [main:137] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@98474c2]
2021-03-11 12:53:20,545 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).toDouble().isNaN()
2021-03-11 12:53:20,545 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@216b78]]
2021-03-11 12:53:20,545 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:53:20,545 [main:137] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@216b78]
2021-03-11 12:53:20,545 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).toChar().isWhitespace()
2021-03-11 12:53:20,545 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@66871f61]]
2021-03-11 12:53:20,545 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]
2021-03-11 12:53:20,677 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:53:20,678 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@66871f61]
2021-03-11 12:53:20,810 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:53:20,812 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).equals("fenej").or(true)
2021-03-11 12:53:20,813 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@512146ca]]
2021-03-11 12:53:20,813 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:53:20,813 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@512146ca]
2021-03-11 12:53:20,946 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:53:20,946 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).toLong().equals("nyjai")
2021-03-11 12:53:20,946 [main:110] - replacement of it?.methodName?.startsWith(method) == true of type Boolean is (A(-1649075752, "cfyuz").x).equals("fenej").or(true)
2021-03-11 12:53:21,109 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:53:21,110 [main:66] - Compilation checking started
2021-03-11 12:53:21,799 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in 1..(0+1+2+3).toInt().or(803870091)) {
            if ("".length > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = "OK"
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return prope3
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { it?.methodName?.startsWith((str).get(737705173).titlecase()) == true }?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + prope5)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope2.prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:53:21,802 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 12:53:21,802 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 12:53:21,802 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 12:53:21,944 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 12:53:21,949 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 12:53:22,105 [main:55] - randomType = Kla0?
2021-03-11 12:53:22,237 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 12:53:22,239 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}
2021-03-11 12:53:22,371 [main:194] - Type params = []
2021-03-11 12:53:22,501 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 12:53:22,636 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:53:22,640 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:53:22,971 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 12:53:23,127 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:53:23,130 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:53:23,618 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:53:23,619 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:53:23,639 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:53:23,686 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:53:23,687 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:53:23,704 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:53:23,705 [main:94] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 12:53:23,714 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:53:23,714 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:53:23,715 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:53:23,715 [main:107] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 12:53:23,715 [main:103] - replacing (this, Kla1)
2021-03-11 12:53:23,716 [main:38] - replacing this Kla1
2021-03-11 12:53:23,716 [main:42] - Getting value of type Kla1
2021-03-11 12:53:23,851 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 12:53:23,854 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}
2021-03-11 12:53:23,854 [main:46] - GENERATED VALUE OF TYPE Kla1 = Kla1()
2021-03-11 12:53:23,854 [main:49] - GENERATED IS CALL =true
2021-03-11 12:53:23,864 [main:55] - randomType = A
2021-03-11 12:53:24,006 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:53:24,009 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:53:24,142 [main:194] - Type params = []
2021-03-11 12:53:24,307 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:53:24,310 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:53:24,323 [main:94] - GETTING Kla1 from Int
2021-03-11 12:53:24,366 [main:94] - GETTING Kla1 from Int
2021-03-11 12:53:24,367 [main:94] - GETTING Kla1 from Int
2021-03-11 12:53:24,368 [main:94] - GETTING Kla1 from String
2021-03-11 12:53:24,391 [main:94] - GETTING Kla1 from Int
2021-03-11 12:53:24,391 [main:94] - GETTING Kla1 from Boolean
2021-03-11 12:53:24,404 [main:94] - GETTING Kla1 from Int
2021-03-11 12:53:24,405 [main:94] - GETTING Kla1 from String
2021-03-11 12:53:24,405 [main:110] - replacement of this of type Kla1 is Kla1()
2021-03-11 12:53:24,550 [main:33] - Trying to replace Element(THIS_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:53:24,551 [main:66] - Compilation checking started
2021-03-11 12:53:25,182 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in 1..(0+1+2+3).toInt().or(803870091)) {
            if ("".length > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = "OK"
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return prope3
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { it?.methodName?.startsWith((str).get(737705173).titlecase()) == true }?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + prope5)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope2.prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:53:25,184 [main:103] - replacing (false, Boolean)
2021-03-11 12:53:25,184 [main:38] - replacing false Boolean
2021-03-11 12:53:25,184 [main:42] - Getting value of type Boolean
2021-03-11 12:53:25,340 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:53:25,344 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 12:53:25,344 [main:49] - GENERATED IS CALL =false
2021-03-11 12:53:25,521 [main:55] - randomType = Kla0
2021-03-11 12:53:25,659 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 12:53:25,662 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}
2021-03-11 12:53:25,800 [main:194] - Type params = []
2021-03-11 12:53:25,935 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 12:53:26,072 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:53:26,076 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:53:26,419 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 12:53:26,581 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:53:26,586 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:53:27,066 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:53:27,066 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:53:27,079 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@783c22e]
2021-03-11 12:53:27,213 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:53:27,213 [main:66] - Generated call from random type = (Kla0()).context.equals("vdwdp")
2021-03-11 12:53:27,214 [main:94] - GETTING Boolean from Int
2021-03-11 12:53:27,245 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@216b78]]
2021-03-11 12:53:27,245 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:53:27,245 [main:137] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@216b78]
2021-03-11 12:53:27,246 [main:105] - GENERATED CALL = (sum).toChar().isWhitespace()
2021-03-11 12:53:27,246 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.IntRange.contains(element: kotlin.Int?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@53bf104]]
2021-03-11 12:53:27,246 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e]
2021-03-11 12:53:27,379 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:53:27,382 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.IntRange.contains(element: kotlin.Int?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@53bf104]
2021-03-11 12:53:27,543 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:27,546 [main:105] - GENERATED CALL = (sum).rangeTo(63).contains(1181813010)
2021-03-11 12:53:27,546 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@631e496]]
2021-03-11 12:53:27,546 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:53:27,546 [main:137] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@631e496]
2021-03-11 12:53:27,546 [main:105] - GENERATED CALL = (sum).toChar().isISOControl()
2021-03-11 12:53:27,546 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@628f3477]]
2021-03-11 12:53:27,546 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:53:27,546 [main:137] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@628f3477]
2021-03-11 12:53:27,546 [main:105] - GENERATED CALL = (sum).toChar().isSurrogate()
2021-03-11 12:53:27,546 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@27eff770]]
2021-03-11 12:53:27,546 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d]
2021-03-11 12:53:27,699 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:53:27,702 [main:137] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@27eff770]
2021-03-11 12:53:27,702 [main:105] - GENERATED CALL = (sum).div(0.7115495412830689).isInfinite()
2021-03-11 12:53:27,702 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3f8bc992]]
2021-03-11 12:53:27,702 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d]
2021-03-11 12:53:27,853 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:53:27,856 [main:137] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3f8bc992]
2021-03-11 12:53:27,856 [main:105] - GENERATED CALL = (sum).div(0.5282589788768595).isFinite()
2021-03-11 12:53:27,856 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54d3aa92]]
2021-03-11 12:53:27,856 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:53:27,856 [main:137] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54d3aa92]
2021-03-11 12:53:27,856 [main:105] - GENERATED CALL = (sum).toChar().isLowerCase()
2021-03-11 12:53:27,856 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55c8672f]]
2021-03-11 12:53:27,856 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:53:27,857 [main:137] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55c8672f]
2021-03-11 12:53:27,857 [main:105] - GENERATED CALL = (sum).toChar().isHighSurrogate()
2021-03-11 12:53:27,857 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@5c3e3f7b]]
2021-03-11 12:53:27,857 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169]
2021-03-11 12:53:27,857 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@5c3e3f7b]
2021-03-11 12:53:28,008 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:53:28,008 [main:105] - GENERATED CALL = (sum).toFloat().equals("fwykl")
2021-03-11 12:53:28,008 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e], public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@3bf327e3]]
2021-03-11 12:53:28,008 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e]
2021-03-11 12:53:28,146 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:53:28,149 [main:137] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@3bf327e3]
2021-03-11 12:53:28,149 [main:105] - GENERATED CALL = (sum).rangeTo(5).isEmpty()
2021-03-11 12:53:28,149 [main:110] - replacement of false of type Boolean is false
2021-03-11 12:53:28,285 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-11 12:53:28,287 [main:103] - replacing (it?.methodName?.startsWith((str).get(737705173).titlecase()) == true, Boolean)
2021-03-11 12:53:28,287 [main:38] - replacing it?.methodName?.startsWith((str).get(737705173).titlecase()) == true Boolean
2021-03-11 12:53:28,287 [main:42] - Getting value of type Boolean
2021-03-11 12:53:28,419 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:53:28,422 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 12:53:28,422 [main:49] - GENERATED IS CALL =false
2021-03-11 12:53:28,431 [main:55] - randomType = Kla1
2021-03-11 12:53:28,568 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 12:53:28,571 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}
2021-03-11 12:53:28,593 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1[DeserializedSimpleFunctionDescriptor@7fa067e5]
2021-03-11 12:53:28,756 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:53:28,757 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@53884783]
2021-03-11 12:53:28,903 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:53:28,903 [main:66] - Generated call from random type = (Kla1()).equals("yebcw").equals("uewzx")
2021-03-11 12:53:28,903 [main:110] - replacement of it?.methodName?.startsWith((str).get(737705173).titlecase()) == true of type Boolean is (Kla1()).equals("yebcw").equals("uewzx")
2021-03-11 12:53:29,048 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:53:29,049 [main:66] - Compilation checking started
2021-03-11 12:53:29,629 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in 1..(0+1+2+3).toInt().or(803870091)) {
            if ("".length > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = "OK"
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return prope3
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (Kla1()).equals("yebcw").equals("uewzx") }?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + prope5)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope2.prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:53:29,631 [main:103] - replacing (c, Continuation<*>)
2021-03-11 12:53:29,632 [main:38] - replacing c Continuation<*>
2021-03-11 12:53:29,632 [main:42] - Getting value of type Continuation<*>
2021-03-11 12:53:29,770 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 12:53:29,909 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 12:53:29,912 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 12:53:30,353 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 12:53:30,529 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:53:30,532 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:53:30,852 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 12:53:31,011 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:53:31,014 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:53:31,469 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-11 12:53:31,613 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 12:53:31,616 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 12:53:32,157 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 12:53:32,158 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:53:32,158 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:53:32,158 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 12:53:32,158 [main:46] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 12:53:32,639 [main:55] - randomType = Sequence<Kla5?>
2021-03-11 12:53:32,640 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:53:32,672 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:53:32,673 [main:94] - GETTING Continuation<*> from String
2021-03-11 12:53:32,691 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:53:32,691 [main:94] - GETTING Continuation<*> from Boolean
2021-03-11 12:53:32,701 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:53:32,702 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:53:32,703 [main:94] - GETTING Continuation<*> from String
2021-03-11 12:53:32,703 [main:107] - Cant find and generate replacement for c type Continuation<*>
2021-03-11 12:53:32,703 [main:103] - replacing (prope5, Int)
2021-03-11 12:53:32,703 [main:38] - replacing prope5 Int
2021-03-11 12:53:32,703 [main:42] - Getting value of type Int
2021-03-11 12:53:32,836 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:32,838 [main:46] - GENERATED VALUE OF TYPE Int = 1601141648
2021-03-11 12:53:32,838 [main:49] - GENERATED IS CALL =false
2021-03-11 12:53:32,848 [main:55] - randomType = Kla0
2021-03-11 12:53:32,981 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 12:53:32,983 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}
2021-03-11 12:53:33,173 [main:194] - Type params = []
2021-03-11 12:53:33,319 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 12:53:33,469 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:53:33,473 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:53:33,791 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 12:53:33,936 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:53:33,939 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:53:34,444 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:53:34,444 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:53:34,462 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@2936ea2e]
2021-03-11 12:53:34,607 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:53:34,607 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:53:34,759 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:53:34,762 [main:66] - Generated call from random type = (Kla0()).equals("wepwa").compareTo(true)
2021-03-11 12:53:34,762 [main:94] - GETTING Int from Int
2021-03-11 12:53:34,808 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e], public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@1ca46bf]]
2021-03-11 12:53:34,809 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e]
2021-03-11 12:53:34,946 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:53:34,948 [main:105] - GENERATED CALL = (sum).rangeTo(62).endInclusive
2021-03-11 12:53:34,949 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76034fc0]]
2021-03-11 12:53:34,949 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76034fc0]
2021-03-11 12:53:34,949 [main:105] - GENERATED CALL = (sum).countTrailingZeroBits()
2021-03-11 12:53:34,949 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d], public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@632c8bb9]]
2021-03-11 12:53:34,949 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d]
2021-03-11 12:53:35,085 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:53:35,088 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@632c8bb9]
2021-03-11 12:53:35,088 [main:105] - GENERATED CALL = (sum).div(0.03778808195100991).toInt()
2021-03-11 12:53:35,088 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18626c8c]]
2021-03-11 12:53:35,088 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:53:35,088 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18626c8c]
2021-03-11 12:53:35,219 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:53:35,222 [main:105] - GENERATED CALL = (sum).toInt().plus(30)
2021-03-11 12:53:35,222 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@6972dc2f]]
2021-03-11 12:53:35,222 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:53:35,387 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:53:35,390 [main:105] - GENERATED CALL = (sum).div(8692784290308001754).sign
2021-03-11 12:53:35,390 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@7760e931]]
2021-03-11 12:53:35,390 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:53:35,390 [main:105] - GENERATED CALL = (sum).toChar().code
2021-03-11 12:53:35,390 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@216b8aa8]]
2021-03-11 12:53:35,390 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:53:35,390 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@216b8aa8]
2021-03-11 12:53:35,536 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:35,539 [main:105] - GENERATED CALL = (sum).toInt().ushr(-828136034)
2021-03-11 12:53:35,539 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ed6eedb]]
2021-03-11 12:53:35,539 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:53:35,685 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:35,687 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ed6eedb]
2021-03-11 12:53:35,840 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:53:35,843 [main:105] - GENERATED CALL = (sum).compareTo(203806170).div(42)
2021-03-11 12:53:35,843 [main:101] - Case = [public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e53c7a]]
2021-03-11 12:53:35,843 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e53c7a]
2021-03-11 12:53:35,984 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:35,987 [main:105] - GENERATED CALL = (sum).shr(-1547759239)
2021-03-11 12:53:35,987 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@58fd4e05]]
2021-03-11 12:53:35,987 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d]
2021-03-11 12:53:36,129 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:53:36,132 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@58fd4e05]
2021-03-11 12:53:36,264 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:53:36,267 [main:105] - GENERATED CALL = (sum).div(0.674175470070113).compareTo(-95)
2021-03-11 12:53:36,267 [main:110] - replacement of prope5 of type Int is sum
2021-03-11 12:53:36,421 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:53:36,421 [main:66] - Compilation checking started
2021-03-11 12:53:37,078 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in 1..(0+1+2+3).toInt().or(803870091)) {
            if ("".length > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = "OK"
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return prope3
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (Kla1()).equals("yebcw").equals("uewzx") }?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope2.prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:53:37,080 [main:103] - replacing (it, Continuation<Unit>)
2021-03-11 12:53:37,080 [main:38] - replacing it Continuation<Unit>
2021-03-11 12:53:37,080 [main:42] - Getting value of type Continuation<Unit>
2021-03-11 12:53:37,225 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-11 12:53:37,378 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 12:53:37,381 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 12:53:37,831 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 12:53:37,971 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:53:37,975 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:53:38,314 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 12:53:38,476 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:53:38,480 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:53:39,001 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:53:39,001 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:53:39,001 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 12:53:39,001 [main:46] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-11 12:53:39,163 [main:55] - randomType = List<Kla3>
2021-03-11 12:53:39,164 [main:94] - GETTING Continuation<Unit> from Boolean
2021-03-11 12:53:39,174 [main:94] - GETTING Continuation<Unit> from Int
2021-03-11 12:53:39,207 [main:94] - GETTING Continuation<Unit> from Int
2021-03-11 12:53:39,208 [main:94] - GETTING Continuation<Unit> from Int
2021-03-11 12:53:39,209 [main:94] - GETTING Continuation<Unit> from String
2021-03-11 12:53:39,228 [main:94] - GETTING Continuation<Unit> from Int
2021-03-11 12:53:39,229 [main:94] - GETTING Continuation<Unit> from Int
2021-03-11 12:53:39,230 [main:94] - GETTING Continuation<Unit> from String
2021-03-11 12:53:39,230 [main:107] - Cant find and generate replacement for it type Continuation<Unit>
2021-03-11 12:53:39,230 [main:103] - replacing ({
        // Initialize var with Int value
        for (i in 1..(0+1+2+3).toInt().or(803870091)) {
            if ("".length > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = "OK"
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }, SuspendFunction0<Unit>)
2021-03-11 12:53:39,230 [main:38] - replacing {
        // Initialize var with Int value
        for (i in 1..(0+1+2+3).toInt().or(803870091)) {
            if ("".length > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = "OK"
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    } SuspendFunction0<Unit>
2021-03-11 12:53:39,230 [main:42] - Getting value of type SuspendFunction0<Unit>
2021-03-11 12:53:39,361 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-11 12:53:39,364 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:53:39,542 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 12:53:39,545 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 12:53:39,892 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 12:53:39,894 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 12:53:40,071 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:53:40,075 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:53:40,372 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 12:53:40,374 [main:95] - GENERATED = require(false)
2021-03-11 12:53:40,375 [main:95] - GENERATED = contract({ require(false)})
2021-03-11 12:53:40,375 [main:46] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { contract({ require(false)})}
2021-03-11 12:53:40,375 [main:49] - GENERATED IS CALL =false
2021-03-11 12:53:40,531 [main:55] - randomType = Short
2021-03-11 12:53:40,686 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:53:40,732 [main:94] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 12:53:40,773 [main:94] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 12:53:40,774 [main:94] - GETTING SuspendFunction0<Unit> from String
2021-03-11 12:53:40,799 [main:94] - GETTING SuspendFunction0<Unit> from String
2021-03-11 12:53:40,800 [main:94] - GETTING SuspendFunction0<Unit> from Boolean
2021-03-11 12:53:40,813 [main:94] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 12:53:40,814 [main:94] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 12:53:40,815 [main:94] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 12:53:40,815 [main:110] - replacement of {
        // Initialize var with Int value
        for (i in 1..(0+1+2+3).toInt().or(803870091)) {
            if ("".length > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = "OK"
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    } of type SuspendFunction0<Unit> is { contract({ require(false)})}
2021-03-11 12:53:40,959 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 12:53:40,959 [main:66] - Compilation checking started
2021-03-11 12:53:41,385 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 { contract({ require(false)})}

    return prope3
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (Kla1()).equals("yebcw").equals("uewzx") }?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope2.prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:53:41,387 [main:103] - replacing (method, String)
2021-03-11 12:53:41,387 [main:38] - replacing method String
2021-03-11 12:53:41,387 [main:42] - Getting value of type String
2021-03-11 12:53:41,522 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:53:41,524 [main:46] - GENERATED VALUE OF TYPE String = "lpgmw"
2021-03-11 12:53:41,524 [main:49] - GENERATED IS CALL =false
2021-03-11 12:53:41,675 [main:55] - randomType = Long
2021-03-11 12:53:41,808 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:53:41,841 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:53:41,841 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:53:41,972 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:41,974 [main:66] - Generated call from random type = (-2079924925654843569).toLong().toString(8495466)
2021-03-11 12:53:41,975 [main:94] - GETTING String from Int
2021-03-11 12:53:42,009 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]]
2021-03-11 12:53:42,010 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:53:42,010 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]
2021-03-11 12:53:42,010 [main:105] - GENERATED CALL = (0+1+2).toChar().uppercase()
2021-03-11 12:53:42,010 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]]
2021-03-11 12:53:42,010 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:53:42,010 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]
2021-03-11 12:53:42,142 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:42,145 [main:105] - GENERATED CALL = (0+1+2).toShort().toString(-1465087051)
2021-03-11 12:53:42,145 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]]
2021-03-11 12:53:42,145 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:53:42,145 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]
2021-03-11 12:53:42,145 [main:105] - GENERATED CALL = (0+1+2).toChar().titlecase()
2021-03-11 12:53:42,145 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]]
2021-03-11 12:53:42,145 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:53:42,146 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]
2021-03-11 12:53:42,146 [main:105] - GENERATED CALL = (0+1+2).toChar().lowercase()
2021-03-11 12:53:42,146 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:53:42,146 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:53:42,305 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:53:42,307 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:53:42,451 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:42,454 [main:105] - GENERATED CALL = (0+1+2).div(645474906362004434).toString(-1051653255)
2021-03-11 12:53:42,454 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]]
2021-03-11 12:53:42,454 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:53:42,454 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]
2021-03-11 12:53:42,599 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:42,602 [main:105] - GENERATED CALL = (0+1+2).toByte().toString(-137255585)
2021-03-11 12:53:42,602 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]]
2021-03-11 12:53:42,602 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:53:42,602 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]
2021-03-11 12:53:42,766 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:53:42,769 [main:105] - GENERATED CALL = (0+1+2).toChar().plus("xrott")
2021-03-11 12:53:42,769 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:53:42,769 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:53:42,917 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:42,920 [main:105] - GENERATED CALL = (0+1+2).toString(-164875408)
2021-03-11 12:53:42,920 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:53:42,920 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:53:42,920 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:53:43,072 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:43,075 [main:105] - GENERATED CALL = (0+1+2).toLong().toString(1372578902)
2021-03-11 12:53:43,075 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:53:43,075 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:53:43,075 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:53:43,216 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:43,218 [main:105] - GENERATED CALL = (0+1+2).toInt().toString(-660746020)
2021-03-11 12:53:43,219 [main:110] - replacement of method of type String is (0+1+2).toLong().toString(1372578902)
2021-03-11 12:53:43,359 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:53:43,359 [main:66] - Compilation checking started
2021-03-11 12:53:43,947 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in 1..(0+1+2+3).toInt().or(803870091)) {
            if ("".length > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = "OK"
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return prope3
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (Kla1()).equals("yebcw").equals("uewzx") }?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } ?: error("tail-call optimization hit: method " + (0+1+2).toLong().toString(1372578902) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope2.prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:53:43,950 [main:103] - replacing (prope5 != i, Boolean)
2021-03-11 12:53:43,951 [main:38] - replacing prope5 != i Boolean
2021-03-11 12:53:43,951 [main:42] - Getting value of type Boolean
2021-03-11 12:53:44,132 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:53:44,134 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 12:53:44,135 [main:49] - GENERATED IS CALL =false
2021-03-11 12:53:44,298 [main:55] - randomType = UByte
2021-03-11 12:53:44,442 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:53:44,484 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@2d357832]
2021-03-11 12:53:44,632 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:53:44,632 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4063f07e]
2021-03-11 12:53:44,769 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:53:44,771 [main:66] - Generated call from random type = (23.toUByte()).equals("mgetq").and(true)
2021-03-11 12:53:44,772 [main:94] - GETTING Boolean from Int
2021-03-11 12:53:44,824 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@66871f61]]
2021-03-11 12:53:44,824 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]
2021-03-11 12:53:44,959 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:53:44,959 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@66871f61]
2021-03-11 12:53:45,093 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:53:45,096 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).equals("ramup").or(true)
2021-03-11 12:53:45,096 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e], public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@3bf327e3]]
2021-03-11 12:53:45,096 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e]
2021-03-11 12:53:45,254 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:53:45,256 [main:137] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@3bf327e3]
2021-03-11 12:53:45,257 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).rangeTo(-56).isEmpty()
2021-03-11 12:53:45,257 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@512146ca]]
2021-03-11 12:53:45,257 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:53:45,257 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@512146ca]
2021-03-11 12:53:45,402 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:53:45,403 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).toLong().equals("camhl")
2021-03-11 12:53:45,403 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12b66b2d]]
2021-03-11 12:53:45,403 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:53:45,403 [main:137] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12b66b2d]
2021-03-11 12:53:45,403 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).toChar().isTitleCase()
2021-03-11 12:53:45,403 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]]
2021-03-11 12:53:45,403 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:53:45,403 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]
2021-03-11 12:53:45,548 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:53:45,548 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).toInt().equals("hydnf")
2021-03-11 12:53:45,548 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54d3aa92]]
2021-03-11 12:53:45,548 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:53:45,548 [main:137] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54d3aa92]
2021-03-11 12:53:45,548 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).toChar().isLowerCase()
2021-03-11 12:53:45,548 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@27eff770]]
2021-03-11 12:53:45,548 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d]
2021-03-11 12:53:45,700 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:53:45,703 [main:137] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@27eff770]
2021-03-11 12:53:45,705 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).div(0.03309002814844064).isInfinite()
2021-03-11 12:53:45,705 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.IntRange.contains(element: kotlin.Int?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@53bf104]]
2021-03-11 12:53:45,705 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e]
2021-03-11 12:53:45,845 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:53:45,849 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.IntRange.contains(element: kotlin.Int?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@53bf104]
2021-03-11 12:53:45,995 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:45,998 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).rangeTo(-86).contains(-341089961)
2021-03-11 12:53:45,998 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7f28a29], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@98474c2]]
2021-03-11 12:53:45,998 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7f28a29]
2021-03-11 12:53:45,998 [main:137] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@98474c2]
2021-03-11 12:53:45,998 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).toDouble().isNaN()
2021-03-11 12:53:45,998 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d46925b]]
2021-03-11 12:53:45,998 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:53:45,998 [main:137] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d46925b]
2021-03-11 12:53:45,999 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).toChar().isLowSurrogate()
2021-03-11 12:53:45,999 [main:110] - replacement of prope5 != i of type Boolean is (23.toUByte()).equals("mgetq").and(true)
2021-03-11 12:53:46,139 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:53:46,139 [main:66] - Compilation checking started
2021-03-11 12:53:46,740 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in 1..(0+1+2+3).toInt().or(803870091)) {
            if ("".length > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = "OK"
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return prope3
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (Kla1()).equals("yebcw").equals("uewzx") }?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } ?: error("tail-call optimization hit: method " + (0+1+2).toLong().toString(1372578902) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in 1..numberOfSuspensions) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope2.prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:53:46,743 [main:103] - replacing ("OK", String)
2021-03-11 12:53:46,743 [main:38] - replacing "OK" String
2021-03-11 12:53:46,743 [main:42] - Getting value of type String
2021-03-11 12:53:46,912 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:53:46,914 [main:46] - GENERATED VALUE OF TYPE String = "haipi"
2021-03-11 12:53:46,914 [main:49] - GENERATED IS CALL =false
2021-03-11 12:53:47,258 [main:55] - randomType = Set<Long>
2021-03-11 12:53:47,259 [main:94] - GETTING String from Int
2021-03-11 12:53:47,306 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]]
2021-03-11 12:53:47,306 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:53:47,306 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]
2021-03-11 12:53:47,462 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:53:47,465 [main:105] - GENERATED CALL = (0+1+2+3).toChar().plus("lyswc")
2021-03-11 12:53:47,465 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]]
2021-03-11 12:53:47,465 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:53:47,466 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]
2021-03-11 12:53:47,466 [main:105] - GENERATED CALL = (0+1+2+3).toChar().titlecase()
2021-03-11 12:53:47,466 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:53:47,466 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:53:47,613 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:47,615 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:53:47,752 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:47,754 [main:105] - GENERATED CALL = (0+1+2+3).compareTo(170150648).toString(-98537668)
2021-03-11 12:53:47,754 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]]
2021-03-11 12:53:47,754 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:53:47,754 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]
2021-03-11 12:53:47,755 [main:105] - GENERATED CALL = (0+1+2+3).toChar().uppercase()
2021-03-11 12:53:47,755 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:53:47,755 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:53:47,888 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:53:47,890 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:53:48,068 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:48,071 [main:105] - GENERATED CALL = (0+1+2+3).div(-6784362475339669988).toString(-1843143515)
2021-03-11 12:53:48,071 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:53:48,071 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:53:48,071 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:53:48,226 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:48,229 [main:105] - GENERATED CALL = (0+1+2+3).toInt().toString(1840469786)
2021-03-11 12:53:48,229 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]]
2021-03-11 12:53:48,229 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:53:48,229 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]
2021-03-11 12:53:48,385 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:48,388 [main:105] - GENERATED CALL = (0+1+2+3).toByte().toString(1612604976)
2021-03-11 12:53:48,388 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:53:48,388 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:53:48,388 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:53:48,542 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:48,544 [main:105] - GENERATED CALL = (0+1+2+3).toLong().toString(-1609821060)
2021-03-11 12:53:48,545 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]]
2021-03-11 12:53:48,545 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:53:48,545 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]
2021-03-11 12:53:48,684 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:48,687 [main:105] - GENERATED CALL = (0+1+2+3).toShort().toString(1663869662)
2021-03-11 12:53:48,687 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]]
2021-03-11 12:53:48,687 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:53:48,687 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]
2021-03-11 12:53:48,687 [main:105] - GENERATED CALL = (0+1+2+3).toChar().lowercase()
2021-03-11 12:53:48,688 [main:110] - replacement of "OK" of type String is (0+1+2+3).toLong().toString(-1609821060)
2021-03-11 12:53:48,826 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:53:48,826 [main:66] - Compilation checking started
2021-03-11 12:53:49,450 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in 1..(0+1+2+3).toInt().or(803870091)) {
            if ("".length > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return prope3
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (Kla1()).equals("yebcw").equals("uewzx") }?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } ?: error("tail-call optimization hit: method " + (0+1+2).toLong().toString(1372578902) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in 1..numberOfSuspensions) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope2.prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:53:49,453 [main:103] - replacing (prope5, Int)
2021-03-11 12:53:49,453 [main:38] - replacing prope5 Int
2021-03-11 12:53:49,453 [main:42] - Getting value of type Int
2021-03-11 12:53:49,599 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:49,601 [main:46] - GENERATED VALUE OF TYPE Int = -332350877
2021-03-11 12:53:49,601 [main:49] - GENERATED IS CALL =false
2021-03-11 12:53:49,612 [main:55] - randomType = Kla0
2021-03-11 12:53:49,753 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 12:53:49,755 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}
2021-03-11 12:53:49,921 [main:194] - Type params = []
2021-03-11 12:53:50,070 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 12:53:50,225 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:53:50,229 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:53:50,561 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 12:53:50,710 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:53:50,713 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:53:51,270 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:53:51,270 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:53:51,298 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@41505f98]
2021-03-11 12:53:51,454 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:53:51,454 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:53:51,616 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:53:51,619 [main:66] - Generated call from random type = (Kla0()).equals("eavgi").compareTo(true)
2021-03-11 12:53:51,619 [main:94] - GETTING Int from Int
2021-03-11 12:53:51,673 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@ccd075b]]
2021-03-11 12:53:51,673 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:53:51,673 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@ccd075b]
2021-03-11 12:53:51,813 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:53:51,816 [main:105] - GENERATED CALL = (0+1+2+3).toByte().rem(-41)
2021-03-11 12:53:51,816 [main:101] - Case = [public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36845587]]
2021-03-11 12:53:51,816 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36845587]
2021-03-11 12:53:51,952 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:51,955 [main:105] - GENERATED CALL = (0+1+2+3).xor(733172267)
2021-03-11 12:53:51,955 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3b8291ff]]
2021-03-11 12:53:51,955 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:53:52,093 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:52,095 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3b8291ff]
2021-03-11 12:53:52,259 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:52,262 [main:105] - GENERATED CALL = (0+1+2+3).compareTo(517154653).coerceAtMost(-112087189)
2021-03-11 12:53:52,262 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@61aa5dbf]]
2021-03-11 12:53:52,262 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:53:52,262 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@61aa5dbf]
2021-03-11 12:53:52,409 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:53:52,412 [main:105] - GENERATED CALL = (0+1+2+3).toShort().rem(-51)
2021-03-11 12:53:52,412 [main:101] - Case = [public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f664709]]
2021-03-11 12:53:52,412 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f664709]
2021-03-11 12:53:52,561 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:52,717 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:52,720 [main:105] - GENERATED CALL = (0+1+2+3).coerceIn(-1648883229, -2122694859)
2021-03-11 12:53:52,720 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2814a4a]]
2021-03-11 12:53:52,720 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:53:52,721 [main:105] - GENERATED CALL = (0+1+2+3).toInt().sign
2021-03-11 12:53:52,721 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f664709]]
2021-03-11 12:53:52,721 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:53:52,861 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:52,863 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f664709]
2021-03-11 12:53:53,003 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:53,141 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:53,144 [main:105] - GENERATED CALL = (0+1+2+3).compareTo(622783927).coerceIn(-1698996645, -506669326)
2021-03-11 12:53:53,144 [main:101] - Case = [public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@241f9269]]
2021-03-11 12:53:53,144 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@241f9269]
2021-03-11 12:53:53,307 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:53,310 [main:105] - GENERATED CALL = (0+1+2+3).or(1328321759)
2021-03-11 12:53:53,310 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@569639ef]]
2021-03-11 12:53:53,310 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:53:53,310 [main:137] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@569639ef]
2021-03-11 12:53:53,310 [main:105] - GENERATED CALL = (0+1+2+3).toByte().unaryMinus()
2021-03-11 12:53:53,310 [main:101] - Case = [public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@216b8aa8]]
2021-03-11 12:53:53,310 [main:137] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@216b8aa8]
2021-03-11 12:53:53,460 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:53,463 [main:105] - GENERATED CALL = (0+1+2+3).ushr(2056074000)
2021-03-11 12:53:53,463 [main:110] - replacement of prope5 of type Int is (0+1+2+3).ushr(2056074000)
2021-03-11 12:53:53,609 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:53:53,610 [main:66] - Compilation checking started
2021-03-11 12:53:54,039 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in 1..(0+1+2+3).toInt().or(803870091)) {
            if ("".length > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return prope3
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (Kla1()).equals("yebcw").equals("uewzx") }?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } ?: error("tail-call optimization hit: method " + (0+1+2).toLong().toString(1372578902) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(0+1+2+3).ushr(2056074000) = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in 1..numberOfSuspensions) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope2.prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:53:54,043 [main:103] - replacing (1..numberOfSuspensions, IntRange)
2021-03-11 12:53:54,043 [main:38] - replacing 1..numberOfSuspensions IntRange
2021-03-11 12:53:54,043 [main:42] - Getting value of type IntRange
2021-03-11 12:53:54,204 [main:302] - generating value of type = IntRange false depth = 0
2021-03-11 12:53:54,343 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-11 12:53:54,346 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-11 12:53:54,828 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:53:54,831 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:53:54,833 [main:95] - GENERATED = IntRange(-1040323462, -1067282301)
2021-03-11 12:53:54,833 [main:46] - GENERATED VALUE OF TYPE IntRange = IntRange(-1040323462, -1067282301)
2021-03-11 12:53:54,834 [main:49] - GENERATED IS CALL =true
2021-03-11 12:53:56,221 [main:55] - randomType = Triple<Array<LinkedHashSet<Byte?>>, UInt, Byte?>
2021-03-11 12:53:56,369 [main:302] - generating value of type = Triple<Array<LinkedHashSet<Byte?>>, UInt, Byte?> false depth = 0
2021-03-11 12:53:56,530 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Array<LinkedHashSet<Byte?>>, second: UInt, third: Byte?): Triple<Array<LinkedHashSet<Byte?>>, UInt, Byte?> = TODO()
2021-03-11 12:53:56,533 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Array<LinkedHashSet<Byte?>>, second: UInt, third: Byte?): Triple<Array<LinkedHashSet<Byte?>>, UInt, Byte?> = TODO()
2021-03-11 12:53:56,678 [main:302] - generating value of type = Array<LinkedHashSet<Byte?>> false depth = 3
2021-03-11 12:53:56,821 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->LinkedHashSet<Byte?>): Array<LinkedHashSet<Byte?>> = TODO()
2021-03-11 12:53:56,824 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->LinkedHashSet<Byte?>): Array<LinkedHashSet<Byte?>> = TODO()
2021-03-11 12:53:57,389 [main:302] - generating value of type = Int true depth = 6
2021-03-11 12:53:57,392 [main:302] - generating value of type = Function1<Int, LinkedHashSet<Byte?>> false depth = 6
2021-03-11 12:53:57,394 [main:302] - generating value of type = LinkedHashSet<Byte?> false depth = 7
2021-03-11 12:53:57,549 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<Byte?> = TODO()
2021-03-11 12:53:57,552 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<Byte?> = TODO()
2021-03-11 12:53:57,726 [main:95] - GENERATED = linkedSetOf<Byte?>()
2021-03-11 12:53:57,727 [main:95] - GENERATED = Array<LinkedHashSet<Byte?>>(329299908, {a: Int -> linkedSetOf<Byte?>()})
2021-03-11 12:53:57,727 [main:302] - generating value of type = UInt true depth = 3
2021-03-11 12:53:57,729 [main:302] - generating value of type = Byte true depth = 3
2021-03-11 12:53:57,732 [main:95] - GENERATED = Triple<Array<LinkedHashSet<Byte?>>, UInt, Byte?>(Array<LinkedHashSet<Byte?>>(329299908, {a: Int -> linkedSetOf<Byte?>()}), 626148829.toUInt(), 9)
2021-03-11 12:53:57,756 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@69ff5aca]
2021-03-11 12:53:57,898 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:53:57,901 [main:66] - Generated call from random type = (Triple<Array<LinkedHashSet<Byte?>>, UInt, Byte?>(Array<LinkedHashSet<Byte?>>(329299908, {a: Int -> linkedSetOf<Byte?>()}), 626148829.toUInt(), 9)).third?.rangeTo(53)!!
2021-03-11 12:53:57,902 [main:94] - GETTING IntRange from String
2021-03-11 12:53:57,931 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], public val kotlin.CharSequence.indices: kotlin.ranges.IntRange defined in kotlin.text[DeserializedPropertyDescriptor@3a3d3286]]
2021-03-11 12:53:57,932 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:53:58,071 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:58,209 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:53:58,212 [main:105] - GENERATED CALL = (str).subSequence(795038809, -715867235).indices
2021-03-11 12:53:58,212 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@45ef593f]]
2021-03-11 12:53:58,212 [main:137] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@45ef593f]
2021-03-11 12:53:58,384 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:53:58,387 [main:105] - GENERATED CALL = (str).length.until(87)
2021-03-11 12:53:58,387 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@45ef593f]]
2021-03-11 12:53:58,387 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:53:58,541 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:53:58,544 [main:137] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@45ef593f]
2021-03-11 12:53:58,694 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:53:58,697 [main:105] - GENERATED CALL = (str).compareTo("abpdw").until(-13)
2021-03-11 12:53:58,697 [main:101] - Case = [public val kotlin.CharSequence.indices: kotlin.ranges.IntRange defined in kotlin.text[DeserializedPropertyDescriptor@3a3d3286]]
2021-03-11 12:53:58,698 [main:105] - GENERATED CALL = (str).indices
2021-03-11 12:53:58,698 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e]]
2021-03-11 12:53:58,698 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:53:58,877 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:53:58,882 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e]
2021-03-11 12:53:59,034 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:53:59,037 [main:105] - GENERATED CALL = (str).compareTo("merwg").rangeTo(125)
2021-03-11 12:53:59,037 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e]]
2021-03-11 12:53:59,037 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e]
2021-03-11 12:53:59,174 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:53:59,176 [main:105] - GENERATED CALL = (str).length.rangeTo(28)
2021-03-11 12:53:59,177 [main:110] - replacement of 1..numberOfSuspensions of type IntRange is (str).length.until(87)
2021-03-11 12:53:59,310 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:53:59,311 [main:66] - Compilation checking started
2021-03-11 12:53:59,875 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in 1..(0+1+2+3).toInt().or(803870091)) {
            if ("".length > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return prope3
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (Kla1()).equals("yebcw").equals("uewzx") }?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } ?: error("tail-call optimization hit: method " + (0+1+2).toLong().toString(1372578902) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope2.prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:53:59,877 [main:103] - replacing ("tail-call optimization hit: method ", String)
2021-03-11 12:53:59,877 [main:38] - replacing "tail-call optimization hit: method " String
2021-03-11 12:53:59,877 [main:42] - Getting value of type String
2021-03-11 12:54:00,051 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:54:00,054 [main:46] - GENERATED VALUE OF TYPE String = "qlpms"
2021-03-11 12:54:00,054 [main:49] - GENERATED IS CALL =false
2021-03-11 12:54:01,845 [main:55] - randomType = HashMap<LinkedHashMap<Function2<List<Kla5>, Short, Kla4?>, Kla3>, Int?>?
2021-03-11 12:54:01,988 [main:302] - generating value of type = HashMap<LinkedHashMap<Function2<List<Kla5>, Short, Kla4?>, Kla3>, Int?> false depth = 0
2021-03-11 12:54:02,138 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): HashMap<LkedHashMap<Function2<List<Kla5>, Short, Kla4?>, Kla3>, Int?> = TODO()
2021-03-11 12:54:02,141 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): HashMap<LkedHashMap<Function2<List<Kla5>, Short, Kla4?>, Kla3>, Int?> = TODO()
2021-03-11 12:54:02,283 [main:95] - GENERATED = linkedMapOf<LinkedHashMap<Function2<List<Kla5>, Short, Kla4?>, Kla3>, Int?>()
2021-03-11 12:54:02,463 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:54:02,631 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:54:02,634 [main:66] - Generated call from random type = (linkedMapOf<LinkedHashMap<Function2<List<Kla5>, Short, Kla4?>, Kla3>, Int?>())?.size.toString(-983659983)
2021-03-11 12:54:02,634 [main:110] - replacement of "tail-call optimization hit: method " of type String is (linkedMapOf<LinkedHashMap<Function2<List<Kla5>, Short, Kla4?>, Kla3>, Int?>())?.size.toString(-983659983)
2021-03-11 12:54:02,785 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:54:02,785 [main:66] - Compilation checking started
2021-03-11 12:54:03,482 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in 1..(0+1+2+3).toInt().or(803870091)) {
            if ("".length > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return prope3
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (Kla1()).equals("yebcw").equals("uewzx") }?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } ?: error((linkedMapOf<LinkedHashMap<Function2<List<Kla5>, Short, Kla4?>, Kla3>, Int?>())?.size.toString(-983659983) + (0+1+2).toLong().toString(1372578902) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope2.prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:54:03,485 [main:103] - replacing (prope6, Boolean)
2021-03-11 12:54:03,485 [main:38] - replacing prope6 Boolean
2021-03-11 12:54:03,485 [main:42] - Getting value of type Boolean
2021-03-11 12:54:03,639 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:54:03,643 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 12:54:03,643 [main:49] - GENERATED IS CALL =false
2021-03-11 12:54:03,982 [main:55] - randomType = LinkedHashSet<Float>
2021-03-11 12:54:04,124 [main:302] - generating value of type = LinkedHashSet<Float> false depth = 0
2021-03-11 12:54:04,269 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Float): LkedHashSet<Float> = TODO()
2021-03-11 12:54:04,274 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Float): LkedHashSet<Float> = TODO()
2021-03-11 12:54:04,460 [main:302] - generating value of type = Float true depth = 3
2021-03-11 12:54:04,464 [main:95] - GENERATED = linkedSetOf<Float>(0.19087738f)
2021-03-11 12:54:04,623 [main:137] - GENERATING call of type public open fun contains(element: kotlin.Float): kotlin.Boolean defined in kotlin.collections.AbstractCollection[DeserializedSimpleFunctionDescriptor@291f56a8]
2021-03-11 12:54:04,779 [main:302] - generating value of type = Float true depth = 0
2021-03-11 12:54:04,784 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4063f07e]
2021-03-11 12:54:04,953 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:54:04,957 [main:66] - Generated call from random type = (linkedSetOf<Float>(0.19087738f)).contains(0.047315836f).and(true)
2021-03-11 12:54:04,958 [main:94] - GETTING Boolean from Int
2021-03-11 12:54:05,013 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1a38040]]
2021-03-11 12:54:05,013 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]
2021-03-11 12:54:05,169 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:54:05,170 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1a38040]
2021-03-11 12:54:05,314 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:54:05,318 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).equals("bfcft").xor(false)
2021-03-11 12:54:05,318 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169], public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@67360a68]]
2021-03-11 12:54:05,318 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169]
2021-03-11 12:54:05,318 [main:137] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@67360a68]
2021-03-11 12:54:05,318 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).toFloat().isFinite()
2021-03-11 12:54:05,318 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3f8bc992]]
2021-03-11 12:54:05,318 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d]
2021-03-11 12:54:05,456 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:54:05,460 [main:137] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3f8bc992]
2021-03-11 12:54:05,460 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()
2021-03-11 12:54:05,461 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@631e496]]
2021-03-11 12:54:05,461 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:54:05,461 [main:137] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@631e496]
2021-03-11 12:54:05,461 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).toChar().isISOControl()
2021-03-11 12:54:05,461 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4428db34]]
2021-03-11 12:54:05,461 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:54:05,461 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4428db34]
2021-03-11 12:54:05,600 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:54:05,600 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).toShort().equals("phrrh")
2021-03-11 12:54:05,601 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@a2ea05b]]
2021-03-11 12:54:05,601 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e]
2021-03-11 12:54:05,767 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:54:05,771 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@a2ea05b]
2021-03-11 12:54:05,925 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:54:05,925 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).rangeTo(48).equals("joloi")
2021-03-11 12:54:05,925 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@66871f61]]
2021-03-11 12:54:05,925 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]
2021-03-11 12:54:06,081 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:54:06,081 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@66871f61]
2021-03-11 12:54:06,240 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:54:06,244 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).equals("nwlig").or(false)
2021-03-11 12:54:06,245 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e], public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@3bf327e3]]
2021-03-11 12:54:06,245 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e]
2021-03-11 12:54:06,388 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:54:06,392 [main:137] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@3bf327e3]
2021-03-11 12:54:06,393 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).rangeTo(117).isEmpty()
2021-03-11 12:54:06,393 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@628f3477]]
2021-03-11 12:54:06,393 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:54:06,393 [main:137] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@628f3477]
2021-03-11 12:54:06,393 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).toChar().isSurrogate()
2021-03-11 12:54:06,393 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]]
2021-03-11 12:54:06,393 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:54:06,537 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:54:06,541 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]
2021-03-11 12:54:06,679 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:54:06,679 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).compareTo(-700061648).equals("nhtth")
2021-03-11 12:54:06,679 [main:110] - replacement of prope6 of type Boolean is (A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()
2021-03-11 12:54:06,849 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:54:06,849 [main:66] - Compilation checking started
2021-03-11 12:54:07,673 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in 1..(0+1+2+3).toInt().or(803870091)) {
            if ("".length > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return prope3
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (Kla1()).equals("yebcw").equals("uewzx") }?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } ?: error((linkedMapOf<LinkedHashMap<Function2<List<Kla5>, Short, Kla4?>, Kla3>, Int?>())?.size.toString(-983659983) + (0+1+2).toLong().toString(1372578902) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope2.prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:54:07,676 [main:103] - replacing (prope7, Function0<Unit>)
2021-03-11 12:54:07,676 [main:38] - replacing prope7 Function0<Unit>
2021-03-11 12:54:07,676 [main:42] - Getting value of type Function0<Unit>
2021-03-11 12:54:07,823 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 12:54:07,827 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:54:07,972 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:54:07,977 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:54:08,286 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 12:54:08,291 [main:95] - GENERATED = require(false)
2021-03-11 12:54:08,291 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false)}
2021-03-11 12:54:08,291 [main:49] - GENERATED IS CALL =false
2021-03-11 12:54:08,306 [main:55] - randomType = Kla3
2021-03-11 12:54:08,444 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-11 12:54:08,448 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (Kla1()).equals("yebcw").equals("uewzx") }?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } ?: error((linkedMapOf<LinkedHashMap<Function2<List<Kla5>, Short, Kla4?>, Kla3>, Int?>())?.size.toString(-983659983) + (0+1+2).toLong().toString(1372578902) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}
2021-03-11 12:54:08,455 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:54:08,498 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:54:08,522 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:54:08,523 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:54:08,524 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:54:08,525 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:54:08,526 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 12:54:08,539 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:54:08,539 [main:110] - replacement of prope7 of type Function0<Unit> is { require(false)}
2021-03-11 12:54:08,713 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 12:54:08,713 [main:66] - Compilation checking started
2021-03-11 12:54:09,199 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in 1..(0+1+2+3).toInt().or(803870091)) {
            if ("".length > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return prope3
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (Kla1()).equals("yebcw").equals("uewzx") }?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } ?: error((linkedMapOf<LinkedHashMap<Function2<List<Kla5>, Short, Kla4?>, Kla3>, Int?>())?.size.toString(-983659983) + (0+1+2).toLong().toString(1372578902) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope2.{ require(false)} = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:54:09,202 [main:103] - replacing (prope9, String)
2021-03-11 12:54:09,202 [main:38] - replacing prope9 String
2021-03-11 12:54:09,203 [main:42] - Getting value of type String
2021-03-11 12:54:09,356 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:54:09,360 [main:46] - GENERATED VALUE OF TYPE String = "ibogy"
2021-03-11 12:54:09,360 [main:49] - GENERATED IS CALL =false
2021-03-11 12:54:09,715 [main:55] - randomType = ArrayList<Kla3?>
2021-03-11 12:54:09,855 [main:302] - generating value of type = ArrayList<Kla3?> false depth = 0
2021-03-11 12:54:10,005 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Kla3?): ArrayList<Kla3?> = TODO()
2021-03-11 12:54:10,010 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Kla3?): ArrayList<Kla3?> = TODO()
2021-03-11 12:54:10,156 [main:302] - generating value of type = Kla3 false depth = 3
2021-03-11 12:54:10,160 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (Kla1()).equals("yebcw").equals("uewzx") }?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } ?: error((linkedMapOf<LinkedHashMap<Function2<List<Kla5>, Short, Kla4?>, Kla3>, Int?>())?.size.toString(-983659983) + (0+1+2).toLong().toString(1372578902) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}
2021-03-11 12:54:10,161 [main:95] - GENERATED = arrayListOf<Kla3?>(Kla3())
2021-03-11 12:54:10,284 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@2744eb81]
2021-03-11 12:54:10,284 [main:137] - GENERATING call of type public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3def229f]
2021-03-11 12:54:10,456 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:54:10,617 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:54:10,786 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:54:10,954 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:54:10,960 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:54:11,294 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 12:54:11,302 [main:95] - GENERATED = StringBuilder("dbmmd")
2021-03-11 12:54:11,445 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:54:11,624 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:54:11,785 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:54:11,790 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:54:12,133 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 12:54:12,299 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:54:12,304 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:54:12,673 [main:302] - generating value of type = String true depth = 6
2021-03-11 12:54:12,677 [main:95] - GENERATED = StringBuilder("fvjve")
2021-03-11 12:54:12,677 [main:95] - GENERATED = StringBuilder(StringBuilder("fvjve"))
2021-03-11 12:54:12,832 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 12:54:12,836 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 12:54:12,845 [main:66] - Generated call from random type = (arrayListOf<Kla3?>(Kla3())).toArray().joinToString("zycli", "uceud", StringBuilder("dbmmd"), 272673698, StringBuilder(StringBuilder("fvjve")), {a: T -> "hopsn"})
2021-03-11 12:54:12,845 [main:110] - replacement of prope9 of type String is (arrayListOf<Kla3?>(Kla3())).toArray().joinToString("zycli", "uceud", StringBuilder("dbmmd"), 272673698, StringBuilder(StringBuilder("fvjve")), {a: T -> "hopsn"})
2021-03-11 12:54:12,997 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:54:12,998 [main:66] - Compilation checking started
2021-03-11 12:54:13,520 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in 1..(0+1+2+3).toInt().or(803870091)) {
            if ("".length > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = (arrayListOf<Kla3?>(Kla3())).toArray().joinToString("zycli", "uceud", StringBuilder("dbmmd"), 272673698, StringBuilder(StringBuilder("fvjve")), {a: T -> "hopsn"})
    }

    return prope3
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (Kla1()).equals("yebcw").equals("uewzx") }?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } ?: error((linkedMapOf<LinkedHashMap<Function2<List<Kla5>, Short, Kla4?>, Kla3>, Int?>())?.size.toString(-983659983) + (0+1+2).toLong().toString(1372578902) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope2.prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:54:13,523 [main:103] - replacing ({ (Kla1()).equals("yebcw").equals("uewzx") }, Function0<Boolean>)
2021-03-11 12:54:13,523 [main:38] - replacing { (Kla1()).equals("yebcw").equals("uewzx") } Function0<Boolean>
2021-03-11 12:54:13,523 [main:42] - Getting value of type Function0<Boolean>
2021-03-11 12:54:13,669 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-11 12:54:13,673 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:54:13,677 [main:46] - GENERATED VALUE OF TYPE Function0<Boolean> = { false}
2021-03-11 12:54:13,677 [main:49] - GENERATED IS CALL =false
2021-03-11 12:54:14,013 [main:55] - randomType = ULong?
2021-03-11 12:54:14,154 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:54:14,192 [main:94] - GETTING Function0<Boolean> from String
2021-03-11 12:54:14,217 [main:94] - GETTING Function0<Boolean> from Int
2021-03-11 12:54:14,249 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 12:54:14,258 [main:94] - GETTING Function0<Boolean> from Int
2021-03-11 12:54:14,259 [main:94] - GETTING Function0<Boolean> from Int
2021-03-11 12:54:14,260 [main:94] - GETTING Function0<Boolean> from Int
2021-03-11 12:54:14,261 [main:94] - GETTING Function0<Boolean> from Int
2021-03-11 12:54:14,262 [main:94] - GETTING Function0<Boolean> from String
2021-03-11 12:54:14,262 [main:110] - replacement of { (Kla1()).equals("yebcw").equals("uewzx") } of type Function0<Boolean> is { false}
2021-03-11 12:54:14,431 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 12:54:14,432 [main:66] - Compilation checking started
2021-03-11 12:54:15,123 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in 1..(0+1+2+3).toInt().or(803870091)) {
            if ("".length > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return prope3
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } ?: error((linkedMapOf<LinkedHashMap<Function2<List<Kla5>, Short, Kla4?>, Kla3>, Int?>())?.size.toString(-983659983) + (0+1+2).toLong().toString(1372578902) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope2.prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:54:15,128 [main:103] - replacing (prope8 != null, Boolean)
2021-03-11 12:54:15,128 [main:38] - replacing prope8 != null Boolean
2021-03-11 12:54:15,128 [main:42] - Getting value of type Boolean
2021-03-11 12:54:15,300 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:54:15,304 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 12:54:15,304 [main:49] - GENERATED IS CALL =false
2021-03-11 12:54:17,030 [main:55] - randomType = Triple<A, String, Function1<Triple<Byte, Long?, List<Kla0?>?>, Function1<Kla0, Kla1>>>
2021-03-11 12:54:17,169 [main:302] - generating value of type = Triple<A, String, Function1<Triple<Byte, Long?, List<Kla0?>?>, Function1<Kla0, Kla1>>> false depth = 0
2021-03-11 12:54:17,320 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: A, second: String, third: Function1<Triple<Byte, Long?, List<Kla0?>?>, Function1<Kla0, Kla1>>): Triple<A, String, Function1<Triple<Byte, Long?, List<Kla0?>?>, Function1<Kla0, Kla1>>> = TODO()
2021-03-11 12:54:17,325 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: A, second: String, third: Function1<Triple<Byte, Long?, List<Kla0?>?>, Function1<Kla0, Kla1>>): Triple<A, String, Function1<Triple<Byte, Long?, List<Kla0?>?>, Function1<Kla0, Kla1>>> = TODO()
2021-03-11 12:54:17,514 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:54:17,518 [main:302] - generating value of type = Function1<Triple<Byte, Long?, List<Kla0?>?>, Function1<Kla0, Kla1>> false depth = 3
2021-03-11 12:54:17,522 [main:302] - generating value of type = Function1<Kla0, Kla1> false depth = 4
2021-03-11 12:54:17,526 [main:302] - generating value of type = Kla1 false depth = 5
2021-03-11 12:54:17,530 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}
2021-03-11 12:54:17,531 [main:95] - GENERATED = Triple<A, String, Function1<Triple<Byte, Long?, List<Kla0?>?>, Function1<Kla0, Kla1>>>(null, "isydu", {a: Triple<Byte, Long?, List<Kla0?>?> -> {a: Kla0 -> Kla1()}})
2021-03-11 12:54:17,561 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Triple[DeserializedSimpleFunctionDescriptor@67ccb68c]
2021-03-11 12:54:17,716 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:54:17,717 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@63c6a639]
2021-03-11 12:54:17,717 [main:66] - Generated call from random type = (Triple<A, String, Function1<Triple<Byte, Long?, List<Kla0?>?>, Function1<Kla0, Kla1>>>(null, "isydu", {a: Triple<Byte, Long?, List<Kla0?>?> -> {a: Kla0 -> Kla1()}})).equals("lruyl").not()
2021-03-11 12:54:17,717 [main:110] - replacement of prope8 != null of type Boolean is (Triple<A, String, Function1<Triple<Byte, Long?, List<Kla0?>?>, Function1<Kla0, Kla1>>>(null, "isydu", {a: Triple<Byte, Long?, List<Kla0?>?> -> {a: Kla0 -> Kla1()}})).equals("lruyl").not()
2021-03-11 12:54:17,869 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:54:17,870 [main:66] - Compilation checking started
2021-03-11 12:54:18,343 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in 1..(0+1+2+3).toInt().or(803870091)) {
            if ("".length > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return prope3
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while ((Triple<A, String, Function1<Triple<Byte, Long?, List<Kla0?>?>, Function1<Kla0, Kla1>>>(null, "isydu", {a: Triple<Byte, Long?, List<Kla0?>?> -> {a: Kla0 -> Kla1()}})).equals("lruyl").not()) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } ?: error((linkedMapOf<LinkedHashMap<Function2<List<Kla5>, Short, Kla4?>, Kla3>, Int?>())?.size.toString(-983659983) + (0+1+2).toLong().toString(1372578902) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope2.prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:54:18,346 [main:103] - replacing (prope7, Function0<Unit>)
2021-03-11 12:54:18,346 [main:38] - replacing prope7 Function0<Unit>
2021-03-11 12:54:18,346 [main:42] - Getting value of type Function0<Unit>
2021-03-11 12:54:18,514 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 12:54:18,520 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:54:18,675 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:54:18,680 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:54:19,219 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 12:54:19,224 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 12:54:19,228 [main:302] - generating value of type = Any false depth = 5
2021-03-11 12:54:19,229 [main:95] - GENERATED = check(true, { "tqbxj"})
2021-03-11 12:54:19,229 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true, { "tqbxj"})}
2021-03-11 12:54:19,229 [main:49] - GENERATED IS CALL =false
2021-03-11 12:54:19,422 [main:55] - randomType = ULong
2021-03-11 12:54:19,584 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:54:19,631 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:54:19,660 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:54:19,712 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:54:19,713 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:54:19,714 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:54:19,715 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:54:19,716 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 12:54:19,730 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:54:19,730 [main:110] - replacement of prope7 of type Function0<Unit> is { check(true, { "tqbxj"})}
2021-03-11 12:54:19,873 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 12:54:19,873 [main:66] - Compilation checking started
2021-03-11 12:54:20,309 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in 1..(0+1+2+3).toInt().or(803870091)) {
            if ("".length > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return prope3
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } ?: error((linkedMapOf<LinkedHashMap<Function2<List<Kla5>, Short, Kla4?>, Kla3>, Int?>())?.size.toString(-983659983) + (0+1+2).toLong().toString(1372578902) + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        { check(true, { "tqbxj"})} = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope2.prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:54:20,311 [main:103] - replacing ((linkedMapOf<LinkedHashMap<Function2<List<Kla5>, Short, Kla4?>, Kla3>, Int?>())?.size.toString(-983659983) + (0+1+2).toLong().toString(1372578902) + " has no state-machine " +
                prope4.joinToString(separator = "\n"), String)
2021-03-11 12:54:20,312 [main:38] - replacing (linkedMapOf<LinkedHashMap<Function2<List<Kla5>, Short, Kla4?>, Kla3>, Int?>())?.size.toString(-983659983) + (0+1+2).toLong().toString(1372578902) + " has no state-machine " +
                prope4.joinToString(separator = "\n") String
2021-03-11 12:54:20,312 [main:42] - Getting value of type String
2021-03-11 12:54:20,456 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:54:20,460 [main:46] - GENERATED VALUE OF TYPE String = "oquug"
2021-03-11 12:54:20,460 [main:49] - GENERATED IS CALL =false
2021-03-11 12:54:20,468 [main:55] - randomType = Short
2021-03-11 12:54:20,609 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:54:20,648 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:54:20,649 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:54:20,844 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:54:20,851 [main:66] - Generated call from random type = (7240).toInt().toString(-1218478143)
2021-03-11 12:54:20,851 [main:94] - GETTING String from String
2021-03-11 12:54:20,891 [main:101] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7e5ed9ce]]
2021-03-11 12:54:20,892 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7e5ed9ce]
2021-03-11 12:54:21,075 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:54:21,075 [main:105] - GENERATED CALL = (str).plus("nyubv")
2021-03-11 12:54:21,076 [main:101] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a3ba1fe]]
2021-03-11 12:54:21,076 [main:137] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a3ba1fe]
2021-03-11 12:54:21,248 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:54:21,407 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:54:21,411 [main:105] - GENERATED CALL = (str).padEnd(-1747207282, '')
2021-03-11 12:54:21,411 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c7e5dcd]]
2021-03-11 12:54:21,411 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c7e5dcd]
2021-03-11 12:54:21,411 [main:105] - GENERATED CALL = (str).uppercase()
2021-03-11 12:54:21,411 [main:101] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6921c9d]]
2021-03-11 12:54:21,411 [main:137] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6921c9d]
2021-03-11 12:54:21,571 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:54:21,724 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:54:21,729 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:54:22,103 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:54:22,108 [main:95] - GENERATED = StringBuilder(1790503879)
2021-03-11 12:54:22,108 [main:105] - GENERATED CALL = (str).removePrefix(StringBuilder(1790503879))
2021-03-11 12:54:22,108 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@709de1db]]
2021-03-11 12:54:22,108 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:54:22,267 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:54:22,431 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:54:22,435 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@709de1db]
2021-03-11 12:54:22,579 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 12:54:22,727 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 12:54:22,732 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 12:54:23,091 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:54:23,096 [main:95] - GENERATED = Regex("bbpey")
2021-03-11 12:54:23,265 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:54:23,270 [main:105] - GENERATED CALL = (str).subSequence(-571418463, -298302240).replaceFirst(Regex("bbpey"), "veroe")
2021-03-11 12:54:23,270 [main:101] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e343344]]
2021-03-11 12:54:23,270 [main:137] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e343344]
2021-03-11 12:54:23,435 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:54:23,589 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:54:23,593 [main:105] - GENERATED CALL = (str).substringAfter('綆', "cdino")
2021-03-11 12:54:23,594 [main:101] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@255dc6aa]]
2021-03-11 12:54:23,594 [main:137] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@255dc6aa]
2021-03-11 12:54:23,735 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:54:23,739 [main:105] - GENERATED CALL = (str).prependIndent("taddy")
2021-03-11 12:54:23,739 [main:101] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a0c6009]]
2021-03-11 12:54:23,739 [main:137] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a0c6009]
2021-03-11 12:54:23,877 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:54:23,881 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:54:23,885 [main:105] - GENERATED CALL = (str).takeLastWhile({a: Char -> false})
2021-03-11 12:54:23,885 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@340b14f4]]
2021-03-11 12:54:23,885 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@340b14f4]
2021-03-11 12:54:24,053 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:54:24,210 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:54:24,372 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:54:24,541 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:54:24,547 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 12:54:24,866 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:54:24,870 [main:95] - GENERATED = StringBuilder("lviop")
2021-03-11 12:54:24,870 [main:105] - GENERATED CALL = (str).replaceRange(91919107, -1358067357, StringBuilder("lviop"))
2021-03-11 12:54:24,870 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1121d038]]
2021-03-11 12:54:24,870 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:54:25,036 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:54:25,190 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:54:25,194 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1121d038]
2021-03-11 12:54:25,345 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 12:54:25,509 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 12:54:25,514 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 12:54:25,835 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:54:25,839 [main:95] - GENERATED = Regex("aaebn")
2021-03-11 12:54:26,005 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-11 12:54:26,009 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 12:54:26,169 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:54:26,174 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 12:54:26,526 [main:302] - generating value of type = Int true depth = 4
2021-03-11 12:54:26,531 [main:95] - GENERATED = StringBuilder(-135763615)
2021-03-11 12:54:26,531 [main:105] - GENERATED CALL = (str).subSequence(928865143, 695620955).replace(Regex("aaebn"), {a: MatchResult -> StringBuilder(-135763615)})
2021-03-11 12:54:26,531 [main:110] - replacement of (linkedMapOf<LinkedHashMap<Function2<List<Kla5>, Short, Kla4?>, Kla3>, Int?>())?.size.toString(-983659983) + (0+1+2).toLong().toString(1372578902) + " has no state-machine " +
                prope4.joinToString(separator = "\n") of type String is (str).substringAfter('綆', "cdino")
2021-03-11 12:54:26,675 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:54:26,675 [main:66] - Compilation checking started
2021-03-11 12:54:27,238 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in 1..(0+1+2+3).toInt().or(803870091)) {
            if ("".length > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return prope3
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope2.prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:54:27,241 [main:103] - replacing (c, Continuation<*>)
2021-03-11 12:54:27,241 [main:38] - replacing c Continuation<*>
2021-03-11 12:54:27,241 [main:42] - Getting value of type Continuation<*>
2021-03-11 12:54:27,375 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 12:54:27,543 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 12:54:27,546 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 12:54:28,058 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 12:54:28,204 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:54:28,207 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:54:28,556 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 12:54:28,715 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:54:28,719 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:54:29,218 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-11 12:54:29,375 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 12:54:29,379 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 12:54:29,926 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 12:54:29,926 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:54:29,926 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:54:29,926 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 12:54:29,926 [main:46] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 12:54:30,256 [main:55] - randomType = ULong?
2021-03-11 12:54:30,395 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:54:30,428 [main:94] - GETTING Continuation<*> from String
2021-03-11 12:54:30,445 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:54:30,476 [main:94] - GETTING Continuation<*> from Boolean
2021-03-11 12:54:30,484 [main:94] - GETTING Continuation<*> from String
2021-03-11 12:54:30,485 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:54:30,486 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:54:30,486 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:54:30,487 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:54:30,487 [main:107] - Cant find and generate replacement for c type Continuation<*>
2021-03-11 12:54:30,487 [main:103] - replacing (prope3, Result<Any?>)
2021-03-11 12:54:30,487 [main:38] - replacing prope3 Result<Any?>
2021-03-11 12:54:30,487 [main:42] - Getting value of type Result<Any?>
2021-03-11 12:54:30,649 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-11 12:54:30,803 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 12:54:30,807 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 12:54:31,146 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-11 12:54:31,149 [main:302] - generating value of type = Any false depth = 4
2021-03-11 12:54:31,149 [main:95] - GENERATED = runCatching<Any?>({ "xugnp"})
2021-03-11 12:54:31,149 [main:46] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ "xugnp"})
2021-03-11 12:54:31,149 [main:49] - GENERATED IS CALL =true
2021-03-11 12:54:31,155 [main:55] - randomType = Double
2021-03-11 12:54:31,297 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:54:31,352 [main:94] - GETTING Result<Any?> from Int
2021-03-11 12:54:31,402 [main:94] - GETTING Result<Any?> from String
2021-03-11 12:54:31,429 [main:94] - GETTING Result<Any?> from Int
2021-03-11 12:54:31,430 [main:94] - GETTING Result<Any?> from Int
2021-03-11 12:54:31,432 [main:94] - GETTING Result<Any?> from Boolean
2021-03-11 12:54:31,444 [main:94] - GETTING Result<Any?> from Int
2021-03-11 12:54:31,445 [main:94] - GETTING Result<Any?> from Int
2021-03-11 12:54:31,447 [main:94] - GETTING Result<Any?> from String
2021-03-11 12:54:31,447 [main:110] - replacement of prope3 of type Result<Any?> is runCatching<Any?>({ "xugnp"})
2021-03-11 12:54:31,586 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:54:31,586 [main:66] - Compilation checking started
2021-03-11 12:54:32,161 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in 1..(0+1+2+3).toInt().or(803870091)) {
            if ("".length > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return prope3
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope2.prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:54:32,163 [main:103] - replacing (exceptionOrNull(), Throwable?)
2021-03-11 12:54:32,164 [main:38] - replacing exceptionOrNull() Throwable?
2021-03-11 12:54:32,164 [main:42] - Getting value of type Throwable?
2021-03-11 12:54:32,376 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 12:54:32,538 [main:43] - GENERATING CALL OF fun Exception(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 12:54:32,542 [main:61] - WITHOUT TYPE PARAMS = fun Exception(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 12:54:33,039 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:54:33,042 [main:302] - generating value of type = Throwable false depth = 3
2021-03-11 12:54:33,189 [main:43] - GENERATING CALL OF fun UninitializedPropertyAccessException(message: kotlin.String?): Throwable = TODO()
2021-03-11 12:54:33,193 [main:61] - WITHOUT TYPE PARAMS = fun UninitializedPropertyAccessException(message: kotlin.String?): Throwable = TODO()
2021-03-11 12:54:33,549 [main:95] - GENERATED = UninitializedPropertyAccessException(null)
2021-03-11 12:54:33,549 [main:95] - GENERATED = Exception("zxyzw", UninitializedPropertyAccessException(null))
2021-03-11 12:54:33,549 [main:46] - GENERATED VALUE OF TYPE Throwable? = Exception("zxyzw", UninitializedPropertyAccessException(null))
2021-03-11 12:54:33,550 [main:49] - GENERATED IS CALL =true
2021-03-11 12:54:33,925 [main:55] - randomType = Triple<UByte, String?, A>
2021-03-11 12:54:34,070 [main:302] - generating value of type = Triple<UByte, String?, A> false depth = 0
2021-03-11 12:54:34,216 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: UByte, second: String?, third: A): Triple<UByte, String?, A> = TODO()
2021-03-11 12:54:34,220 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: UByte, second: String?, third: A): Triple<UByte, String?, A> = TODO()
2021-03-11 12:54:34,394 [main:302] - generating value of type = UByte true depth = 3
2021-03-11 12:54:34,397 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:54:34,399 [main:302] - generating value of type = A false depth = 3
2021-03-11 12:54:34,402 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:54:34,554 [main:194] - Type params = []
2021-03-11 12:54:34,707 [main:302] - generating value of type = Int true depth = 5
2021-03-11 12:54:34,710 [main:302] - generating value of type = String true depth = 5
2021-03-11 12:54:34,713 [main:95] - GENERATED = Triple<UByte, String?, A>(39.toUByte(), "zzesn", A(-186729008, "micsk"))
2021-03-11 12:54:34,731 [main:94] - GETTING Throwable? from Boolean
2021-03-11 12:54:34,744 [main:94] - GETTING Throwable? from String
2021-03-11 12:54:34,770 [main:94] - GETTING Throwable? from Int
2021-03-11 12:54:34,814 [main:94] - GETTING Throwable? from Int
2021-03-11 12:54:34,815 [main:94] - GETTING Throwable? from Int
2021-03-11 12:54:34,815 [main:94] - GETTING Throwable? from Int
2021-03-11 12:54:34,816 [main:94] - GETTING Throwable? from Int
2021-03-11 12:54:34,817 [main:94] - GETTING Throwable? from String
2021-03-11 12:54:34,817 [main:110] - replacement of exceptionOrNull() of type Throwable? is Exception("zxyzw", UninitializedPropertyAccessException(null))
2021-03-11 12:54:34,973 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:54:34,974 [main:66] - Compilation checking started
2021-03-11 12:54:35,383 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in 1..(0+1+2+3).toInt().or(803870091)) {
            if ("".length > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return prope3
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope3.Exception("zxyzw", UninitializedPropertyAccessException(null))?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope2.prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:54:35,386 [main:103] - replacing (getOrThrow(), Ty0)
2021-03-11 12:54:35,386 [main:38] - replacing getOrThrow() Ty0
2021-03-11 12:54:35,386 [main:42] - Getting value of type Ty0
2021-03-11 12:54:35,536 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 12:54:35,541 [main:46] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 12:54:36,458 [main:55] - randomType = HashMap<Kla2<UInt>, Collection<Kla1?>>
2021-03-11 12:54:36,598 [main:302] - generating value of type = HashMap<Kla2<UInt>, Collection<Kla1?>> false depth = 0
2021-03-11 12:54:36,770 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Kla2<UInt>, Collection<Kla1?>>): HashMap<Kla2<UInt>, Collection<Kla1?>> = TODO()
2021-03-11 12:54:36,774 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Kla2<UInt>, Collection<Kla1?>>): HashMap<Kla2<UInt>, Collection<Kla1?>> = TODO()
2021-03-11 12:54:36,933 [main:302] - generating value of type = Pair<Kla2<UInt>, Collection<Kla1?>> false depth = 3
2021-03-11 12:54:37,100 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Kla2<UInt>, second: Collection<Kla1?>): Pair<Kla2<UInt>, Collection<Kla1?>> = TODO()
2021-03-11 12:54:37,104 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Kla2<UInt>, second: Collection<Kla1?>): Pair<Kla2<UInt>, Collection<Kla1?>> = TODO()
2021-03-11 12:54:37,275 [main:302] - generating value of type = Kla2<UInt> false depth = 6
2021-03-11 12:54:37,278 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 12:54:37,970 [main:302] - generating value of type = Kla5 false depth = 8
2021-03-11 12:54:37,973 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope2.prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}
2021-03-11 12:54:37,974 [main:302] - generating value of type = Collection<Kla1?> false depth = 6
2021-03-11 12:54:38,137 [main:43] - GENERATING CALL OF fun UShortArray(size: kotlin.Int): Collection<Kla1?> = TODO()
2021-03-11 12:54:38,141 [main:61] - WITHOUT TYPE PARAMS = fun UShortArray(size: kotlin.Int): Collection<Kla1?> = TODO()
2021-03-11 12:54:38,468 [main:302] - generating value of type = Int true depth = 9
2021-03-11 12:54:38,471 [main:95] - GENERATED = UShortArray(-660703090)
2021-03-11 12:54:38,471 [main:95] - GENERATED = Pair<Kla2<UInt>, Collection<Kla1?>>(Kla5, UShortArray(-660703090))
2021-03-11 12:54:38,472 [main:95] - GENERATED = linkedMapOf<Kla2<UInt>, Collection<Kla1?>>(Pair<Kla2<UInt>, Collection<Kla1?>>(Kla5, UShortArray(-660703090)))
2021-03-11 12:54:38,628 [main:94] - GETTING Ty0 from Int
2021-03-11 12:54:38,659 [main:94] - GETTING Ty0 from String
2021-03-11 12:54:38,676 [main:94] - GETTING Ty0 from String
2021-03-11 12:54:38,676 [main:94] - GETTING Ty0 from Int
2021-03-11 12:54:38,677 [main:94] - GETTING Ty0 from Int
2021-03-11 12:54:38,677 [main:94] - GETTING Ty0 from Int
2021-03-11 12:54:38,678 [main:94] - GETTING Ty0 from Int
2021-03-11 12:54:38,679 [main:94] - GETTING Ty0 from Boolean
2021-03-11 12:54:38,688 [main:107] - Cant find and generate replacement for getOrThrow() type Ty0
2021-03-11 12:54:38,688 [main:103] - replacing (prope3.getOrThrow(), Ty0)
2021-03-11 12:54:38,688 [main:38] - replacing prope3.getOrThrow() Ty0
2021-03-11 12:54:38,688 [main:42] - Getting value of type Ty0
2021-03-11 12:54:38,850 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 12:54:38,855 [main:46] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 12:54:38,861 [main:55] - randomType = Boolean
2021-03-11 12:54:39,012 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:54:39,028 [main:94] - GETTING Ty0 from String
2021-03-11 12:54:39,058 [main:94] - GETTING Ty0 from Int
2021-03-11 12:54:39,102 [main:94] - GETTING Ty0 from String
2021-03-11 12:54:39,102 [main:94] - GETTING Ty0 from Int
2021-03-11 12:54:39,103 [main:94] - GETTING Ty0 from Int
2021-03-11 12:54:39,104 [main:94] - GETTING Ty0 from Int
2021-03-11 12:54:39,104 [main:94] - GETTING Ty0 from Boolean
2021-03-11 12:54:39,116 [main:94] - GETTING Ty0 from Int
2021-03-11 12:54:39,117 [main:107] - Cant find and generate replacement for prope3.getOrThrow() type Ty0
2021-03-11 12:54:39,117 [main:103] - replacing (exceptionOrNull(), Throwable?)
2021-03-11 12:54:39,117 [main:38] - replacing exceptionOrNull() Throwable?
2021-03-11 12:54:39,117 [main:42] - Getting value of type Throwable?
2021-03-11 12:54:39,267 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 12:54:39,274 [main:46] - GENERATED VALUE OF TYPE Throwable? = Error()
2021-03-11 12:54:39,274 [main:49] - GENERATED IS CALL =true
2021-03-11 12:54:39,452 [main:55] - randomType = UShort
2021-03-11 12:54:39,594 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 12:54:39,640 [main:94] - GETTING Throwable? from String
2021-03-11 12:54:39,667 [main:94] - GETTING Throwable? from Int
2021-03-11 12:54:39,697 [main:94] - GETTING Throwable? from String
2021-03-11 12:54:39,698 [main:94] - GETTING Throwable? from Boolean
2021-03-11 12:54:39,706 [main:94] - GETTING Throwable? from Int
2021-03-11 12:54:39,707 [main:94] - GETTING Throwable? from Int
2021-03-11 12:54:39,708 [main:94] - GETTING Throwable? from Int
2021-03-11 12:54:39,708 [main:94] - GETTING Throwable? from Int
2021-03-11 12:54:39,708 [main:110] - replacement of exceptionOrNull() of type Throwable? is Error()
2021-03-11 12:54:39,846 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:54:39,846 [main:66] - Compilation checking started
2021-03-11 12:54:40,228 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in 1..(0+1+2+3).toInt().or(803870091)) {
            if ("".length > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return prope3
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope3.Error()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope2.prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:54:40,231 [main:103] - replacing (1, Int)
2021-03-11 12:54:40,231 [main:38] - replacing 1 Int
2021-03-11 12:54:40,231 [main:42] - Getting value of type Int
2021-03-11 12:54:40,394 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:54:40,397 [main:46] - GENERATED VALUE OF TYPE Int = 1201627035
2021-03-11 12:54:40,397 [main:49] - GENERATED IS CALL =false
2021-03-11 12:54:40,758 [main:55] - randomType = LinkedHashMap<Char, Short>
2021-03-11 12:54:40,919 [main:302] - generating value of type = LinkedHashMap<Char, Short> false depth = 0
2021-03-11 12:54:41,077 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Char, Short> = TODO()
2021-03-11 12:54:41,081 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Char, Short> = TODO()
2021-03-11 12:54:41,233 [main:95] - GENERATED = linkedMapOf<Char, Short>()
2021-03-11 12:54:41,356 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7d291fed]
2021-03-11 12:54:41,357 [main:66] - Generated call from random type = (linkedMapOf<Char, Short>()).size.countOneBits()
2021-03-11 12:54:41,357 [main:110] - replacement of 1 of type Int is (linkedMapOf<Char, Short>()).size.countOneBits()
2021-03-11 12:54:41,517 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:54:41,518 [main:66] - Compilation checking started
2021-03-11 12:54:42,225 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ("".length > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return prope3
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope2.prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:54:42,227 [main:103] - replacing (Kla4(), Kla4)
2021-03-11 12:54:42,227 [main:38] - replacing Kla4() Kla4
2021-03-11 12:54:42,227 [main:42] - Getting value of type Kla4
2021-03-11 12:54:42,373 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 12:54:42,375 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 12:54:42,376 [main:46] - GENERATED VALUE OF TYPE Kla4 = Kla4()
2021-03-11 12:54:42,376 [main:49] - GENERATED IS CALL =true
2021-03-11 12:54:42,381 [main:55] - randomType = Double
2021-03-11 12:54:42,522 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:54:42,554 [main:94] - GETTING Kla4 from Int
2021-03-11 12:54:42,586 [main:94] - GETTING Kla4 from Int
2021-03-11 12:54:42,587 [main:94] - GETTING Kla4 from Boolean
2021-03-11 12:54:42,595 [main:94] - GETTING Kla4 from String
2021-03-11 12:54:42,611 [main:94] - GETTING Kla4 from Int
2021-03-11 12:54:42,612 [main:94] - GETTING Kla4 from Int
2021-03-11 12:54:42,612 [main:94] - GETTING Kla4 from Int
2021-03-11 12:54:42,613 [main:94] - GETTING Kla4 from String
2021-03-11 12:54:42,613 [main:110] - replacement of Kla4() of type Kla4 is Kla4()
2021-03-11 12:54:42,751 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:54:42,754 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 12:54:42,754 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 12:54:42,754 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 12:54:42,897 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 12:54:42,902 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 12:54:43,112 [main:55] - randomType = Kla1?
2021-03-11 12:54:43,263 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 12:54:43,266 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}
2021-03-11 12:54:43,290 [main:66] - Generated call from random type = (Kla1())?.context
2021-03-11 12:54:43,291 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:54:43,349 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:54:43,382 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:54:43,383 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:54:43,384 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:54:43,385 [main:94] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 12:54:43,400 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:54:43,401 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:54:43,401 [main:110] - replacement of EmptyCoroutineContext of type EmptyCoroutineContext is (Kla1())?.context
2021-03-11 12:54:43,574 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 12:54:43,575 [main:66] - Compilation checking started
2021-03-11 12:54:44,174 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ("".length > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return prope3
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope2.prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:54:44,178 [main:103] - replacing (getOrThrow(), Ty0)
2021-03-11 12:54:44,178 [main:38] - replacing getOrThrow() Ty0
2021-03-11 12:54:44,178 [main:42] - Getting value of type Ty0
2021-03-11 12:54:44,349 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 12:54:44,354 [main:46] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 12:54:45,045 [main:55] - randomType = Map<Kla5, ULong?>
2021-03-11 12:54:45,046 [main:94] - GETTING Ty0 from Int
2021-03-11 12:54:45,101 [main:94] - GETTING Ty0 from String
2021-03-11 12:54:45,132 [main:94] - GETTING Ty0 from Int
2021-03-11 12:54:45,133 [main:94] - GETTING Ty0 from Int
2021-03-11 12:54:45,133 [main:94] - GETTING Ty0 from Int
2021-03-11 12:54:45,134 [main:94] - GETTING Ty0 from Boolean
2021-03-11 12:54:45,148 [main:94] - GETTING Ty0 from String
2021-03-11 12:54:45,149 [main:94] - GETTING Ty0 from Int
2021-03-11 12:54:45,149 [main:107] - Cant find and generate replacement for getOrThrow() type Ty0
2021-03-11 12:54:45,149 [main:103] - replacing (prope2, Kla4)
2021-03-11 12:54:45,149 [main:38] - replacing prope2 Kla4
2021-03-11 12:54:45,149 [main:42] - Getting value of type Kla4
2021-03-11 12:54:45,314 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 12:54:45,316 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 12:54:45,317 [main:46] - GENERATED VALUE OF TYPE Kla4 = Kla4()
2021-03-11 12:54:45,317 [main:49] - GENERATED IS CALL =true
2021-03-11 12:54:45,322 [main:55] - randomType = Short
2021-03-11 12:54:45,467 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:54:45,524 [main:94] - GETTING Kla4 from Int
2021-03-11 12:54:45,582 [main:94] - GETTING Kla4 from Int
2021-03-11 12:54:45,582 [main:94] - GETTING Kla4 from Int
2021-03-11 12:54:45,583 [main:94] - GETTING Kla4 from Int
2021-03-11 12:54:45,584 [main:94] - GETTING Kla4 from Int
2021-03-11 12:54:45,584 [main:94] - GETTING Kla4 from String
2021-03-11 12:54:45,619 [main:94] - GETTING Kla4 from Boolean
2021-03-11 12:54:45,635 [main:94] - GETTING Kla4 from String
2021-03-11 12:54:45,635 [main:110] - replacement of prope2 of type Kla4 is Kla4()
2021-03-11 12:54:45,775 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:54:45,775 [main:66] - Compilation checking started
2021-03-11 12:54:46,372 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ("".length > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return prope3
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:54:46,376 [main:103] - replacing (prope7, Function0<Unit>)
2021-03-11 12:54:46,376 [main:38] - replacing prope7 Function0<Unit>
2021-03-11 12:54:46,376 [main:42] - Getting value of type Function0<Unit>
2021-03-11 12:54:46,566 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 12:54:46,569 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:54:46,575 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 12:54:46,576 [main:49] - GENERATED IS CALL =false
2021-03-11 12:54:46,582 [main:55] - randomType = String
2021-03-11 12:54:46,754 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:54:46,778 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:54:46,815 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:54:46,816 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 12:54:46,826 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:54:46,828 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:54:46,828 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:54:46,852 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:54:46,853 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:54:46,853 [main:110] - replacement of prope7 of type Function0<Unit> is { println()}
2021-03-11 12:54:47,014 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 12:54:47,014 [main:66] - Compilation checking started
2021-03-11 12:54:47,490 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ("".length > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return prope3
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        { println()}()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:54:47,493 [main:103] - replacing (prope7, Function0<Unit>)
2021-03-11 12:54:47,493 [main:38] - replacing prope7 Function0<Unit>
2021-03-11 12:54:47,493 [main:42] - Getting value of type Function0<Unit>
2021-03-11 12:54:47,651 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 12:54:47,653 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:54:47,808 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:54:47,811 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:54:48,161 [main:302] - generating value of type = Any false depth = 4
2021-03-11 12:54:48,161 [main:95] - GENERATED = println("oykre")
2021-03-11 12:54:48,162 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println("oykre")}
2021-03-11 12:54:48,163 [main:49] - GENERATED IS CALL =false
2021-03-11 12:54:48,521 [main:55] - randomType = Kla2<Int>
2021-03-11 12:54:48,693 [main:302] - generating value of type = Kla2<Int> false depth = 0
2021-03-11 12:54:48,695 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 12:54:49,241 [main:302] - generating value of type = Kla5 false depth = 2
2021-03-11 12:54:49,244 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}
2021-03-11 12:54:49,269 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:54:49,325 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:54:49,327 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:54:49,357 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:54:49,358 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:54:49,359 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 12:54:49,374 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:54:49,375 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:54:49,375 [main:110] - replacement of prope7 of type Function0<Unit> is { println("oykre")}
2021-03-11 12:54:49,533 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 12:54:49,534 [main:66] - Compilation checking started
2021-03-11 12:54:49,973 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ("".length > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return prope3
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        { println("oykre")} = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 12:54:49,976 [main:103] - replacing (exception, Throwable)
2021-03-11 12:54:49,977 [main:38] - replacing exception Throwable
2021-03-11 12:54:49,977 [main:42] - Getting value of type Throwable
2021-03-11 12:54:50,120 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 12:54:50,267 [main:43] - GENERATING CALL OF fun IllegalStateException(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 12:54:50,271 [main:61] - WITHOUT TYPE PARAMS = fun IllegalStateException(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 12:54:50,795 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:54:50,798 [main:302] - generating value of type = Throwable false depth = 3
2021-03-11 12:54:50,971 [main:43] - GENERATING CALL OF fun UnsupportedOperationException(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 12:54:50,976 [main:61] - WITHOUT TYPE PARAMS = fun UnsupportedOperationException(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 12:54:51,313 [main:302] - generating value of type = Throwable false depth = 6
2021-03-11 12:54:51,320 [main:95] - GENERATED = UnsupportedOperationException(NoWhenBranchMatchedException())
2021-03-11 12:54:51,320 [main:95] - GENERATED = IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
2021-03-11 12:54:51,320 [main:46] - GENERATED VALUE OF TYPE Throwable = IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
2021-03-11 12:54:51,320 [main:49] - GENERATED IS CALL =true
2021-03-11 12:54:51,853 [main:55] - randomType = Map<Float, UInt>
2021-03-11 12:54:51,854 [main:94] - GETTING Throwable from String
2021-03-11 12:54:51,883 [main:94] - GETTING Throwable from Int
2021-03-11 12:54:51,939 [main:94] - GETTING Throwable from Int
2021-03-11 12:54:51,940 [main:94] - GETTING Throwable from Boolean
2021-03-11 12:54:51,955 [main:94] - GETTING Throwable from String
2021-03-11 12:54:51,956 [main:94] - GETTING Throwable from Int
2021-03-11 12:54:51,957 [main:94] - GETTING Throwable from Int
2021-03-11 12:54:51,957 [main:94] - GETTING Throwable from Int
2021-03-11 12:54:51,957 [main:110] - replacement of exception of type Throwable is IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
2021-03-11 12:54:52,121 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:54:52,122 [main:66] - Compilation checking started
2021-03-11 12:54:52,767 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ("".length > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return prope3
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:54:52,769 [main:103] - replacing ("".length, Int)
2021-03-11 12:54:52,770 [main:38] - replacing "".length Int
2021-03-11 12:54:52,770 [main:42] - Getting value of type Int
2021-03-11 12:54:52,914 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:54:52,917 [main:46] - GENERATED VALUE OF TYPE Int = 8834997
2021-03-11 12:54:52,917 [main:49] - GENERATED IS CALL =false
2021-03-11 12:54:53,281 [main:55] - randomType = MutableMap<Kla5, Boolean>
2021-03-11 12:54:53,282 [main:94] - GETTING Int from Boolean
2021-03-11 12:54:53,292 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2814a4a]]
2021-03-11 12:54:53,292 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:54:53,448 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:54:53,451 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(true).sign
2021-03-11 12:54:53,451 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c9f5998]]
2021-03-11 12:54:53,451 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:54:53,612 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:54:53,615 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c9f5998]
2021-03-11 12:54:53,780 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:54:53,783 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).shl(-1566678668)
2021-03-11 12:54:53,783 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@d0efe34]]
2021-03-11 12:54:53,783 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:54:53,932 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:54:53,934 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@d0efe34]
2021-03-11 12:54:54,082 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:54:54,085 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(true).rotateRight(697143920)
2021-03-11 12:54:54,085 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e53c7a]]
2021-03-11 12:54:54,085 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:54:54,255 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:54:54,258 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35e53c7a]
2021-03-11 12:54:54,413 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:54:54,416 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).shr(-1911158759)
2021-03-11 12:54:54,416 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36845587]]
2021-03-11 12:54:54,416 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:54:54,570 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:54:54,573 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36845587]
2021-03-11 12:54:54,734 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:54:54,737 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(true).xor(-1333981757)
2021-03-11 12:54:54,738 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18626c8c]]
2021-03-11 12:54:54,738 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:54:54,887 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:54:54,889 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18626c8c]
2021-03-11 12:54:55,037 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:54:55,040 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).plus(32)
2021-03-11 12:54:55,040 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ed6eedb]]
2021-03-11 12:54:55,040 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:54:55,211 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:54:55,214 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ed6eedb]
2021-03-11 12:54:55,372 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:54:55,375 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(true).div(125)
2021-03-11 12:54:55,375 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d63158f]]
2021-03-11 12:54:55,375 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:54:55,529 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:54:55,532 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d63158f]
2021-03-11 12:54:55,532 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).dec()
2021-03-11 12:54:55,532 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36bf0f77]]
2021-03-11 12:54:55,532 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:54:55,693 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:54:55,696 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36bf0f77]
2021-03-11 12:54:55,696 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).takeHighestOneBit()
2021-03-11 12:54:55,696 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@446340cf]]
2021-03-11 12:54:55,696 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:54:55,843 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:54:55,846 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@446340cf]
2021-03-11 12:54:55,846 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(true).takeLowestOneBit()
2021-03-11 12:54:55,846 [main:110] - replacement of "".length of type Int is (sum == 0+1+2+3+4).compareTo(true).xor(-1333981757)
2021-03-11 12:54:55,993 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:54:55,993 [main:66] - Compilation checking started
2021-03-11 12:54:56,598 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return prope3
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:54:56,601 [main:103] - replacing (prope3.getOrThrow(), Ty0)
2021-03-11 12:54:56,601 [main:38] - replacing prope3.getOrThrow() Ty0
2021-03-11 12:54:56,601 [main:42] - Getting value of type Ty0
2021-03-11 12:54:56,777 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 12:54:56,782 [main:46] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 12:54:56,789 [main:55] - randomType = Char
2021-03-11 12:54:56,953 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:54:56,987 [main:94] - GETTING Ty0 from Int
2021-03-11 12:54:57,035 [main:94] - GETTING Ty0 from Int
2021-03-11 12:54:57,035 [main:94] - GETTING Ty0 from Int
2021-03-11 12:54:57,036 [main:94] - GETTING Ty0 from String
2021-03-11 12:54:57,062 [main:94] - GETTING Ty0 from Boolean
2021-03-11 12:54:57,074 [main:94] - GETTING Ty0 from Int
2021-03-11 12:54:57,074 [main:94] - GETTING Ty0 from String
2021-03-11 12:54:57,075 [main:94] - GETTING Ty0 from Int
2021-03-11 12:54:57,075 [main:107] - Cant find and generate replacement for prope3.getOrThrow() type Ty0
2021-03-11 12:54:57,075 [main:103] - replacing (prope3, String)
2021-03-11 12:54:57,075 [main:38] - replacing prope3 String
2021-03-11 12:54:57,075 [main:42] - Getting value of type String
2021-03-11 12:54:57,244 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:54:57,247 [main:46] - GENERATED VALUE OF TYPE String = "jetor"
2021-03-11 12:54:57,247 [main:49] - GENERATED IS CALL =false
2021-03-11 12:54:57,253 [main:55] - randomType = Long
2021-03-11 12:54:57,404 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:54:57,455 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@46af30c9]
2021-03-11 12:54:57,456 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]
2021-03-11 12:54:57,601 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:54:57,604 [main:66] - Generated call from random type = (2503673117874613500).toChar().plus("snxwk")
2021-03-11 12:54:57,604 [main:110] - replacement of prope3 of type String is (2503673117874613500).toChar().plus("snxwk")
2021-03-11 12:54:57,772 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:54:57,772 [main:66] - Compilation checking started
2021-03-11 12:54:58,489 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:54:58,491 [main:103] - replacing (prope8 != null, Boolean)
2021-03-11 12:54:58,492 [main:38] - replacing prope8 != null Boolean
2021-03-11 12:54:58,492 [main:42] - Getting value of type Boolean
2021-03-11 12:54:58,651 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:54:58,654 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 12:54:58,654 [main:49] - GENERATED IS CALL =false
2021-03-11 12:54:58,665 [main:55] - randomType = Kla4
2021-03-11 12:54:58,814 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 12:54:58,817 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 12:54:58,824 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla4[DeserializedSimpleFunctionDescriptor@72f578da]
2021-03-11 12:54:58,973 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:54:58,973 [main:66] - Generated call from random type = (Kla4()).equals("ftpqv")
2021-03-11 12:54:58,974 [main:94] - GETTING Boolean from String
2021-03-11 12:54:58,991 [main:101] - Case = [public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52d76302]]
2021-03-11 12:54:58,992 [main:137] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52d76302]
2021-03-11 12:54:59,142 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:54:59,321 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:54:59,324 [main:105] - GENERATED CALL = (str).startsWith("xjcqu", true)
2021-03-11 12:54:59,324 [main:101] - Case = [public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58b76212]]
2021-03-11 12:54:59,325 [main:137] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58b76212]
2021-03-11 12:54:59,484 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:54:59,649 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:54:59,652 [main:105] - GENERATED CALL = (str).contains('ꍝ', false)
2021-03-11 12:54:59,653 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c0f4df1]]
2021-03-11 12:54:59,653 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:54:59,839 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:54:59,993 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:54:59,996 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c0f4df1]
2021-03-11 12:55:00,150 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:55:00,153 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:55:00,156 [main:105] - GENERATED CALL = (str).subSequence(-595809912, -2068206981).all({a: Char -> true})
2021-03-11 12:55:00,156 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21280b00], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@628f3477]]
2021-03-11 12:55:00,156 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21280b00]
2021-03-11 12:55:00,335 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:55:00,337 [main:137] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@628f3477]
2021-03-11 12:55:00,338 [main:105] - GENERATED CALL = (str).get(1212496374).isSurrogate()
2021-03-11 12:55:00,338 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4df1bec], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4063f07e]]
2021-03-11 12:55:00,338 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4df1bec]
2021-03-11 12:55:00,505 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:55:00,505 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4063f07e]
2021-03-11 12:55:00,668 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:55:00,671 [main:105] - GENERATED CALL = (str).equals("kudwt").and(false)
2021-03-11 12:55:00,671 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21280b00], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e8ffc26]]
2021-03-11 12:55:00,671 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21280b00]
2021-03-11 12:55:00,836 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:55:00,839 [main:137] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e8ffc26]
2021-03-11 12:55:00,839 [main:105] - GENERATED CALL = (str).get(-1128741216).isUpperCase()
2021-03-11 12:55:00,839 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42388cfa]]
2021-03-11 12:55:00,839 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:55:00,990 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:55:01,146 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:55:01,149 [main:137] - GENERATING call of type public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42388cfa]
2021-03-11 12:55:01,321 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:55:01,483 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:55:01,486 [main:105] - GENERATED CALL = (str).subSequence(1227306218, 1666055915).startsWith('ⶬ', true)
2021-03-11 12:55:01,486 [main:101] - Case = [public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4265ffef]]
2021-03-11 12:55:01,486 [main:137] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4265ffef]
2021-03-11 12:55:01,644 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:55:01,814 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:55:01,972 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:55:02,132 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:55:02,307 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:55:02,310 [main:105] - GENERATED CALL = (str).regionMatches(1106032889, "svizd", -1275024416, 962363119, true)
2021-03-11 12:55:02,310 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21280b00], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2443d528]]
2021-03-11 12:55:02,310 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21280b00]
2021-03-11 12:55:02,467 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:55:02,469 [main:137] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2443d528]
2021-03-11 12:55:02,470 [main:105] - GENERATED CALL = (str).get(1534012490).isLetter()
2021-03-11 12:55:02,470 [main:101] - Case = [public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e85b3ec]]
2021-03-11 12:55:02,470 [main:137] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e85b3ec]
2021-03-11 12:55:02,470 [main:105] - GENERATED CALL = (str).none()
2021-03-11 12:55:02,470 [main:110] - replacement of prope8 != null of type Boolean is (str).startsWith("xjcqu", true)
2021-03-11 12:55:02,626 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:55:02,626 [main:66] - Compilation checking started
2021-03-11 12:55:03,077 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while ((str).startsWith("xjcqu", true)) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:55:03,080 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 12:55:03,080 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 12:55:03,080 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 12:55:03,224 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 12:55:03,230 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 12:55:03,236 [main:55] - randomType = Boolean
2021-03-11 12:55:03,381 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:55:03,396 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:55:03,427 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:55:03,428 [main:94] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 12:55:03,436 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:55:03,454 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:55:03,454 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:55:03,455 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:55:03,455 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:55:03,456 [main:107] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 12:55:03,456 [main:103] - replacing ("OK", String)
2021-03-11 12:55:03,456 [main:38] - replacing "OK" String
2021-03-11 12:55:03,456 [main:42] - Getting value of type String
2021-03-11 12:55:03,630 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:55:03,634 [main:46] - GENERATED VALUE OF TYPE String = "kqjjm"
2021-03-11 12:55:03,634 [main:49] - GENERATED IS CALL =false
2021-03-11 12:55:04,188 [main:55] - randomType = Kla2<Array<UInt>>
2021-03-11 12:55:04,337 [main:302] - generating value of type = Kla2<Array<UInt>> false depth = 0
2021-03-11 12:55:04,340 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 12:55:05,065 [main:302] - generating value of type = Kla5 false depth = 2
2021-03-11 12:55:05,070 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}
2021-03-11 12:55:05,096 [main:94] - GETTING String from String
2021-03-11 12:55:05,119 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c7e5dcd]]
2021-03-11 12:55:05,119 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c7e5dcd]
2021-03-11 12:55:05,130 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).uppercase()
2021-03-11 12:55:05,130 [main:101] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3948e47d]]
2021-03-11 12:55:05,130 [main:137] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3948e47d]
2021-03-11 12:55:05,279 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:55:05,282 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:55:05,285 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).dropLastWhile({a: Char -> false})
2021-03-11 12:55:05,285 [main:101] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7422651e]]
2021-03-11 12:55:05,285 [main:137] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7422651e]
2021-03-11 12:55:05,433 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:55:05,582 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:55:05,585 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).substringAfterLast('à', "sexpp")
2021-03-11 12:55:05,585 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@340b14f4]]
2021-03-11 12:55:05,585 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@340b14f4]
2021-03-11 12:55:05,776 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:55:05,937 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:55:06,099 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:55:06,278 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:55:06,283 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 12:55:06,621 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 12:55:06,628 [main:95] - GENERATED = StringBuilder("ujvkt")
2021-03-11 12:55:06,628 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).replaceRange(-1300892851, -594018066, StringBuilder("ujvkt"))
2021-03-11 12:55:06,628 [main:101] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6921c9d]]
2021-03-11 12:55:06,628 [main:137] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6921c9d]
2021-03-11 12:55:06,800 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:55:06,806 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).removePrefix("efgom")
2021-03-11 12:55:06,806 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7beb8085]]
2021-03-11 12:55:06,806 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7beb8085]
2021-03-11 12:55:06,806 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).trim()
2021-03-11 12:55:06,806 [main:101] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a3ba1fe]]
2021-03-11 12:55:06,806 [main:137] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a3ba1fe]
2021-03-11 12:55:06,964 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:55:07,130 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:55:07,133 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).padEnd(1664627963, '')
2021-03-11 12:55:07,133 [main:101] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@863c31e]]
2021-03-11 12:55:07,133 [main:137] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@863c31e]
2021-03-11 12:55:07,307 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:55:07,310 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:55:07,312 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).filterNot({a: Char -> true})
2021-03-11 12:55:07,313 [main:101] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32ee4d0a]]
2021-03-11 12:55:07,313 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32ee4d0a]
2021-03-11 12:55:07,470 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:55:07,623 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:55:07,626 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).replaceIndentByMargin("ybmfa", "skfuz")
2021-03-11 12:55:07,626 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1eb803d8]]
2021-03-11 12:55:07,626 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:55:07,797 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:55:07,958 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:55:07,961 [main:137] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1eb803d8]
2021-03-11 12:55:08,123 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:55:08,126 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).subSequence(-466154182, -944605394).repeat(-1889512142)
2021-03-11 12:55:08,126 [main:110] - replacement of "OK" of type String is (A(-1649075752, "cfyuz").y).padEnd(1664627963, '')
2021-03-11 12:55:08,290 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:55:08,290 [main:66] - Compilation checking started
2021-03-11 12:55:08,893 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume((A(-1649075752, "cfyuz").y).padEnd(1664627963, ''))
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:55:08,896 [main:103] - replacing (prope3.getOrThrow(), Ty0)
2021-03-11 12:55:08,896 [main:38] - replacing prope3.getOrThrow() Ty0
2021-03-11 12:55:08,896 [main:42] - Getting value of type Ty0
2021-03-11 12:55:09,042 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 12:55:09,047 [main:46] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 12:55:09,253 [main:55] - randomType = A?
2021-03-11 12:55:09,416 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:55:09,419 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:55:09,580 [main:194] - Type params = []
2021-03-11 12:55:09,745 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:55:09,748 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:55:09,761 [main:94] - GETTING Ty0 from Int
2021-03-11 12:55:09,808 [main:94] - GETTING Ty0 from String
2021-03-11 12:55:09,835 [main:94] - GETTING Ty0 from Int
2021-03-11 12:55:09,836 [main:94] - GETTING Ty0 from String
2021-03-11 12:55:09,836 [main:94] - GETTING Ty0 from Int
2021-03-11 12:55:09,837 [main:94] - GETTING Ty0 from Boolean
2021-03-11 12:55:09,851 [main:94] - GETTING Ty0 from Int
2021-03-11 12:55:09,852 [main:94] - GETTING Ty0 from Int
2021-03-11 12:55:09,852 [main:107] - Cant find and generate replacement for prope3.getOrThrow() type Ty0
2021-03-11 12:55:09,852 [main:103] - replacing ({ c.resume(Unit) }, Function0<Unit>)
2021-03-11 12:55:09,852 [main:38] - replacing { c.resume(Unit) } Function0<Unit>
2021-03-11 12:55:09,852 [main:42] - Getting value of type Function0<Unit>
2021-03-11 12:55:10,003 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 12:55:10,006 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:55:10,185 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:55:10,189 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:55:10,534 [main:302] - generating value of type = Any false depth = 4
2021-03-11 12:55:10,535 [main:95] - GENERATED = println("axppb")
2021-03-11 12:55:10,535 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println("axppb")}
2021-03-11 12:55:10,535 [main:49] - GENERATED IS CALL =false
2021-03-11 12:55:10,546 [main:55] - randomType = Kla3
2021-03-11 12:55:10,714 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-11 12:55:10,717 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } ?: error((str).substringAfter('綆', "cdino"))
    }
}
2021-03-11 12:55:10,725 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:55:10,778 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:55:10,805 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:55:10,806 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:55:10,807 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:55:10,808 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:55:10,809 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 12:55:10,822 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:55:10,822 [main:110] - replacement of { c.resume(Unit) } of type Function0<Unit> is { println("axppb")}
2021-03-11 12:55:10,973 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 12:55:10,973 [main:66] - Compilation checking started
2021-03-11 12:55:11,584 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume((A(-1649075752, "cfyuz").y).padEnd(1664627963, ''))
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > 0) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { println("axppb")}
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:55:11,586 [main:103] - replacing (0, Int)
2021-03-11 12:55:11,587 [main:38] - replacing 0 Int
2021-03-11 12:55:11,587 [main:42] - Getting value of type Int
2021-03-11 12:55:11,757 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:55:11,760 [main:46] - GENERATED VALUE OF TYPE Int = 1785802301
2021-03-11 12:55:11,760 [main:49] - GENERATED IS CALL =false
2021-03-11 12:55:12,679 [main:55] - randomType = LinkedHashMap<Kla2<UShort>, Kla1?>?
2021-03-11 12:55:12,853 [main:302] - generating value of type = LinkedHashMap<Kla2<UShort>, Kla1?> false depth = 0
2021-03-11 12:55:13,017 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Kla2<UShort>, Kla1?> = TODO()
2021-03-11 12:55:13,021 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Kla2<UShort>, Kla1?> = TODO()
2021-03-11 12:55:13,192 [main:95] - GENERATED = linkedMapOf<Kla2<UShort>, Kla1?>()
2021-03-11 12:55:13,376 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d868003]
2021-03-11 12:55:13,528 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:55:13,531 [main:66] - Generated call from random type = (linkedMapOf<Kla2<UShort>, Kla1?>())?.size.minus(-11)
2021-03-11 12:55:13,531 [main:94] - GETTING Int from Int
2021-03-11 12:55:13,585 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@4966235c]]
2021-03-11 12:55:13,585 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:55:13,585 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@4966235c]
2021-03-11 12:55:13,732 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:55:13,735 [main:105] - GENERATED CALL = (0+1+2).toByte().div(-101)
2021-03-11 12:55:13,735 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7f28a29], @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@33616e79]]
2021-03-11 12:55:13,735 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7f28a29]
2021-03-11 12:55:13,735 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@33616e79]
2021-03-11 12:55:13,735 [main:105] - GENERATED CALL = (0+1+2).toDouble().roundToInt()
2021-03-11 12:55:13,735 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@a5b3754]]
2021-03-11 12:55:13,735 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:55:13,913 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:55:13,916 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@a5b3754]
2021-03-11 12:55:13,917 [main:105] - GENERATED CALL = (0+1+2).compareTo(-1467008425).countLeadingZeroBits()
2021-03-11 12:55:13,917 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4da4fc25]]
2021-03-11 12:55:13,917 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:55:13,917 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4da4fc25]
2021-03-11 12:55:14,080 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:55:14,083 [main:105] - GENERATED CALL = (0+1+2).toShort().div(-102)
2021-03-11 12:55:14,083 [main:101] - Case = [@kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2814a4a]]
2021-03-11 12:55:14,083 [main:105] - GENERATED CALL = (0+1+2).sign
2021-03-11 12:55:14,083 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@5052b22e]]
2021-03-11 12:55:14,083 [main:105] - GENERATED CALL = (0+1+2).absoluteValue
2021-03-11 12:55:14,083 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18626c8c]]
2021-03-11 12:55:14,083 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:55:14,241 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:55:14,244 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18626c8c]
2021-03-11 12:55:14,414 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:55:14,417 [main:105] - GENERATED CALL = (0+1+2).compareTo(-1063939318).plus(-87)
2021-03-11 12:55:14,417 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f664709]]
2021-03-11 12:55:14,417 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:55:14,573 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:55:14,576 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@f664709]
2021-03-11 12:55:14,728 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:55:14,906 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:55:14,909 [main:105] - GENERATED CALL = (0+1+2).compareTo(-354645230).coerceIn(411298900, 2111802788)
2021-03-11 12:55:14,910 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4b0ed578]]
2021-03-11 12:55:14,910 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:55:14,910 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4b0ed578]
2021-03-11 12:55:14,910 [main:105] - GENERATED CALL = (0+1+2).toShort().countTrailingZeroBits()
2021-03-11 12:55:14,910 [main:101] - Case = [public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f161575]]
2021-03-11 12:55:14,910 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f161575]
2021-03-11 12:55:15,070 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:55:15,073 [main:105] - GENERATED CALL = (0+1+2).times(-37)
2021-03-11 12:55:15,074 [main:110] - replacement of 0 of type Int is (0+1+2).compareTo(-1063939318).plus(-87)
2021-03-11 12:55:15,232 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:55:15,232 [main:66] - Compilation checking started
2021-03-11 12:55:15,865 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume((A(-1649075752, "cfyuz").y).padEnd(1664627963, ''))
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { println("axppb")}
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:55:15,868 [main:103] - replacing (Kla4().prope6, Boolean)
2021-03-11 12:55:15,868 [main:38] - replacing Kla4().prope6 Boolean
2021-03-11 12:55:15,868 [main:42] - Getting value of type Boolean
2021-03-11 12:55:16,019 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:55:16,021 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 12:55:16,021 [main:49] - GENERATED IS CALL =false
2021-03-11 12:55:16,032 [main:55] - randomType = Kla0
2021-03-11 12:55:16,178 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 12:55:16,181 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}
2021-03-11 12:55:16,370 [main:194] - Type params = []
2021-03-11 12:55:16,536 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 12:55:16,703 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:55:16,707 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:55:17,064 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 12:55:17,226 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:55:17,230 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:55:17,804 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 8
2021-03-11 12:55:17,985 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 12:55:17,989 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 12:55:18,561 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 11
2021-03-11 12:55:18,735 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 12:55:18,739 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 12:55:19,288 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 14
2021-03-11 12:55:19,445 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 12:55:19,449 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 12:55:20,041 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 17
2021-03-11 12:55:20,041 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 12:55:20,041 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 12:55:20,041 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 12:55:20,042 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:55:20,042 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:55:20,061 [main:137] - GENERATING call of type public open fun resumeWith(prope3: kotlin.Result<kotlin.Any?>): kotlin.Unit defined in Kla0[SimpleFunctionDescriptorImpl@4f8a2386]
2021-03-11 12:55:20,244 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-11 12:55:20,416 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 12:55:20,420 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 12:55:20,790 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-11 12:55:20,793 [main:302] - generating value of type = Any false depth = 4
2021-03-11 12:55:20,793 [main:95] - GENERATED = runCatching<Any?>({ "mmkhv"})
2021-03-11 12:55:20,794 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@7c63da90]
2021-03-11 12:55:20,957 [main:66] - Generated call from random type = (Kla0()).resumeWith(runCatching<Any?>({ "mmkhv"})).equals(null)
2021-03-11 12:55:20,957 [main:94] - GETTING Boolean from Boolean
2021-03-11 12:55:20,971 [main:101] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@66871f61]]
2021-03-11 12:55:20,971 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@66871f61]
2021-03-11 12:55:21,134 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:55:21,137 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).or(false)
2021-03-11 12:55:21,137 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]]
2021-03-11 12:55:21,137 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:55:21,318 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:55:21,321 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]
2021-03-11 12:55:21,477 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:55:21,477 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(true).equals("oehjn")
2021-03-11 12:55:21,477 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@53884783]]
2021-03-11 12:55:21,477 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@53884783]
2021-03-11 12:55:21,630 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:55:21,630 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).equals("pmlpd")
2021-03-11 12:55:21,631 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1d132288], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4063f07e]]
2021-03-11 12:55:21,631 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1d132288]
2021-03-11 12:55:21,799 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:55:21,799 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4063f07e]
2021-03-11 12:55:21,960 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:55:21,963 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).equals("wxoug").and(true)
2021-03-11 12:55:21,963 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1d132288], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1a38040]]
2021-03-11 12:55:21,963 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1d132288]
2021-03-11 12:55:22,129 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:55:22,129 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1a38040]
2021-03-11 12:55:22,304 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:55:22,307 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).equals("ymfzw").xor(false)
2021-03-11 12:55:22,307 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4063f07e]]
2021-03-11 12:55:22,307 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4063f07e]
2021-03-11 12:55:22,463 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:55:22,466 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).and(false)
2021-03-11 12:55:22,466 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1a38040]]
2021-03-11 12:55:22,466 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1a38040]
2021-03-11 12:55:22,618 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:55:22,621 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).xor(false)
2021-03-11 12:55:22,621 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1d132288], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@66871f61]]
2021-03-11 12:55:22,621 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1d132288]
2021-03-11 12:55:22,789 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:55:22,789 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@66871f61]
2021-03-11 12:55:22,949 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:55:22,953 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).equals("ojknz").or(true)
2021-03-11 12:55:22,953 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1d132288], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@53884783]]
2021-03-11 12:55:22,953 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1d132288]
2021-03-11 12:55:23,111 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:55:23,111 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@53884783]
2021-03-11 12:55:23,281 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:55:23,281 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).equals("hwtef").equals("aqbxz")
2021-03-11 12:55:23,281 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@63c6a639]]
2021-03-11 12:55:23,281 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@63c6a639]
2021-03-11 12:55:23,282 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).not()
2021-03-11 12:55:23,282 [main:110] - replacement of Kla4().prope6 of type Boolean is (sum == 0+1+2+3+4).equals("ymfzw").xor(false)
2021-03-11 12:55:23,437 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:55:23,437 [main:66] - Compilation checking started
2021-03-11 12:55:23,858 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume((A(-1649075752, "cfyuz").y).padEnd(1664627963, ''))
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { println("axppb")}
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = {
            (sum == 0+1+2+3+4).equals("ymfzw").xor(false) = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:55:23,861 [main:103] - replacing (suspendCoroutineUninterceptedOrReturn { x ->
    x.resume((A(-1649075752, "cfyuz").y).padEnd(1664627963, ''))
}, String)
2021-03-11 12:55:23,861 [main:38] - replacing suspendCoroutineUninterceptedOrReturn { x ->
    x.resume((A(-1649075752, "cfyuz").y).padEnd(1664627963, ''))
} String
2021-03-11 12:55:23,861 [main:42] - Getting value of type String
2021-03-11 12:55:24,035 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:55:24,038 [main:46] - GENERATED VALUE OF TYPE String = "xyyzq"
2021-03-11 12:55:24,038 [main:49] - GENERATED IS CALL =false
2021-03-11 12:55:24,219 [main:55] - randomType = Float
2021-03-11 12:55:24,379 [main:302] - generating value of type = Float true depth = 0
2021-03-11 12:55:24,419 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:55:24,419 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:55:24,581 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:55:24,584 [main:66] - Generated call from random type = (0.18997395f).toInt().toString(-901199591)
2021-03-11 12:55:24,584 [main:110] - replacement of suspendCoroutineUninterceptedOrReturn { x ->
    x.resume((A(-1649075752, "cfyuz").y).padEnd(1664627963, ''))
} of type String is (0.18997395f).toInt().toString(-901199591)
2021-03-11 12:55:24,735 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:55:24,736 [main:66] - Compilation checking started
2021-03-11 12:55:25,333 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { println("axppb")}
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:55:25,337 [main:103] - replacing (prope3.getOrThrow(), Any?)
2021-03-11 12:55:25,339 [main:38] - replacing prope3.getOrThrow() Any?
2021-03-11 12:55:25,339 [main:42] - Getting value of type Any?
2021-03-11 12:55:25,549 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:55:25,549 [main:46] - GENERATED VALUE OF TYPE Any? = "czhyd"
2021-03-11 12:55:25,549 [main:49] - GENERATED IS CALL =false
2021-03-11 12:55:25,560 [main:55] - randomType = Kla1
2021-03-11 12:55:25,727 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 12:55:25,730 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}
2021-03-11 12:55:25,753 [main:66] - Generated call from random type = (Kla1()).prope3
2021-03-11 12:55:25,754 [main:94] - GETTING Any? from String
2021-03-11 12:55:25,781 [main:94] - GETTING Any? from Boolean
2021-03-11 12:55:25,792 [main:94] - GETTING Any? from Int
2021-03-11 12:55:25,830 [main:94] - GETTING Any? from Int
2021-03-11 12:55:25,831 [main:94] - GETTING Any? from Int
2021-03-11 12:55:25,832 [main:94] - GETTING Any? from Int
2021-03-11 12:55:25,833 [main:94] - GETTING Any? from Int
2021-03-11 12:55:25,834 [main:94] - GETTING Any? from String
2021-03-11 12:55:25,834 [main:110] - replacement of prope3.getOrThrow() of type Any? is "czhyd"
2021-03-11 12:55:25,990 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 12:55:25,991 [main:66] - Compilation checking started
2021-03-11 12:55:26,623 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { println("axppb")}
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:55:26,625 [main:103] - replacing (" is not subtype of CoroutineStackFrame", String)
2021-03-11 12:55:26,626 [main:38] - replacing " is not subtype of CoroutineStackFrame" String
2021-03-11 12:55:26,626 [main:42] - Getting value of type String
2021-03-11 12:55:26,772 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:55:26,775 [main:46] - GENERATED VALUE OF TYPE String = "twjlt"
2021-03-11 12:55:26,775 [main:49] - GENERATED IS CALL =false
2021-03-11 12:55:26,781 [main:55] - randomType = Short
2021-03-11 12:55:26,926 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:55:26,962 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]
2021-03-11 12:55:27,132 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:55:27,135 [main:66] - Generated call from random type = (29344).toString(1552349344)
2021-03-11 12:55:27,135 [main:94] - GETTING String from String
2021-03-11 12:55:27,159 [main:101] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21284ead]]
2021-03-11 12:55:27,159 [main:137] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21284ead]
2021-03-11 12:55:27,160 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).capitalize()
2021-03-11 12:55:27,160 [main:101] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@161cf1b0]]
2021-03-11 12:55:27,160 [main:137] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@161cf1b0]
2021-03-11 12:55:27,325 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:55:27,488 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:55:27,659 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:55:27,661 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).replace('⢄', '胩', true)
2021-03-11 12:55:27,662 [main:101] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@500bf82d]]
2021-03-11 12:55:27,662 [main:137] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@500bf82d]
2021-03-11 12:55:27,815 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:55:27,821 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).removeSuffix("crdte")
2021-03-11 12:55:27,821 [main:101] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6921c9d]]
2021-03-11 12:55:27,821 [main:137] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6921c9d]
2021-03-11 12:55:27,976 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:55:27,981 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).removePrefix("ryhot")
2021-03-11 12:55:27,982 [main:101] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2976238d]]
2021-03-11 12:55:27,982 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2976238d]
2021-03-11 12:55:28,151 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:55:28,154 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).replaceIndent("rfuvn")
2021-03-11 12:55:28,154 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69aea4dc]]
2021-03-11 12:55:28,154 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69aea4dc]
2021-03-11 12:55:28,315 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:55:28,318 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).concat("rhtbp")
2021-03-11 12:55:28,318 [main:101] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d460c5b]]
2021-03-11 12:55:28,318 [main:137] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d460c5b]
2021-03-11 12:55:28,318 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).decapitalize()
2021-03-11 12:55:28,318 [main:101] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cb4f9a]]
2021-03-11 12:55:28,318 [main:137] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cb4f9a]
2021-03-11 12:55:28,480 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:55:28,484 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).drop(-1271942484)
2021-03-11 12:55:28,484 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30dba167]]
2021-03-11 12:55:28,484 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30dba167]
2021-03-11 12:55:28,484 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).reversed()
2021-03-11 12:55:28,484 [main:101] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3948e47d]]
2021-03-11 12:55:28,484 [main:137] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3948e47d]
2021-03-11 12:55:28,654 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:55:28,656 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:55:28,659 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).dropLastWhile({a: Char -> true})
2021-03-11 12:55:28,660 [main:110] - replacement of " is not subtype of CoroutineStackFrame" of type String is (A(-1649075752, "cfyuz").y).removeSuffix("crdte")
2021-03-11 12:55:28,811 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:55:28,811 [main:66] - Compilation checking started
2021-03-11 12:55:29,420 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { println("axppb")}
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:55:29,423 [main:103] - replacing (it, Continuation<Unit>)
2021-03-11 12:55:29,423 [main:38] - replacing it Continuation<Unit>
2021-03-11 12:55:29,423 [main:42] - Getting value of type Continuation<Unit>
2021-03-11 12:55:29,593 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-11 12:55:29,759 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 12:55:29,763 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 12:55:30,309 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 12:55:30,469 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:55:30,473 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:55:30,853 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 12:55:31,023 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:55:31,028 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:55:31,569 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:55:31,569 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:55:31,569 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 12:55:31,569 [main:46] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-11 12:55:31,779 [main:55] - randomType = ArrayList<A>
2021-03-11 12:55:31,945 [main:302] - generating value of type = ArrayList<A> false depth = 0
2021-03-11 12:55:32,114 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<A> = TODO()
2021-03-11 12:55:32,118 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<A> = TODO()
2021-03-11 12:55:32,303 [main:95] - GENERATED = arrayListOf<A>()
2021-03-11 12:55:32,491 [main:94] - GETTING Continuation<Unit> from Int
2021-03-11 12:55:32,550 [main:94] - GETTING Continuation<Unit> from Int
2021-03-11 12:55:32,552 [main:94] - GETTING Continuation<Unit> from String
2021-03-11 12:55:32,585 [main:94] - GETTING Continuation<Unit> from Int
2021-03-11 12:55:32,586 [main:94] - GETTING Continuation<Unit> from Int
2021-03-11 12:55:32,587 [main:94] - GETTING Continuation<Unit> from String
2021-03-11 12:55:32,588 [main:94] - GETTING Continuation<Unit> from Boolean
2021-03-11 12:55:32,602 [main:94] - GETTING Continuation<Unit> from Int
2021-03-11 12:55:32,602 [main:107] - Cant find and generate replacement for it type Continuation<Unit>
2021-03-11 12:55:32,602 [main:103] - replacing (x, Function1<Ty0, Unit>)
2021-03-11 12:55:32,602 [main:38] - replacing x Function1<Ty0, Unit>
2021-03-11 12:55:32,602 [main:42] - Getting value of type Function1<Ty0, Unit>
2021-03-11 12:55:32,759 [main:302] - generating value of type = Function1<Ty0, Unit> false depth = 0
2021-03-11 12:55:32,762 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:55:32,940 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:55:32,944 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:55:33,483 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 12:55:33,486 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 12:55:33,489 [main:302] - generating value of type = Any false depth = 5
2021-03-11 12:55:33,489 [main:95] - GENERATED = require(false, { "hbswt"})
2021-03-11 12:55:33,489 [main:46] - GENERATED VALUE OF TYPE Function1<Ty0, Unit> = {a: Ty0 -> require(false, { "hbswt"})}
2021-03-11 12:55:33,489 [main:49] - GENERATED IS CALL =false
2021-03-11 12:55:33,666 [main:55] - randomType = Long?
2021-03-11 12:55:33,819 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:55:33,858 [main:94] - GETTING Function1<Ty0, Unit> from Boolean
2021-03-11 12:55:33,867 [main:94] - GETTING Function1<Ty0, Unit> from Int
2021-03-11 12:55:33,898 [main:94] - GETTING Function1<Ty0, Unit> from String
2021-03-11 12:55:33,916 [main:94] - GETTING Function1<Ty0, Unit> from String
2021-03-11 12:55:33,917 [main:94] - GETTING Function1<Ty0, Unit> from Int
2021-03-11 12:55:33,918 [main:94] - GETTING Function1<Ty0, Unit> from Int
2021-03-11 12:55:33,919 [main:94] - GETTING Function1<Ty0, Unit> from Int
2021-03-11 12:55:33,920 [main:94] - GETTING Function1<Ty0, Unit> from Int
2021-03-11 12:55:33,921 [main:110] - replacement of x of type Function1<Ty0, Unit> is {a: Ty0 -> require(false, { "hbswt"})}
2021-03-11 12:55:34,098 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 12:55:34,098 [main:66] - Compilation checking started
2021-03-11 12:55:34,807 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { println("axppb")}
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:55:34,810 [main:103] - replacing (prope7, Function0<Unit>)
2021-03-11 12:55:34,810 [main:38] - replacing prope7 Function0<Unit>
2021-03-11 12:55:34,811 [main:42] - Getting value of type Function0<Unit>
2021-03-11 12:55:34,987 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 12:55:34,990 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:55:35,143 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:55:35,147 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:55:35,667 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 12:55:35,670 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 12:55:35,673 [main:302] - generating value of type = Any false depth = 5
2021-03-11 12:55:35,673 [main:95] - GENERATED = check(false, { "mzrza"})
2021-03-11 12:55:35,673 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false, { "mzrza"})}
2021-03-11 12:55:35,673 [main:49] - GENERATED IS CALL =false
2021-03-11 12:55:35,685 [main:55] - randomType = Kla3
2021-03-11 12:55:35,844 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-11 12:55:35,847 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } ?: error((str).substringAfter('綆', "cdino"))
    }
}
2021-03-11 12:55:35,855 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:55:35,878 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:55:35,918 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:55:35,919 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:55:35,920 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:55:35,921 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 12:55:35,932 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:55:35,933 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:55:35,934 [main:110] - replacement of prope7 of type Function0<Unit> is { check(false, { "mzrza"})}
2021-03-11 12:55:36,105 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 12:55:36,106 [main:66] - Compilation checking started
2021-03-11 12:55:36,565 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        { check(false, { "mzrza"})} = { println("axppb")}
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:55:36,568 [main:103] - replacing (prope7, Function0<Unit>)
2021-03-11 12:55:36,568 [main:38] - replacing prope7 Function0<Unit>
2021-03-11 12:55:36,568 [main:42] - Getting value of type Function0<Unit>
2021-03-11 12:55:36,714 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 12:55:36,717 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:55:36,870 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 12:55:36,874 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 12:55:37,252 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 12:55:37,256 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 12:55:37,426 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:55:37,431 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:55:37,784 [main:302] - generating value of type = Any false depth = 8
2021-03-11 12:55:37,785 [main:95] - GENERATED = println("nvnqe")
2021-03-11 12:55:37,785 [main:95] - GENERATED = contract({ println("nvnqe")})
2021-03-11 12:55:37,785 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ println("nvnqe")})}
2021-03-11 12:55:37,785 [main:49] - GENERATED IS CALL =false
2021-03-11 12:55:37,966 [main:55] - randomType = Kla4?
2021-03-11 12:55:38,153 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 12:55:38,156 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { println("axppb")}
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 12:55:38,167 [main:66] - Generated call from random type = (Kla4())?.prope7
2021-03-11 12:55:38,168 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:55:38,209 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:55:38,231 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 12:55:38,243 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:55:38,244 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:55:38,245 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:55:38,246 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:55:38,247 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:55:38,247 [main:110] - replacement of prope7 of type Function0<Unit> is { contract({ println("nvnqe")})}
2021-03-11 12:55:38,406 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 12:55:38,406 [main:66] - Compilation checking started
2021-03-11 12:55:38,883 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { println("axppb")}
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().{ contract({ println("nvnqe")})} = {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:55:38,885 [main:103] - replacing ({
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        }, Function0<Unit>)
2021-03-11 12:55:38,886 [main:38] - replacing {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        } Function0<Unit>
2021-03-11 12:55:38,886 [main:42] - Getting value of type Function0<Unit>
2021-03-11 12:55:39,039 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 12:55:39,042 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:55:39,196 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 12:55:39,200 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 12:55:39,576 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 12:55:39,579 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 12:55:39,743 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:55:39,748 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:55:40,101 [main:302] - generating value of type = Any false depth = 8
2021-03-11 12:55:40,101 [main:95] - GENERATED = print("ynxju")
2021-03-11 12:55:40,101 [main:95] - GENERATED = contract({ print("ynxju")})
2021-03-11 12:55:40,101 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ print("ynxju")})}
2021-03-11 12:55:40,101 [main:49] - GENERATED IS CALL =false
2021-03-11 12:55:40,113 [main:55] - randomType = Kla4
2021-03-11 12:55:40,266 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 12:55:40,268 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { println("axppb")}
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 12:55:40,278 [main:66] - Generated call from random type = (Kla4()).prope7
2021-03-11 12:55:40,280 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:55:40,330 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:55:40,331 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:55:40,332 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:55:40,333 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:55:40,362 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 12:55:40,376 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:55:40,377 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:55:40,377 [main:110] - replacement of {
            Kla4().prope6 = (sum == 0+1+2+3+4).equals("fvsfm").not()
        } of type Function0<Unit> is (Kla4()).prope7
2021-03-11 12:55:40,551 [main:33] - Trying to replace LAMBDA_EXPRESSION on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:55:40,552 [main:66] - Compilation checking started
2021-03-11 12:55:41,288 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { println("axppb")}
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:55:41,292 [main:103] - replacing (prope6, Boolean)
2021-03-11 12:55:41,292 [main:38] - replacing prope6 Boolean
2021-03-11 12:55:41,292 [main:42] - Getting value of type Boolean
2021-03-11 12:55:41,472 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:55:41,475 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 12:55:41,475 [main:49] - GENERATED IS CALL =false
2021-03-11 12:55:41,481 [main:55] - randomType = String
2021-03-11 12:55:41,625 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:55:41,645 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4df1bec]
2021-03-11 12:55:41,790 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:55:41,790 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@66871f61]
2021-03-11 12:55:41,935 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:55:41,938 [main:66] - Generated call from random type = ("mjlgc").equals("sngcw").or(false)
2021-03-11 12:55:41,939 [main:94] - GETTING Boolean from Int
2021-03-11 12:55:41,982 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f9daf84]]
2021-03-11 12:55:41,982 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:55:41,982 [main:137] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f9daf84]
2021-03-11 12:55:41,982 [main:105] - GENERATED CALL = (sum).toChar().isDefined()
2021-03-11 12:55:41,982 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4063f07e]]
2021-03-11 12:55:41,982 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]
2021-03-11 12:55:42,163 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:55:42,164 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4063f07e]
2021-03-11 12:55:42,326 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:55:42,329 [main:105] - GENERATED CALL = (sum).equals("pjgdn").and(true)
2021-03-11 12:55:42,329 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7f28a29], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3f8bc992]]
2021-03-11 12:55:42,329 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7f28a29]
2021-03-11 12:55:42,329 [main:137] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3f8bc992]
2021-03-11 12:55:42,329 [main:105] - GENERATED CALL = (sum).toDouble().isFinite()
2021-03-11 12:55:42,329 [main:101] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7f28a29], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@98474c2]]
2021-03-11 12:55:42,329 [main:137] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7f28a29]
2021-03-11 12:55:42,329 [main:137] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@98474c2]
2021-03-11 12:55:42,329 [main:105] - GENERATED CALL = (sum).toDouble().isNaN()
2021-03-11 12:55:42,329 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1a38040]]
2021-03-11 12:55:42,329 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]
2021-03-11 12:55:42,494 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:55:42,494 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1a38040]
2021-03-11 12:55:42,654 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:55:42,658 [main:105] - GENERATED CALL = (sum).equals("ditld").xor(false)
2021-03-11 12:55:42,658 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@27eff770]]
2021-03-11 12:55:42,658 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d]
2021-03-11 12:55:42,822 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:55:42,825 [main:137] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@27eff770]
2021-03-11 12:55:42,825 [main:105] - GENERATED CALL = (sum).div(0.9908880281671884).isInfinite()
2021-03-11 12:55:42,825 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@628f3477]]
2021-03-11 12:55:42,825 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:55:42,825 [main:137] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@628f3477]
2021-03-11 12:55:42,826 [main:105] - GENERATED CALL = (sum).toChar().isSurrogate()
2021-03-11 12:55:42,826 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54d3aa92]]
2021-03-11 12:55:42,826 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:55:42,826 [main:137] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54d3aa92]
2021-03-11 12:55:42,826 [main:105] - GENERATED CALL = (sum).toChar().isLowerCase()
2021-03-11 12:55:42,826 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4428db34]]
2021-03-11 12:55:42,826 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:55:42,826 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4428db34]
2021-03-11 12:55:42,978 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:55:42,978 [main:105] - GENERATED CALL = (sum).toShort().equals("buxts")
2021-03-11 12:55:42,978 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169], public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@67360a68]]
2021-03-11 12:55:42,978 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169]
2021-03-11 12:55:42,978 [main:137] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@67360a68]
2021-03-11 12:55:42,979 [main:105] - GENERATED CALL = (sum).toFloat().isFinite()
2021-03-11 12:55:42,979 [main:110] - replacement of prope6 of type Boolean is (sum).toChar().isDefined()
2021-03-11 12:55:43,128 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:55:43,129 [main:66] - Compilation checking started
2021-03-11 12:55:43,544 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        (sum).toChar().isDefined() = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { println("axppb")}
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:55:43,548 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 12:55:43,548 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 12:55:43,548 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 12:55:43,737 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 12:55:43,743 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 12:55:44,113 [main:55] - randomType = Array<Kla3?>
2021-03-11 12:55:44,282 [main:302] - generating value of type = Array<Kla3?> false depth = 0
2021-03-11 12:55:44,440 [main:43] - GENERATING CALL OF fun <T> arrayOfNulls(size: kotlin.Int): Array<Kla3?> = TODO()
2021-03-11 12:55:44,444 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOfNulls(size: kotlin.Int): Array<Kla3?> = TODO()
2021-03-11 12:55:44,814 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:55:44,817 [main:95] - GENERATED = arrayOfNulls<Kla3?>(104320304)
2021-03-11 12:55:44,835 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:55:44,887 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:55:44,888 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:55:44,889 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:55:44,911 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:55:44,912 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:55:44,913 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:55:44,913 [main:94] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 12:55:44,925 [main:107] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 12:55:44,925 [main:103] - replacing (c, Continuation<*>)
2021-03-11 12:55:44,926 [main:38] - replacing c Continuation<*>
2021-03-11 12:55:44,926 [main:42] - Getting value of type Continuation<*>
2021-03-11 12:55:45,084 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 12:55:45,261 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 12:55:45,265 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 12:55:45,781 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 12:55:45,966 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:55:45,970 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:55:46,332 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 12:55:46,510 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:55:46,514 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:55:47,096 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:55:47,096 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:55:47,096 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 12:55:47,096 [main:46] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 12:55:47,291 [main:55] - randomType = LinkedHashSet<Double>
2021-03-11 12:55:47,453 [main:302] - generating value of type = LinkedHashSet<Double> false depth = 0
2021-03-11 12:55:47,627 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Double): LkedHashSet<Double> = TODO()
2021-03-11 12:55:47,630 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Double): LkedHashSet<Double> = TODO()
2021-03-11 12:55:47,791 [main:302] - generating value of type = Double true depth = 3
2021-03-11 12:55:47,794 [main:95] - GENERATED = linkedSetOf<Double>(0.4817746428677414)
2021-03-11 12:55:47,973 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:55:48,005 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:55:48,006 [main:94] - GETTING Continuation<*> from String
2021-03-11 12:55:48,025 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:55:48,025 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:55:48,026 [main:94] - GETTING Continuation<*> from Boolean
2021-03-11 12:55:48,039 [main:94] - GETTING Continuation<*> from String
2021-03-11 12:55:48,040 [main:94] - GETTING Continuation<*> from Int
2021-03-11 12:55:48,040 [main:107] - Cant find and generate replacement for c type Continuation<*>
2021-03-11 12:55:48,040 [main:103] - replacing (let(x), Unit?)
2021-03-11 12:55:48,040 [main:38] - replacing let(x) Unit?
2021-03-11 12:55:48,040 [main:42] - Getting value of type Unit?
2021-03-11 12:55:48,236 [main:46] - GENERATED VALUE OF TYPE Unit? = null
2021-03-11 12:55:48,236 [main:49] - GENERATED IS CALL =false
2021-03-11 12:55:48,817 [main:55] - randomType = MutableMap<Kla4, Collection<Byte>>
2021-03-11 12:55:48,819 [main:94] - GETTING Unit? from Int
2021-03-11 12:55:48,869 [main:94] - GETTING Unit? from Int
2021-03-11 12:55:48,870 [main:94] - GETTING Unit? from String
2021-03-11 12:55:48,899 [main:101] - Case = [public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e2d4661]]
2021-03-11 12:55:48,899 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e2d4661]
2021-03-11 12:55:49,049 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 12:55:49,052 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:55:49,203 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:55:49,207 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:55:49,561 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 12:55:49,564 [main:95] - GENERATED = check(true)
2021-03-11 12:55:49,564 [main:105] - GENERATED CALL = (str)?.forEach({a: Char -> check(true)})
2021-03-11 12:55:49,564 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e2d4661]]
2021-03-11 12:55:49,564 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:55:49,723 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:55:49,902 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:55:49,905 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e2d4661]
2021-03-11 12:55:50,060 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 12:55:50,063 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:55:50,220 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:55:50,224 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:55:50,571 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 12:55:50,574 [main:95] - GENERATED = check(true)
2021-03-11 12:55:50,575 [main:105] - GENERATED CALL = (str)?.subSequence(-952699991, -80075114).forEach({a: Char -> check(true)})
2021-03-11 12:55:50,575 [main:101] - Case = [public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a0c0c24]]
2021-03-11 12:55:50,575 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a0c0c24]
2021-03-11 12:55:50,735 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 12:55:50,738 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:55:50,900 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 12:55:50,904 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 12:55:51,441 [main:302] - generating value of type = Int true depth = 4
2021-03-11 12:55:51,444 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 12:55:51,446 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 12:55:51,629 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:55:51,634 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:55:52,164 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 12:55:52,167 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-11 12:55:52,170 [main:302] - generating value of type = Any false depth = 9
2021-03-11 12:55:52,170 [main:95] - GENERATED = require(true, { "cdiyi"})
2021-03-11 12:55:52,170 [main:95] - GENERATED = repeat(-426458624, {a: Int -> require(true, { "cdiyi"})})
2021-03-11 12:55:52,171 [main:105] - GENERATED CALL = (str)?.forEachIndexed({a: Int, b: Char -> repeat(-426458624, {a: Int -> require(true, { "cdiyi"})})})
2021-03-11 12:55:52,171 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a0c0c24]]
2021-03-11 12:55:52,171 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:55:52,325 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:55:52,478 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:55:52,481 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a0c0c24]
2021-03-11 12:55:52,652 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 12:55:52,655 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:55:52,822 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:55:52,826 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:55:53,364 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 12:55:53,367 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 12:55:53,369 [main:302] - generating value of type = Any false depth = 5
2021-03-11 12:55:53,370 [main:95] - GENERATED = require(true, { "wcgeo"})
2021-03-11 12:55:53,370 [main:105] - GENERATED CALL = (str)?.subSequence(-615708575, -1205039195).forEachIndexed({a: Int, b: Char -> require(true, { "wcgeo"})})
2021-03-11 12:55:53,370 [main:110] - replacement of let(x) of type Unit? is (str)?.forEachIndexed({a: Int, b: Char -> repeat(-426458624, {a: Int -> require(true, { "cdiyi"})})})
2021-03-11 12:55:53,519 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 12:55:53,519 [main:66] - Compilation checking started
2021-03-11 12:55:53,939 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope3.exceptionOrNull()?.(str)?.forEachIndexed({a: Int, b: Char -> repeat(-426458624, {a: Int -> require(true, { "cdiyi"})})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { println("axppb")}
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:55:53,942 [main:103] - replacing ({ (A(-1649075752, "cfyuz").x).equals("fenej").or(true) }, Function0<Boolean>)
2021-03-11 12:55:53,942 [main:38] - replacing { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } Function0<Boolean>
2021-03-11 12:55:53,942 [main:42] - Getting value of type Function0<Boolean>
2021-03-11 12:55:54,141 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-11 12:55:54,144 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:55:54,147 [main:46] - GENERATED VALUE OF TYPE Function0<Boolean> = { false}
2021-03-11 12:55:54,147 [main:49] - GENERATED IS CALL =false
2021-03-11 12:55:54,158 [main:55] - randomType = Kla4
2021-03-11 12:55:54,325 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 12:55:54,329 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { println("axppb")}
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 12:55:54,341 [main:94] - GETTING Function0<Boolean> from Int
2021-03-11 12:55:54,401 [main:94] - GETTING Function0<Boolean> from Int
2021-03-11 12:55:54,402 [main:94] - GETTING Function0<Boolean> from String
2021-03-11 12:55:54,435 [main:94] - GETTING Function0<Boolean> from String
2021-03-11 12:55:54,436 [main:94] - GETTING Function0<Boolean> from Boolean
2021-03-11 12:55:54,451 [main:94] - GETTING Function0<Boolean> from Int
2021-03-11 12:55:54,452 [main:94] - GETTING Function0<Boolean> from Int
2021-03-11 12:55:54,453 [main:94] - GETTING Function0<Boolean> from Int
2021-03-11 12:55:54,453 [main:110] - replacement of { (A(-1649075752, "cfyuz").x).equals("fenej").or(true) } of type Function0<Boolean> is { false}
2021-03-11 12:55:54,615 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 12:55:54,615 [main:66] - Compilation checking started
2021-03-11 12:55:55,257 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { println("axppb")}
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:55:55,261 [main:103] - replacing (prope9, String)
2021-03-11 12:55:55,262 [main:38] - replacing prope9 String
2021-03-11 12:55:55,262 [main:42] - Getting value of type String
2021-03-11 12:55:55,427 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:55:55,430 [main:46] - GENERATED VALUE OF TYPE String = "ymwbk"
2021-03-11 12:55:55,430 [main:49] - GENERATED IS CALL =false
2021-03-11 12:55:56,712 [main:55] - randomType = Set<Function1<Collection<ArrayList<Int>>, Sequence<UShort>>>
2021-03-11 12:55:56,713 [main:94] - GETTING String from Int
2021-03-11 12:55:56,750 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:55:56,750 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:55:56,750 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:55:56,920 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:55:56,923 [main:105] - GENERATED CALL = (0+1).toLong().toString(-235860837)
2021-03-11 12:55:56,923 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:55:56,923 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:55:57,081 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:55:57,084 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:55:57,240 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:55:57,243 [main:105] - GENERATED CALL = (0+1).div(1106858458104410842).toString(-2114767989)
2021-03-11 12:55:57,244 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]]
2021-03-11 12:55:57,244 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:55:57,245 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]
2021-03-11 12:55:57,245 [main:105] - GENERATED CALL = (0+1).toChar().lowercase()
2021-03-11 12:55:57,245 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]]
2021-03-11 12:55:57,245 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:55:57,245 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]
2021-03-11 12:55:57,245 [main:105] - GENERATED CALL = (0+1).toChar().uppercase()
2021-03-11 12:55:57,245 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]]
2021-03-11 12:55:57,245 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:55:57,245 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]
2021-03-11 12:55:57,245 [main:105] - GENERATED CALL = (0+1).toChar().titlecase()
2021-03-11 12:55:57,245 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]]
2021-03-11 12:55:57,245 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:55:57,246 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]
2021-03-11 12:55:57,407 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:55:57,410 [main:105] - GENERATED CALL = (0+1).toShort().toString(-293794338)
2021-03-11 12:55:57,410 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:55:57,410 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:55:57,410 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:55:57,571 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:55:57,573 [main:105] - GENERATED CALL = (0+1).toInt().toString(-468027303)
2021-03-11 12:55:57,574 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:55:57,574 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:55:57,732 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:55:57,737 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:55:57,921 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:55:57,924 [main:105] - GENERATED CALL = (0+1).compareTo(-1644976425).toString(-2001342987)
2021-03-11 12:55:57,924 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]]
2021-03-11 12:55:57,924 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:55:57,924 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]
2021-03-11 12:55:58,094 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:55:58,098 [main:105] - GENERATED CALL = (0+1).toChar().plus("tphkn")
2021-03-11 12:55:58,098 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:55:58,098 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:55:58,257 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:55:58,260 [main:105] - GENERATED CALL = (0+1).toString(1989852826)
2021-03-11 12:55:58,260 [main:110] - replacement of prope9 of type String is (0+1).compareTo(-1644976425).toString(-2001342987)
2021-03-11 12:55:58,417 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:55:58,418 [main:66] - Compilation checking started
2021-03-11 12:55:58,878 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            (0+1).compareTo(-1644976425).toString(-2001342987) = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { println("axppb")}
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:55:58,882 [main:103] - replacing (c, SuspendFunction0<Unit>)
2021-03-11 12:55:58,883 [main:38] - replacing c SuspendFunction0<Unit>
2021-03-11 12:55:58,883 [main:42] - Getting value of type SuspendFunction0<Unit>
2021-03-11 12:55:59,043 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-11 12:55:59,046 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:55:59,224 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:55:59,228 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:55:59,571 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 12:55:59,574 [main:95] - GENERATED = check(false)
2021-03-11 12:55:59,574 [main:46] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { check(false)}
2021-03-11 12:55:59,574 [main:49] - GENERATED IS CALL =false
2021-03-11 12:55:59,945 [main:55] - randomType = HashMap<String, Byte>
2021-03-11 12:56:00,096 [main:302] - generating value of type = HashMap<String, Byte> false depth = 0
2021-03-11 12:56:00,277 [main:43] - GENERATING CALL OF fun <V> stringMapOf(pairs: Pair<String, Byte>): HashMap<Strg, Byte> = TODO()
2021-03-11 12:56:00,281 [main:61] - WITHOUT TYPE PARAMS = fun <V> stringMapOf(pairs: Pair<String, Byte>): HashMap<Strg, Byte> = TODO()
2021-03-11 12:56:00,447 [main:302] - generating value of type = Pair<String, Byte> false depth = 3
2021-03-11 12:56:00,621 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: String, second: Byte): Pair<String, Byte> = TODO()
2021-03-11 12:56:00,625 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: String, second: Byte): Pair<String, Byte> = TODO()
2021-03-11 12:56:00,800 [main:302] - generating value of type = String true depth = 6
2021-03-11 12:56:00,803 [main:302] - generating value of type = Byte true depth = 6
2021-03-11 12:56:00,806 [main:95] - GENERATED = Pair<String, Byte>("yncfh", 41)
2021-03-11 12:56:00,806 [main:95] - GENERATED = stringMapOf<Byte>(Pair<String, Byte>("yncfh", 41))
2021-03-11 12:56:00,927 [main:94] - GETTING SuspendFunction0<Unit> from String
2021-03-11 12:56:00,954 [main:94] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 12:56:01,004 [main:94] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 12:56:01,005 [main:94] - GETTING SuspendFunction0<Unit> from String
2021-03-11 12:56:01,006 [main:94] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 12:56:01,006 [main:94] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 12:56:01,007 [main:94] - GETTING SuspendFunction0<Unit> from Boolean
2021-03-11 12:56:01,021 [main:94] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 12:56:01,022 [main:110] - replacement of c of type SuspendFunction0<Unit> is { check(false)}
2021-03-11 12:56:01,173 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 12:56:01,174 [main:66] - Compilation checking started
2021-03-11 12:56:01,626 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{ check(false)}.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { println("axppb")}
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:56:01,629 [main:103] - replacing ({ c ->
        prope5++
        prope7 = { println("axppb")}
    }, Function1<Continuation<Unit>, Unit>)
2021-03-11 12:56:01,629 [main:38] - replacing { c ->
        prope5++
        prope7 = { println("axppb")}
    } Function1<Continuation<Unit>, Unit>
2021-03-11 12:56:01,629 [main:42] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-11 12:56:01,816 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-11 12:56:01,819 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:56:01,985 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:56:01,989 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:56:02,520 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 12:56:02,523 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 12:56:02,527 [main:302] - generating value of type = Any false depth = 5
2021-03-11 12:56:02,527 [main:95] - GENERATED = require(false, { "ctgsa"})
2021-03-11 12:56:02,527 [main:46] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> require(false, { "ctgsa"})}
2021-03-11 12:56:02,527 [main:49] - GENERATED IS CALL =false
2021-03-11 12:56:02,712 [main:55] - randomType = ArrayDeque<UByte>
2021-03-11 12:56:02,886 [main:302] - generating value of type = ArrayDeque<UByte> false depth = 0
2021-03-11 12:56:03,052 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<UByte> = TODO()
2021-03-11 12:56:03,056 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<UByte> = TODO()
2021-03-11 12:56:03,224 [main:95] - GENERATED = ArrayDeque<UByte>()
2021-03-11 12:56:03,418 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 12:56:03,448 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 12:56:03,450 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 12:56:03,497 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Boolean
2021-03-11 12:56:03,513 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 12:56:03,514 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 12:56:03,516 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 12:56:03,517 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 12:56:03,518 [main:110] - replacement of { c ->
        prope5++
        prope7 = { println("axppb")}
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> require(false, { "ctgsa"})}
2021-03-11 12:56:03,668 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 12:56:03,669 [main:66] - Compilation checking started
2021-03-11 12:56:04,254 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:56:04,257 [main:103] - replacing (prope7, Function0<Unit>)
2021-03-11 12:56:04,257 [main:38] - replacing prope7 Function0<Unit>
2021-03-11 12:56:04,257 [main:42] - Getting value of type Function0<Unit>
2021-03-11 12:56:04,435 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 12:56:04,438 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:56:04,603 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 12:56:04,607 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 12:56:05,148 [main:302] - generating value of type = Int true depth = 4
2021-03-11 12:56:05,151 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 12:56:05,154 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 12:56:05,312 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:56:05,316 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:56:05,682 [main:302] - generating value of type = Any false depth = 8
2021-03-11 12:56:05,682 [main:95] - GENERATED = println("wmuxv")
2021-03-11 12:56:05,682 [main:95] - GENERATED = repeat(1765906148, {a: Int -> println("wmuxv")})
2021-03-11 12:56:05,682 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(1765906148, {a: Int -> println("wmuxv")})}
2021-03-11 12:56:05,683 [main:49] - GENERATED IS CALL =false
2021-03-11 12:56:05,873 [main:55] - randomType = HashSet<Double>
2021-03-11 12:56:06,040 [main:302] - generating value of type = HashSet<Double> false depth = 0
2021-03-11 12:56:06,203 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: Double): HashSet<Double> = TODO()
2021-03-11 12:56:06,207 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: Double): HashSet<Double> = TODO()
2021-03-11 12:56:06,367 [main:302] - generating value of type = Double true depth = 3
2021-03-11 12:56:06,370 [main:95] - GENERATED = hashSetOf<Double>(0.5716708999608725)
2021-03-11 12:56:06,483 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:56:06,501 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:56:06,534 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:56:06,535 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:56:06,537 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:56:06,538 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:56:06,540 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 12:56:06,558 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:56:06,558 [main:110] - replacement of prope7 of type Function0<Unit> is { repeat(1765906148, {a: Int -> println("wmuxv")})}
2021-03-11 12:56:06,729 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 12:56:06,730 [main:66] - Compilation checking started
2021-03-11 12:56:07,196 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            { repeat(1765906148, {a: Int -> println("wmuxv")})}()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:56:07,199 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 12:56:07,199 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 12:56:07,199 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 12:56:07,374 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 12:56:07,380 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 12:56:07,387 [main:55] - randomType = UByte
2021-03-11 12:56:07,553 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 12:56:07,602 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:56:07,655 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:56:07,681 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:56:07,682 [main:94] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 12:56:07,696 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:56:07,697 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:56:07,698 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:56:07,698 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:56:07,698 [main:107] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 12:56:07,698 [main:103] - replacing (prope7, Function0<Unit>)
2021-03-11 12:56:07,699 [main:38] - replacing prope7 Function0<Unit>
2021-03-11 12:56:07,699 [main:42] - Getting value of type Function0<Unit>
2021-03-11 12:56:07,844 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 12:56:07,847 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:56:08,023 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:56:08,027 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:56:08,380 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 12:56:08,383 [main:95] - GENERATED = require(false)
2021-03-11 12:56:08,383 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false)}
2021-03-11 12:56:08,384 [main:49] - GENERATED IS CALL =false
2021-03-11 12:56:08,570 [main:55] - randomType = UInt
2021-03-11 12:56:08,726 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 12:56:08,771 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:56:08,821 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 12:56:08,835 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:56:08,863 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:56:08,864 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:56:08,865 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:56:08,866 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:56:08,868 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:56:08,868 [main:110] - replacement of prope7 of type Function0<Unit> is { require(false)}
2021-03-11 12:56:09,017 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 12:56:09,017 [main:66] - Compilation checking started
2021-03-11 12:56:09,434 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        { require(false)}()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:56:09,437 [main:103] - replacing (prope3, Any?)
2021-03-11 12:56:09,437 [main:38] - replacing prope3 Any?
2021-03-11 12:56:09,437 [main:42] - Getting value of type Any?
2021-03-11 12:56:09,609 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:56:09,609 [main:46] - GENERATED VALUE OF TYPE Any? = "mmkht"
2021-03-11 12:56:09,609 [main:49] - GENERATED IS CALL =false
2021-03-11 12:56:09,788 [main:55] - randomType = UShort
2021-03-11 12:56:09,947 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 12:56:09,987 [main:94] - GETTING Any? from Int
2021-03-11 12:56:10,033 [main:94] - GETTING Any? from Int
2021-03-11 12:56:10,034 [main:94] - GETTING Any? from String
2021-03-11 12:56:10,057 [main:94] - GETTING Any? from Boolean
2021-03-11 12:56:10,067 [main:94] - GETTING Any? from Int
2021-03-11 12:56:10,067 [main:94] - GETTING Any? from Int
2021-03-11 12:56:10,068 [main:94] - GETTING Any? from Int
2021-03-11 12:56:10,069 [main:94] - GETTING Any? from String
2021-03-11 12:56:10,069 [main:110] - replacement of prope3 of type Any? is "mmkht"
2021-03-11 12:56:10,228 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 12:56:10,229 [main:66] - Compilation checking started
2021-03-11 12:56:10,688 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1()."mmkht" = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:56:10,691 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 12:56:10,691 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 12:56:10,691 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 12:56:10,877 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 12:56:10,883 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 12:56:11,068 [main:55] - randomType = Kla5
2021-03-11 12:56:11,227 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 12:56:11,230 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}
2021-03-11 12:56:11,255 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:56:11,299 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:56:11,300 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:56:11,300 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:56:11,324 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:56:11,325 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:56:11,325 [main:94] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 12:56:11,338 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:56:11,338 [main:107] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 12:56:11,338 [main:103] - replacing ({}, Function0<Unit>)
2021-03-11 12:56:11,338 [main:38] - replacing {} Function0<Unit>
2021-03-11 12:56:11,338 [main:42] - Getting value of type Function0<Unit>
2021-03-11 12:56:11,506 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 12:56:11,508 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:56:11,515 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 12:56:11,515 [main:49] - GENERATED IS CALL =false
2021-03-11 12:56:12,437 [main:55] - randomType = Map<ULong, Pair<ULong, Float>>
2021-03-11 12:56:12,438 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:56:12,477 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:56:12,478 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:56:12,500 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:56:12,501 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:56:12,502 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:56:12,503 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 12:56:12,514 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:56:12,514 [main:110] - replacement of {} of type Function0<Unit> is { println()}
2021-03-11 12:56:12,674 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 12:56:12,675 [main:66] - Compilation checking started
2021-03-11 12:56:13,286 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:56:13,289 [main:103] - replacing (prope5, Int)
2021-03-11 12:56:13,289 [main:38] - replacing prope5 Int
2021-03-11 12:56:13,289 [main:42] - Getting value of type Int
2021-03-11 12:56:13,481 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:56:13,484 [main:46] - GENERATED VALUE OF TYPE Int = -897297780
2021-03-11 12:56:13,484 [main:49] - GENERATED IS CALL =false
2021-03-11 12:56:13,496 [main:55] - randomType = Kla4
2021-03-11 12:56:13,655 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 12:56:13,658 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + prope5)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 12:56:13,667 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:56:13,825 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:56:13,829 [main:66] - Generated call from random type = (Kla4()).prope6.compareTo(false)
2021-03-11 12:56:13,829 [main:94] - GETTING Int from String
2021-03-11 12:56:13,849 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cca13b8]]
2021-03-11 12:56:13,849 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cca13b8]
2021-03-11 12:56:14,015 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-11 12:56:14,018 [main:302] - generating value of type = Int true depth = 1
2021-03-11 12:56:14,021 [main:105] - GENERATED CALL = (str).sumOf({a: Char -> 2095154409})
2021-03-11 12:56:14,021 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36bf0f77]]
2021-03-11 12:56:14,021 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:56:14,171 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:56:14,174 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36bf0f77]
2021-03-11 12:56:14,174 [main:105] - GENERATED CALL = (str).compareTo("cipvj").takeHighestOneBit()
2021-03-11 12:56:14,174 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7d291fed]]
2021-03-11 12:56:14,174 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7a238e5f]
2021-03-11 12:56:14,325 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:56:14,328 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7d291fed]
2021-03-11 12:56:14,328 [main:105] - GENERATED CALL = (str).compareTo("rverf").countOneBits()
2021-03-11 12:56:14,328 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12ba5a1a]]
2021-03-11 12:56:14,328 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12ba5a1a]
2021-03-11 12:56:14,329 [main:105] - GENERATED CALL = (str).count()
2021-03-11 12:56:14,329 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@a5b3754]]
2021-03-11 12:56:14,329 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@a5b3754]
2021-03-11 12:56:14,329 [main:105] - GENERATED CALL = (str).length.countLeadingZeroBits()
2021-03-11 12:56:14,329 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21280b00], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10809a26]]
2021-03-11 12:56:14,329 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21280b00]
2021-03-11 12:56:14,475 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:56:14,478 [main:137] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10809a26]
2021-03-11 12:56:14,478 [main:105] - GENERATED CALL = (str).get(119988630).digitToInt()
2021-03-11 12:56:14,478 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f1f36c0]]
2021-03-11 12:56:14,478 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:56:14,648 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:56:14,809 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:56:14,812 [main:137] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f1f36c0]
2021-03-11 12:56:14,970 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:56:15,132 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:56:15,295 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:56:15,298 [main:105] - GENERATED CALL = (str).subSequence(-423613069, -850985204).lastIndexOf('认', 1656927588, false)
2021-03-11 12:56:15,298 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@d0efe34]]
2021-03-11 12:56:15,298 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@d0efe34]
2021-03-11 12:56:15,448 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:56:15,451 [main:105] - GENERATED CALL = (str).length.rotateRight(1733598072)
2021-03-11 12:56:15,451 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36bf0f77]]
2021-03-11 12:56:15,451 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36bf0f77]
2021-03-11 12:56:15,452 [main:105] - GENERATED CALL = (str).length.takeHighestOneBit()
2021-03-11 12:56:15,452 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@678ee415], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ebc0bf5]]
2021-03-11 12:56:15,452 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ebc0bf5]
2021-03-11 12:56:15,599 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:56:15,602 [main:105] - GENERATED CALL = (str).length.and(2083667833)
2021-03-11 12:56:15,602 [main:110] - replacement of prope5 of type Int is -897297780
2021-03-11 12:56:15,775 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-11 12:56:15,775 [main:66] - Compilation checking started
2021-03-11 12:56:16,472 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error("Continuation " + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + -897297780)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:56:16,474 [main:103] - replacing ("Continuation ", String)
2021-03-11 12:56:16,474 [main:38] - replacing "Continuation " String
2021-03-11 12:56:16,474 [main:42] - Getting value of type String
2021-03-11 12:56:16,626 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:56:16,630 [main:46] - GENERATED VALUE OF TYPE String = "bdvkw"
2021-03-11 12:56:16,631 [main:49] - GENERATED IS CALL =false
2021-03-11 12:56:17,010 [main:55] - randomType = Pair<ULong, String>
2021-03-11 12:56:17,182 [main:302] - generating value of type = Pair<ULong, String> false depth = 0
2021-03-11 12:56:17,349 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: ULong, second: String): Pair<ULong, String> = TODO()
2021-03-11 12:56:17,353 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: ULong, second: String): Pair<ULong, String> = TODO()
2021-03-11 12:56:17,522 [main:302] - generating value of type = ULong true depth = 3
2021-03-11 12:56:17,525 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:56:17,528 [main:95] - GENERATED = Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")
2021-03-11 12:56:17,542 [main:137] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7422651e]
2021-03-11 12:56:17,700 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:56:17,864 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:56:17,867 [main:66] - Generated call from random type = (Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu")
2021-03-11 12:56:17,868 [main:94] - GETTING String from Int
2021-03-11 12:56:17,918 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]]
2021-03-11 12:56:17,919 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:56:17,919 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]
2021-03-11 12:56:17,919 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).toChar().uppercase()
2021-03-11 12:56:17,919 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:56:17,919 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:56:18,070 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:56:18,073 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:56:18,250 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:56:18,253 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).compareTo(-2055154077).toString(-262763763)
2021-03-11 12:56:18,253 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]]
2021-03-11 12:56:18,254 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:56:18,254 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]
2021-03-11 12:56:18,424 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:56:18,427 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).toChar().plus("qvuas")
2021-03-11 12:56:18,428 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]]
2021-03-11 12:56:18,428 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:56:18,428 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]
2021-03-11 12:56:18,586 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:56:18,589 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).toShort().toString(-765407097)
2021-03-11 12:56:18,589 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]]
2021-03-11 12:56:18,589 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:56:18,589 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]
2021-03-11 12:56:18,589 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).toChar().titlecase()
2021-03-11 12:56:18,589 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:56:18,589 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:56:18,589 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:56:18,746 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:56:18,749 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).toInt().toString(544540536)
2021-03-11 12:56:18,749 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:56:18,749 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:56:18,907 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:56:18,910 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).toString(1529006746)
2021-03-11 12:56:18,911 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]]
2021-03-11 12:56:18,911 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:56:18,911 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]
2021-03-11 12:56:18,911 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).toChar().lowercase()
2021-03-11 12:56:18,911 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:56:18,911 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:56:19,061 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:56:19,065 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:56:19,214 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:56:19,217 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).div(-3157748867548792694).toString(-1530300853)
2021-03-11 12:56:19,217 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]]
2021-03-11 12:56:19,217 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:56:19,217 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]
2021-03-11 12:56:19,388 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:56:19,391 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).toByte().toString(-1676652059)
2021-03-11 12:56:19,391 [main:110] - replacement of "Continuation " of type String is (Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu")
2021-03-11 12:56:19,548 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:56:19,549 [main:66] - Compilation checking started
2021-03-11 12:56:20,220 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = prope9
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + -897297780)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:56:20,224 [main:103] - replacing (prope9, String)
2021-03-11 12:56:20,225 [main:38] - replacing prope9 String
2021-03-11 12:56:20,225 [main:42] - Getting value of type String
2021-03-11 12:56:20,406 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:56:20,409 [main:46] - GENERATED VALUE OF TYPE String = "skqcs"
2021-03-11 12:56:20,410 [main:49] - GENERATED IS CALL =false
2021-03-11 12:56:20,415 [main:55] - randomType = Long
2021-03-11 12:56:20,575 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:56:20,606 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@46af30c9]
2021-03-11 12:56:20,607 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]
2021-03-11 12:56:20,607 [main:66] - Generated call from random type = (6008777501488057838).toChar().titlecase()
2021-03-11 12:56:20,608 [main:94] - GETTING String from Boolean
2021-03-11 12:56:20,616 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:56:20,616 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:56:20,786 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:56:20,789 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:56:20,947 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:56:20,950 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(false).toString(-387424816)
2021-03-11 12:56:20,951 [main:110] - replacement of prope9 of type String is "skqcs"
2021-03-11 12:56:21,111 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 12:56:21,111 [main:66] - Compilation checking started
2021-03-11 12:56:21,772 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + -897297780)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:56:21,776 [main:103] - replacing (prope6, Boolean)
2021-03-11 12:56:21,776 [main:38] - replacing prope6 Boolean
2021-03-11 12:56:21,776 [main:42] - Getting value of type Boolean
2021-03-11 12:56:21,939 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:56:21,942 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 12:56:21,942 [main:49] - GENERATED IS CALL =false
2021-03-11 12:56:22,903 [main:55] - randomType = Set<Function1<Kla1, Kla2<Kla1?>>>?
2021-03-11 12:56:22,904 [main:94] - GETTING Boolean from Int
2021-03-11 12:56:22,957 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@98474c2]]
2021-03-11 12:56:22,957 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d]
2021-03-11 12:56:23,108 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:56:23,111 [main:137] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@98474c2]
2021-03-11 12:56:23,111 [main:105] - GENERATED CALL = (0+1).div(0.2575496328420611).isNaN()
2021-03-11 12:56:23,111 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55c8672f]]
2021-03-11 12:56:23,111 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:56:23,111 [main:137] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55c8672f]
2021-03-11 12:56:23,111 [main:105] - GENERATED CALL = (0+1).toChar().isHighSurrogate()
2021-03-11 12:56:23,111 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@628f3477]]
2021-03-11 12:56:23,111 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:56:23,111 [main:137] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@628f3477]
2021-03-11 12:56:23,111 [main:105] - GENERATED CALL = (0+1).toChar().isSurrogate()
2021-03-11 12:56:23,111 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169], public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6822e70d]]
2021-03-11 12:56:23,111 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169]
2021-03-11 12:56:23,112 [main:137] - GENERATING call of type public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6822e70d]
2021-03-11 12:56:23,112 [main:105] - GENERATED CALL = (0+1).toFloat().isInfinite()
2021-03-11 12:56:23,112 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79aa17d2]]
2021-03-11 12:56:23,112 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:56:23,112 [main:137] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79aa17d2]
2021-03-11 12:56:23,112 [main:105] - GENERATED CALL = (0+1).toChar().isLetterOrDigit()
2021-03-11 12:56:23,112 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]]
2021-03-11 12:56:23,112 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]
2021-03-11 12:56:23,283 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:56:23,283 [main:105] - GENERATED CALL = (0+1).equals("yyzmj")
2021-03-11 12:56:23,283 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12b66b2d]]
2021-03-11 12:56:23,284 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:56:23,284 [main:137] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12b66b2d]
2021-03-11 12:56:23,284 [main:105] - GENERATED CALL = (0+1).toChar().isTitleCase()
2021-03-11 12:56:23,284 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.IntRange.contains(element: kotlin.Int?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@53bf104]]
2021-03-11 12:56:23,284 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e]
2021-03-11 12:56:23,444 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:56:23,447 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.IntRange.contains(element: kotlin.Int?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@53bf104]
2021-03-11 12:56:23,607 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:56:23,610 [main:105] - GENERATED CALL = (0+1).rangeTo(-30).contains(1697787499)
2021-03-11 12:56:23,610 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@5c3e3f7b]]
2021-03-11 12:56:23,610 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169]
2021-03-11 12:56:23,611 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@5c3e3f7b]
2021-03-11 12:56:23,774 [main:105] - GENERATED CALL = (0+1).toFloat().equals(null)
2021-03-11 12:56:23,774 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@512146ca]]
2021-03-11 12:56:23,774 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:56:23,774 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@512146ca]
2021-03-11 12:56:23,938 [main:105] - GENERATED CALL = (0+1).toLong().equals(null)
2021-03-11 12:56:23,938 [main:110] - replacement of prope6 of type Boolean is (0+1).rangeTo(-30).contains(1697787499)
2021-03-11 12:56:24,089 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:56:24,090 [main:66] - Compilation checking started
2021-03-11 12:56:24,525 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        (0+1).rangeTo(-30).contains(1697787499) = false
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + -897297780)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:56:24,528 [main:103] - replacing (getOrThrow(), Any?)
2021-03-11 12:56:24,528 [main:38] - replacing getOrThrow() Any?
2021-03-11 12:56:24,528 [main:42] - Getting value of type Any?
2021-03-11 12:56:24,700 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:56:24,700 [main:46] - GENERATED VALUE OF TYPE Any? = "eievs"
2021-03-11 12:56:24,700 [main:49] - GENERATED IS CALL =false
2021-03-11 12:56:24,900 [main:55] - randomType = ArrayDeque<Kla4>
2021-03-11 12:56:25,062 [main:302] - generating value of type = ArrayDeque<Kla4> false depth = 0
2021-03-11 12:56:25,239 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Kla4> = TODO()
2021-03-11 12:56:25,243 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Kla4> = TODO()
2021-03-11 12:56:25,578 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:56:25,581 [main:95] - GENERATED = ArrayDeque<Kla4>(307202433)
2021-03-11 12:56:25,704 [main:137] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayDeque[DeserializedSimpleFunctionDescriptor@58055c86]
2021-03-11 12:56:25,704 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Any? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@d0912df]
2021-03-11 12:56:25,880 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:56:25,883 [main:66] - Generated call from random type = (ArrayDeque<Kla4>(307202433)).toArray().get(941565782)
2021-03-11 12:56:25,884 [main:110] - replacement of getOrThrow() of type Any? is (ArrayDeque<Kla4>(307202433)).toArray().get(941565782)
2021-03-11 12:56:26,044 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:56:26,044 [main:66] - Compilation checking started
2021-03-11 12:56:26,525 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).(ArrayDeque<Kla4>(307202433)).toArray().get(941565782)
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + -897297780)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:56:26,528 [main:103] - replacing (Kla4().prope7, Function0<Unit>)
2021-03-11 12:56:26,528 [main:38] - replacing Kla4().prope7 Function0<Unit>
2021-03-11 12:56:26,528 [main:42] - Getting value of type Function0<Unit>
2021-03-11 12:56:26,681 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 12:56:26,684 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:56:26,691 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 12:56:26,691 [main:49] - GENERATED IS CALL =false
2021-03-11 12:56:26,697 [main:55] - randomType = Int
2021-03-11 12:56:26,845 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:56:26,880 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:56:26,911 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:56:26,912 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:56:26,913 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:56:26,932 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:56:26,933 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:56:26,934 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:56:26,935 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 12:56:26,945 [main:110] - replacement of Kla4().prope7 of type Function0<Unit> is { println()}
2021-03-11 12:56:27,126 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 12:56:27,126 [main:66] - Compilation checking started
2021-03-11 12:56:27,606 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + -897297780)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{ println()} = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:56:27,610 [main:103] - replacing (prope3, Result<Ty0>)
2021-03-11 12:56:27,610 [main:38] - replacing prope3 Result<Ty0>
2021-03-11 12:56:27,610 [main:42] - Getting value of type Result<Ty0>
2021-03-11 12:56:27,830 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-11 12:56:27,990 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 12:56:27,994 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 12:56:28,351 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 12:56:28,351 [main:46] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-11 12:56:28,962 [main:55] - randomType = Function2<UShort, Long, Triple<Boolean, Long, Float>>
2021-03-11 12:56:28,964 [main:94] - GETTING Result<Ty0> from Int
2021-03-11 12:56:29,016 [main:94] - GETTING Result<Ty0> from String
2021-03-11 12:56:29,048 [main:94] - GETTING Result<Ty0> from Int
2021-03-11 12:56:29,050 [main:94] - GETTING Result<Ty0> from Int
2021-03-11 12:56:29,052 [main:94] - GETTING Result<Ty0> from Int
2021-03-11 12:56:29,054 [main:94] - GETTING Result<Ty0> from Int
2021-03-11 12:56:29,055 [main:94] - GETTING Result<Ty0> from Boolean
2021-03-11 12:56:29,069 [main:94] - GETTING Result<Ty0> from String
2021-03-11 12:56:29,069 [main:107] - Cant find and generate replacement for prope3 type Result<Ty0>
2021-03-11 12:56:29,069 [main:103] - replacing (prope3, Result<Any?>)
2021-03-11 12:56:29,069 [main:38] - replacing prope3 Result<Any?>
2021-03-11 12:56:29,069 [main:42] - Getting value of type Result<Any?>
2021-03-11 12:56:29,223 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-11 12:56:29,403 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 12:56:29,407 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 12:56:29,759 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-11 12:56:29,762 [main:302] - generating value of type = Any false depth = 4
2021-03-11 12:56:29,762 [main:95] - GENERATED = runCatching<Any?>({ "bdshs"})
2021-03-11 12:56:29,762 [main:46] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ "bdshs"})
2021-03-11 12:56:29,762 [main:49] - GENERATED IS CALL =true
2021-03-11 12:56:30,143 [main:55] - randomType = Function1<Long?, Kla4>
2021-03-11 12:56:30,144 [main:94] - GETTING Result<Any?> from String
2021-03-11 12:56:30,173 [main:94] - GETTING Result<Any?> from Boolean
2021-03-11 12:56:30,188 [main:94] - GETTING Result<Any?> from Int
2021-03-11 12:56:30,240 [main:94] - GETTING Result<Any?> from Int
2021-03-11 12:56:30,241 [main:94] - GETTING Result<Any?> from Int
2021-03-11 12:56:30,243 [main:94] - GETTING Result<Any?> from String
2021-03-11 12:56:30,244 [main:94] - GETTING Result<Any?> from Int
2021-03-11 12:56:30,246 [main:94] - GETTING Result<Any?> from Int
2021-03-11 12:56:30,246 [main:110] - replacement of prope3 of type Result<Any?> is runCatching<Any?>({ "bdshs"})
2021-03-11 12:56:30,401 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 12:56:30,401 [main:66] - Compilation checking started
2021-03-11 12:56:31,019 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
runCatching<Any?>({ "bdshs"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + -897297780)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:56:31,022 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 12:56:31,022 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 12:56:31,022 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 12:56:31,227 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 12:56:31,233 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 12:56:31,426 [main:55] - randomType = LinkedHashSet<ULong>
2021-03-11 12:56:31,587 [main:302] - generating value of type = LinkedHashSet<ULong> false depth = 0
2021-03-11 12:56:31,761 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: ULong): LkedHashSet<ULong> = TODO()
2021-03-11 12:56:31,764 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: ULong): LkedHashSet<ULong> = TODO()
2021-03-11 12:56:31,925 [main:302] - generating value of type = ULong true depth = 3
2021-03-11 12:56:31,928 [main:95] - GENERATED = linkedSetOf<ULong>(7364448692001096996.toULong())
2021-03-11 12:56:32,097 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:56:32,122 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:56:32,156 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:56:32,157 [main:94] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 12:56:32,165 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:56:32,165 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:56:32,166 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:56:32,167 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:56:32,167 [main:107] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 12:56:32,167 [main:103] - replacing (prope3.getOrThrow(), Ty0)
2021-03-11 12:56:32,167 [main:38] - replacing prope3.getOrThrow() Ty0
2021-03-11 12:56:32,167 [main:42] - Getting value of type Ty0
2021-03-11 12:56:32,339 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 12:56:32,345 [main:46] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 12:56:32,351 [main:55] - randomType = Short
2021-03-11 12:56:32,513 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:56:32,556 [main:94] - GETTING Ty0 from Int
2021-03-11 12:56:32,595 [main:94] - GETTING Ty0 from Int
2021-03-11 12:56:32,596 [main:94] - GETTING Ty0 from String
2021-03-11 12:56:32,620 [main:94] - GETTING Ty0 from String
2021-03-11 12:56:32,621 [main:94] - GETTING Ty0 from Boolean
2021-03-11 12:56:32,632 [main:94] - GETTING Ty0 from Int
2021-03-11 12:56:32,632 [main:94] - GETTING Ty0 from Int
2021-03-11 12:56:32,633 [main:94] - GETTING Ty0 from Int
2021-03-11 12:56:32,633 [main:107] - Cant find and generate replacement for prope3.getOrThrow() type Ty0
2021-03-11 12:56:32,633 [main:103] - replacing ("Wrong state-machine generated: it is not finished yet", String)
2021-03-11 12:56:32,633 [main:38] - replacing "Wrong state-machine generated: it is not finished yet" String
2021-03-11 12:56:32,633 [main:42] - Getting value of type String
2021-03-11 12:56:32,796 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:56:32,799 [main:46] - GENERATED VALUE OF TYPE String = "bwlhj"
2021-03-11 12:56:32,799 [main:49] - GENERATED IS CALL =false
2021-03-11 12:56:33,169 [main:55] - randomType = List<Byte>
2021-03-11 12:56:33,170 [main:94] - GETTING String from Int
2021-03-11 12:56:33,222 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]]
2021-03-11 12:56:33,222 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:56:33,222 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]
2021-03-11 12:56:33,371 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:56:33,374 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).toChar().plus("xudjc")
2021-03-11 12:56:33,374 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:56:33,374 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:56:33,547 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:56:33,550 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:56:33,711 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:56:33,715 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).compareTo(-1662748621).toString(272901691)
2021-03-11 12:56:33,715 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:56:33,715 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:56:33,874 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:56:33,877 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:56:34,040 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:56:34,044 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).div(-7504169397068447183).toString(2104382057)
2021-03-11 12:56:34,044 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:56:34,044 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:56:34,212 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:56:34,215 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).toString(-586458762)
2021-03-11 12:56:34,215 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]]
2021-03-11 12:56:34,215 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:56:34,215 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]
2021-03-11 12:56:34,216 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).toChar().titlecase()
2021-03-11 12:56:34,216 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:56:34,216 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:56:34,216 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:56:34,369 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:56:34,372 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).toLong().toString(1965854268)
2021-03-11 12:56:34,372 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]]
2021-03-11 12:56:34,372 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:56:34,372 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]
2021-03-11 12:56:34,373 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).toChar().lowercase()
2021-03-11 12:56:34,373 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]]
2021-03-11 12:56:34,373 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:56:34,373 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]
2021-03-11 12:56:34,373 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).toChar().uppercase()
2021-03-11 12:56:34,373 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]]
2021-03-11 12:56:34,373 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:56:34,373 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]
2021-03-11 12:56:34,522 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:56:34,525 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).toShort().toString(-978898786)
2021-03-11 12:56:34,525 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]]
2021-03-11 12:56:34,525 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:56:34,525 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]
2021-03-11 12:56:34,697 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:56:34,701 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).toByte().toString(-14604133)
2021-03-11 12:56:34,701 [main:110] - replacement of "Wrong state-machine generated: it is not finished yet" of type String is (A(-1649075752, "cfyuz").x).toLong().toString(1965854268)
2021-03-11 12:56:34,863 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:56:34,864 [main:66] - Compilation checking started
2021-03-11 12:56:35,532 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
runCatching<Any?>({ "bdshs"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = 0
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + -897297780)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:56:35,536 [main:103] - replacing (0, Int)
2021-03-11 12:56:35,536 [main:38] - replacing 0 Int
2021-03-11 12:56:35,536 [main:42] - Getting value of type Int
2021-03-11 12:56:35,712 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:56:35,716 [main:46] - GENERATED VALUE OF TYPE Int = -1937028215
2021-03-11 12:56:35,716 [main:49] - GENERATED IS CALL =false
2021-03-11 12:56:36,086 [main:55] - randomType = Kla2<UInt>
2021-03-11 12:56:36,248 [main:302] - generating value of type = Kla2<UInt> false depth = 0
2021-03-11 12:56:36,251 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 12:56:36,790 [main:302] - generating value of type = Kla5 false depth = 2
2021-03-11 12:56:36,793 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}
2021-03-11 12:56:36,813 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla2[DeserializedSimpleFunctionDescriptor@112eeffd]
2021-03-11 12:56:36,966 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:56:36,966 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:56:37,157 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:56:37,161 [main:66] - Generated call from random type = (Kla5).equals("izrxw").compareTo(false)
2021-03-11 12:56:37,161 [main:94] - GETTING Int from Int
2021-03-11 12:56:37,214 [main:101] - Case = [public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18626c8c]]
2021-03-11 12:56:37,214 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18626c8c]
2021-03-11 12:56:37,375 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:56:37,378 [main:105] - GENERATED CALL = (sum).plus(-3)
2021-03-11 12:56:37,379 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d63158f]]
2021-03-11 12:56:37,379 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:56:37,379 [main:137] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d63158f]
2021-03-11 12:56:37,379 [main:105] - GENERATED CALL = (sum).toInt().dec()
2021-03-11 12:56:37,379 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@ccd075b]]
2021-03-11 12:56:37,379 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:56:37,379 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@ccd075b]
2021-03-11 12:56:37,543 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:56:37,546 [main:105] - GENERATED CALL = (sum).toByte().rem(66)
2021-03-11 12:56:37,546 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@43b701b6]]
2021-03-11 12:56:37,546 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:56:37,547 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@43b701b6]
2021-03-11 12:56:37,547 [main:105] - GENERATED CALL = (sum).toByte().unaryPlus()
2021-03-11 12:56:37,547 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@13ad634b]]
2021-03-11 12:56:37,547 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:56:37,718 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:56:37,721 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@13ad634b]
2021-03-11 12:56:37,721 [main:105] - GENERATED CALL = (sum).div(-2152220295391398390).countOneBits()
2021-03-11 12:56:37,721 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36bf0f77]]
2021-03-11 12:56:37,721 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36bf0f77]
2021-03-11 12:56:37,721 [main:105] - GENERATED CALL = (sum).takeHighestOneBit()
2021-03-11 12:56:37,721 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@390b15c0]]
2021-03-11 12:56:37,721 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:56:37,721 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@390b15c0]
2021-03-11 12:56:37,876 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:56:37,879 [main:105] - GENERATED CALL = (sum).toChar().minus('㧝')
2021-03-11 12:56:37,879 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ec35323]]
2021-03-11 12:56:37,879 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:56:37,880 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ec35323]
2021-03-11 12:56:38,032 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:56:38,035 [main:105] - GENERATED CALL = (sum).toInt().rotateLeft(830781713)
2021-03-11 12:56:38,035 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c9f5998]]
2021-03-11 12:56:38,036 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:56:38,036 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c9f5998]
2021-03-11 12:56:38,186 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:56:38,189 [main:105] - GENERATED CALL = (sum).toInt().shl(-1029051631)
2021-03-11 12:56:38,352 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c9f5998]]
2021-03-11 12:56:38,352 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:56:38,549 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:56:38,552 [main:137] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4c9f5998]
2021-03-11 12:56:38,715 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:56:38,718 [main:105] - GENERATED CALL = (sum).compareTo(824960708).shl(1107829391)
2021-03-11 12:56:38,718 [main:110] - replacement of 0 of type Int is (sum).toByte().unaryPlus()
2021-03-11 12:56:38,878 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:56:38,879 [main:66] - Compilation checking started
2021-03-11 12:56:39,591 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
runCatching<Any?>({ "bdshs"}).exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + -897297780)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:56:39,594 [main:103] - replacing (runCatching<Any?>({ "bdshs"}).exceptionOrNull()?.let(x), Unit?)
2021-03-11 12:56:39,594 [main:38] - replacing runCatching<Any?>({ "bdshs"}).exceptionOrNull()?.let(x) Unit?
2021-03-11 12:56:39,594 [main:42] - Getting value of type Unit?
2021-03-11 12:56:39,742 [main:302] - generating value of type = Unit false depth = 0
2021-03-11 12:56:39,924 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:56:39,928 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:56:40,284 [main:302] - generating value of type = Any false depth = 3
2021-03-11 12:56:40,284 [main:95] - GENERATED = println("zojur")
2021-03-11 12:56:40,284 [main:46] - GENERATED VALUE OF TYPE Unit? = println("zojur")
2021-03-11 12:56:40,284 [main:49] - GENERATED IS CALL =true
2021-03-11 12:56:40,296 [main:55] - randomType = Kla4
2021-03-11 12:56:40,459 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 12:56:40,472 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + -897297780)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}
2021-03-11 12:56:40,481 [main:137] - GENERATING call of type public final fun fu9(): kotlin.Unit defined in Kla4[SimpleFunctionDescriptorImpl@8cee9e5]
2021-03-11 12:56:40,481 [main:66] - Generated call from random type = (Kla4()).fu9()
2021-03-11 12:56:40,483 [main:94] - GETTING Unit? from String
2021-03-11 12:56:40,507 [main:101] - Case = [public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e2d4661]]
2021-03-11 12:56:40,507 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e2d4661]
2021-03-11 12:56:40,664 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 12:56:40,667 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:56:40,828 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 12:56:40,832 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 12:56:41,388 [main:302] - generating value of type = Int true depth = 4
2021-03-11 12:56:41,391 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 12:56:41,394 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 12:56:41,561 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:56:41,576 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:56:41,910 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 12:56:41,913 [main:95] - GENERATED = check(false)
2021-03-11 12:56:41,914 [main:95] - GENERATED = repeat(1332756419, {a: Int -> check(false)})
2021-03-11 12:56:41,914 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y)?.forEach({a: Char -> repeat(1332756419, {a: Int -> check(false)})})
2021-03-11 12:56:41,914 [main:101] - Case = [public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a0c0c24]]
2021-03-11 12:56:41,914 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a0c0c24]
2021-03-11 12:56:42,064 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 12:56:42,067 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:56:42,248 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:56:42,252 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:56:42,799 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 12:56:42,802 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 12:56:42,804 [main:302] - generating value of type = Any false depth = 5
2021-03-11 12:56:42,805 [main:95] - GENERATED = require(true, { "goeoz"})
2021-03-11 12:56:42,805 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
2021-03-11 12:56:42,805 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a0c0c24]]
2021-03-11 12:56:42,805 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:56:42,964 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:56:43,120 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:56:43,123 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a0c0c24]
2021-03-11 12:56:43,273 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 12:56:43,276 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:56:43,456 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:56:43,460 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:56:43,813 [main:302] - generating value of type = Any false depth = 4
2021-03-11 12:56:43,813 [main:95] - GENERATED = println("fpsvr")
2021-03-11 12:56:43,813 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y)?.subSequence(-2050615304, -360099797).forEachIndexed({a: Int, b: Char -> println("fpsvr")})
2021-03-11 12:56:43,813 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e2d4661]]
2021-03-11 12:56:43,813 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:56:43,989 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:56:44,147 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:56:44,151 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e2d4661]
2021-03-11 12:56:44,305 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 12:56:44,308 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:56:44,464 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 12:56:44,468 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 12:56:44,837 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 12:56:44,840 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 12:56:45,006 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 12:56:45,010 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 12:56:45,367 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 8
2021-03-11 12:56:45,370 [main:302] - generating value of type = Unit false depth = 9
2021-03-11 12:56:45,530 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:56:45,534 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:56:45,902 [main:302] - generating value of type = Any false depth = 12
2021-03-11 12:56:45,902 [main:95] - GENERATED = println("yoejh")
2021-03-11 12:56:45,902 [main:95] - GENERATED = contract({ println("yoejh")})
2021-03-11 12:56:45,903 [main:95] - GENERATED = contract({ contract({ println("yoejh")})})
2021-03-11 12:56:45,903 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y)?.subSequence(-1404982511, -356350470).forEach({a: Char -> contract({ contract({ println("yoejh")})})})
2021-03-11 12:56:45,903 [main:110] - replacement of runCatching<Any?>({ "bdshs"}).exceptionOrNull()?.let(x) of type Unit? is (A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
2021-03-11 12:56:46,065 [main:33] - Trying to replace Element(SAFE_ACCESS_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 12:56:46,065 [main:66] - Compilation checking started
2021-03-11 12:56:46,735 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((sum).toInt().toString(788373935) + -897297780)
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:56:46,740 [main:103] - replacing ((sum).toInt().toString(788373935) + -897297780, String)
2021-03-11 12:56:46,740 [main:38] - replacing (sum).toInt().toString(788373935) + -897297780 String
2021-03-11 12:56:46,740 [main:42] - Getting value of type String
2021-03-11 12:56:46,914 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:56:46,917 [main:46] - GENERATED VALUE OF TYPE String = "orpcd"
2021-03-11 12:56:46,917 [main:49] - GENERATED IS CALL =false
2021-03-11 12:56:47,097 [main:55] - randomType = ArrayDeque<Short>
2021-03-11 12:56:47,276 [main:302] - generating value of type = ArrayDeque<Short> false depth = 0
2021-03-11 12:56:47,444 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<Short> = TODO()
2021-03-11 12:56:47,448 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<Short> = TODO()
2021-03-11 12:56:47,619 [main:95] - GENERATED = ArrayDeque<Short>()
2021-03-11 12:56:47,761 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:56:47,964 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:56:47,968 [main:66] - Generated call from random type = (ArrayDeque<Short>()).size.toString(859868217)
2021-03-11 12:56:47,968 [main:94] - GETTING String from String
2021-03-11 12:56:48,002 [main:101] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1eb803d8]]
2021-03-11 12:56:48,002 [main:137] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1eb803d8]
2021-03-11 12:56:48,160 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:56:48,163 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).repeat(2142839991)
2021-03-11 12:56:48,163 [main:101] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21284ead]]
2021-03-11 12:56:48,163 [main:137] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21284ead]
2021-03-11 12:56:48,163 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).capitalize()
2021-03-11 12:56:48,163 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@340b14f4]]
2021-03-11 12:56:48,163 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@340b14f4]
2021-03-11 12:56:48,313 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:56:48,493 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:56:48,659 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:56:48,665 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).replaceRange(-943424174, 237287721, "wqovi")
2021-03-11 12:56:48,665 [main:101] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@268eb547]]
2021-03-11 12:56:48,665 [main:137] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@268eb547]
2021-03-11 12:56:48,827 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:56:48,830 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:56:48,833 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).filter({a: Char -> true})
2021-03-11 12:56:48,834 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@709de1db]]
2021-03-11 12:56:48,834 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:56:48,996 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:56:49,168 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:56:49,171 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@709de1db]
2021-03-11 12:56:49,328 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 12:56:49,488 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 12:56:49,492 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 12:56:49,862 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:56:49,865 [main:95] - GENERATED = Regex("hznwn")
2021-03-11 12:56:50,027 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:56:50,030 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).subSequence(1718959009, 444108413).replaceFirst(Regex("hznwn"), "mkudx")
2021-03-11 12:56:50,031 [main:101] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31fa72b]]
2021-03-11 12:56:50,031 [main:137] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31fa72b]
2021-03-11 12:56:50,194 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:56:50,197 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).dropLast(-1050068942)
2021-03-11 12:56:50,197 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a1cf14c]]
2021-03-11 12:56:50,197 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:56:50,363 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:56:50,521 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:56:50,524 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a1cf14c]
2021-03-11 12:56:50,676 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:56:50,857 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:56:50,860 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).subSequence(1850233480, -990561417).substring(529808265, -279378884)
2021-03-11 12:56:50,860 [main:101] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@161cf1b0]]
2021-03-11 12:56:50,860 [main:137] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@161cf1b0]
2021-03-11 12:56:51,024 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:56:51,190 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:56:51,358 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:56:51,361 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).replace('☽', '窅', true)
2021-03-11 12:56:51,361 [main:101] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c739beb]]
2021-03-11 12:56:51,361 [main:137] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c739beb]
2021-03-11 12:56:51,529 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:56:51,690 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:56:51,850 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:56:51,853 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).replaceBeforeLast('㇗', "rixjz", "khrkq")
2021-03-11 12:56:51,853 [main:101] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a0c6009]]
2021-03-11 12:56:51,853 [main:137] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a0c6009]
2021-03-11 12:56:52,037 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:56:52,040 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:56:52,043 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).takeLastWhile({a: Char -> false})
2021-03-11 12:56:52,043 [main:110] - replacement of (sum).toInt().toString(788373935) + -897297780 of type String is (A(-1649075752, "cfyuz").y).capitalize()
2021-03-11 12:56:52,207 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:56:52,207 [main:66] - Compilation checking started
2021-03-11 12:56:52,882 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:56:52,885 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 12:56:52,885 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 12:56:52,885 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 12:56:53,045 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 12:56:53,051 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 12:56:53,823 [main:55] - randomType = Function2<Short?, Kla4, Kla2<UByte>>
2021-03-11 12:56:53,824 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:56:53,846 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:56:53,883 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:56:53,884 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:56:53,885 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:56:53,885 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:56:53,886 [main:94] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 12:56:53,901 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:56:53,901 [main:107] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 12:56:53,901 [main:103] - replacing (prope8 != null, Boolean)
2021-03-11 12:56:53,901 [main:38] - replacing prope8 != null Boolean
2021-03-11 12:56:53,901 [main:42] - Getting value of type Boolean
2021-03-11 12:56:54,076 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:56:54,079 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 12:56:54,079 [main:49] - GENERATED IS CALL =false
2021-03-11 12:56:54,639 [main:55] - randomType = MutableMap<UShort, Kla5>
2021-03-11 12:56:54,639 [main:94] - GETTING Boolean from Boolean
2021-03-11 12:56:54,651 [main:101] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@63c6a639]]
2021-03-11 12:56:54,651 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@63c6a639]
2021-03-11 12:56:54,651 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).not()
2021-03-11 12:56:54,651 [main:101] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1a38040]]
2021-03-11 12:56:54,651 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1a38040]
2021-03-11 12:56:54,814 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:56:54,817 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).xor(false)
2021-03-11 12:56:54,818 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1d132288], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@53884783]]
2021-03-11 12:56:54,818 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1d132288]
2021-03-11 12:56:54,981 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:56:54,981 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@53884783]
2021-03-11 12:56:55,146 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:56:55,146 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).equals("zarns").equals("afqbc")
2021-03-11 12:56:55,146 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1d132288], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1a38040]]
2021-03-11 12:56:55,146 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1d132288]
2021-03-11 12:56:55,313 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1a38040]
2021-03-11 12:56:55,476 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:56:55,479 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).equals(null).xor(true)
2021-03-11 12:56:55,480 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]]
2021-03-11 12:56:55,480 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:56:55,631 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:56:55,634 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]
2021-03-11 12:56:55,813 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:56:55,813 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(true).equals("hqxvv")
2021-03-11 12:56:55,813 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1d132288], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@66871f61]]
2021-03-11 12:56:55,813 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1d132288]
2021-03-11 12:56:55,977 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:56:55,978 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@66871f61]
2021-03-11 12:56:56,140 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:56:56,144 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).equals("yvfey").or(false)
2021-03-11 12:56:56,144 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@53884783]]
2021-03-11 12:56:56,144 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@53884783]
2021-03-11 12:56:56,307 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:56:56,308 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).equals("qegct")
2021-03-11 12:56:56,308 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1d132288], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4063f07e]]
2021-03-11 12:56:56,308 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1d132288]
2021-03-11 12:56:56,474 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:56:56,474 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4063f07e]
2021-03-11 12:56:56,629 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:56:56,632 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).equals("peydo").and(false)
2021-03-11 12:56:56,632 [main:101] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4063f07e]]
2021-03-11 12:56:56,632 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4063f07e]
2021-03-11 12:56:56,788 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:56:56,791 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).and(false)
2021-03-11 12:56:56,791 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1d132288], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@63c6a639]]
2021-03-11 12:56:56,791 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@1d132288]
2021-03-11 12:56:56,977 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:56:56,977 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@63c6a639]
2021-03-11 12:56:56,977 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).equals("swffn").not()
2021-03-11 12:56:56,977 [main:110] - replacement of prope8 != null of type Boolean is (sum == 0+1+2+3+4).xor(false)
2021-03-11 12:56:57,143 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:56:57,144 [main:66] - Compilation checking started
2021-03-11 12:56:57,623 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while ((sum == 0+1+2+3+4).xor(false)) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:56:57,627 [main:103] - replacing (true, Boolean)
2021-03-11 12:56:57,628 [main:38] - replacing true Boolean
2021-03-11 12:56:57,628 [main:42] - Getting value of type Boolean
2021-03-11 12:56:57,795 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:56:57,798 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 12:56:57,798 [main:49] - GENERATED IS CALL =false
2021-03-11 12:56:57,981 [main:55] - randomType = LinkedHashSet<ULong>
2021-03-11 12:56:58,164 [main:302] - generating value of type = LinkedHashSet<ULong> false depth = 0
2021-03-11 12:56:58,335 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(): LinkedHashSet<ULong> = TODO()
2021-03-11 12:56:58,339 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(): LinkedHashSet<ULong> = TODO()
2021-03-11 12:56:58,512 [main:95] - GENERATED = LinkedHashSet<ULong>()
2021-03-11 12:56:58,646 [main:137] - GENERATING call of type public open fun contains(element: kotlin.ULong): kotlin.Boolean defined in kotlin.collections.AbstractCollection[DeserializedSimpleFunctionDescriptor@2b2261fb]
2021-03-11 12:56:58,821 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:56:58,824 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@53884783]
2021-03-11 12:56:58,978 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:56:58,978 [main:66] - Generated call from random type = (LinkedHashSet<ULong>()).contains(3424084978944642725.toULong()).equals("rmmto")
2021-03-11 12:56:58,979 [main:94] - GETTING Boolean from Int
2021-03-11 12:56:59,024 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@27eff770]]
2021-03-11 12:56:59,025 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d]
2021-03-11 12:56:59,177 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:56:59,180 [main:137] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@27eff770]
2021-03-11 12:56:59,180 [main:105] - GENERATED CALL = (sum).div(0.9942490977097691).isInfinite()
2021-03-11 12:56:59,180 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.IntRange.contains(element: kotlin.Int?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@53bf104]]
2021-03-11 12:56:59,180 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e]
2021-03-11 12:56:59,357 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:56:59,361 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.IntRange.contains(element: kotlin.Int?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@53bf104]
2021-03-11 12:56:59,540 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:56:59,543 [main:105] - GENERATED CALL = (sum).rangeTo(-25).contains(-1796447917)
2021-03-11 12:56:59,544 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@216b78]]
2021-03-11 12:56:59,544 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:56:59,544 [main:137] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@216b78]
2021-03-11 12:56:59,544 [main:105] - GENERATED CALL = (sum).toChar().isWhitespace()
2021-03-11 12:56:59,544 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@5c3e3f7b]]
2021-03-11 12:56:59,544 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169]
2021-03-11 12:56:59,544 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@5c3e3f7b]
2021-03-11 12:56:59,707 [main:105] - GENERATED CALL = (sum).toFloat().equals(null)
2021-03-11 12:56:59,707 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2443d528]]
2021-03-11 12:56:59,707 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:56:59,707 [main:137] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2443d528]
2021-03-11 12:56:59,707 [main:105] - GENERATED CALL = (sum).toChar().isLetter()
2021-03-11 12:56:59,707 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d46925b]]
2021-03-11 12:56:59,707 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:56:59,707 [main:137] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d46925b]
2021-03-11 12:56:59,707 [main:105] - GENERATED CALL = (sum).toChar().isLowSurrogate()
2021-03-11 12:56:59,707 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67b4957]]
2021-03-11 12:56:59,707 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:56:59,708 [main:137] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67b4957]
2021-03-11 12:56:59,871 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:57:00,045 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:57:00,049 [main:105] - GENERATED CALL = (sum).toChar().equals('餣', true)
2021-03-11 12:57:00,049 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79aa17d2]]
2021-03-11 12:57:00,049 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:57:00,049 [main:137] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79aa17d2]
2021-03-11 12:57:00,049 [main:105] - GENERATED CALL = (sum).toChar().isLetterOrDigit()
2021-03-11 12:57:00,049 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@1b93c67f]]
2021-03-11 12:57:00,049 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d]
2021-03-11 12:57:00,205 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:57:00,208 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@1b93c67f]
2021-03-11 12:57:00,364 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:57:00,365 [main:105] - GENERATED CALL = (sum).div(0.13675481620687246).equals("ftsjr")
2021-03-11 12:57:00,365 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@631e496]]
2021-03-11 12:57:00,365 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:57:00,365 [main:137] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@631e496]
2021-03-11 12:57:00,365 [main:105] - GENERATED CALL = (sum).toChar().isISOControl()
2021-03-11 12:57:00,365 [main:110] - replacement of true of type Boolean is (sum).div(0.9942490977097691).isInfinite()
2021-03-11 12:57:00,542 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:57:00,543 [main:66] - Compilation checking started
2021-03-11 12:57:01,042 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (sum).div(0.9942490977097691).isInfinite()) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:57:01,045 [main:103] - replacing (prope9, String)
2021-03-11 12:57:01,046 [main:38] - replacing prope9 String
2021-03-11 12:57:01,046 [main:42] - Getting value of type String
2021-03-11 12:57:01,214 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:57:01,217 [main:46] - GENERATED VALUE OF TYPE String = "yxddq"
2021-03-11 12:57:01,218 [main:49] - GENERATED IS CALL =false
2021-03-11 12:57:01,229 [main:55] - randomType = Kla3
2021-03-11 12:57:01,384 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-11 12:57:01,387 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}
2021-03-11 12:57:01,395 [main:94] - GETTING String from Int
2021-03-11 12:57:01,440 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]]
2021-03-11 12:57:01,440 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:57:01,440 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]
2021-03-11 12:57:01,440 [main:105] - GENERATED CALL = (0+1+2).toChar().uppercase()
2021-03-11 12:57:01,440 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:57:01,440 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:57:01,595 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:57:01,598 [main:105] - GENERATED CALL = (0+1+2).toString(-263007244)
2021-03-11 12:57:01,598 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:57:01,598 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:57:01,771 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:57:01,775 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:57:01,936 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:57:01,940 [main:105] - GENERATED CALL = (0+1+2).div(-8450014601314941789).toString(-600665891)
2021-03-11 12:57:01,940 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:57:01,940 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:57:02,103 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:57:02,106 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:57:02,267 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:57:02,270 [main:105] - GENERATED CALL = (0+1+2).compareTo(604166402).toString(1611537509)
2021-03-11 12:57:02,271 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:57:02,271 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4f60f451]
2021-03-11 12:57:02,271 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:57:02,436 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:57:02,439 [main:105] - GENERATED CALL = (0+1+2).toLong().toString(852398673)
2021-03-11 12:57:02,439 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]]
2021-03-11 12:57:02,439 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:57:02,439 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]
2021-03-11 12:57:02,593 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:57:02,596 [main:105] - GENERATED CALL = (0+1+2).toShort().toString(1189718700)
2021-03-11 12:57:02,596 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]]
2021-03-11 12:57:02,596 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:57:02,597 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]
2021-03-11 12:57:02,753 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:57:02,756 [main:105] - GENERATED CALL = (0+1+2).toChar().plus("cpfwx")
2021-03-11 12:57:02,756 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:57:02,756 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:57:02,756 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:57:02,932 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:57:02,935 [main:105] - GENERATED CALL = (0+1+2).toInt().toString(-745734971)
2021-03-11 12:57:02,935 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]]
2021-03-11 12:57:02,935 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:57:02,935 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]
2021-03-11 12:57:02,936 [main:105] - GENERATED CALL = (0+1+2).toChar().lowercase()
2021-03-11 12:57:02,936 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]]
2021-03-11 12:57:02,936 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:57:02,936 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]
2021-03-11 12:57:02,936 [main:105] - GENERATED CALL = (0+1+2).toChar().titlecase()
2021-03-11 12:57:02,936 [main:110] - replacement of prope9 of type String is (0+1+2).toChar().titlecase()
2021-03-11 12:57:03,100 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:57:03,101 [main:66] - Compilation checking started
2021-03-11 12:57:03,580 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            (0+1+2).toChar().titlecase() = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:57:03,583 [main:103] - replacing (Kla0, Kla6)
2021-03-11 12:57:03,583 [main:38] - replacing Kla0 Kla6
2021-03-11 12:57:03,583 [main:42] - Getting value of type Kla6
2021-03-11 12:57:03,749 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 12:57:03,754 [main:112] - generating klass Kla6 text = companion object Kla6 : Kla0()
2021-03-11 12:57:03,754 [main:46] - GENERATED VALUE OF TYPE Kla6 = 
2021-03-11 12:57:04,337 [main:55] - randomType = HashSet<Kla2<Short?>>
2021-03-11 12:57:04,508 [main:302] - generating value of type = HashSet<Kla2<Short?>> false depth = 0
2021-03-11 12:57:04,678 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): HashSet<Kla2<Short?>> = TODO()
2021-03-11 12:57:04,682 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): HashSet<Kla2<Short?>> = TODO()
2021-03-11 12:57:04,854 [main:95] - GENERATED = linkedSetOf<Kla2<Short?>>()
2021-03-11 12:57:05,026 [main:94] - GETTING Kla6 from String
2021-03-11 12:57:05,053 [main:94] - GETTING Kla6 from Boolean
2021-03-11 12:57:05,066 [main:94] - GETTING Kla6 from Int
2021-03-11 12:57:05,116 [main:94] - GETTING Kla6 from Int
2021-03-11 12:57:05,117 [main:94] - GETTING Kla6 from Int
2021-03-11 12:57:05,117 [main:94] - GETTING Kla6 from String
2021-03-11 12:57:05,118 [main:94] - GETTING Kla6 from Int
2021-03-11 12:57:05,118 [main:94] - GETTING Kla6 from Int
2021-03-11 12:57:05,118 [main:107] - Cant find and generate replacement for Kla0 type Kla6
2021-03-11 12:57:05,118 [main:103] - replacing (prope7, Function0<Unit>)
2021-03-11 12:57:05,119 [main:38] - replacing prope7 Function0<Unit>
2021-03-11 12:57:05,119 [main:42] - Getting value of type Function0<Unit>
2021-03-11 12:57:05,295 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 12:57:05,298 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:57:05,466 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:57:05,470 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 12:57:05,822 [main:302] - generating value of type = Any false depth = 4
2021-03-11 12:57:05,822 [main:95] - GENERATED = print("hxrfk")
2021-03-11 12:57:05,822 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { print("hxrfk")}
2021-03-11 12:57:05,823 [main:49] - GENERATED IS CALL =false
2021-03-11 12:57:06,027 [main:55] - randomType = HashSet<Boolean>
2021-03-11 12:57:06,183 [main:302] - generating value of type = HashSet<Boolean> false depth = 0
2021-03-11 12:57:06,341 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): HashSet<Boolean> = TODO()
2021-03-11 12:57:06,345 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): HashSet<Boolean> = TODO()
2021-03-11 12:57:06,910 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:57:06,913 [main:302] - generating value of type = Float true depth = 3
2021-03-11 12:57:06,916 [main:95] - GENERATED = LinkedHashSet<Boolean>(-104956857, 0.35129303f)
2021-03-11 12:57:07,048 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:57:07,073 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:57:07,132 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:57:07,133 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:57:07,134 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 12:57:07,148 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:57:07,149 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:57:07,150 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:57:07,150 [main:110] - replacement of prope7 of type Function0<Unit> is { print("hxrfk")}
2021-03-11 12:57:07,303 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 12:57:07,304 [main:66] - Compilation checking started
2021-03-11 12:57:07,742 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = false
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        { print("hxrfk")}()
        if ((str).all({a: Char -> false})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:57:07,744 [main:103] - replacing (false, Boolean)
2021-03-11 12:57:07,745 [main:38] - replacing false Boolean
2021-03-11 12:57:07,745 [main:42] - Getting value of type Boolean
2021-03-11 12:57:07,924 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:57:07,927 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 12:57:07,927 [main:49] - GENERATED IS CALL =false
2021-03-11 12:57:07,933 [main:55] - randomType = Double
2021-03-11 12:57:08,110 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:57:08,147 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@1b93c67f]
2021-03-11 12:57:08,314 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:57:08,314 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@66871f61]
2021-03-11 12:57:08,476 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:57:08,479 [main:66] - Generated call from random type = (0.9501499893829521).equals("nacyc").or(true)
2021-03-11 12:57:08,480 [main:94] - GETTING Boolean from Int
2021-03-11 12:57:08,533 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67b4957]]
2021-03-11 12:57:08,533 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:57:08,533 [main:137] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67b4957]
2021-03-11 12:57:08,686 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:57:08,844 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:57:08,847 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).toChar().equals('䃟', false)
2021-03-11 12:57:08,848 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@631e496]]
2021-03-11 12:57:08,848 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:57:08,848 [main:137] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@631e496]
2021-03-11 12:57:08,848 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).toChar().isISOControl()
2021-03-11 12:57:08,848 [main:101] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@27eff770]]
2021-03-11 12:57:08,848 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1c465f7d]
2021-03-11 12:57:08,998 [main:302] - generating value of type = Double true depth = 0
2021-03-11 12:57:09,001 [main:137] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@27eff770]
2021-03-11 12:57:09,001 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).div(0.9070012673360345).isInfinite()
2021-03-11 12:57:09,001 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]]
2021-03-11 12:57:09,001 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:57:09,176 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:57:09,180 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]
2021-03-11 12:57:09,346 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:57:09,346 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).compareTo(-1793578172).equals("hcmon")
2021-03-11 12:57:09,350 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2443d528]]
2021-03-11 12:57:09,350 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:57:09,350 [main:137] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2443d528]
2021-03-11 12:57:09,351 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).toChar().isLetter()
2021-03-11 12:57:09,351 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.IntRange.contains(element: kotlin.Int?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@53bf104]]
2021-03-11 12:57:09,351 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e]
2021-03-11 12:57:09,512 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:57:09,516 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.IntRange.contains(element: kotlin.Int?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@53bf104]
2021-03-11 12:57:09,678 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:57:09,681 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).rangeTo(10).contains(-540996665)
2021-03-11 12:57:09,681 [main:101] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169], public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6822e70d]]
2021-03-11 12:57:09,681 [main:137] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@78f38169]
2021-03-11 12:57:09,681 [main:137] - GENERATING call of type public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6822e70d]
2021-03-11 12:57:09,681 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).toFloat().isInfinite()
2021-03-11 12:57:09,681 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e], public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@3bf327e3]]
2021-03-11 12:57:09,681 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d78841e]
2021-03-11 12:57:09,858 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:57:09,862 [main:137] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@3bf327e3]
2021-03-11 12:57:09,862 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).rangeTo(34).isEmpty()
2021-03-11 12:57:09,862 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e8ffc26]]
2021-03-11 12:57:09,862 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:57:09,862 [main:137] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e8ffc26]
2021-03-11 12:57:09,862 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).toChar().isUpperCase()
2021-03-11 12:57:09,862 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4063f07e]]
2021-03-11 12:57:09,862 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4d4108]
2021-03-11 12:57:10,017 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:57:10,017 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4063f07e]
2021-03-11 12:57:10,172 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:57:10,175 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").x).equals("czzte").and(true)
2021-03-11 12:57:10,175 [main:110] - replacement of false of type Boolean is (0.9501499893829521).equals("nacyc").or(true)
2021-03-11 12:57:10,352 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:57:10,352 [main:66] - Compilation checking started
2021-03-11 12:57:11,027 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:57:11,031 [main:103] - replacing (getOrThrow(), Ty0)
2021-03-11 12:57:11,031 [main:38] - replacing getOrThrow() Ty0
2021-03-11 12:57:11,031 [main:42] - Getting value of type Ty0
2021-03-11 12:57:11,223 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 12:57:11,228 [main:46] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 12:57:11,235 [main:55] - randomType = Float
2021-03-11 12:57:11,387 [main:302] - generating value of type = Float true depth = 0
2021-03-11 12:57:11,420 [main:94] - GETTING Ty0 from Int
2021-03-11 12:57:11,451 [main:94] - GETTING Ty0 from Boolean
2021-03-11 12:57:11,459 [main:94] - GETTING Ty0 from String
2021-03-11 12:57:11,475 [main:94] - GETTING Ty0 from String
2021-03-11 12:57:11,476 [main:94] - GETTING Ty0 from Int
2021-03-11 12:57:11,477 [main:94] - GETTING Ty0 from Int
2021-03-11 12:57:11,477 [main:94] - GETTING Ty0 from Int
2021-03-11 12:57:11,478 [main:94] - GETTING Ty0 from Int
2021-03-11 12:57:11,478 [main:107] - Cant find and generate replacement for getOrThrow() type Ty0
2021-03-11 12:57:11,478 [main:103] - replacing ({
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }, Any?)
2021-03-11 12:57:11,478 [main:38] - replacing {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    } Any?
2021-03-11 12:57:11,478 [main:42] - Getting value of type Any?
2021-03-11 12:57:11,627 [main:302] - generating value of type = Any false depth = 0
2021-03-11 12:57:11,627 [main:46] - GENERATED VALUE OF TYPE Any? = "ohlgx"
2021-03-11 12:57:11,628 [main:49] - GENERATED IS CALL =false
2021-03-11 12:57:11,829 [main:55] - randomType = Kla5
2021-03-11 12:57:11,993 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 12:57:11,996 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}
2021-03-11 12:57:12,021 [main:94] - GETTING Any? from Int
2021-03-11 12:57:12,060 [main:94] - GETTING Any? from String
2021-03-11 12:57:12,085 [main:94] - GETTING Any? from Int
2021-03-11 12:57:12,086 [main:94] - GETTING Any? from Int
2021-03-11 12:57:12,087 [main:94] - GETTING Any? from Int
2021-03-11 12:57:12,088 [main:94] - GETTING Any? from String
2021-03-11 12:57:12,089 [main:94] - GETTING Any? from Int
2021-03-11 12:57:12,090 [main:94] - GETTING Any? from Boolean
2021-03-11 12:57:12,103 [main:110] - replacement of {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    } of type Any? is "ohlgx"
2021-03-11 12:57:12,267 [main:33] - Trying to replace BLOCK on Element(STRING_TEMPLATE)
2021-03-11 12:57:12,267 [main:66] - Compilation checking started
2021-03-11 12:57:12,274 [main:71] - Wrong syntax or breaks conditions
2021-03-11 12:57:12,274 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) "ohlgx"
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:57:12,277 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 12:57:12,277 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 12:57:12,277 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 12:57:12,454 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 12:57:12,460 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 12:57:13,457 [main:55] - randomType = LinkedHashMap<Float, Map<Set<Kla4>, UInt>>?
2021-03-11 12:57:13,636 [main:302] - generating value of type = LinkedHashMap<Float, Map<Set<Kla4>, UInt>> false depth = 0
2021-03-11 12:57:13,798 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Float, Map<Set<Kla4>, UInt>> = TODO()
2021-03-11 12:57:13,802 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Float, Map<Set<Kla4>, UInt>> = TODO()
2021-03-11 12:57:13,964 [main:95] - GENERATED = linkedMapOf<Float, Map<Set<Kla4>, UInt>>()
2021-03-11 12:57:14,150 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:57:14,181 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:57:14,182 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:57:14,199 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:57:14,199 [main:94] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 12:57:14,207 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 12:57:14,208 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:57:14,209 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 12:57:14,209 [main:107] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 12:57:14,209 [main:103] - replacing (prope3, String)
2021-03-11 12:57:14,209 [main:38] - replacing prope3 String
2021-03-11 12:57:14,209 [main:42] - Getting value of type String
2021-03-11 12:57:14,386 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:57:14,389 [main:46] - GENERATED VALUE OF TYPE String = "gcitc"
2021-03-11 12:57:14,550 [main:49] - GENERATED IS CALL =false
2021-03-11 12:57:14,562 [main:55] - randomType = Kla0
2021-03-11 12:57:14,725 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 12:57:14,728 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}
2021-03-11 12:57:14,890 [main:194] - Type params = []
2021-03-11 12:57:15,063 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 12:57:15,222 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:57:15,226 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:57:15,603 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 12:57:15,778 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:57:15,782 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:57:16,338 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 8
2021-03-11 12:57:16,504 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 12:57:16,508 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 12:57:17,087 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 11
2021-03-11 12:57:17,261 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 12:57:17,265 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 12:57:17,840 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 12:57:17,840 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 12:57:17,840 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 12:57:17,840 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 12:57:17,860 [main:94] - GETTING String from Boolean
2021-03-11 12:57:17,872 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:57:17,872 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@568a79d1]
2021-03-11 12:57:18,053 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:57:18,056 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:57:18,219 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:57:18,223 [main:105] - GENERATED CALL = (sum == 0+1+2+3+4).compareTo(true).toString(-1134699507)
2021-03-11 12:57:18,223 [main:110] - replacement of prope3 of type String is "gcitc"
2021-03-11 12:57:18,386 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 12:57:18,386 [main:66] - Compilation checking started
2021-03-11 12:57:18,857 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        "gcitc" = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:57:18,860 [main:103] - replacing (prope6, Boolean)
2021-03-11 12:57:18,861 [main:38] - replacing prope6 Boolean
2021-03-11 12:57:18,861 [main:42] - Getting value of type Boolean
2021-03-11 12:57:19,016 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:57:19,019 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 12:57:19,019 [main:49] - GENERATED IS CALL =false
2021-03-11 12:57:19,224 [main:55] - randomType = HashSet<Int>
2021-03-11 12:57:19,387 [main:302] - generating value of type = HashSet<Int> false depth = 0
2021-03-11 12:57:19,555 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: Int): HashSet<Int> = TODO()
2021-03-11 12:57:19,560 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: Int): HashSet<Int> = TODO()
2021-03-11 12:57:19,732 [main:302] - generating value of type = Int true depth = 3
2021-03-11 12:57:19,735 [main:95] - GENERATED = hashSetOf<Int>(220696298)
2021-03-11 12:57:19,883 [main:137] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@60c7367c]
2021-03-11 12:57:19,883 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Array<*>?.isNullOrEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@34300e71]
2021-03-11 12:57:19,883 [main:66] - Generated call from random type = (hashSetOf<Int>(220696298)).toArray().isNullOrEmpty()
2021-03-11 12:57:19,884 [main:94] - GETTING Boolean from String
2021-03-11 12:57:19,906 [main:101] - Case = [public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c0f4df1]]
2021-03-11 12:57:19,907 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c0f4df1]
2021-03-11 12:57:20,063 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 12:57:20,066 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 12:57:20,070 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).all({a: Char -> true})
2021-03-11 12:57:20,070 [main:101] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62ecbcd6]]
2021-03-11 12:57:20,070 [main:137] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62ecbcd6]
2021-03-11 12:57:20,070 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).toBoolean()
2021-03-11 12:57:20,070 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@360d8839]]
2021-03-11 12:57:20,070 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:57:20,227 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:57:20,401 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:57:20,404 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@360d8839]
2021-03-11 12:57:20,405 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).subSequence(-772579808, -360696174).isNotBlank()
2021-03-11 12:57:20,405 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21280b00], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2443d528]]
2021-03-11 12:57:20,405 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21280b00]
2021-03-11 12:57:20,568 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:57:20,571 [main:137] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2443d528]
2021-03-11 12:57:20,571 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).get(-1030005787).isLetter()
2021-03-11 12:57:20,571 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@360d8839]]
2021-03-11 12:57:20,571 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@360d8839]
2021-03-11 12:57:20,571 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).isNotBlank()
2021-03-11 12:57:20,571 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21280b00], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e8ffc26]]
2021-03-11 12:57:20,572 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21280b00]
2021-03-11 12:57:20,736 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:57:20,739 [main:137] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e8ffc26]
2021-03-11 12:57:20,740 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).get(-181309045).isUpperCase()
2021-03-11 12:57:20,740 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd], @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71fcc596]]
2021-03-11 12:57:20,740 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5a4996dd]
2021-03-11 12:57:20,905 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:57:21,076 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:57:21,079 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71fcc596]
2021-03-11 12:57:21,237 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 12:57:21,402 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-11 12:57:21,406 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-11 12:57:21,972 [main:302] - generating value of type = String true depth = 3
2021-03-11 12:57:21,976 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-11 12:57:22,158 [main:43] - GENERATING CALL OF fun <E> HashSet(initialCapacity: kotlin.Int): Set<RegexOption> = TODO()
2021-03-11 12:57:22,162 [main:61] - WITHOUT TYPE PARAMS = fun <E> HashSet(initialCapacity: kotlin.Int): Set<RegexOption> = TODO()
2021-03-11 12:57:22,501 [main:302] - generating value of type = Int true depth = 6
2021-03-11 12:57:22,504 [main:95] - GENERATED = HashSet<RegexOption>(-1958758907)
2021-03-11 12:57:22,505 [main:95] - GENERATED = Regex("xcsrc", HashSet<RegexOption>(-1958758907))
2021-03-11 12:57:22,505 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).subSequence(2077005196, 1067587856).matches(Regex("xcsrc", HashSet<RegexOption>(-1958758907)))
2021-03-11 12:57:22,505 [main:101] - Case = [public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52d76302]]
2021-03-11 12:57:22,505 [main:137] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52d76302]
2021-03-11 12:57:22,656 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:57:22,832 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:57:22,835 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).startsWith("ocnvu", false)
2021-03-11 12:57:22,835 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21280b00], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79aa17d2]]
2021-03-11 12:57:22,835 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@21280b00]
2021-03-11 12:57:23,000 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:57:23,004 [main:137] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79aa17d2]
2021-03-11 12:57:23,004 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).get(663019298).isLetterOrDigit()
2021-03-11 12:57:23,004 [main:101] - Case = [public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4265ffef]]
2021-03-11 12:57:23,004 [main:137] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4265ffef]
2021-03-11 12:57:23,169 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:57:23,339 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 12:57:23,514 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:57:23,673 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:57:23,832 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:57:23,836 [main:105] - GENERATED CALL = (A(-1649075752, "cfyuz").y).regionMatches(1204697338, "zetfz", -651973915, 980064028, true)
2021-03-11 12:57:23,836 [main:110] - replacement of prope6 of type Boolean is false
2021-03-11 12:57:24,007 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-11 12:57:24,007 [main:66] - Compilation checking started
2021-03-11 12:57:24,485 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        false = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:57:24,488 [main:103] - replacing (c !is CoroutineStackFrame, Boolean)
2021-03-11 12:57:24,488 [main:38] - replacing c !is CoroutineStackFrame Boolean
2021-03-11 12:57:24,488 [main:42] - Getting value of type Boolean
2021-03-11 12:57:24,658 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 12:57:24,661 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 12:57:24,661 [main:49] - GENERATED IS CALL =false
2021-03-11 12:57:24,842 [main:55] - randomType = Short?
2021-03-11 12:57:24,998 [main:302] - generating value of type = Short true depth = 0
2021-03-11 12:57:25,036 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@5e0bed5a]
2021-03-11 12:57:25,036 [main:137] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24bd4c6b]
2021-03-11 12:57:25,036 [main:66] - Generated call from random type = (-4475)?.toChar().isDigit()
2021-03-11 12:57:25,036 [main:110] - replacement of c !is CoroutineStackFrame of type Boolean is (-4475)?.toChar().isDigit()
2021-03-11 12:57:25,210 [main:33] - Trying to replace Element(IS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:57:25,210 [main:66] - Compilation checking started
2021-03-11 12:57:25,684 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if ((-4475)?.toChar().isDigit()) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:57:25,687 [main:103] - replacing (prope7, Function0<Unit>)
2021-03-11 12:57:25,688 [main:38] - replacing prope7 Function0<Unit>
2021-03-11 12:57:25,688 [main:42] - Getting value of type Function0<Unit>
2021-03-11 12:57:25,857 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 12:57:25,860 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:57:26,022 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 12:57:26,026 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 12:57:26,359 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 12:57:26,362 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 12:57:26,547 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:57:26,551 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:57:26,904 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 12:57:26,907 [main:95] - GENERATED = require(false)
2021-03-11 12:57:26,908 [main:95] - GENERATED = contract({ require(false)})
2021-03-11 12:57:26,908 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ require(false)})}
2021-03-11 12:57:26,908 [main:49] - GENERATED IS CALL =false
2021-03-11 12:57:26,920 [main:55] - randomType = A
2021-03-11 12:57:27,092 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:57:27,095 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:57:27,271 [main:194] - Type params = []
2021-03-11 12:57:27,427 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:57:27,430 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:57:27,443 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:57:27,497 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 12:57:27,511 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:57:27,512 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:57:27,543 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:57:27,544 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:57:27,545 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:57:27,546 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:57:27,547 [main:110] - replacement of prope7 of type Function0<Unit> is { contract({ require(false)})}
2021-03-11 12:57:27,721 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 12:57:27,722 [main:66] - Compilation checking started
2021-03-11 12:57:28,201 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        { contract({ require(false)})} = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:57:28,205 [main:103] - replacing (prope9, String)
2021-03-11 12:57:28,206 [main:38] - replacing prope9 String
2021-03-11 12:57:28,206 [main:42] - Getting value of type String
2021-03-11 12:57:28,387 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:57:28,390 [main:46] - GENERATED VALUE OF TYPE String = "lekcl"
2021-03-11 12:57:28,390 [main:49] - GENERATED IS CALL =false
2021-03-11 12:57:28,402 [main:55] - randomType = A
2021-03-11 12:57:28,559 [main:302] - generating value of type = A false depth = 0
2021-03-11 12:57:28,562 [main:112] - generating klass A text = data class A(val x: Int, val y: String)
2021-03-11 12:57:28,722 [main:194] - Type params = []
2021-03-11 12:57:28,875 [main:302] - generating value of type = Int true depth = 2
2021-03-11 12:57:28,878 [main:302] - generating value of type = String true depth = 2
2021-03-11 12:57:28,891 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35a2566b]
2021-03-11 12:57:29,066 [main:302] - generating value of type = Char true depth = 0
2021-03-11 12:57:29,234 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:57:29,402 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:57:29,405 [main:66] - Generated call from random type = (A(519105063, "gmstn")).y.replaceAfterLast('', "ydtfy", "qfvap")
2021-03-11 12:57:29,406 [main:94] - GETTING String from Int
2021-03-11 12:57:29,445 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]]
2021-03-11 12:57:29,445 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:57:29,445 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42f1b419]
2021-03-11 12:57:29,445 [main:105] - GENERATED CALL = (0+1+2+3).toChar().titlecase()
2021-03-11 12:57:29,446 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]]
2021-03-11 12:57:29,446 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:57:29,446 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@453b78b6]
2021-03-11 12:57:29,446 [main:105] - GENERATED CALL = (0+1+2+3).toChar().lowercase()
2021-03-11 12:57:29,446 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]]
2021-03-11 12:57:29,446 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@664b784c]
2021-03-11 12:57:29,446 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@677dc5d4]
2021-03-11 12:57:29,609 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:57:29,612 [main:105] - GENERATED CALL = (0+1+2+3).toByte().toString(1489846509)
2021-03-11 12:57:29,614 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]]
2021-03-11 12:57:29,614 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75273bae]
2021-03-11 12:57:29,782 [main:302] - generating value of type = Long true depth = 0
2021-03-11 12:57:29,785 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e4510ad]
2021-03-11 12:57:29,941 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:57:29,945 [main:105] - GENERATED CALL = (0+1+2+3).div(-522951996408667920).toString(-578828035)
2021-03-11 12:57:29,945 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]]
2021-03-11 12:57:29,945 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:57:29,945 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a85376]
2021-03-11 12:57:29,945 [main:105] - GENERATED CALL = (0+1+2+3).toChar().uppercase()
2021-03-11 12:57:29,945 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:57:29,945 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:57:30,102 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:57:30,105 [main:105] - GENERATED CALL = (0+1+2+3).toString(2051844580)
2021-03-11 12:57:30,105 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:57:30,105 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2859a39]
2021-03-11 12:57:30,105 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:57:30,281 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:57:30,284 [main:105] - GENERATED CALL = (0+1+2+3).toInt().toString(1912647213)
2021-03-11 12:57:30,284 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]]
2021-03-11 12:57:30,284 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3893de24]
2021-03-11 12:57:30,284 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5afdfe59]
2021-03-11 12:57:30,448 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:57:30,451 [main:105] - GENERATED CALL = (0+1+2+3).toShort().toString(1084330315)
2021-03-11 12:57:30,451 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]]
2021-03-11 12:57:30,451 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c180da5]
2021-03-11 12:57:30,451 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76f58480]
2021-03-11 12:57:30,616 [main:302] - generating value of type = String true depth = 0
2021-03-11 12:57:30,619 [main:105] - GENERATED CALL = (0+1+2+3).toChar().plus("ztpgn")
2021-03-11 12:57:30,619 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]]
2021-03-11 12:57:30,619 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@5a94ad4b]
2021-03-11 12:57:30,784 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:57:30,787 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da4481c]
2021-03-11 12:57:30,955 [main:302] - generating value of type = Int true depth = 0
2021-03-11 12:57:30,958 [main:105] - GENERATED CALL = (0+1+2+3).compareTo(-429547417).toString(-292814035)
2021-03-11 12:57:30,958 [main:110] - replacement of prope9 of type String is (0+1+2+3).toShort().toString(1084330315)
2021-03-11 12:57:31,115 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:57:31,115 [main:66] - Compilation checking started
2021-03-11 12:57:31,566 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            (0+1+2+3).toShort().toString(1084330315) = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:57:31,569 [main:103] - replacing ({
        fu6(it)
    }, Function1<Continuation<Unit>, Unit>)
2021-03-11 12:57:31,569 [main:38] - replacing {
        fu6(it)
    } Function1<Continuation<Unit>, Unit>
2021-03-11 12:57:31,569 [main:42] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-11 12:57:31,747 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-11 12:57:31,750 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:57:31,920 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:57:31,924 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 12:57:32,470 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 12:57:32,473 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 12:57:32,476 [main:302] - generating value of type = Any false depth = 5
2021-03-11 12:57:32,476 [main:95] - GENERATED = check(true, { "mixwe"})
2021-03-11 12:57:32,476 [main:46] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> check(true, { "mixwe"})}
2021-03-11 12:57:32,476 [main:49] - GENERATED IS CALL =false
2021-03-11 12:57:32,483 [main:55] - randomType = Byte
2021-03-11 12:57:32,638 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 12:57:32,689 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 12:57:32,737 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 12:57:32,756 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 12:57:32,757 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 12:57:32,758 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 12:57:32,760 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 12:57:32,761 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from Boolean
2021-03-11 12:57:32,772 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 12:57:32,772 [main:110] - replacement of {
        fu6(it)
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> check(true, { "mixwe"})}
2021-03-11 12:57:32,949 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 12:57:32,950 [main:66] - Compilation checking started
2021-03-11 12:57:33,625 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true, { "mixwe"})}

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:57:33,630 [main:103] - replacing (prope3, Result<Ty0>)
2021-03-11 12:57:33,630 [main:38] - replacing prope3 Result<Ty0>
2021-03-11 12:57:33,630 [main:42] - Getting value of type Result<Ty0>
2021-03-11 12:57:33,799 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-11 12:57:33,968 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 12:57:33,972 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 12:57:34,308 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 12:57:34,308 [main:46] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-11 12:57:34,314 [main:55] - randomType = ULong
2021-03-11 12:57:34,494 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 12:57:34,538 [main:94] - GETTING Result<Ty0> from String
2021-03-11 12:57:34,562 [main:94] - GETTING Result<Ty0> from Int
2021-03-11 12:57:34,601 [main:94] - GETTING Result<Ty0> from Int
2021-03-11 12:57:34,602 [main:94] - GETTING Result<Ty0> from Int
2021-03-11 12:57:34,604 [main:94] - GETTING Result<Ty0> from Boolean
2021-03-11 12:57:34,616 [main:94] - GETTING Result<Ty0> from Int
2021-03-11 12:57:34,617 [main:94] - GETTING Result<Ty0> from String
2021-03-11 12:57:34,618 [main:94] - GETTING Result<Ty0> from Int
2021-03-11 12:57:34,619 [main:107] - Cant find and generate replacement for prope3 type Result<Ty0>
2021-03-11 12:57:34,619 [main:103] - replacing (prope7, Function0<Unit>)
2021-03-11 12:57:34,619 [main:38] - replacing prope7 Function0<Unit>
2021-03-11 12:57:34,619 [main:42] - Getting value of type Function0<Unit>
2021-03-11 12:57:34,786 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 12:57:34,790 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 12:57:34,960 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 12:57:34,964 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 12:57:35,335 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 12:57:35,338 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 12:57:35,502 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:57:35,506 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 12:57:35,886 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 12:57:35,889 [main:95] - GENERATED = require(false)
2021-03-11 12:57:35,889 [main:95] - GENERATED = contract({ require(false)})
2021-03-11 12:57:35,889 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ require(false)})}
2021-03-11 12:57:35,890 [main:49] - GENERATED IS CALL =false
2021-03-11 12:57:35,896 [main:55] - randomType = Float
2021-03-11 12:57:36,060 [main:302] - generating value of type = Float true depth = 0
2021-03-11 12:57:36,099 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:57:36,121 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:57:36,158 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 12:57:36,169 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:57:36,170 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:57:36,171 [main:94] - GETTING Function0<Unit> from String
2021-03-11 12:57:36,172 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:57:36,173 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 12:57:36,173 [main:110] - replacement of prope7 of type Function0<Unit> is { contract({ require(false)})}
2021-03-11 12:57:36,343 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 12:57:36,343 [main:66] - Compilation checking started
2021-03-11 12:57:36,808 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true, { "mixwe"})}

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        { contract({ require(false)})}()
        if ((str).all({a: Char -> false})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:57:36,963 [main:137] - TRYING TO REPLACE CONSTANT 0
2021-03-11 12:57:37,155 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:57:37,155 [main:66] - Compilation checking started
2021-03-11 12:57:37,633 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (i+1).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true, { "mixwe"})}

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:57:37,633 [main:137] - TRYING TO REPLACE CONSTANT 1
2021-03-11 12:57:37,803 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:57:37,804 [main:66] - Compilation checking started
2021-03-11 12:57:38,431 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+(0+1+2).compareTo(-1063939318)).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true, { "mixwe"})}

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> false})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:57:38,432 [main:137] - TRYING TO REPLACE CONSTANT false
2021-03-11 12:57:38,583 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BINARY_EXPRESSION)
2021-03-11 12:57:38,583 [main:66] - Compilation checking started
2021-03-11 12:57:39,188 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+(0+1+2).compareTo(-1063939318)).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true, { "mixwe"})}

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> sum == 0+1+2+3+4})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:57:39,188 [main:137] - TRYING TO REPLACE CONSTANT 3
2021-03-11 12:57:39,340 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(BINARY_EXPRESSION)
2021-03-11 12:57:39,341 [main:66] - Compilation checking started
2021-03-11 12:57:39,971 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+(0+1+2).compareTo(-1063939318)).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+0+1+2+3).toInt().or(803870091)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true, { "mixwe"})}

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> sum == 0+1+2+3+4})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:57:39,972 [main:137] - TRYING TO REPLACE CONSTANT 803870091
2021-03-11 12:57:40,137 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 12:57:40,137 [main:66] - Compilation checking started
2021-03-11 12:57:40,744 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+(0+1+2).compareTo(-1063939318)).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+2+0+1+2+3).toInt().or(1)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true, { "mixwe"})}

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> sum == 0+1+2+3+4})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:57:40,745 [main:137] - TRYING TO REPLACE CONSTANT 2
2021-03-11 12:57:40,898 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:57:40,899 [main:66] - Compilation checking started
2021-03-11 12:57:41,334 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+(0+1+2).compareTo(-1063939318)).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+1+i+0+1+2+3).toInt().or(1)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true, { "mixwe"})}

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> sum == 0+1+2+3+4})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:57:41,335 [main:137] - TRYING TO REPLACE CONSTANT 0
2021-03-11 12:57:41,490 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:57:41,490 [main:66] - Compilation checking started
2021-03-11 12:57:41,914 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+(0+1+2).compareTo(-1063939318)).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(i+1+2+0+1+2+3).toInt().or(1)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true, { "mixwe"})}

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> sum == 0+1+2+3+4})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:57:41,915 [main:137] - TRYING TO REPLACE CONSTANT 1
2021-03-11 12:57:42,069 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PARENTHESIZED)
2021-03-11 12:57:42,069 [main:66] - Compilation checking started
2021-03-11 12:57:42,699 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+(0+1+2).compareTo(-1063939318)).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+(0+1+2)+2+0+1+2+3).toInt().or(1)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true, { "mixwe"})}

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(265174262).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> sum == 0+1+2+3+4})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:57:42,699 [main:137] - TRYING TO REPLACE CONSTANT 265174262
2021-03-11 12:57:42,852 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:57:42,852 [main:66] - Compilation checking started
2021-03-11 12:57:43,450 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+(0+1+2).compareTo(-1063939318)).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+(0+1+2)+2+0+1+2+3).toInt().or(1)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true, { "mixwe"})}

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(-1649075752, "cfyuz").y).get(i).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> sum == 0+1+2+3+4})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:57:43,450 [main:137] - TRYING TO REPLACE CONSTANT 1649075752
2021-03-11 12:57:43,602 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 12:57:43,603 [main:66] - Compilation checking started
2021-03-11 12:57:44,203 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+(0+1+2).compareTo(-1063939318)).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+(0+1+2)+2+0+1+2+3).toInt().or(1)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true, { "mixwe"})}

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(436559318, "cfyuz").y).get(i).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> sum == 0+1+2+3+4})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:57:44,203 [main:137] - TRYING TO REPLACE CONSTANT 113420782
2021-03-11 12:57:44,355 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:57:44,356 [main:66] - Compilation checking started
2021-03-11 12:57:44,789 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+(0+1+2).compareTo(-1063939318)).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+(0+1+2)+2+0+1+2+3).toInt().or(1)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true, { "mixwe"})}

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(-1649075752, "cfyuz").x).compareTo(i).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(436559318, "cfyuz").y).get(i).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> sum == 0+1+2+3+4})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:57:44,790 [main:137] - TRYING TO REPLACE CONSTANT 1649075752
2021-03-11 12:57:44,959 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 12:57:44,960 [main:66] - Compilation checking started
2021-03-11 12:57:45,567 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+(0+1+2).compareTo(-1063939318)).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+(0+1+2)+2+0+1+2+3).toInt().or(1)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true, { "mixwe"})}

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(87, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(436559318, "cfyuz").y).get(i).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> sum == 0+1+2+3+4})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:57:45,568 [main:137] - TRYING TO REPLACE CONSTANT 'ሌ'
2021-03-11 12:57:45,722 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-11 12:57:45,722 [main:66] - Compilation checking started
2021-03-11 12:57:46,151 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+(0+1+2).compareTo(-1063939318)).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+(0+1+2)+2+0+1+2+3).toInt().or(1)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true, { "mixwe"})}

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(-1649075752, "cfyuz").y).substringBeforeLast(toChar(), "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(87, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(436559318, "cfyuz").y).get(i).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> sum == 0+1+2+3+4})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:57:46,151 [main:137] - TRYING TO REPLACE CONSTANT 1649075752
2021-03-11 12:57:46,305 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 12:57:46,305 [main:66] - Compilation checking started
2021-03-11 12:57:46,898 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A(-1649075752, "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+(0+1+2).compareTo(-1063939318)).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+(0+1+2)+2+0+1+2+3).toInt().or(1)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true, { "mixwe"})}

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(5, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(87, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(436559318, "cfyuz").y).get(i).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> sum == 0+1+2+3+4})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:57:46,899 [main:137] - TRYING TO REPLACE CONSTANT 1649075752
2021-03-11 12:57:47,059 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:57:47,060 [main:66] - Compilation checking started
2021-03-11 12:57:47,709 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A((0+(0+1+2)+2+0+1+2+3).toInt().or(1), "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+(0+1+2).compareTo(-1063939318)).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+(0+1+2)+2+0+1+2+3).toInt().or(1)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true, { "mixwe"})}

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(5, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(87, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(436559318, "cfyuz").y).get(i).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> sum == 0+1+2+3+4})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:57:47,710 [main:137] - TRYING TO REPLACE CONSTANT 436559318
2021-03-11 12:57:47,872 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:57:47,872 [main:66] - Compilation checking started
2021-03-11 12:57:48,309 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A((0+(0+1+2)+2+0+1+2+3).toInt().or(1), "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+(0+1+2).compareTo(-1063939318)).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+(0+1+2)+2+0+1+2+3).toInt().or(1)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(i).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true, { "mixwe"})}

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(5, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(87, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((23.toUByte()).equals("mgetq").and(true)) error((A(436559318, "cfyuz").y).get(i).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> sum == 0+1+2+3+4})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:57:48,309 [main:137] - TRYING TO REPLACE CONSTANT 23
2021-03-11 12:57:48,464 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 12:57:48,464 [main:66] - Compilation checking started
2021-03-11 12:57:49,069 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A((0+(0+1+2)+2+0+1+2+3).toInt().or(1), "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+(0+1+2).compareTo(-1063939318)).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+(0+1+2)+2+0+1+2+3).toInt().or(1)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true, { "mixwe"})}

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(5, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(87, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((0.toUByte()).equals("mgetq").and(true)) error((A(436559318, "cfyuz").y).get(i).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> sum == 0+1+2+3+4})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:57:49,069 [main:137] - TRYING TO REPLACE CONSTANT true
2021-03-11 12:57:49,227 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-11 12:57:49,228 [main:66] - Compilation checking started
2021-03-11 12:57:49,662 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A((0+(0+1+2)+2+0+1+2+3).toInt().or(1), "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+(0+1+2).compareTo(-1063939318)).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+(0+1+2)+2+0+1+2+3).toInt().or(1)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+2+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true, { "mixwe"})}

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(5, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(87, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((0.toUByte()).equals("mgetq").and(and(true))) error((A(436559318, "cfyuz").y).get(i).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> sum == 0+1+2+3+4})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:57:49,662 [main:137] - TRYING TO REPLACE CONSTANT 3
2021-03-11 12:57:49,818 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 12:57:49,819 [main:137] - TRYING TO REPLACE CONSTANT 2
2021-03-11 12:57:50,001 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 12:57:50,002 [main:66] - Compilation checking started
2021-03-11 12:57:50,700 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A((0+(0+1+2)+2+0+1+2+3).toInt().or(1), "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+(0+1+2).compareTo(-1063939318)).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+(0+1+2)+2+0+1+2+3).toInt().or(1)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+1649075752+3).toLong().toString(-1609821060)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true, { "mixwe"})}

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(5, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(87, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((0.toUByte()).equals("mgetq").and(true)) error((A(436559318, "cfyuz").y).get(i).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> sum == 0+1+2+3+4})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:57:50,701 [main:137] - TRYING TO REPLACE CONSTANT 1609821060
2021-03-11 12:57:50,870 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 12:57:50,871 [main:66] - Compilation checking started
2021-03-11 12:57:51,528 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A((0+(0+1+2)+2+0+1+2+3).toInt().or(1), "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+(0+1+2).compareTo(-1063939318)).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+(0+1+2)+2+0+1+2+3).toInt().or(1)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+1+1649075752+3).toLong().toString(5)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true, { "mixwe"})}

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(5, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(87, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((0.toUByte()).equals("mgetq").and(true)) error((A(436559318, "cfyuz").y).get(i).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> sum == 0+1+2+3+4})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:57:51,528 [main:137] - TRYING TO REPLACE CONSTANT 0
2021-03-11 12:57:51,681 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 12:57:51,682 [main:137] - TRYING TO REPLACE CONSTANT 1
2021-03-11 12:57:51,843 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(BINARY_EXPRESSION)
2021-03-11 12:57:51,843 [main:66] - Compilation checking started
2021-03-11 12:57:52,466 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A((0+(0+1+2)+2+0+1+2+3).toInt().or(1), "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+(0+1+2).compareTo(-1063939318)).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+(0+1+2)+2+0+1+2+3).toInt().or(1)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+0+1+2+1649075752+3).toLong().toString(5)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true, { "mixwe"})}

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(5, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(87, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((0.toUByte()).equals("mgetq").and(true)) error((A(436559318, "cfyuz").y).get(i).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> sum == 0+1+2+3+4})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:57:52,466 [main:137] - TRYING TO REPLACE CONSTANT 87
2021-03-11 12:57:52,620 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:57:52,621 [main:66] - Compilation checking started
2021-03-11 12:57:53,077 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A((0+(0+1+2)+2+0+1+2+3).toInt().or(1), "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+(0+1+2).compareTo(-1063939318)).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+(0+1+2)+2+0+1+2+3).toInt().or(1)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+0+1+2+1649075752+3).toLong().toString(5)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true, { "mixwe"})}

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(5, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(87, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(x)) {
            if ((0.toUByte()).equals("mgetq").and(true)) error((A(436559318, "cfyuz").y).get(i).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A(-1649075752, "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> sum == 0+1+2+3+4})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:57:53,078 [main:137] - TRYING TO REPLACE CONSTANT 0.2573452009175674
2021-03-11 12:57:53,233 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(FLOAT_CONSTANT)
2021-03-11 12:57:53,233 [main:66] - Compilation checking started
2021-03-11 12:57:53,866 [main:137] - TRYING TO REPLACE CONSTANT 1649075752
2021-03-11 12:57:54,021 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:57:54,021 [main:66] - Compilation checking started
2021-03-11 12:57:54,646 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A((0+(0+1+2)+2+0+1+2+3).toInt().or(1), "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+(0+1+2).compareTo(-1063939318)).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+(0+1+2)+2+0+1+2+3).toInt().or(1)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+0+1+2+1649075752+3).toLong().toString(5)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true, { "mixwe"})}

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false}?.let { error((A(5, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(87, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((0.toUByte()).equals("mgetq").and(true)) error((A(436559318, "cfyuz").y).get(i).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A((0+1+2).compareTo(-1063939318), "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> sum == 0+1+2+3+4})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:57:54,646 [main:137] - TRYING TO REPLACE CONSTANT false
2021-03-11 12:57:54,811 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(PARENTHESIZED)
2021-03-11 12:57:54,812 [main:66] - Compilation checking started
2021-03-11 12:57:55,447 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A((0+(0+1+2)+2+0+1+2+3).toInt().or(1), "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+(0+1+2).compareTo(-1063939318)).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+(0+1+2)+2+0+1+2+3).toInt().or(1)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+0+1+2+1649075752+3).toLong().toString(5)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true, { "mixwe"})}

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (sum == 0+1+2+3+4)}?.let { error((A(5, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(87, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((0.toUByte()).equals("mgetq").and(true)) error((A(436559318, "cfyuz").y).get(i).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A((0+1+2).compareTo(-1063939318), "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> sum == 0+1+2+3+4})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:57:55,447 [main:137] - TRYING TO REPLACE CONSTANT '綆'
2021-03-11 12:57:55,605 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:57:55,605 [main:66] - Compilation checking started
2021-03-11 12:57:56,046 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A((0+(0+1+2)+2+0+1+2+3).toInt().or(1), "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+(0+1+2).compareTo(-1063939318)).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+(0+1+2)+2+0+1+2+3).toInt().or(1)) {
            if ((sum == 0+1+2+3+4).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+0+1+2+1649075752+3).toLong().toString(5)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true, { "mixwe"})}

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (sum == 0+1+2+3+4)}?.let { error((A(5, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter((A(436559318, "cfyuz").y).get(i), "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(87, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((0.toUByte()).equals("mgetq").and(true)) error((A(436559318, "cfyuz").y).get(i).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A((0+1+2).compareTo(-1063939318), "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> sum == 0+1+2+3+4})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:57:56,046 [main:137] - TRYING TO REPLACE CONSTANT 4
2021-03-11 12:57:56,201 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:57:56,201 [main:66] - Compilation checking started
2021-03-11 12:57:56,807 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A((0+(0+1+2)+2+0+1+2+3).toInt().or(1), "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+(0+1+2).compareTo(-1063939318)).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+(0+1+2)+2+0+1+2+3).toInt().or(1)) {
            if ((sum == 0+1+2+3+sum).compareTo(true).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+0+1+2+1649075752+3).toLong().toString(5)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true, { "mixwe"})}

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (sum == 0+1+2+3+4)}?.let { error((A(5, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(87, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((0.toUByte()).equals("mgetq").and(true)) error((A(436559318, "cfyuz").y).get(i).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A((0+1+2).compareTo(-1063939318), "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> sum == 0+1+2+3+4})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:57:56,808 [main:137] - TRYING TO REPLACE CONSTANT true
2021-03-11 12:57:56,966 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-11 12:57:56,966 [main:66] - Compilation checking started
2021-03-11 12:57:57,602 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A((0+(0+1+2)+2+0+1+2+3).toInt().or(1), "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+(0+1+2).compareTo(-1063939318)).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+(0+1+2)+2+0+1+2+3).toInt().or(1)) {
            if ((sum == 0+1+2+3+sum).compareTo(false).xor(-1333981757) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+0+1+2+1649075752+3).toLong().toString(5)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true, { "mixwe"})}

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (sum == 0+1+2+3+4)}?.let { error((A(5, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(87, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((0.toUByte()).equals("mgetq").and(true)) error((A(436559318, "cfyuz").y).get(i).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A((0+1+2).compareTo(-1063939318), "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> sum == 0+1+2+3+4})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:57:57,602 [main:137] - TRYING TO REPLACE CONSTANT 1333981757
2021-03-11 12:57:57,761 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:57:57,762 [main:66] - Compilation checking started
2021-03-11 12:57:58,399 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A((0+(0+1+2)+2+0+1+2+3).toInt().or(1), "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+(0+1+2).compareTo(-1063939318)).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+(0+1+2)+2+0+1+2+3).toInt().or(1)) {
            if ((sum == 0+1+2+3+sum).compareTo(false).xor(sum) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+0+1+2+1649075752+3).toLong().toString(5)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true, { "mixwe"})}

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (sum == 0+1+2+3+4)}?.let { error((A(5, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(87, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((0.toUByte()).equals("mgetq").and(true)) error((A(436559318, "cfyuz").y).get(i).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A((0+1+2).compareTo(-1063939318), "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> sum == 0+1+2+3+4})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:57:58,399 [main:137] - TRYING TO REPLACE CONSTANT 3
2021-03-11 12:57:58,556 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-11 12:57:58,556 [main:66] - Compilation checking started
2021-03-11 12:57:59,009 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A((0+(0+1+2)+2+0+1+2+3).toInt().or(1), "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+(0+1+2).compareTo(-1063939318)).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+(0+1+2)+2+0+1+2+3).toInt().or(1)) {
            if ((sum == 0+1+2+plus(-87)+sum).compareTo(false).xor(sum) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+0+1+2+1649075752+3).toLong().toString(5)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true, { "mixwe"})}

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (sum == 0+1+2+3+4)}?.let { error((A(5, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(87, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((0.toUByte()).equals("mgetq").and(true)) error((A(436559318, "cfyuz").y).get(i).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A((0+1+2).compareTo(-1063939318), "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> sum == 0+1+2+3+4})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:57:59,010 [main:137] - TRYING TO REPLACE CONSTANT 2
2021-03-11 12:57:59,175 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 12:57:59,175 [main:66] - Compilation checking started
2021-03-11 12:57:59,792 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A((0+(0+1+2)+2+0+1+2+3).toInt().or(1), "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+(0+1+2).compareTo(-1063939318)).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+(0+1+2)+2+0+1+2+3).toInt().or(1)) {
            if ((sum == 0+1+(sum).compareTo(-436559318)+3+sum).compareTo(false).xor(sum) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+0+1+2+1649075752+3).toLong().toString(5)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true, { "mixwe"})}

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (sum == 0+1+2+3+4)}?.let { error((A(5, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(87, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((0.toUByte()).equals("mgetq").and(true)) error((A(436559318, "cfyuz").y).get(i).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A((0+1+2).compareTo(-1063939318), "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> sum == 0+1+2+3+4})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:57:59,793 [main:137] - TRYING TO REPLACE CONSTANT 0
2021-03-11 12:57:59,951 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:57:59,952 [main:66] - Compilation checking started
2021-03-11 12:58:00,391 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A((0+(0+1+2)+2+0+1+2+3).toInt().or(1), "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+(0+1+2).compareTo(-1063939318)).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+(0+1+2)+2+0+1+2+3).toInt().or(1)) {
            if ((sum == x+1+(sum).compareTo(-436559318)+3+sum).compareTo(false).xor(sum) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+0+1+2+1649075752+3).toLong().toString(5)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true, { "mixwe"})}

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (sum == 0+1+2+3+4)}?.let { error((A(5, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(87, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((0.toUByte()).equals("mgetq").and(true)) error((A(436559318, "cfyuz").y).get(i).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A((0+1+2).compareTo(-1063939318), "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> sum == 0+1+2+3+4})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:58:00,392 [main:137] - TRYING TO REPLACE CONSTANT 1
2021-03-11 12:58:00,548 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 12:58:00,549 [main:66] - Compilation checking started
2021-03-11 12:58:01,181 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A((0+(0+1+2)+2+0+1+2+3).toInt().or(1), "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+(0+1+2).compareTo(-1063939318)).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+(0+1+2)+2+0+1+2+3).toInt().or(1)) {
            if ((sum == 0+0+(sum).compareTo(-436559318)+3+sum).compareTo(false).xor(sum) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+0+1+2+1649075752+3).toLong().toString(5)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true, { "mixwe"})}

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (sum == 0+1+2+3+4)}?.let { error((A(5, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(87, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((0.toUByte()).equals("mgetq").and(true)) error((A(436559318, "cfyuz").y).get(i).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A((0+1+2).compareTo(-1063939318), "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> sum == 0+1+2+3+4})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:58:01,181 [main:137] - TRYING TO REPLACE CONSTANT 2503673117874613500
2021-03-11 12:58:01,339 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-11 12:58:01,339 [main:66] - Compilation checking started
2021-03-11 12:58:01,774 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A((0+(0+1+2)+2+0+1+2+3).toInt().or(1), "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+(0+1+2).compareTo(-1063939318)).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+(0+1+2)+2+0+1+2+3).toInt().or(1)) {
            if ((sum == 0+0+(sum).compareTo(-436559318)+3+sum).compareTo(false).xor(sum) > (0+1+2).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+0+1+2+1649075752+3).toLong().toString(5)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (toLong()).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true, { "mixwe"})}

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (sum == 0+1+2+3+4)}?.let { error((A(5, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(87, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((0.toUByte()).equals("mgetq").and(true)) error((A(436559318, "cfyuz").y).get(i).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A((0+1+2).compareTo(-1063939318), "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> sum == 0+1+2+3+4})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:58:01,775 [main:137] - TRYING TO REPLACE CONSTANT 2
2021-03-11 12:58:01,929 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 12:58:01,930 [main:66] - Compilation checking started
2021-03-11 12:58:02,530 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A((0+(0+1+2)+2+0+1+2+3).toInt().or(1), "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+(0+1+2).compareTo(-1063939318)).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+(0+1+2)+2+0+1+2+3).toInt().or(1)) {
            if ((sum == 0+0+(sum).compareTo(-436559318)+3+sum).compareTo(false).xor(sum) > (0+1+5).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+0+1+2+1649075752+3).toLong().toString(5)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true, { "mixwe"})}

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (sum == 0+1+2+3+4)}?.let { error((A(5, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(87, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((0.toUByte()).equals("mgetq").and(true)) error((A(436559318, "cfyuz").y).get(i).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A((0+1+2).compareTo(-1063939318), "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> sum == 0+1+2+3+4})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:58:02,531 [main:137] - TRYING TO REPLACE CONSTANT 0
2021-03-11 12:58:02,689 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(BINARY_EXPRESSION)
2021-03-11 12:58:02,690 [main:66] - Compilation checking started
2021-03-11 12:58:03,326 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A((0+(0+1+2)+2+0+1+2+3).toInt().or(1), "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+(0+1+2).compareTo(-1063939318)).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+(0+1+2)+2+0+1+2+3).toInt().or(1)) {
            if ((sum == 0+0+(sum).compareTo(-436559318)+3+sum).compareTo(false).xor(sum) > (0+0+1+2+1649075752+1+5).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+0+1+2+1649075752+3).toLong().toString(5)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true, { "mixwe"})}

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (sum == 0+1+2+3+4)}?.let { error((A(5, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(87, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((0.toUByte()).equals("mgetq").and(true)) error((A(436559318, "cfyuz").y).get(i).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A((0+1+2).compareTo(-1063939318), "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> sum == 0+1+2+3+4})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:58:03,327 [main:137] - TRYING TO REPLACE CONSTANT 1
2021-03-11 12:58:03,483 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-11 12:58:03,483 [main:66] - Compilation checking started
2021-03-11 12:58:04,103 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A((0+(0+1+2)+2+0+1+2+3).toInt().or(1), "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+(0+1+2).compareTo(-1063939318)).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+(0+1+2)+2+0+1+2+3).toInt().or(1)) {
            if ((sum == 0+0+(sum).compareTo(-436559318)+3+sum).compareTo(false).xor(sum) > (0+0+1+2+1649075752+-1649075752+5).compareTo(-1063939318).plus(-87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+0+1+2+1649075752+3).toLong().toString(5)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true, { "mixwe"})}

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (sum == 0+1+2+3+4)}?.let { error((A(5, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(87, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((0.toUByte()).equals("mgetq").and(true)) error((A(436559318, "cfyuz").y).get(i).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A((0+1+2).compareTo(-1063939318), "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> sum == 0+1+2+3+4})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:58:04,103 [main:137] - TRYING TO REPLACE CONSTANT 87
2021-03-11 12:58:04,262 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 12:58:04,263 [main:66] - Compilation checking started
2021-03-11 12:58:04,882 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A((0+(0+1+2)+2+0+1+2+3).toInt().or(1), "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+(0+1+2).compareTo(-1063939318)).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+(0+1+2)+2+0+1+2+3).toInt().or(1)) {
            if ((sum == 0+0+(sum).compareTo(-436559318)+3+sum).compareTo(false).xor(sum) > (0+0+1+2+1649075752+-1649075752+5).compareTo(-1063939318).plus(87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+0+1+2+1649075752+3).toLong().toString(5)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true, { "mixwe"})}

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (sum == 0+1+2+3+4)}?.let { error((A(5, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(87, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((0.toUByte()).equals("mgetq").and(true)) error((A(436559318, "cfyuz").y).get(i).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A((0+1+2).compareTo(-1063939318), "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> sum == 0+1+2+3+4})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:58:04,883 [main:137] - TRYING TO REPLACE CONSTANT 1063939318
2021-03-11 12:58:05,038 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PROPERTY)
2021-03-11 12:58:05,038 [main:66] - Compilation checking started
2021-03-11 12:58:05,046 [main:71] - Wrong syntax or breaks conditions
2021-03-11 12:58:05,046 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A((0+(0+1+2)+2+0+1+2+3).toInt().or(1), "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+(0+1+2).compareTo(-1063939318)).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+(0+1+2)+2+0+1+2+3).toInt().or(1)) {
            if ((sum == 0+0+(sum).compareTo(-436559318)+3+sum).compareTo(false).xor(sum) > (0+0+1+2+1649075752+-1649075752+5).compareTo(var sum = 0).plus(87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+0+1+2+1649075752+3).toLong().toString(5)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true, { "mixwe"})}

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (sum == 0+1+2+3+4)}?.let { error((A(5, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(87, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((0.toUByte()).equals("mgetq").and(true)) error((A(436559318, "cfyuz").y).get(i).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A((0+1+2).compareTo(-1063939318), "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> sum == 0+1+2+3+4})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:58:05,046 [main:137] - TRYING TO REPLACE CONSTANT 0.18997395f
2021-03-11 12:58:05,203 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(FLOAT_CONSTANT)
2021-03-11 12:58:05,203 [main:66] - Compilation checking started
2021-03-11 12:58:05,823 [main:137] - TRYING TO REPLACE CONSTANT 901199591
2021-03-11 12:58:06,015 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 12:58:06,016 [main:66] - Compilation checking started
2021-03-11 12:58:06,516 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(sum)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A((0+(0+1+2)+2+0+1+2+3).toInt().or(1), "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+(0+1+2).compareTo(-1063939318)).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+(0+1+2)+2+0+1+2+3).toInt().or(1)) {
            if ((sum == 0+0+(sum).compareTo(-436559318)+3+sum).compareTo(false).xor(sum) > (0+0+1+2+1649075752+-1649075752+5).compareTo(-1063939318).plus(87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+0+1+2+1649075752+3).toLong().toString(5)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true, { "mixwe"})}

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(-1649075752, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (sum == 0+1+2+3+4)}?.let { error((A(5, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(87, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((0.toUByte()).equals("mgetq").and(true)) error((A(436559318, "cfyuz").y).get(i).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A((0+1+2).compareTo(-1063939318), "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> sum == 0+1+2+3+4})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:58:06,516 [main:137] - TRYING TO REPLACE CONSTANT 1649075752
2021-03-11 12:58:06,693 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 12:58:06,693 [main:66] - Compilation checking started
2021-03-11 12:58:07,352 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(val x: Int, val y: String)

fun box(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
    
    var sum = 0
    var str = ""
    
    for ((x, y) in arr) {
        sum += x
        str += y
    }
    
    return if (sum == 0+1+2+3+4 && str == "01234") "OK" else "Fail ${sum} ${str}"
}

suspend fun fu0(): String = (0.18997395f).toInt().toString(-901199591)

fun fu1(c: suspend () -> Unit) {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
c.startCoroutine(Kla0)
}

val prope0 = (A((0+(0+1+2)+2+0+1+2+3).toInt().or(1), "cfyuz").y).compareTo("iniit").countLeadingZeroBits()

fun box337(): String {
    val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
var prope3 = (0+(0+1+2).compareTo(-1063939318)).toChar().uppercase()
    fu1 {
        // Initialize var with Int value
        for (i in (linkedMapOf<Char, Short>()).size.countOneBits()..(0+(0+1+2)+2+0+1+2+3).toInt().or(1)) {
            if ((sum == 0+0+(sum).compareTo(-436559318)+3+sum).compareTo(false).xor(sum) > (0+0+1+2+1649075752+-1649075752+5).compareTo(-1063939318).plus(87)) continue
        }

        // This variable should take the same slot as 'i' had
        var prope9: String

        // We should not spill 's' to continuation field because it's not initialized
        // More precisely it contains a value of wrong type (it conflicts with contents of local var table),
        // so an attempt of spilling may lead to problems on Android
        if ((sum).compareTo(-436559318).equals("wmztz")) {
            prope9 = (0+0+1+2+1649075752+3).toLong().toString(5)
        }
        else {
            prope9 = "fail 2"
        }

        prope3 = "skqcs"
    }

    return (2503673117874613500).toChar().plus("snxwk")
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
{a: Ty0 -> require(false, { "hbswt"})}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = (Kla1())?.context
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
(A(-1649075752, "cfyuz").y)?.forEachIndexed({a: Int, b: Char -> require(true, { "goeoz"})})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
"czhyd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla1().prope3 = runCatching<Any?>({ "xugnp"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(true, { "mixwe"})}

    fun fu6(c: Continuation<*>) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
if (c !is CoroutineStackFrame) error((Pair<ULong, String>(694050399806835272.toULong(), "uzwsj")).second.substringAfterLast('湡', "ainpu") + c + (A(0, "cfyuz").y).removeSuffix("crdte"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { (sum == 0+1+2+3+4)}?.let { error((A(5, "cfyuz").y).substringBeforeLast('ሌ', "pqcye")) }
    }

    fun fu8(method: String) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope4.find { false} ?: error((str).substringAfter('綆', "cdino"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (A(87, "cfyuz").x).compareTo(113420782).takeLowestOneBit()
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
prope5 = (sum).toByte().unaryPlus()
        prope6 = (0.9501499893829521).equals("nacyc").or(true)
        prope7 = { println()}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false, { "ctgsa"})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
for (i in (str).length.until(87)) {
            if ((0.toUByte()).equals("mgetq").and(true)) error((A(436559318, "cfyuz").y).get(i).plus("rksvu") + sum)
            prope7()
        }
        if (false)
            error((A(-1649075752, "cfyuz").y).capitalize())
        if ((A((0+1+2).compareTo(-1063939318), "cfyuz").x).div(0.2573452009175674).isFinite()) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((str).all({a: Char -> sum == 0+1+2+3+4})) error((A(-1649075752, "cfyuz").x).toLong().toString(1965854268))
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
Kla4().prope7 = (Kla4()).prope7
    }

    override fun fu4(exception: Throwable) {
        val arr = Array<A>(5) {
        i -> A(i, i.toString())
    }
var sum = 0
var str = ""
throw IllegalStateException("ptehl", UnsupportedOperationException(NoWhenBranchMatchedException()))
    }
}


2021-03-11 12:58:07,353 [main:137] - TRYING TO REPLACE CONSTANT false
2021-03-11 12:58:07,518 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BINARY_EXPRESSION)
2021-03-11 12:58:07,518 [main:66] - Compilation checking started
