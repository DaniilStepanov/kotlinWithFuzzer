2021-03-12 01:48:43,063 [main:66] - Compilation checking started
2021-03-12 01:48:45,114 [main:50] - replacing id: String String
2021-03-12 01:48:45,115 [main:54] - Getting value of type String
2021-03-12 01:48:45,360 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:48:45,364 [main:58] - GENERATED VALUE OF TYPE String = "zbdfo"
2021-03-12 01:48:45,364 [main:61] - GENERATED IS CALL =false
2021-03-12 01:48:46,240 [main:67] - randomType = Function1<Boolean, ULong>
2021-03-12 01:48:46,252 [main:106] - GETTING String from T
2021-03-12 01:48:46,266 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 01:48:46,267 [main:66] - Compilation checking started
2021-03-12 01:48:47,165 [main:53] - Result = true
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String = "zbdfo", expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}
2021-03-12 01:48:47,166 [main:50] - replacing expected: Int Int
2021-03-12 01:48:47,166 [main:54] - Getting value of type Int
2021-03-12 01:48:47,379 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:48:47,380 [main:58] - GENERATED VALUE OF TYPE Int = 402854068
2021-03-12 01:48:47,381 [main:61] - GENERATED IS CALL =false
2021-03-12 01:48:49,105 [main:67] - randomType = Function2<Function2<Char, Function1<A, Short>, ULong>, ULong, Short>
2021-03-12 01:48:49,108 [main:106] - GETTING Int from String
2021-03-12 01:48:49,188 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65a3ca0], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6344afcd]]
2021-03-12 01:48:49,188 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65a3ca0]
2021-03-12 01:48:49,188 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6344afcd]
2021-03-12 01:48:49,383 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:48:49,385 [main:117] - GENERATED CALL = (id).compareTo(id).shr(2133373806)
2021-03-12 01:48:49,386 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@a1c308d], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78080c68]]
2021-03-12 01:48:49,386 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78080c68]
2021-03-12 01:48:49,387 [main:117] - GENERATED CALL = (id).length.toInt()
2021-03-12 01:48:49,387 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65a3ca0], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7107ffd9]]
2021-03-12 01:48:49,388 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65a3ca0]
2021-03-12 01:48:49,563 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:48:49,565 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7107ffd9]
2021-03-12 01:48:49,566 [main:117] - GENERATED CALL = (id).compareTo("htdcl").takeLowestOneBit()
2021-03-12 01:48:49,566 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65a3ca0], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b28a80]]
2021-03-12 01:48:49,566 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65a3ca0]
2021-03-12 01:48:49,566 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b28a80]
2021-03-12 01:48:49,739 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:48:49,740 [main:117] - GENERATED CALL = (id).compareTo(id).rem(10)
2021-03-12 01:48:49,742 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4b0fdef9], public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73a69565]]
2021-03-12 01:48:49,742 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4b0fdef9]
2021-03-12 01:48:49,906 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:48:50,108 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:48:50,109 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73a69565]
2021-03-12 01:48:50,259 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:48:50,260 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:48:50,261 [main:117] - GENERATED CALL = (id).subSequence(1653787010, -676678449).indexOfFirst({a: Char -> false})
2021-03-12 01:48:50,261 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@a1c308d], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d8dcc4]]
2021-03-12 01:48:50,261 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d8dcc4]
2021-03-12 01:48:50,415 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:48:50,416 [main:117] - GENERATED CALL = (id).length.shl(-20669970)
2021-03-12 01:48:50,417 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65a3ca0], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e6ef7e7]]
2021-03-12 01:48:50,417 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65a3ca0]
2021-03-12 01:48:50,417 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e6ef7e7]
2021-03-12 01:48:50,418 [main:117] - GENERATED CALL = (id).compareTo(id).unaryPlus()
2021-03-12 01:48:50,418 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@a1c308d], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1ffceeae]]
2021-03-12 01:48:50,418 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1ffceeae]
2021-03-12 01:48:50,419 [main:117] - GENERATED CALL = (id).length.countTrailingZeroBits()
2021-03-12 01:48:50,419 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65a3ca0], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d8dcc4]]
2021-03-12 01:48:50,419 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65a3ca0]
2021-03-12 01:48:50,419 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d8dcc4]
2021-03-12 01:48:50,592 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:48:50,594 [main:117] - GENERATED CALL = (id).compareTo(id).shl(1685879460)
2021-03-12 01:48:50,594 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65a3ca0], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@472c0627]]
2021-03-12 01:48:50,595 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@65a3ca0]
2021-03-12 01:48:50,595 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@472c0627]
2021-03-12 01:48:50,731 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:48:50,732 [main:117] - GENERATED CALL = (id).compareTo(id).div(-87)
2021-03-12 01:48:50,733 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 01:48:50,733 [main:66] - Compilation checking started
2021-03-12 01:48:51,561 [main:53] - Result = true
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String = "zbdfo", expected: Int = (id).subSequence(1653787010, -676678449).indexOfFirst({a: Char -> false}), expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}
2021-03-12 01:48:51,561 [main:50] - replacing expectedLog: String String
2021-03-12 01:48:51,561 [main:54] - Getting value of type String
2021-03-12 01:48:51,710 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:48:51,710 [main:58] - GENERATED VALUE OF TYPE String = "qymkj"
2021-03-12 01:48:51,711 [main:61] - GENERATED IS CALL =false
2021-03-12 01:48:51,866 [main:67] - randomType = Array<A>
2021-03-12 01:48:52,012 [main:302] - generating value of type = Array<A> false depth = 0
2021-03-12 01:48:52,179 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: A): Array<A> = TODO()
2021-03-12 01:48:52,184 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: A): Array<A> = TODO()
2021-03-12 01:48:52,370 [main:302] - generating value of type = A false depth = 3
2021-03-12 01:48:52,371 [main:112] - generating klass A text = object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}
2021-03-12 01:48:52,373 [main:95] - GENERATED = arrayOf<A>(A)
2021-03-12 01:48:52,401 [main:149] - GENERATING call of type public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4961b6f0]
2021-03-12 01:48:52,532 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:48:52,685 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:48:52,868 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:48:53,019 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:48:53,161 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 01:48:53,162 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 01:48:53,167 [main:78] - Generated call from random type = (arrayOf<A>(A)).joinToString("scrjm", "eyiin", StringBuilder(), expected, StringBuilder(), {a: T -> "ufpyv"})
2021-03-12 01:48:53,167 [main:106] - GETTING String from String
2021-03-12 01:48:53,211 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d0ee353]]
2021-03-12 01:48:53,211 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d0ee353]
2021-03-12 01:48:53,212 [main:117] - GENERATED CALL = (id).trim()
2021-03-12 01:48:53,212 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cac6916]]
2021-03-12 01:48:53,212 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cac6916]
2021-03-12 01:48:53,374 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:48:53,512 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 01:48:53,515 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 01:48:53,830 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 01:48:53,836 [main:95] - GENERATED = StringBuilder("ufaol")
2021-03-12 01:48:53,836 [main:117] - GENERATED CALL = (id).removePrefix(StringBuilder("ufaol"))
2021-03-12 01:48:53,836 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4b0fdef9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5785a008]]
2021-03-12 01:48:53,836 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4b0fdef9]
2021-03-12 01:48:53,837 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5785a008]
2021-03-12 01:48:53,995 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 01:48:54,152 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 01:48:54,154 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 01:48:54,659 [main:302] - generating value of type = String true depth = 3
2021-03-12 01:48:54,659 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 01:48:54,665 [main:95] - GENERATED = Regex("hdrnd", kotlin.text.RegexOption.IGNORE_CASE)
2021-03-12 01:48:54,666 [main:117] - GENERATED CALL = (id).subSequence(expected, expected).replaceFirst(Regex("hdrnd", kotlin.text.RegexOption.IGNORE_CASE), id)
2021-03-12 01:48:54,667 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4b0fdef9], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39ac43b7]]
2021-03-12 01:48:54,667 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4b0fdef9]
2021-03-12 01:48:54,853 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:48:55,007 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:48:55,008 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39ac43b7]
2021-03-12 01:48:55,139 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 01:48:55,265 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 01:48:55,267 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 01:48:55,571 [main:302] - generating value of type = String true depth = 3
2021-03-12 01:48:55,572 [main:95] - GENERATED = Regex("bzjhz")
2021-03-12 01:48:55,697 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 01:48:55,698 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 01:48:55,703 [main:117] - GENERATED CALL = (id).subSequence(1945553360, -1410976682).replace(Regex("bzjhz"), {a: MatchResult -> StringBuilder()})
2021-03-12 01:48:55,704 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4a694e4c], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]]
2021-03-12 01:48:55,704 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4a694e4c]
2021-03-12 01:48:55,822 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:48:55,823 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]
2021-03-12 01:48:55,823 [main:117] - GENERATED CALL = (id).get(-1035945928).titlecase()
2021-03-12 01:48:55,824 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65792f68]]
2021-03-12 01:48:55,824 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65792f68]
2021-03-12 01:48:55,971 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:48:55,972 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:48:55,974 [main:117] - GENERATED CALL = (id).takeLastWhile({a: Char -> true})
2021-03-12 01:48:55,974 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4a694e4c], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]]
2021-03-12 01:48:55,974 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4a694e4c]
2021-03-12 01:48:55,975 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]
2021-03-12 01:48:55,975 [main:117] - GENERATED CALL = (id).get(expected).uppercase()
2021-03-12 01:48:55,975 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e60c26e]]
2021-03-12 01:48:55,975 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e60c26e]
2021-03-12 01:48:56,129 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:48:56,130 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:48:56,131 [main:117] - GENERATED CALL = (id).filterNot({a: Char -> false})
2021-03-12 01:48:56,132 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c7739e4]]
2021-03-12 01:48:56,132 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c7739e4]
2021-03-12 01:48:56,267 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:48:56,391 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 01:48:56,393 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 01:48:56,691 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 01:48:56,808 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:48:56,810 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:48:57,079 [main:302] - generating value of type = Int true depth = 6
2021-03-12 01:48:57,080 [main:95] - GENERATED = StringBuilder(-234481864)
2021-03-12 01:48:57,080 [main:95] - GENERATED = StringBuilder(StringBuilder(-234481864))
2021-03-12 01:48:57,086 [main:117] - GENERATED CALL = (id).removeSuffix(StringBuilder(StringBuilder(-234481864)))
2021-03-12 01:48:57,086 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b4761fd]]
2021-03-12 01:48:57,086 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b4761fd]
2021-03-12 01:48:57,087 [main:117] - GENERATED CALL = (id).lowercase()
2021-03-12 01:48:57,087 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 01:48:57,088 [main:66] - Compilation checking started
2021-03-12 01:48:57,679 [main:53] - Result = true
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String = "zbdfo", expected: Int = (id).subSequence(1653787010, -676678449).indexOfFirst({a: Char -> false}), expectedLog: String = (id).lowercase(), test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}


2021-03-12 01:48:57,680 [main:50] - replacing test: () -> Int Function0<Int>
2021-03-12 01:48:57,680 [main:54] - Getting value of type Function0<Int>
2021-03-12 01:48:57,816 [main:302] - generating value of type = Function0<Int> false depth = 0
2021-03-12 01:48:57,817 [main:302] - generating value of type = Int true depth = 1
2021-03-12 01:48:57,817 [main:58] - GENERATED VALUE OF TYPE Function0<Int> = { 1128900631}
2021-03-12 01:48:57,818 [main:61] - GENERATED IS CALL =false
2021-03-12 01:48:57,819 [main:67] - randomType = Int
2021-03-12 01:48:57,936 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:48:58,007 [main:106] - GETTING Function0<Int> from String
2021-03-12 01:48:58,033 [main:106] - GETTING Function0<Int> from String
2021-03-12 01:48:58,034 [main:106] - GETTING Function0<Int> from T
2021-03-12 01:48:58,040 [main:106] - GETTING Function0<Int> from Int
2021-03-12 01:48:58,083 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 01:48:58,083 [main:66] - Compilation checking started
2021-03-12 01:48:58,750 [main:53] - Result = true
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String = "zbdfo", expected: Int = (id).subSequence(1653787010, -676678449).indexOfFirst({a: Char -> false}), expectedLog: String = (id).lowercase(), test: () -> Int = { 1128900631}) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}


2021-03-12 01:48:58,750 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:48:58,751 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 01:48:58,751 [main:66] - Compilation checking started
2021-03-12 01:48:59,258 [main:53] - Result = true
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String = "zbdfo", expected: Int = (id).subSequence(1653787010, -676678449).indexOfFirst({a: Char -> false}), expectedLog: String = (id).lowercase(), test: () -> Int = { 1128900631}) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int = 188208807, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}


2021-03-12 01:48:59,259 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:48:59,260 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 01:48:59,260 [main:66] - Compilation checking started
2021-03-12 01:48:59,767 [main:53] - Result = true
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String = "zbdfo", expected: Int = (id).subSequence(1653787010, -676678449).indexOfFirst({a: Char -> false}), expectedLog: String = (id).lowercase(), test: () -> Int = { 1128900631}) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int = 188208807, i2: Int = 243036338, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}


2021-03-12 01:48:59,767 [main:50] - replacing i3: Int Int
2021-03-12 01:48:59,768 [main:54] - Getting value of type Int
2021-03-12 01:48:59,879 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:48:59,880 [main:58] - GENERATED VALUE OF TYPE Int = 505857701
2021-03-12 01:48:59,880 [main:61] - GENERATED IS CALL =false
2021-03-12 01:49:00,002 [main:67] - randomType = Short
2021-03-12 01:49:00,109 [main:302] - generating value of type = Short true depth = 0
2021-03-12 01:49:00,151 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2fba18e9]
2021-03-12 01:49:00,151 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@55a9d905]
2021-03-12 01:49:00,152 [main:78] - Generated call from random type = (-4780).toFloat().toInt()
2021-03-12 01:49:00,152 [main:106] - GETTING Int from Int
2021-03-12 01:49:00,185 [main:113] - Case = [public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3ef045d8]]
2021-03-12 01:49:00,185 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3ef045d8]
2021-03-12 01:49:00,313 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:49:00,314 [main:117] - GENERATED CALL = (i1).minus(-115)
2021-03-12 01:49:00,315 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@5fc3e805]]
2021-03-12 01:49:00,315 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60]
2021-03-12 01:49:00,315 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@5fc3e805]
2021-03-12 01:49:00,422 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:49:00,423 [main:117] - GENERATED CALL = (i1).toShort().times(124)
2021-03-12 01:49:00,423 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@c19fc05]]
2021-03-12 01:49:00,423 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235]
2021-03-12 01:49:00,423 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@c19fc05]
2021-03-12 01:49:00,539 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:49:00,540 [main:117] - GENERATED CALL = (i1).toByte().rem(-51)
2021-03-12 01:49:00,540 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2572ce0f]]
2021-03-12 01:49:00,540 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:49:00,540 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2572ce0f]
2021-03-12 01:49:00,665 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:49:00,667 [main:117] - GENERATED CALL = (i1).compareTo(i2).times(94)
2021-03-12 01:49:00,667 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5958298b], public open val start: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@786533ac]]
2021-03-12 01:49:00,667 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5958298b]
2021-03-12 01:49:00,832 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:49:00,833 [main:117] - GENERATED CALL = (i1).rangeTo(-32).start
2021-03-12 01:49:00,833 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70b68745]]
2021-03-12 01:49:00,834 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:49:00,834 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70b68745]
2021-03-12 01:49:00,834 [main:117] - GENERATED CALL = (i1).toInt().ushr(expected)
2021-03-12 01:49:00,834 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5d605014]]
2021-03-12 01:49:00,834 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5d605014]
2021-03-12 01:49:00,835 [main:117] - GENERATED CALL = (i1).countLeadingZeroBits()
2021-03-12 01:49:00,835 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@188a4e82]]
2021-03-12 01:49:00,835 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235]
2021-03-12 01:49:00,835 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@188a4e82]
2021-03-12 01:49:00,835 [main:117] - GENERATED CALL = (i1).toByte().countTrailingZeroBits()
2021-03-12 01:49:00,835 [main:113] - Case = [public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5aba40f]]
2021-03-12 01:49:00,835 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5aba40f]
2021-03-12 01:49:00,836 [main:117] - GENERATED CALL = (i1).inc()
2021-03-12 01:49:00,836 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5cb9291b]]
2021-03-12 01:49:00,836 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e]
2021-03-12 01:49:00,836 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5cb9291b]
2021-03-12 01:49:00,836 [main:117] - GENERATED CALL = (i1).toLong().countLeadingZeroBits()
2021-03-12 01:49:00,836 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 01:49:00,837 [main:66] - Compilation checking started
2021-03-12 01:49:01,333 [main:53] - Result = true
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String = "zbdfo", expected: Int = (id).subSequence(1653787010, -676678449).indexOfFirst({a: Char -> false}), expectedLog: String = (id).lowercase(), test: () -> Int = { 1128900631}) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int = 188208807, i2: Int = 243036338, i3: Int = (i1).toLong().countLeadingZeroBits()): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}


2021-03-12 01:49:01,334 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:49:01,335 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 01:49:01,335 [main:66] - Compilation checking started
2021-03-12 01:49:01,850 [main:53] - Result = true
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String = "zbdfo", expected: Int = (id).subSequence(1653787010, -676678449).indexOfFirst({a: Char -> false}), expectedLog: String = (id).lowercase(), test: () -> Int = { 1128900631}) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int = 188208807, i2: Int = 243036338, i3: Int = (i1).toLong().countLeadingZeroBits()): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int = 896609695, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}


2021-03-12 01:49:01,850 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:49:01,851 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 01:49:01,852 [main:66] - Compilation checking started
2021-03-12 01:49:02,343 [main:53] - Result = true
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String = "zbdfo", expected: Int = (id).subSequence(1653787010, -676678449).indexOfFirst({a: Char -> false}), expectedLog: String = (id).lowercase(), test: () -> Int = { 1128900631}) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int = 188208807, i2: Int = 243036338, i3: Int = (i1).toLong().countLeadingZeroBits()): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int = 896609695, i2: Int = -234885965, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}


2021-03-12 01:49:02,343 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:49:02,345 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 01:49:02,345 [main:66] - Compilation checking started
2021-03-12 01:49:02,830 [main:53] - Result = true
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String = "zbdfo", expected: Int = (id).subSequence(1653787010, -676678449).indexOfFirst({a: Char -> false}), expectedLog: String = (id).lowercase(), test: () -> Int = { 1128900631}) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int = 188208807, i2: Int = 243036338, i3: Int = (i1).toLong().countLeadingZeroBits()): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int = 896609695, i2: Int = -234885965, i3: Int = 1627791136, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}


2021-03-12 01:49:02,831 [main:50] - replacing value: Int Int
2021-03-12 01:49:02,831 [main:54] - Getting value of type Int
2021-03-12 01:49:02,944 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:49:02,945 [main:58] - GENERATED VALUE OF TYPE Int = 2121116086
2021-03-12 01:49:02,945 [main:61] - GENERATED IS CALL =false
2021-03-12 01:49:02,947 [main:67] - randomType = Boolean
2021-03-12 01:49:03,052 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:49:03,063 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@19b05991]
2021-03-12 01:49:03,172 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:49:03,173 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1ffceeae]
2021-03-12 01:49:03,173 [main:78] - Generated call from random type = (true).compareTo(false).countTrailingZeroBits()
2021-03-12 01:49:03,174 [main:106] - GETTING Int from Function0<Int>
2021-03-12 01:49:03,186 [main:113] - Case = [public abstract operator fun invoke(): kotlin.Int defined in kotlin.Function0[FunctionInvokeDescriptor@7156c7e5], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5aba40f]]
2021-03-12 01:49:03,186 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.Int defined in kotlin.Function0[FunctionInvokeDescriptor@7156c7e5]
2021-03-12 01:49:03,186 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5aba40f]
2021-03-12 01:49:03,187 [main:117] - GENERATED CALL = (test).invoke().inc()
2021-03-12 01:49:03,187 [main:113] - Case = [public abstract operator fun invoke(): kotlin.Int defined in kotlin.Function0[FunctionInvokeDescriptor@7156c7e5], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@472c0627]]
2021-03-12 01:49:03,187 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.Int defined in kotlin.Function0[FunctionInvokeDescriptor@7156c7e5]
2021-03-12 01:49:03,187 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@472c0627]
2021-03-12 01:49:03,297 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:49:03,298 [main:117] - GENERATED CALL = (test).invoke().div(55)
2021-03-12 01:49:03,298 [main:113] - Case = [public abstract operator fun invoke(): kotlin.Int defined in kotlin.Function0[FunctionInvokeDescriptor@7156c7e5], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@77efaf86]]
2021-03-12 01:49:03,298 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.Int defined in kotlin.Function0[FunctionInvokeDescriptor@7156c7e5]
2021-03-12 01:49:03,298 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@77efaf86]
2021-03-12 01:49:03,403 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:49:03,404 [main:117] - GENERATED CALL = (test).invoke().compareTo(92)
2021-03-12 01:49:03,404 [main:113] - Case = [public abstract operator fun invoke(): kotlin.Int defined in kotlin.Function0[FunctionInvokeDescriptor@7156c7e5], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4f6b2741]]
2021-03-12 01:49:03,404 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.Int defined in kotlin.Function0[FunctionInvokeDescriptor@7156c7e5]
2021-03-12 01:49:03,405 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4f6b2741]
2021-03-12 01:49:03,405 [main:117] - GENERATED CALL = (test).invoke().and(i2)
2021-03-12 01:49:03,405 [main:113] - Case = [public abstract operator fun invoke(): kotlin.Int defined in kotlin.Function0[FunctionInvokeDescriptor@7156c7e5], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5d605014]]
2021-03-12 01:49:03,405 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.Int defined in kotlin.Function0[FunctionInvokeDescriptor@7156c7e5]
2021-03-12 01:49:03,405 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5d605014]
2021-03-12 01:49:03,405 [main:117] - GENERATED CALL = (test).invoke().countLeadingZeroBits()
2021-03-12 01:49:03,405 [main:113] - Case = [public abstract operator fun invoke(): kotlin.Int defined in kotlin.Function0[FunctionInvokeDescriptor@7156c7e5], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3854cce]]
2021-03-12 01:49:03,406 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.Int defined in kotlin.Function0[FunctionInvokeDescriptor@7156c7e5]
2021-03-12 01:49:03,406 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3854cce]
2021-03-12 01:49:03,406 [main:117] - GENERATED CALL = (test).invoke().unaryMinus()
2021-03-12 01:49:03,406 [main:113] - Case = [public abstract operator fun invoke(): kotlin.Int defined in kotlin.Function0[FunctionInvokeDescriptor@7156c7e5], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3ef045d8]]
2021-03-12 01:49:03,406 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.Int defined in kotlin.Function0[FunctionInvokeDescriptor@7156c7e5]
2021-03-12 01:49:03,406 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3ef045d8]
2021-03-12 01:49:03,528 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:49:03,530 [main:117] - GENERATED CALL = (test).invoke().minus(104)
2021-03-12 01:49:03,530 [main:113] - Case = [public abstract operator fun invoke(): kotlin.Int defined in kotlin.Function0[FunctionInvokeDescriptor@7156c7e5], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@28919d13]]
2021-03-12 01:49:03,530 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.Int defined in kotlin.Function0[FunctionInvokeDescriptor@7156c7e5]
2021-03-12 01:49:03,530 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@28919d13]
2021-03-12 01:49:03,635 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:49:03,636 [main:117] - GENERATED CALL = (test).invoke().plus(-36)
2021-03-12 01:49:03,637 [main:113] - Case = [public abstract operator fun invoke(): kotlin.Int defined in kotlin.Function0[FunctionInvokeDescriptor@7156c7e5], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78080c68]]
2021-03-12 01:49:03,637 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.Int defined in kotlin.Function0[FunctionInvokeDescriptor@7156c7e5]
2021-03-12 01:49:03,637 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78080c68]
2021-03-12 01:49:03,637 [main:117] - GENERATED CALL = (test).invoke().toInt()
2021-03-12 01:49:03,637 [main:113] - Case = [public abstract operator fun invoke(): kotlin.Int defined in kotlin.Function0[FunctionInvokeDescriptor@7156c7e5], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@647e2e5d]]
2021-03-12 01:49:03,637 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.Int defined in kotlin.Function0[FunctionInvokeDescriptor@7156c7e5]
2021-03-12 01:49:03,638 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@647e2e5d]
2021-03-12 01:49:03,638 [main:117] - GENERATED CALL = (test).invoke().takeHighestOneBit()
2021-03-12 01:49:03,638 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 01:49:03,638 [main:66] - Compilation checking started
2021-03-12 01:49:03,959 [main:49] - Result = false
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String = "zbdfo", expected: Int = (id).subSequence(1653787010, -676678449).indexOfFirst({a: Char -> false}), expectedLog: String = (id).lowercase(), test: () -> Int = { 1128900631}) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int = 188208807, i2: Int = 243036338, i3: Int = (i1).toLong().countLeadingZeroBits()): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int = 896609695, i2: Int = -234885965, i3: Int = 1627791136, value: Int = (test).invoke().and(i2)) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}


2021-03-12 01:49:03,960 [main:50] - replacing value: Int Int
2021-03-12 01:49:03,960 [main:54] - Getting value of type Int
2021-03-12 01:49:04,113 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:49:04,114 [main:58] - GENERATED VALUE OF TYPE Int = 415492706
2021-03-12 01:49:04,114 [main:61] - GENERATED IS CALL =false
2021-03-12 01:49:04,246 [main:67] - randomType = List<A>
2021-03-12 01:49:04,247 [main:106] - GETTING Int from Int
2021-03-12 01:49:04,303 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@395d0861]]
2021-03-12 01:49:04,304 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60]
2021-03-12 01:49:04,304 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@395d0861]
2021-03-12 01:49:04,304 [main:117] - GENERATED CALL = (value).toShort().countOneBits()
2021-03-12 01:49:04,304 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2fba18e9], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@44daa517]]
2021-03-12 01:49:04,305 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2fba18e9]
2021-03-12 01:49:04,305 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@44daa517]
2021-03-12 01:49:04,438 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:49:04,439 [main:117] - GENERATED CALL = (value).toFloat().compareTo(-54)
2021-03-12 01:49:04,440 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7b59aa7b]]
2021-03-12 01:49:04,440 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:49:04,440 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7b59aa7b]
2021-03-12 01:49:04,440 [main:117] - GENERATED CALL = (value).toInt().countOneBits()
2021-03-12 01:49:04,440 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@153454d9]]
2021-03-12 01:49:04,440 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:49:04,440 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@153454d9]
2021-03-12 01:49:04,441 [main:117] - GENERATED CALL = (value).toInt().coerceAtMost(i1)
2021-03-12 01:49:04,441 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@77efaf86]]
2021-03-12 01:49:04,441 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:49:04,441 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@77efaf86]
2021-03-12 01:49:04,573 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:49:04,574 [main:117] - GENERATED CALL = (value).toInt().compareTo(-76)
2021-03-12 01:49:04,574 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5d605014]]
2021-03-12 01:49:04,574 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5d605014]
2021-03-12 01:49:04,574 [main:117] - GENERATED CALL = (value).countLeadingZeroBits()
2021-03-12 01:49:04,574 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@c19fc05]]
2021-03-12 01:49:04,574 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235]
2021-03-12 01:49:04,574 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@c19fc05]
2021-03-12 01:49:04,683 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:49:04,684 [main:117] - GENERATED CALL = (value).toByte().rem(-97)
2021-03-12 01:49:04,685 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5aba40f]]
2021-03-12 01:49:04,685 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:49:04,685 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5aba40f]
2021-03-12 01:49:04,685 [main:117] - GENERATED CALL = (value).toInt().inc()
2021-03-12 01:49:04,685 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@41d04a80]]
2021-03-12 01:49:04,685 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:49:04,685 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@41d04a80]
2021-03-12 01:49:04,686 [main:117] - GENERATED CALL = (value).compareTo(i1).rotateLeft(value)
2021-03-12 01:49:04,686 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@406267da]]
2021-03-12 01:49:04,686 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:49:04,687 [main:117] - GENERATED CALL = (value).toInt().sign
2021-03-12 01:49:04,687 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 01:49:04,687 [main:66] - Compilation checking started
2021-03-12 01:49:04,690 [main:71] - Wrong syntax or breaks conditions
2021-03-12 01:49:04,691 [main:49] - Result = false
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String = "zbdfo", expected: Int = (id).subSequence(1653787010, -676678449).indexOfFirst({a: Char -> false}), expectedLog: String = (id).lowercase(), test: () -> Int = { 1128900631}) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int = (value).compareTo(i1).rotateLeft(value)) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int = 188208807, i2: Int = 243036338, i3: Int = (i1).toLong().countLeadingZeroBits()): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int = 896609695, i2: Int = -234885965, i3: Int = 1627791136, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}


2021-03-12 01:49:04,984 [main:112] - generating klass A text = object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}
2021-03-12 01:49:04,984 [main:112] - generating klass B text = object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}
2021-03-12 01:49:05,219 [main:43] - GENERATING CALL OF fun <T> logged(value: T): T =
    value.also { log += "$value;" }
2021-03-12 01:49:05,480 [main:61] - WITHOUT TYPE PARAMS = fun <T> logged(value: Array<Float>): Array<Float> =
    value.also { log += "$value;" }
2021-03-12 01:49:05,612 [main:302] - generating value of type = Array<Float> false depth = 1
2021-03-12 01:49:05,735 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Float): Array<Float> = TODO()
2021-03-12 01:49:05,737 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Float): Array<Float> = TODO()
2021-03-12 01:49:06,145 [main:302] - generating value of type = Int true depth = 4
2021-03-12 01:49:06,145 [main:302] - generating value of type = Function1<Int, Float> false depth = 4
2021-03-12 01:49:06,146 [main:302] - generating value of type = Float true depth = 5
2021-03-12 01:49:06,147 [main:95] - GENERATED = Array<Float>(1513132776, {a: Int -> 0.6006693f})
2021-03-12 01:49:06,147 [main:95] - GENERATED = logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))
2021-03-12 01:49:06,253 [main:43] - GENERATING CALL OF fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}
2021-03-12 01:49:06,254 [main:61] - WITHOUT TYPE PARAMS = fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}
2021-03-12 01:49:06,475 [main:302] - generating value of type = String true depth = 1
2021-03-12 01:49:06,476 [main:302] - generating value of type = Int true depth = 1
2021-03-12 01:49:06,476 [main:302] - generating value of type = String true depth = 1
2021-03-12 01:49:06,476 [main:302] - generating value of type = Function0<Int> false depth = 1
2021-03-12 01:49:06,477 [main:302] - generating value of type = Int true depth = 2
2021-03-12 01:49:06,478 [main:95] - GENERATED = doTest("vaxqe", 393982168, "wfpft", { 689404984})
2021-03-12 01:49:06,616 [main:45] - Trying to change 98 nodes
2021-03-12 01:49:06,619 [main:53] - replacing (getB()[logged(1), logged(2), logged(3)]--, Int)
2021-03-12 01:49:06,620 [main:50] - replacing getB()[logged(1), logged(2), logged(3)]-- Int
2021-03-12 01:49:06,620 [main:54] - Getting value of type Int
2021-03-12 01:49:06,733 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:49:06,733 [main:58] - GENERATED VALUE OF TYPE Int = -1681677227
2021-03-12 01:49:06,734 [main:61] - GENERATED IS CALL =false
2021-03-12 01:49:06,845 [main:67] - randomType = ULong
2021-03-12 01:49:06,960 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 01:49:07,004 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@1c616504]
2021-03-12 01:49:07,136 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 01:49:07,137 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7107ffd9]
2021-03-12 01:49:07,137 [main:78] - Generated call from random type = (9107430422333898917.toULong()).compareTo(12.toUByte()).takeLowestOneBit()
2021-03-12 01:49:07,137 [main:61] - replacement of getB()[logged(1), logged(2), logged(3)]-- of type Int is (9107430422333898917.toULong()).compareTo(12.toUByte()).takeLowestOneBit()
2021-03-12 01:49:07,252 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:49:07,252 [main:66] - Compilation checking started
2021-03-12 01:49:07,680 [main:53] - Result = true
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { (9107430422333898917.toULong()).compareTo(12.toUByte()).takeLowestOneBit() }

    return "OK"
}


2021-03-12 01:49:07,682 [main:53] - replacing ({ log += "$value;" }, Function1<T, Unit>)
2021-03-12 01:49:07,682 [main:50] - replacing { log += "$value;" } Function1<T, Unit>
2021-03-12 01:49:07,682 [main:54] - Getting value of type Function1<T, Unit>
2021-03-12 01:49:07,822 [main:302] - generating value of type = Function1<T, Unit> false depth = 0
2021-03-12 01:49:07,823 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 01:49:08,002 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 01:49:08,004 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 01:49:08,229 [main:302] - generating value of type = Any false depth = 4
2021-03-12 01:49:08,230 [main:95] - GENERATED = print("kaczm")
2021-03-12 01:49:08,230 [main:58] - GENERATED VALUE OF TYPE Function1<T, Unit> = {a: T -> print("kaczm")}
2021-03-12 01:49:08,230 [main:61] - GENERATED IS CALL =false
2021-03-12 01:49:08,340 [main:67] - randomType = ULong?
2021-03-12 01:49:08,444 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 01:49:08,528 [main:106] - GETTING Function1<T, Unit> from A
2021-03-12 01:49:08,542 [main:106] - GETTING Function1<T, Unit> from String
2021-03-12 01:49:08,595 [main:106] - GETTING Function1<T, Unit> from Int
2021-03-12 01:49:08,673 [main:106] - GETTING Function1<T, Unit> from Int
2021-03-12 01:49:08,675 [main:106] - GETTING Function1<T, Unit> from Array<Float>
2021-03-12 01:49:08,692 [main:106] - GETTING Function1<T, Unit> from B
2021-03-12 01:49:08,704 [main:106] - GETTING Function1<T, Unit> from T
2021-03-12 01:49:08,709 [main:106] - GETTING Function1<T, Unit> from Int
2021-03-12 01:49:08,709 [main:61] - replacement of { log += "$value;" } of type Function1<T, Unit> is {a: T -> print("kaczm")}
2021-03-12 01:49:08,821 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 01:49:08,822 [main:66] - Compilation checking started
2021-03-12 01:49:09,283 [main:53] - Result = true
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also {a: T -> print("kaczm")}

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { (9107430422333898917.toULong()).compareTo(12.toUByte()).takeLowestOneBit() }

    return "OK"
}


2021-03-12 01:49:09,284 [main:53] - replacing (id, String)
2021-03-12 01:49:09,285 [main:50] - replacing id String
2021-03-12 01:49:09,285 [main:54] - Getting value of type String
2021-03-12 01:49:09,393 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:49:09,394 [main:58] - GENERATED VALUE OF TYPE String = "pvywl"
2021-03-12 01:49:09,394 [main:61] - GENERATED IS CALL =false
2021-03-12 01:49:09,515 [main:67] - randomType = A?
2021-03-12 01:49:09,620 [main:302] - generating value of type = A false depth = 0
2021-03-12 01:49:09,621 [main:112] - generating klass A text = object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}
2021-03-12 01:49:09,629 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:49:09,630 [main:78] - Generated call from random type = (A)?.x.toString(B.x)
2021-03-12 01:49:09,630 [main:61] - replacement of id of type String is (A)?.x.toString(B.x)
2021-03-12 01:49:09,746 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:49:09,746 [main:66] - Compilation checking started
2021-03-12 01:49:10,155 [main:53] - Result = true
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also {a: T -> print("kaczm")}

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$(A)?.x.toString(B.x) expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { (9107430422333898917.toULong()).compareTo(12.toUByte()).takeLowestOneBit() }

    return "OK"
}


2021-03-12 01:49:10,156 [main:53] - replacing (++getB()[logged(1), logged(2), logged(3)], Int)
2021-03-12 01:49:10,157 [main:50] - replacing ++getB()[logged(1), logged(2), logged(3)] Int
2021-03-12 01:49:10,157 [main:54] - Getting value of type Int
2021-03-12 01:49:10,261 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:49:10,262 [main:58] - GENERATED VALUE OF TYPE Int = -1071946993
2021-03-12 01:49:10,262 [main:61] - GENERATED IS CALL =false
2021-03-12 01:49:10,264 [main:67] - randomType = A
2021-03-12 01:49:10,374 [main:302] - generating value of type = A false depth = 0
2021-03-12 01:49:10,375 [main:112] - generating klass A text = object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}
2021-03-12 01:49:10,384 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1ffceeae]
2021-03-12 01:49:10,384 [main:78] - Generated call from random type = (A).x.countTrailingZeroBits()
2021-03-12 01:49:10,384 [main:106] - GETTING Int from Int
2021-03-12 01:49:10,443 [main:113] - Case = [public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5aba40f]]
2021-03-12 01:49:10,444 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5aba40f]
2021-03-12 01:49:10,444 [main:117] - GENERATED CALL = (B.get()).inc()
2021-03-12 01:49:10,444 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@20ae2b62]]
2021-03-12 01:49:10,444 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235]
2021-03-12 01:49:10,445 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@20ae2b62]
2021-03-12 01:49:10,554 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:49:10,555 [main:117] - GENERATED CALL = (B.get()).toByte().div(57)
2021-03-12 01:49:10,555 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@5fc3e805]]
2021-03-12 01:49:10,555 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60]
2021-03-12 01:49:10,555 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@5fc3e805]
2021-03-12 01:49:10,679 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:49:10,681 [main:117] - GENERATED CALL = (B.get()).toShort().times(-16)
2021-03-12 01:49:10,681 [main:113] - Case = [public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3854cce]]
2021-03-12 01:49:10,681 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3854cce]
2021-03-12 01:49:10,681 [main:117] - GENERATED CALL = (B.get()).unaryMinus()
2021-03-12 01:49:10,681 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@48efa366]]
2021-03-12 01:49:10,681 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:49:10,792 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:49:10,793 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@48efa366]
2021-03-12 01:49:10,794 [main:117] - GENERATED CALL = (B.get()).compareTo(342644544).dec()
2021-03-12 01:49:10,794 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7107ffd9]]
2021-03-12 01:49:10,794 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:49:10,908 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:49:10,909 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7107ffd9]
2021-03-12 01:49:10,910 [main:117] - GENERATED CALL = (B.get()).compareTo(659194691).takeLowestOneBit()
2021-03-12 01:49:10,910 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5958298b], public open val start: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@786533ac]]
2021-03-12 01:49:10,910 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5958298b]
2021-03-12 01:49:11,015 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:49:11,016 [main:117] - GENERATED CALL = (B.get()).rangeTo(-50).start
2021-03-12 01:49:11,017 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5d605014]]
2021-03-12 01:49:11,017 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:49:11,017 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5d605014]
2021-03-12 01:49:11,017 [main:117] - GENERATED CALL = (B.get()).toInt().countLeadingZeroBits()
2021-03-12 01:49:11,017 [main:113] - Case = [public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5305e1c], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63ef0ce]]
2021-03-12 01:49:11,017 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5305e1c]
2021-03-12 01:49:11,118 [main:302] - generating value of type = Float true depth = 0
2021-03-12 01:49:11,119 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63ef0ce]
2021-03-12 01:49:11,119 [main:117] - GENERATED CALL = (B.get()).div(0.35350204f).toRawBits()
2021-03-12 01:49:11,119 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7b59aa7b]]
2021-03-12 01:49:11,119 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7b59aa7b]
2021-03-12 01:49:11,120 [main:117] - GENERATED CALL = (B.get()).countOneBits()
2021-03-12 01:49:11,120 [main:61] - replacement of ++getB()[logged(1), logged(2), logged(3)] of type Int is (B.get()).toShort().times(-16)
2021-03-12 01:49:11,222 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:49:11,222 [main:66] - Compilation checking started
2021-03-12 01:49:11,553 [main:49] - Result = false
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also {a: T -> print("kaczm")}

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$(A)?.x.toString(B.x) expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        (B.get()).toShort().times(-16)
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { (9107430422333898917.toULong()).compareTo(12.toUByte()).takeLowestOneBit() }

    return "OK"
}


2021-03-12 01:49:11,555 [main:53] - replacing ({ getA().x-- }, Function0<Int>)
2021-03-12 01:49:11,555 [main:50] - replacing { getA().x-- } Function0<Int>
2021-03-12 01:49:11,555 [main:54] - Getting value of type Function0<Int>
2021-03-12 01:49:11,654 [main:302] - generating value of type = Function0<Int> false depth = 0
2021-03-12 01:49:11,655 [main:302] - generating value of type = Int true depth = 1
2021-03-12 01:49:11,655 [main:58] - GENERATED VALUE OF TYPE Function0<Int> = { 1997282016}
2021-03-12 01:49:11,655 [main:61] - GENERATED IS CALL =false
2021-03-12 01:49:11,657 [main:67] - randomType = String
2021-03-12 01:49:11,761 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:49:11,792 [main:106] - GETTING Function0<Int> from A
2021-03-12 01:49:11,802 [main:106] - GETTING Function0<Int> from Array<Float>
2021-03-12 01:49:11,822 [main:106] - GETTING Function0<Int> from Int
2021-03-12 01:49:11,888 [main:106] - GETTING Function0<Int> from Int
2021-03-12 01:49:11,890 [main:106] - GETTING Function0<Int> from Int
2021-03-12 01:49:11,891 [main:106] - GETTING Function0<Int> from Int
2021-03-12 01:49:11,892 [main:106] - GETTING Function0<Int> from B
2021-03-12 01:49:11,903 [main:106] - GETTING Function0<Int> from Int
2021-03-12 01:49:11,904 [main:106] - GETTING Function0<Int> from String
2021-03-12 01:49:11,928 [main:61] - replacement of { getA().x-- } of type Function0<Int> is { 1997282016}
2021-03-12 01:49:12,039 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 01:49:12,039 [main:66] - Compilation checking started
2021-03-12 01:49:12,470 [main:53] - Result = true
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also {a: T -> print("kaczm")}

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$(A)?.x.toString(B.x) expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { 1997282016}

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { (9107430422333898917.toULong()).compareTo(12.toUByte()).takeLowestOneBit() }

    return "OK"
}


2021-03-12 01:49:12,471 [main:53] - replacing ("$(A)?.x.toString(B.x) expected: $expected, actual: $actual", String)
2021-03-12 01:49:12,471 [main:50] - replacing "$(A)?.x.toString(B.x) expected: $expected, actual: $actual" String
2021-03-12 01:49:12,471 [main:54] - Getting value of type String
2021-03-12 01:49:12,592 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:49:12,593 [main:58] - GENERATED VALUE OF TYPE String = "uaadi"
2021-03-12 01:49:12,593 [main:61] - GENERATED IS CALL =false
2021-03-12 01:49:12,596 [main:67] - randomType = A
2021-03-12 01:49:12,716 [main:302] - generating value of type = A false depth = 0
2021-03-12 01:49:12,716 [main:112] - generating klass A text = object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}
2021-03-12 01:49:12,723 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:49:12,724 [main:78] - Generated call from random type = (A).x.toString(actual)
2021-03-12 01:49:12,725 [main:106] - GETTING String from Int
2021-03-12 01:49:12,758 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]]
2021-03-12 01:49:12,758 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:49:12,758 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]
2021-03-12 01:49:12,759 [main:117] - GENERATED CALL = (actual).toChar().uppercase()
2021-03-12 01:49:12,759 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a36c448]]
2021-03-12 01:49:12,759 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:49:12,759 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a36c448]
2021-03-12 01:49:12,759 [main:117] - GENERATED CALL = (actual).toChar().lowercase()
2021-03-12 01:49:12,759 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]]
2021-03-12 01:49:12,759 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:49:12,759 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]
2021-03-12 01:49:12,760 [main:117] - GENERATED CALL = (actual).toChar().titlecase()
2021-03-12 01:49:12,760 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:49:12,760 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:49:12,760 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:49:12,760 [main:117] - GENERATED CALL = (actual).compareTo(A.x).toString(B.x)
2021-03-12 01:49:12,760 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:49:12,760 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:49:12,760 [main:117] - GENERATED CALL = (actual).toString(B.x)
2021-03-12 01:49:12,760 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]]
2021-03-12 01:49:12,761 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60]
2021-03-12 01:49:12,761 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]
2021-03-12 01:49:12,761 [main:117] - GENERATED CALL = (actual).toShort().toString(B.x)
2021-03-12 01:49:12,761 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:49:12,761 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73]
2021-03-12 01:49:12,856 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:49:12,857 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:49:12,857 [main:117] - GENERATED CALL = (actual).div(118939625814428858).toString(actual)
2021-03-12 01:49:12,857 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc0516]]
2021-03-12 01:49:12,857 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235]
2021-03-12 01:49:12,857 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc0516]
2021-03-12 01:49:12,858 [main:117] - GENERATED CALL = (actual).toByte().toString(B.get())
2021-03-12 01:49:12,858 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:49:12,858 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:49:12,858 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:49:12,858 [main:117] - GENERATED CALL = (actual).toInt().toString(A.x)
2021-03-12 01:49:12,858 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:49:12,858 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e]
2021-03-12 01:49:12,858 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:49:12,859 [main:117] - GENERATED CALL = (actual).toLong().toString(actual)
2021-03-12 01:49:12,859 [main:61] - replacement of "$(A)?.x.toString(B.x) expected: $expected, actual: $actual" of type String is (actual).toInt().toString(A.x)
2021-03-12 01:49:12,955 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:49:12,955 [main:66] - Compilation checking started
2021-03-12 01:49:13,369 [main:53] - Result = true
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also {a: T -> print("kaczm")}

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError((actual).toInt().toString(A.x))
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { 1997282016}

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { (9107430422333898917.toULong()).compareTo(12.toUByte()).takeLowestOneBit() }

    return "OK"
}


2021-03-12 01:49:13,370 [main:53] - replacing (getB()[logged(1), logged(2), logged(3)]--, Int)
2021-03-12 01:49:13,370 [main:50] - replacing getB()[logged(1), logged(2), logged(3)]-- Int
2021-03-12 01:49:13,370 [main:54] - Getting value of type Int
2021-03-12 01:49:13,481 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:49:13,482 [main:58] - GENERATED VALUE OF TYPE Int = -1780916546
2021-03-12 01:49:13,482 [main:61] - GENERATED IS CALL =false
2021-03-12 01:49:14,260 [main:67] - randomType = Pair<Char?, LinkedHashSet<Pair<Function1<A, Short>, Boolean>>>
2021-03-12 01:49:14,371 [main:302] - generating value of type = Pair<Char?, LinkedHashSet<Pair<Function1<A, Short>, Boolean>>> false depth = 0
2021-03-12 01:49:14,503 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Char?, second: LinkedHashSet<Pair<Function1<A, Short>, Boolean>>): Pair<Char?, LinkedHashSet<Pair<Function1<A, Short>, Boolean>>> = TODO()
2021-03-12 01:49:14,506 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Char?, second: LinkedHashSet<Pair<Function1<A, Short>, Boolean>>): Pair<Char?, LinkedHashSet<Pair<Function1<A, Short>, Boolean>>> = TODO()
2021-03-12 01:49:14,634 [main:302] - generating value of type = Char true depth = 3
2021-03-12 01:49:14,635 [main:302] - generating value of type = LinkedHashSet<Pair<Function1<A, Short>, Boolean>> false depth = 3
2021-03-12 01:49:14,742 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(initialCapacity: kotlin.Int): LinkedHashSet<Pair<Function1<A, Short>, Boolean>> = TODO()
2021-03-12 01:49:14,744 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(initialCapacity: kotlin.Int): LinkedHashSet<Pair<Function1<A, Short>, Boolean>> = TODO()
2021-03-12 01:49:14,949 [main:302] - generating value of type = Int true depth = 6
2021-03-12 01:49:14,950 [main:95] - GENERATED = LinkedHashSet<Pair<Function1<A, Short>, Boolean>>(1751939255)
2021-03-12 01:49:14,951 [main:95] - GENERATED = Pair<Char?, LinkedHashSet<Pair<Function1<A, Short>, Boolean>>>('磧', LinkedHashSet<Pair<Function1<A, Short>, Boolean>>(1751939255))
2021-03-12 01:49:14,995 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@566e5161]
2021-03-12 01:49:15,113 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:49:15,114 [main:78] - Generated call from random type = (Pair<Char?, LinkedHashSet<Pair<Function1<A, Short>, Boolean>>>('磧', LinkedHashSet<Pair<Function1<A, Short>, Boolean>>(1751939255))).first?.minus('곑')!!
2021-03-12 01:49:15,114 [main:106] - GETTING Int from Int
2021-03-12 01:49:15,178 [main:113] - Case = [public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@472c0627]]
2021-03-12 01:49:15,178 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@472c0627]
2021-03-12 01:49:15,346 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:49:15,347 [main:117] - GENERATED CALL = (A.x).div(96)
2021-03-12 01:49:15,347 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@472c0627]]
2021-03-12 01:49:15,348 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:49:15,348 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@472c0627]
2021-03-12 01:49:15,511 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:49:15,512 [main:117] - GENERATED CALL = (A.x).compareTo(B.get()).div(58)
2021-03-12 01:49:15,512 [main:113] - Case = [@kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@406267da]]
2021-03-12 01:49:15,512 [main:117] - GENERATED CALL = (A.x).sign
2021-03-12 01:49:15,512 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3854cce]]
2021-03-12 01:49:15,513 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:49:15,513 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3854cce]
2021-03-12 01:49:15,513 [main:117] - GENERATED CALL = (A.x).toInt().unaryMinus()
2021-03-12 01:49:15,513 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@682e13cc]]
2021-03-12 01:49:15,513 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:49:15,513 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@682e13cc]
2021-03-12 01:49:15,618 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:49:15,619 [main:117] - GENERATED CALL = (A.x).toChar().compareTo('啛')
2021-03-12 01:49:15,619 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5d605014]]
2021-03-12 01:49:15,619 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:49:15,620 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5d605014]
2021-03-12 01:49:15,620 [main:117] - GENERATED CALL = (A.x).toInt().countLeadingZeroBits()
2021-03-12 01:49:15,620 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@395d0861]]
2021-03-12 01:49:15,620 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60]
2021-03-12 01:49:15,620 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@395d0861]
2021-03-12 01:49:15,620 [main:117] - GENERATED CALL = (A.x).toShort().countOneBits()
2021-03-12 01:49:15,620 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@153454d9]]
2021-03-12 01:49:15,620 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:49:15,621 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@153454d9]
2021-03-12 01:49:15,621 [main:117] - GENERATED CALL = (A.x).toInt().coerceAtMost(A.x)
2021-03-12 01:49:15,621 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@31b01837], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@78d45150]]
2021-03-12 01:49:15,621 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@31b01837]
2021-03-12 01:49:15,732 [main:302] - generating value of type = Double true depth = 0
2021-03-12 01:49:15,733 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@78d45150]
2021-03-12 01:49:15,850 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:49:15,851 [main:117] - GENERATED CALL = (A.x).div(0.15810122646464775).compareTo(114)
2021-03-12 01:49:15,852 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@15c2ea37]]
2021-03-12 01:49:15,852 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:49:15,852 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@15c2ea37]
2021-03-12 01:49:15,853 [main:117] - GENERATED CALL = (A.x).compareTo(A.x).inv()
2021-03-12 01:49:15,853 [main:61] - replacement of getB()[logged(1), logged(2), logged(3)]-- of type Int is (A.x).toChar().compareTo('啛')
2021-03-12 01:49:15,972 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:49:15,973 [main:53] - replacing (logged(3), Int)
2021-03-12 01:49:15,973 [main:50] - replacing logged(3) Int
2021-03-12 01:49:15,973 [main:54] - Getting value of type Int
2021-03-12 01:49:16,090 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:49:16,091 [main:58] - GENERATED VALUE OF TYPE Int = 658625388
2021-03-12 01:49:16,091 [main:61] - GENERATED IS CALL =false
2021-03-12 01:49:16,329 [main:67] - randomType = Byte?
2021-03-12 01:49:16,429 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:49:16,485 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7f5ee33d]
2021-03-12 01:49:16,579 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:49:16,580 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@15c2ea37]
2021-03-12 01:49:16,581 [main:78] - Generated call from random type = (-76)?.compareTo(37).inv()
2021-03-12 01:49:16,581 [main:106] - GETTING Int from A
2021-03-12 01:49:16,588 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@3414cfd1], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5aba40f]]
2021-03-12 01:49:16,588 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5aba40f]
2021-03-12 01:49:16,588 [main:117] - GENERATED CALL = (getA()).x.inc()
2021-03-12 01:49:16,589 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@3414cfd1], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@35754437]]
2021-03-12 01:49:16,589 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@35754437]
2021-03-12 01:49:16,589 [main:117] - GENERATED CALL = (getA()).x.coerceAtLeast(B.get())
2021-03-12 01:49:16,589 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@3414cfd1], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b28a80]]
2021-03-12 01:49:16,589 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b28a80]
2021-03-12 01:49:16,688 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:49:16,689 [main:117] - GENERATED CALL = (getA()).x.rem(116)
2021-03-12 01:49:16,690 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@3414cfd1], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70b68745]]
2021-03-12 01:49:16,690 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70b68745]
2021-03-12 01:49:16,791 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:49:16,792 [main:117] - GENERATED CALL = (getA()).x.ushr(694822013)
2021-03-12 01:49:16,792 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@3414cfd1], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4fc424b]]
2021-03-12 01:49:16,792 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4fc424b]
2021-03-12 01:49:16,792 [main:117] - GENERATED CALL = (getA()).x.coerceIn(B.x, B.x)
2021-03-12 01:49:16,792 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@7a17b79b], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@19b05991]]
2021-03-12 01:49:16,792 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@7a17b79b]
2021-03-12 01:49:16,932 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:49:16,932 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@19b05991]
2021-03-12 01:49:17,037 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:49:17,038 [main:117] - GENERATED CALL = (getA()).equals("uksap").compareTo(false)
2021-03-12 01:49:17,038 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@3414cfd1], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3ef045d8]]
2021-03-12 01:49:17,038 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3ef045d8]
2021-03-12 01:49:17,132 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:49:17,133 [main:117] - GENERATED CALL = (getA()).x.minus(-14)
2021-03-12 01:49:17,133 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@3414cfd1], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2d1f1e5a]]
2021-03-12 01:49:17,133 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2d1f1e5a]
2021-03-12 01:49:17,134 [main:117] - GENERATED CALL = (getA()).x.or(B.get())
2021-03-12 01:49:17,134 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@3414cfd1], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@788cd72f]]
2021-03-12 01:49:17,134 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@788cd72f]
2021-03-12 01:49:17,134 [main:117] - GENERATED CALL = (getA()).x.xor(B.get())
2021-03-12 01:49:17,134 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@3414cfd1], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@27f1a51e]]
2021-03-12 01:49:17,134 [main:117] - GENERATED CALL = (getA()).x.absoluteValue
2021-03-12 01:49:17,134 [main:61] - replacement of logged(3) of type Int is (getA()).x.ushr(694822013)
2021-03-12 01:49:17,230 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:49:17,230 [main:53] - replacing (logged(2), Int)
2021-03-12 01:49:17,230 [main:50] - replacing logged(2) Int
2021-03-12 01:49:17,230 [main:54] - Getting value of type Int
2021-03-12 01:49:17,327 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:49:17,327 [main:58] - GENERATED VALUE OF TYPE Int = 419973030
2021-03-12 01:49:17,327 [main:61] - GENERATED IS CALL =false
2021-03-12 01:49:17,556 [main:67] - randomType = Triple<LinkedHashSet<UByte>, A, String>
2021-03-12 01:49:17,671 [main:302] - generating value of type = Triple<LinkedHashSet<UByte>, A, String> false depth = 0
2021-03-12 01:49:17,775 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: LinkedHashSet<UByte>, second: A, third: String): Triple<LinkedHashSet<UByte>, A, String> = TODO()
2021-03-12 01:49:17,777 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: LinkedHashSet<UByte>, second: A, third: String): Triple<LinkedHashSet<UByte>, A, String> = TODO()
2021-03-12 01:49:17,881 [main:302] - generating value of type = LinkedHashSet<UByte> false depth = 3
2021-03-12 01:49:17,984 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: UByte): LkedHashSet<UByte> = TODO()
2021-03-12 01:49:17,986 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: UByte): LkedHashSet<UByte> = TODO()
2021-03-12 01:49:18,086 [main:302] - generating value of type = UByte true depth = 6
2021-03-12 01:49:18,087 [main:95] - GENERATED = linkedSetOf<UByte>(110.toUByte())
2021-03-12 01:49:18,087 [main:302] - generating value of type = A false depth = 3
2021-03-12 01:49:18,088 [main:112] - generating klass A text = object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}
2021-03-12 01:49:18,088 [main:302] - generating value of type = String true depth = 3
2021-03-12 01:49:18,088 [main:95] - GENERATED = Triple<LinkedHashSet<UByte>, A, String>(linkedSetOf<UByte>(110.toUByte()), A, "waqhw")
2021-03-12 01:49:18,114 [main:78] - Generated call from random type = (Triple<LinkedHashSet<UByte>, A, String>(linkedSetOf<UByte>(110.toUByte()), A, "waqhw")).first.size
2021-03-12 01:49:18,115 [main:106] - GETTING Int from Int
2021-03-12 01:49:18,150 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2572ce0f]]
2021-03-12 01:49:18,150 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:49:18,150 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2572ce0f]
2021-03-12 01:49:18,281 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:49:18,282 [main:117] - GENERATED CALL = (B.x).toInt().times(-86)
2021-03-12 01:49:18,282 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1ffceeae]]
2021-03-12 01:49:18,282 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:49:18,283 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1ffceeae]
2021-03-12 01:49:18,283 [main:117] - GENERATED CALL = (B.x).compareTo(B.x).countTrailingZeroBits()
2021-03-12 01:49:18,283 [main:113] - Case = [public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@472c0627]]
2021-03-12 01:49:18,283 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@472c0627]
2021-03-12 01:49:18,387 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:49:18,388 [main:117] - GENERATED CALL = (B.x).div(98)
2021-03-12 01:49:18,388 [main:113] - Case = [public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@48efa366]]
2021-03-12 01:49:18,388 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@48efa366]
2021-03-12 01:49:18,388 [main:117] - GENERATED CALL = (B.x).dec()
2021-03-12 01:49:18,388 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b28a80]]
2021-03-12 01:49:18,388 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:49:18,388 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b28a80]
2021-03-12 01:49:18,482 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:49:18,483 [main:117] - GENERATED CALL = (B.x).compareTo(B.x).rem(41)
2021-03-12 01:49:18,483 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e], public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@294c229]]
2021-03-12 01:49:18,483 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e]
2021-03-12 01:49:18,483 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@294c229]
2021-03-12 01:49:18,483 [main:117] - GENERATED CALL = (B.x).toLong().toInt()
2021-03-12 01:49:18,483 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@20ae2b62]]
2021-03-12 01:49:18,483 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235]
2021-03-12 01:49:18,483 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@20ae2b62]
2021-03-12 01:49:18,577 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:49:18,578 [main:117] - GENERATED CALL = (B.x).toByte().div(-3)
2021-03-12 01:49:18,578 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@496ff244]]
2021-03-12 01:49:18,578 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60]
2021-03-12 01:49:18,578 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@496ff244]
2021-03-12 01:49:18,675 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:49:18,676 [main:117] - GENERATED CALL = (B.x).toShort().compareTo(-11)
2021-03-12 01:49:18,677 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3100fc23]]
2021-03-12 01:49:18,677 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235]
2021-03-12 01:49:18,677 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3100fc23]
2021-03-12 01:49:18,772 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:49:18,772 [main:117] - GENERATED CALL = (B.x).toByte().times(102)
2021-03-12 01:49:18,773 [main:113] - Case = [public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78080c68]]
2021-03-12 01:49:18,773 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78080c68]
2021-03-12 01:49:18,773 [main:117] - GENERATED CALL = (B.x).toInt()
2021-03-12 01:49:18,773 [main:61] - replacement of logged(2) of type Int is (B.x).toByte().div(-3)
2021-03-12 01:49:18,887 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:49:18,888 [main:53] - replacing (value, T)
2021-03-12 01:49:18,888 [main:50] - replacing value T
2021-03-12 01:49:18,888 [main:54] - Getting value of type T
2021-03-12 01:49:18,995 [main:302] - generating value of type = T false depth = 0
2021-03-12 01:49:19,102 [main:43] - GENERATING CALL OF fun <T> enumValueOf(name: kotlin.String): T = TODO()
2021-03-12 01:49:19,104 [main:61] - WITHOUT TYPE PARAMS = fun <T> enumValueOf(name: kotlin.String): T = TODO()
2021-03-12 01:49:19,302 [main:302] - generating value of type = String true depth = 3
2021-03-12 01:49:19,303 [main:95] - GENERATED = enumValueOf<Enum<T>>("keodi")
2021-03-12 01:49:19,303 [main:58] - GENERATED VALUE OF TYPE T = enumValueOf<Enum<T>>("keodi")
2021-03-12 01:49:19,303 [main:61] - GENERATED IS CALL =true
2021-03-12 01:49:19,646 [main:67] - randomType = Triple<UByte, ULong?, Boolean?>
2021-03-12 01:49:19,743 [main:302] - generating value of type = Triple<UByte, ULong?, Boolean?> false depth = 0
2021-03-12 01:49:19,844 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: UByte, second: ULong?, third: Boolean?): Triple<UByte, ULong?, Boolean?> = TODO()
2021-03-12 01:49:19,845 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: UByte, second: ULong?, third: Boolean?): Triple<UByte, ULong?, Boolean?> = TODO()
2021-03-12 01:49:19,944 [main:302] - generating value of type = UByte true depth = 3
2021-03-12 01:49:19,945 [main:302] - generating value of type = ULong true depth = 3
2021-03-12 01:49:19,945 [main:302] - generating value of type = Boolean true depth = 3
2021-03-12 01:49:19,946 [main:95] - GENERATED = Triple<UByte, ULong?, Boolean?>(66.toUByte(), 2135666995169964080.toULong(), true)
2021-03-12 01:49:19,965 [main:106] - GETTING T from B
2021-03-12 01:49:19,975 [main:106] - GETTING T from Array<Float>
2021-03-12 01:49:19,989 [main:113] - Case = [public fun <T> kotlin.Array<out T>.elementAt(index: kotlin.Int): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@527864c8]]
2021-03-12 01:49:19,989 [main:149] - GENERATING call of type public fun <T> kotlin.Array<out T>.elementAt(index: kotlin.Int): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@527864c8]
2021-03-12 01:49:19,990 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f})))?.elementAt(A.x)
2021-03-12 01:49:19,990 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun <T> kotlin.Array<out T>.component1(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@69fe3c4c]]
2021-03-12 01:49:19,990 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun <T> kotlin.Array<out T>.component1(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@69fe3c4c]
2021-03-12 01:49:19,990 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f})))?.component1()
2021-03-12 01:49:19,990 [main:113] - Case = [public fun <T> kotlin.Array<out T>.first(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@130b5b00]]
2021-03-12 01:49:19,990 [main:149] - GENERATING call of type public fun <T> kotlin.Array<out T>.first(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@130b5b00]
2021-03-12 01:49:19,991 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f})))?.first()
2021-03-12 01:49:19,991 [main:113] - Case = [public fun <T> kotlin.Array<out T>.single(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@49bdd957]]
2021-03-12 01:49:19,991 [main:149] - GENERATING call of type public fun <T> kotlin.Array<out T>.single(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@49bdd957]
2021-03-12 01:49:19,991 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f})))?.single()
2021-03-12 01:49:19,991 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun <T> kotlin.Array<out T>.component4(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@21cb62e5]]
2021-03-12 01:49:19,991 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun <T> kotlin.Array<out T>.component4(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@21cb62e5]
2021-03-12 01:49:19,992 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f})))?.component4()
2021-03-12 01:49:19,992 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.getOrElse(index: kotlin.Int, defaultValue: (kotlin.Int) -> T): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@d28b90b]]
2021-03-12 01:49:19,992 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.getOrElse(index: kotlin.Int, defaultValue: (kotlin.Int) -> T): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@d28b90b]
2021-03-12 01:49:20,088 [main:302] - generating value of type = Function1<Int, T> false depth = 0
2021-03-12 01:49:20,089 [main:302] - generating value of type = T false depth = 1
2021-03-12 01:49:20,566 [main:43] - GENERATING CALL OF fun <T> checkNotNull(value: Sequence<Function1<A, B?>>): T = TODO()
2021-03-12 01:49:20,568 [main:61] - WITHOUT TYPE PARAMS = fun <T> checkNotNull(value: Sequence<Function1<A, B?>>): T = TODO()
2021-03-12 01:49:20,664 [main:302] - generating value of type = Sequence<Function1<A, B?>> false depth = 4
2021-03-12 01:49:20,770 [main:43] - GENERATING CALL OF fun <T> sequenceOf(elements: Function1<A, B?>): Sequence<Function1<A, B?>> = TODO()
2021-03-12 01:49:20,771 [main:61] - WITHOUT TYPE PARAMS = fun <T> sequenceOf(elements: Function1<A, B?>): Sequence<Function1<A, B?>> = TODO()
2021-03-12 01:49:20,894 [main:302] - generating value of type = Function1<A, B?> false depth = 7
2021-03-12 01:49:20,895 [main:302] - generating value of type = B false depth = 8
2021-03-12 01:49:20,895 [main:112] - generating klass B text = object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}
2021-03-12 01:49:20,896 [main:95] - GENERATED = sequenceOf<Function1<A, B?>>({a: A -> B})
2021-03-12 01:49:20,896 [main:95] - GENERATED = checkNotNull<Sequence<Function1<A, B?>>>(sequenceOf<Function1<A, B?>>({a: A -> B}))
2021-03-12 01:49:20,897 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f})))?.getOrElse(B.get(), {a: Int -> checkNotNull<Sequence<Function1<A, B?>>>(sequenceOf<Function1<A, B?>>({a: A -> B}))})
2021-03-12 01:49:20,897 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun <T> kotlin.Array<out T>.component3(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3867e848]]
2021-03-12 01:49:20,897 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun <T> kotlin.Array<out T>.component3(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3867e848]
2021-03-12 01:49:20,897 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f})))?.component3()
2021-03-12 01:49:20,898 [main:113] - Case = [public fun <T> kotlin.Array<out T>.last(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1d799dea]]
2021-03-12 01:49:20,898 [main:149] - GENERATING call of type public fun <T> kotlin.Array<out T>.last(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1d799dea]
2021-03-12 01:49:20,898 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f})))?.last()
2021-03-12 01:49:20,898 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.elementAtOrElse(index: kotlin.Int, defaultValue: (kotlin.Int) -> T): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3df3c2d2]]
2021-03-12 01:49:20,898 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.elementAtOrElse(index: kotlin.Int, defaultValue: (kotlin.Int) -> T): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3df3c2d2]
2021-03-12 01:49:21,002 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:49:21,095 [main:302] - generating value of type = Function1<Int, T> false depth = 0
2021-03-12 01:49:21,096 [main:302] - generating value of type = T false depth = 1
2021-03-12 01:49:21,195 [main:43] - GENERATING CALL OF fun <T> checkNotNull(value: B): T = TODO()
2021-03-12 01:49:21,197 [main:61] - WITHOUT TYPE PARAMS = fun <T> checkNotNull(value: B): T = TODO()
2021-03-12 01:49:21,293 [main:302] - generating value of type = B false depth = 4
2021-03-12 01:49:21,294 [main:112] - generating klass B text = object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}
2021-03-12 01:49:21,294 [main:95] - GENERATED = checkNotNull<B>(B)
2021-03-12 01:49:21,294 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f})))?.elementAtOrElse(-595940112, {a: Int -> checkNotNull<B>(B)})
2021-03-12 01:49:21,295 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.random(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5f196dfe]]
2021-03-12 01:49:21,295 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.random(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5f196dfe]
2021-03-12 01:49:21,295 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f})))?.random()
2021-03-12 01:49:21,295 [main:61] - replacement of value of type T is (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f})))?.random()
2021-03-12 01:49:21,391 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 01:49:21,392 [main:53] - replacing ("getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);", String)
2021-03-12 01:49:21,393 [main:50] - replacing "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);" String
2021-03-12 01:49:21,393 [main:54] - Getting value of type String
2021-03-12 01:49:21,507 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:49:21,508 [main:58] - GENERATED VALUE OF TYPE String = "odcof"
2021-03-12 01:49:21,508 [main:61] - GENERATED IS CALL =false
2021-03-12 01:49:21,947 [main:67] - randomType = Sequence<Function2<A, B?, UInt>>
2021-03-12 01:49:21,948 [main:106] - GETTING String from Array<Float>
2021-03-12 01:49:21,959 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@92dca8f], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:49:21,959 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:49:21,960 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).size.toString(x)
2021-03-12 01:49:21,960 [main:113] - Case = [@kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@a5810be]]
2021-03-12 01:49:21,960 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@a5810be]
2021-03-12 01:49:21,960 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).contentToString()
2021-03-12 01:49:21,961 [main:113] - Case = [public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4961b6f0]]
2021-03-12 01:49:21,961 [main:149] - GENERATING call of type public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4961b6f0]
2021-03-12 01:49:22,053 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:49:22,165 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:49:22,270 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 01:49:22,272 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 01:49:22,466 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 01:49:22,469 [main:95] - GENERATED = StringBuilder("dvlao")
2021-03-12 01:49:22,564 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:49:22,677 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:49:22,783 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 01:49:22,785 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 01:49:22,980 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 01:49:22,983 [main:95] - GENERATED = StringBuilder("fniis")
2021-03-12 01:49:23,079 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 01:49:23,080 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 01:49:23,084 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).joinToString(StringBuilder(), StringBuilder("dvlao"), StringBuilder(), x, StringBuilder("fniis"), {a: T -> "qoaur"})
2021-03-12 01:49:23,084 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7973195e]]
2021-03-12 01:49:23,085 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7973195e]
2021-03-12 01:49:23,085 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).contentDeepToString()
2021-03-12 01:49:23,085 [main:61] - replacement of "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);" of type String is (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).contentToString()
2021-03-12 01:49:23,181 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:49:23,181 [main:66] - Compilation checking started
2021-03-12 01:49:23,704 [main:53] - Result = true
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also {a: T -> print("kaczm")}

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError((actual).toInt().toString(A.x))
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { 1997282016}

    doTest("++getB()[1, 2, 3]", 1, (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).contentToString()) {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { (9107430422333898917.toULong()).compareTo(12.toUByte()).takeLowestOneBit() }

    return "OK"
}


2021-03-12 01:49:23,705 [main:53] - replacing (++getB()[logged(1), logged(2), logged(3)], Int)
2021-03-12 01:49:23,706 [main:50] - replacing ++getB()[logged(1), logged(2), logged(3)] Int
2021-03-12 01:49:23,706 [main:54] - Getting value of type Int
2021-03-12 01:49:23,816 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:49:23,817 [main:58] - GENERATED VALUE OF TYPE Int = -314618648
2021-03-12 01:49:23,817 [main:61] - GENERATED IS CALL =false
2021-03-12 01:49:23,820 [main:67] - randomType = A
2021-03-12 01:49:23,926 [main:302] - generating value of type = A false depth = 0
2021-03-12 01:49:23,926 [main:112] - generating klass A text = object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}
2021-03-12 01:49:23,934 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4fc424b]
2021-03-12 01:49:23,935 [main:78] - Generated call from random type = (A).x.coerceIn(x, B.get())
2021-03-12 01:49:23,935 [main:106] - GETTING Int from Int
2021-03-12 01:49:23,989 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@647e2e5d]]
2021-03-12 01:49:23,989 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@647e2e5d]
2021-03-12 01:49:23,990 [main:117] - GENERATED CALL = (B.x).takeHighestOneBit()
2021-03-12 01:49:23,990 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@31b01837], public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4bfbf297]]
2021-03-12 01:49:23,990 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@31b01837]
2021-03-12 01:49:24,094 [main:302] - generating value of type = Double true depth = 0
2021-03-12 01:49:24,095 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4bfbf297]
2021-03-12 01:49:24,096 [main:117] - GENERATED CALL = (B.x).div(0.7620432175623297).toInt()
2021-03-12 01:49:24,096 [main:113] - Case = [public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@48efa366]]
2021-03-12 01:49:24,096 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@48efa366]
2021-03-12 01:49:24,096 [main:117] - GENERATED CALL = (B.x).dec()
2021-03-12 01:49:24,096 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@35754437]]
2021-03-12 01:49:24,096 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:49:24,096 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@35754437]
2021-03-12 01:49:24,096 [main:117] - GENERATED CALL = (B.x).toInt().coerceAtLeast(B.get())
2021-03-12 01:49:24,096 [main:113] - Case = [public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@153454d9]]
2021-03-12 01:49:24,096 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@153454d9]
2021-03-12 01:49:24,097 [main:117] - GENERATED CALL = (B.x).coerceAtMost(B.x)
2021-03-12 01:49:24,097 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7b59aa7b]]
2021-03-12 01:49:24,097 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:49:24,097 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7b59aa7b]
2021-03-12 01:49:24,097 [main:117] - GENERATED CALL = (B.x).toInt().countOneBits()
2021-03-12 01:49:24,097 [main:113] - Case = [public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5aba40f]]
2021-03-12 01:49:24,097 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5aba40f]
2021-03-12 01:49:24,097 [main:117] - GENERATED CALL = (B.x).inc()
2021-03-12 01:49:24,097 [main:113] - Case = [public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@472c0627]]
2021-03-12 01:49:24,097 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@472c0627]
2021-03-12 01:49:24,201 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:49:24,202 [main:117] - GENERATED CALL = (B.x).div(-25)
2021-03-12 01:49:24,202 [main:113] - Case = [public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@788cd72f]]
2021-03-12 01:49:24,202 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@788cd72f]
2021-03-12 01:49:24,202 [main:117] - GENERATED CALL = (B.x).xor(B.x)
2021-03-12 01:49:24,203 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@153454d9]]
2021-03-12 01:49:24,203 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:49:24,203 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@153454d9]
2021-03-12 01:49:24,203 [main:117] - GENERATED CALL = (B.x).compareTo(x).coerceAtMost(B.get())
2021-03-12 01:49:24,203 [main:61] - replacement of ++getB()[logged(1), logged(2), logged(3)] of type Int is (B.x).div(-25)
2021-03-12 01:49:24,305 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:49:24,306 [main:66] - Compilation checking started
2021-03-12 01:49:24,739 [main:53] - Result = true
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also {a: T -> print("kaczm")}

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError((actual).toInt().toString(A.x))
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { 1997282016}

    doTest("++getB()[1, 2, 3]", 1, (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).contentToString()) {
        (B.x).div(-25)
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { (9107430422333898917.toULong()).compareTo(12.toUByte()).takeLowestOneBit() }

    return "OK"
}


2021-03-12 01:49:24,740 [main:53] - replacing (getB()[logged(1), (B.x).toByte().div(-3), (getA()).x.ushr(694822013)], Int)
2021-03-12 01:49:24,740 [main:50] - replacing getB()[logged(1), (B.x).toByte().div(-3), (getA()).x.ushr(694822013)] Int
2021-03-12 01:49:24,740 [main:54] - Getting value of type Int
2021-03-12 01:49:24,843 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:49:24,844 [main:58] - GENERATED VALUE OF TYPE Int = -997659884
2021-03-12 01:49:24,844 [main:61] - GENERATED IS CALL =false
2021-03-12 01:49:24,967 [main:67] - randomType = Char
2021-03-12 01:49:25,061 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:49:25,081 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@682e13cc]
2021-03-12 01:49:25,178 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:49:25,179 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b28a80]
2021-03-12 01:49:25,274 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:49:25,275 [main:78] - Generated call from random type = ('춢').compareTo('뱫').rem(-62)
2021-03-12 01:49:25,275 [main:106] - GETTING Int from Int
2021-03-12 01:49:25,307 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@30ab838d]]
2021-03-12 01:49:25,307 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235]
2021-03-12 01:49:25,307 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@30ab838d]
2021-03-12 01:49:25,415 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:49:25,416 [main:117] - GENERATED CALL = (B.get()).toByte().minus(-105)
2021-03-12 01:49:25,416 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@11ef4c3c]]
2021-03-12 01:49:25,416 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60]
2021-03-12 01:49:25,416 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@11ef4c3c]
2021-03-12 01:49:25,416 [main:117] - GENERATED CALL = (B.get()).toShort().countLeadingZeroBits()
2021-03-12 01:49:25,416 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@395d0861]]
2021-03-12 01:49:25,416 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60]
2021-03-12 01:49:25,417 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@395d0861]
2021-03-12 01:49:25,417 [main:117] - GENERATED CALL = (B.get()).toShort().countOneBits()
2021-03-12 01:49:25,417 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78080c68]]
2021-03-12 01:49:25,417 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:49:25,417 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78080c68]
2021-03-12 01:49:25,417 [main:117] - GENERATED CALL = (B.get()).toInt().toInt()
2021-03-12 01:49:25,417 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@32702e11]]
2021-03-12 01:49:25,417 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:49:25,417 [main:117] - GENERATED CALL = (B.get()).toChar().code
2021-03-12 01:49:25,418 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78080c68]]
2021-03-12 01:49:25,418 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:49:25,418 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78080c68]
2021-03-12 01:49:25,418 [main:117] - GENERATED CALL = (B.get()).compareTo(B.get()).toInt()
2021-03-12 01:49:25,418 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5958298b], public final val step: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@582b514]]
2021-03-12 01:49:25,418 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5958298b]
2021-03-12 01:49:25,516 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:49:25,517 [main:117] - GENERATED CALL = (B.get()).rangeTo(25).step
2021-03-12 01:49:25,518 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d8dcc4]]
2021-03-12 01:49:25,518 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:49:25,612 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:49:25,613 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d8dcc4]
2021-03-12 01:49:25,614 [main:117] - GENERATED CALL = (B.get()).compareTo(-999241318).shl(B.x)
2021-03-12 01:49:25,614 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2d1f1e5a]]
2021-03-12 01:49:25,614 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:49:25,614 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2d1f1e5a]
2021-03-12 01:49:25,614 [main:117] - GENERATED CALL = (B.get()).compareTo(B.get()).or(B.get())
2021-03-12 01:49:25,614 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4fc424b]]
2021-03-12 01:49:25,614 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:49:25,614 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4fc424b]
2021-03-12 01:49:25,710 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:49:25,711 [main:117] - GENERATED CALL = (B.get()).toInt().coerceIn(B.get(), -665663796)
2021-03-12 01:49:25,711 [main:61] - replacement of getB()[logged(1), (B.x).toByte().div(-3), (getA()).x.ushr(694822013)] of type Int is (B.get()).toChar().code
2021-03-12 01:49:25,804 [main:33] - Trying to replace Element(ARRAY_ACCESS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:49:25,806 [main:53] - replacing (1, Int)
2021-03-12 01:49:25,806 [main:50] - replacing 1 Int
2021-03-12 01:49:25,806 [main:54] - Getting value of type Int
2021-03-12 01:49:25,901 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:49:25,902 [main:58] - GENERATED VALUE OF TYPE Int = -1997887029
2021-03-12 01:49:25,902 [main:61] - GENERATED IS CALL =false
2021-03-12 01:49:26,154 [main:67] - randomType = LinkedHashSet<A>
2021-03-12 01:49:26,266 [main:302] - generating value of type = LinkedHashSet<A> false depth = 0
2021-03-12 01:49:26,366 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: A): LkedHashSet<A> = TODO()
2021-03-12 01:49:26,368 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: A): LkedHashSet<A> = TODO()
2021-03-12 01:49:26,465 [main:302] - generating value of type = A false depth = 3
2021-03-12 01:49:26,466 [main:112] - generating klass A text = object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}
2021-03-12 01:49:26,466 [main:95] - GENERATED = linkedSetOf<A>(A)
2021-03-12 01:49:26,621 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d8dcc4]
2021-03-12 01:49:26,622 [main:78] - Generated call from random type = (linkedSetOf<A>(A)).size.shl(B.x)
2021-03-12 01:49:26,622 [main:61] - replacement of 1 of type Int is (linkedSetOf<A>(A)).size.shl(B.x)
2021-03-12 01:49:26,720 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:49:26,720 [main:66] - Compilation checking started
2021-03-12 01:49:27,271 [main:53] - Result = true
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also {a: T -> print("kaczm")}

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError((actual).toInt().toString(A.x))
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", (linkedSetOf<A>(A)).size.shl(B.x), "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { 1997282016}

    doTest("++getB()[1, 2, 3]", 1, (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).contentToString()) {
        (B.x).div(-25)
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { (9107430422333898917.toULong()).compareTo(12.toUByte()).takeLowestOneBit() }

    return "OK"
}


2021-03-12 01:49:27,273 [main:53] - replacing (field.also { log += "get-A.x;" }, Int)
2021-03-12 01:49:27,273 [main:50] - replacing field.also { log += "get-A.x;" } Int
2021-03-12 01:49:27,273 [main:54] - Getting value of type Int
2021-03-12 01:49:27,397 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:49:27,398 [main:58] - GENERATED VALUE OF TYPE Int = 924553619
2021-03-12 01:49:27,398 [main:61] - GENERATED IS CALL =false
2021-03-12 01:49:27,769 [main:67] - randomType = MutableMap<Short, HashMap<ULong, B>>
2021-03-12 01:49:27,770 [main:106] - GETTING Int from A
2021-03-12 01:49:27,777 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@3414cfd1], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@15c2ea37]]
2021-03-12 01:49:27,777 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@15c2ea37]
2021-03-12 01:49:27,777 [main:117] - GENERATED CALL = (getA()).x.inv()
2021-03-12 01:49:27,778 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@3414cfd1], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6344afcd]]
2021-03-12 01:49:27,778 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6344afcd]
2021-03-12 01:49:27,778 [main:117] - GENERATED CALL = (getA()).x.shr(A.x)
2021-03-12 01:49:27,778 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@3414cfd1], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@472c0627]]
2021-03-12 01:49:27,778 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@472c0627]
2021-03-12 01:49:27,880 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:49:27,881 [main:117] - GENERATED CALL = (getA()).x.div(110)
2021-03-12 01:49:27,881 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@3414cfd1], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2572ce0f]]
2021-03-12 01:49:27,881 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2572ce0f]
2021-03-12 01:49:27,989 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:49:27,991 [main:117] - GENERATED CALL = (getA()).x.times(-98)
2021-03-12 01:49:27,991 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@3414cfd1], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5d605014]]
2021-03-12 01:49:27,991 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5d605014]
2021-03-12 01:49:27,991 [main:117] - GENERATED CALL = (getA()).x.countLeadingZeroBits()
2021-03-12 01:49:27,991 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@3414cfd1], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7b59aa7b]]
2021-03-12 01:49:27,991 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7b59aa7b]
2021-03-12 01:49:27,991 [main:117] - GENERATED CALL = (getA()).x.countOneBits()
2021-03-12 01:49:27,991 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@3414cfd1], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78080c68]]
2021-03-12 01:49:27,992 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78080c68]
2021-03-12 01:49:27,992 [main:117] - GENERATED CALL = (getA()).x.toInt()
2021-03-12 01:49:27,992 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@3414cfd1], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@41d04a80]]
2021-03-12 01:49:27,992 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@41d04a80]
2021-03-12 01:49:27,992 [main:117] - GENERATED CALL = (getA()).x.rotateLeft(A.x)
2021-03-12 01:49:27,992 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@3414cfd1], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2d1f1e5a]]
2021-03-12 01:49:27,992 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2d1f1e5a]
2021-03-12 01:49:27,992 [main:117] - GENERATED CALL = (getA()).x.or(B.x)
2021-03-12 01:49:27,993 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@3414cfd1], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d8dcc4]]
2021-03-12 01:49:27,993 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d8dcc4]
2021-03-12 01:49:28,138 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:49:28,139 [main:117] - GENERATED CALL = (getA()).x.shl(424732198)
2021-03-12 01:49:28,140 [main:61] - replacement of field.also { log += "get-A.x;" } of type Int is (getA()).x.toInt()
2021-03-12 01:49:28,265 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:49:28,266 [main:66] - Compilation checking started
2021-03-12 01:49:28,705 [main:53] - Result = true
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also {a: T -> print("kaczm")}

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError((actual).toInt().toString(A.x))
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", (linkedSetOf<A>(A)).size.shl(B.x), "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { 1997282016}

    doTest("++getB()[1, 2, 3]", 1, (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).contentToString()) {
        (B.x).div(-25)
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { (9107430422333898917.toULong()).compareTo(12.toUByte()).takeLowestOneBit() }

    return "OK"
}


2021-03-12 01:49:28,707 [main:53] - replacing (expected, Int)
2021-03-12 01:49:28,707 [main:50] - replacing expected Int
2021-03-12 01:49:28,707 [main:54] - Getting value of type Int
2021-03-12 01:49:28,820 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:49:28,821 [main:58] - GENERATED VALUE OF TYPE Int = -1287684982
2021-03-12 01:49:28,821 [main:61] - GENERATED IS CALL =false
2021-03-12 01:49:28,925 [main:67] - randomType = Char
2021-03-12 01:49:29,024 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:49:29,048 [main:149] - GENERATING call of type public final fun toFloat(): kotlin.Float defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@3e90bbfa]
2021-03-12 01:49:29,048 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@44daa517]
2021-03-12 01:49:29,167 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:49:29,168 [main:78] - Generated call from random type = ('㣝').toFloat().compareTo(-117)
2021-03-12 01:49:29,168 [main:61] - replacement of expected of type Int is ('㣝').toFloat().compareTo(-117)
2021-03-12 01:49:29,268 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:49:29,268 [main:66] - Compilation checking started
2021-03-12 01:49:29,776 [main:53] - Result = true
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also {a: T -> print("kaczm")}

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != ('㣝').toFloat().compareTo(-117)) throw AssertionError((actual).toInt().toString(A.x))
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", (linkedSetOf<A>(A)).size.shl(B.x), "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { 1997282016}

    doTest("++getB()[1, 2, 3]", 1, (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).contentToString()) {
        (B.x).div(-25)
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { (9107430422333898917.toULong()).compareTo(12.toUByte()).takeLowestOneBit() }

    return "OK"
}


2021-03-12 01:49:29,778 [main:53] - replacing ({ log += "get-B($i1, $i2, $i3);" }, Function1<Int, Unit>)
2021-03-12 01:49:29,778 [main:50] - replacing { log += "get-B($i1, $i2, $i3);" } Function1<Int, Unit>
2021-03-12 01:49:29,778 [main:54] - Getting value of type Function1<Int, Unit>
2021-03-12 01:49:29,885 [main:302] - generating value of type = Function1<Int, Unit> false depth = 0
2021-03-12 01:49:29,886 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 01:49:29,990 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 01:49:29,992 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 01:49:30,371 [main:302] - generating value of type = Int true depth = 4
2021-03-12 01:49:30,372 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 01:49:30,373 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 01:49:30,480 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 01:49:30,482 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 01:49:30,694 [main:302] - generating value of type = Any false depth = 8
2021-03-12 01:49:30,695 [main:95] - GENERATED = println("nebdx")
2021-03-12 01:49:30,695 [main:95] - GENERATED = repeat(-445802008, {a: Int -> println("nebdx")})
2021-03-12 01:49:30,695 [main:58] - GENERATED VALUE OF TYPE Function1<Int, Unit> = {a: Int -> repeat(-445802008, {a: Int -> println("nebdx")})}
2021-03-12 01:49:30,695 [main:61] - GENERATED IS CALL =false
2021-03-12 01:49:30,698 [main:67] - randomType = A
2021-03-12 01:49:30,795 [main:302] - generating value of type = A false depth = 0
2021-03-12 01:49:30,796 [main:112] - generating klass A text = object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}
2021-03-12 01:49:30,803 [main:106] - GETTING Function1<Int, Unit> from String
2021-03-12 01:49:30,826 [main:106] - GETTING Function1<Int, Unit> from Int
2021-03-12 01:49:30,873 [main:106] - GETTING Function1<Int, Unit> from Int
2021-03-12 01:49:30,875 [main:106] - GETTING Function1<Int, Unit> from Int
2021-03-12 01:49:30,876 [main:106] - GETTING Function1<Int, Unit> from Int
2021-03-12 01:49:30,877 [main:106] - GETTING Function1<Int, Unit> from Int
2021-03-12 01:49:30,878 [main:106] - GETTING Function1<Int, Unit> from A
2021-03-12 01:49:30,886 [main:106] - GETTING Function1<Int, Unit> from Int
2021-03-12 01:49:30,888 [main:106] - GETTING Function1<Int, Unit> from Int
2021-03-12 01:49:30,889 [main:106] - GETTING Function1<Int, Unit> from B
2021-03-12 01:49:30,898 [main:106] - GETTING Function1<Int, Unit> from Array<Float>
2021-03-12 01:49:30,908 [main:106] - GETTING Function1<Int, Unit> from Int
2021-03-12 01:49:30,909 [main:61] - replacement of { log += "get-B($i1, $i2, $i3);" } of type Function1<Int, Unit> is {a: Int -> repeat(-445802008, {a: Int -> println("nebdx")})}
2021-03-12 01:49:31,003 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 01:49:31,004 [main:66] - Compilation checking started
2021-03-12 01:49:31,486 [main:53] - Result = true
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also {a: T -> print("kaczm")}

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != ('㣝').toFloat().compareTo(-117)) throw AssertionError((actual).toInt().toString(A.x))
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also {a: Int -> repeat(-445802008, {a: Int -> println("nebdx")})}

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", (linkedSetOf<A>(A)).size.shl(B.x), "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { 1997282016}

    doTest("++getB()[1, 2, 3]", 1, (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).contentToString()) {
        (B.x).div(-25)
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { (9107430422333898917.toULong()).compareTo(12.toUByte()).takeLowestOneBit() }

    return "OK"
}


2021-03-12 01:49:31,487 [main:53] - replacing ("", String)
2021-03-12 01:49:31,487 [main:50] - replacing "" String
2021-03-12 01:49:31,488 [main:54] - Getting value of type String
2021-03-12 01:49:31,585 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:49:31,586 [main:58] - GENERATED VALUE OF TYPE String = "vsson"
2021-03-12 01:49:31,586 [main:61] - GENERATED IS CALL =false
2021-03-12 01:49:31,691 [main:67] - randomType = Char?
2021-03-12 01:49:31,787 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:49:31,813 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5df6d8b2]
2021-03-12 01:49:31,813 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:49:31,813 [main:78] - Generated call from random type = ('')?.toLong().toString(B.x)
2021-03-12 01:49:31,813 [main:106] - GETTING String from String
2021-03-12 01:49:31,836 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12d8ffc]]
2021-03-12 01:49:31,836 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12d8ffc]
2021-03-12 01:49:31,930 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:49:32,030 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:49:32,131 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:49:32,132 [main:117] - GENERATED CALL = (log).replace('ᦷ', '僱', true)
2021-03-12 01:49:32,132 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71df828b]]
2021-03-12 01:49:32,132 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71df828b]
2021-03-12 01:49:32,231 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 01:49:32,232 [main:302] - generating value of type = Char true depth = 1
2021-03-12 01:49:32,233 [main:117] - GENERATED CALL = (log).replaceFirstChar({a: Char -> '熢'})
2021-03-12 01:49:32,234 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@155821e1]]
2021-03-12 01:49:32,234 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@155821e1]
2021-03-12 01:49:32,365 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:49:32,366 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:49:32,367 [main:117] - GENERATED CALL = (log).filter({a: Char -> true})
2021-03-12 01:49:32,367 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7aea7dfd]]
2021-03-12 01:49:32,368 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7aea7dfd]
2021-03-12 01:49:32,368 [main:117] - GENERATED CALL = (log).toLowerCase()
2021-03-12 01:49:32,368 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40fccd13]]
2021-03-12 01:49:32,368 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40fccd13]
2021-03-12 01:49:32,479 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:49:32,595 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:49:32,693 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:49:32,694 [main:117] - GENERATED CALL = (log).replaceFirst('￞', '秕', true)
2021-03-12 01:49:32,694 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a34eb9d]]
2021-03-12 01:49:32,695 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a34eb9d]
2021-03-12 01:49:32,789 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:49:32,790 [main:117] - GENERATED CALL = (log).trimMargin("piebh")
2021-03-12 01:49:32,790 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4a694e4c], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]]
2021-03-12 01:49:32,790 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4a694e4c]
2021-03-12 01:49:32,885 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:49:32,886 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]
2021-03-12 01:49:32,886 [main:117] - GENERATED CALL = (log).get(-443267135).uppercase()
2021-03-12 01:49:32,886 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1db0a9a5]]
2021-03-12 01:49:32,886 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1db0a9a5]
2021-03-12 01:49:32,982 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:49:33,081 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:49:33,082 [main:117] - GENERATED CALL = (log).replaceAfterLast('?', "cihsq", log)
2021-03-12 01:49:33,082 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40ed279b]]
2021-03-12 01:49:33,082 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40ed279b]
2021-03-12 01:49:33,083 [main:117] - GENERATED CALL = (log).uppercase()
2021-03-12 01:49:33,083 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bad5e9f]]
2021-03-12 01:49:33,083 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bad5e9f]
2021-03-12 01:49:33,083 [main:117] - GENERATED CALL = (log).drop(B.get())
2021-03-12 01:49:33,083 [main:61] - replacement of "" of type String is (log).trimMargin("piebh")
2021-03-12 01:49:33,193 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:49:33,194 [main:66] - Compilation checking started
2021-03-12 01:49:33,520 [main:49] - Result = false
Text:
var log = (log).trimMargin("piebh")

fun <T> logged(value: T): T =
    value.also {a: T -> print("kaczm")}

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != ('㣝').toFloat().compareTo(-117)) throw AssertionError((actual).toInt().toString(A.x))
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also {a: Int -> repeat(-445802008, {a: Int -> println("nebdx")})}

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", (linkedSetOf<A>(A)).size.shl(B.x), "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { 1997282016}

    doTest("++getB()[1, 2, 3]", 1, (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).contentToString()) {
        (B.x).div(-25)
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { (9107430422333898917.toULong()).compareTo(12.toUByte()).takeLowestOneBit() }

    return "OK"
}


2021-03-12 01:49:33,521 [main:53] - replacing (++getB()[logged(1), logged(2), logged(3)], Int)
2021-03-12 01:49:33,521 [main:50] - replacing ++getB()[logged(1), logged(2), logged(3)] Int
2021-03-12 01:49:33,521 [main:54] - Getting value of type Int
2021-03-12 01:49:33,632 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:49:33,633 [main:58] - GENERATED VALUE OF TYPE Int = 1332094950
2021-03-12 01:49:33,633 [main:61] - GENERATED IS CALL =false
2021-03-12 01:49:33,634 [main:67] - randomType = ULong
2021-03-12 01:49:33,737 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 01:49:33,780 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@34016705]
2021-03-12 01:49:33,781 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@620fb700]
2021-03-12 01:49:33,781 [main:78] - Generated call from random type = (5164749462016241365.toULong()).toByte().unaryPlus()
2021-03-12 01:49:33,782 [main:106] - GETTING Int from Array<Float>
2021-03-12 01:49:33,799 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@92dca8f], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6344afcd]]
2021-03-12 01:49:33,799 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6344afcd]
2021-03-12 01:49:33,799 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).size.shr(B.x)
2021-03-12 01:49:33,800 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@92dca8f], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@27f1a51e]]
2021-03-12 01:49:33,800 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).size.absoluteValue
2021-03-12 01:49:33,800 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@92dca8f], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5d605014]]
2021-03-12 01:49:33,800 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5d605014]
2021-03-12 01:49:33,801 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).size.countLeadingZeroBits()
2021-03-12 01:49:33,801 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@92dca8f]]
2021-03-12 01:49:33,801 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).size
2021-03-12 01:49:33,801 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@92dca8f], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@647e2e5d]]
2021-03-12 01:49:33,801 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@647e2e5d]
2021-03-12 01:49:33,802 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).size.takeHighestOneBit()
2021-03-12 01:49:33,802 [main:113] - Case = [public val <T> kotlin.Array<out T>.lastIndex: kotlin.Int defined in kotlin.collections[DeserializedPropertyDescriptor@40bdb06d]]
2021-03-12 01:49:33,802 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).lastIndex
2021-03-12 01:49:33,802 [main:113] - Case = [public inline fun <T> kotlin.Array<out T>.sumBy(selector: (T) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@76dec16f]]
2021-03-12 01:49:33,802 [main:149] - GENERATING call of type public inline fun <T> kotlin.Array<out T>.sumBy(selector: (T) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@76dec16f]
2021-03-12 01:49:33,899 [main:302] - generating value of type = Function1<T, Int> false depth = 0
2021-03-12 01:49:33,900 [main:302] - generating value of type = Int true depth = 1
2021-03-12 01:49:33,902 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).sumBy({a: T -> -1925335336})
2021-03-12 01:49:33,902 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Float defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@66790fc], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63ef0ce]]
2021-03-12 01:49:33,902 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Float defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@66790fc]
2021-03-12 01:49:33,999 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:49:34,000 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63ef0ce]
2021-03-12 01:49:34,001 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).get(534756294).toRawBits()
2021-03-12 01:49:34,001 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@92dca8f], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4f6b2741]]
2021-03-12 01:49:34,001 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4f6b2741]
2021-03-12 01:49:34,100 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:49:34,101 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).size.and(835155007)
2021-03-12 01:49:34,101 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@92dca8f], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5aba40f]]
2021-03-12 01:49:34,101 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5aba40f]
2021-03-12 01:49:34,101 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).size.inc()
2021-03-12 01:49:34,102 [main:61] - replacement of ++getB()[logged(1), logged(2), logged(3)] of type Int is (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).size.absoluteValue
2021-03-12 01:49:34,213 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:49:34,214 [main:53] - replacing (i2, Int)
2021-03-12 01:49:34,215 [main:50] - replacing i2 Int
2021-03-12 01:49:34,215 [main:54] - Getting value of type Int
2021-03-12 01:49:34,314 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:49:34,315 [main:58] - GENERATED VALUE OF TYPE Int = -1989316971
2021-03-12 01:49:34,315 [main:61] - GENERATED IS CALL =false
2021-03-12 01:49:34,316 [main:67] - randomType = Long
2021-03-12 01:49:34,411 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:49:34,460 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@1ee9b128]
2021-03-12 01:49:34,556 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:49:34,557 [main:78] - Generated call from random type = (5021781788408741462).compareTo(-34)
2021-03-12 01:49:34,557 [main:106] - GETTING Int from Int
2021-03-12 01:49:34,600 [main:113] - Case = [public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@788cd72f]]
2021-03-12 01:49:34,600 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@788cd72f]
2021-03-12 01:49:34,704 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:49:34,705 [main:117] - GENERATED CALL = (value).xor(-70175636)
2021-03-12 01:49:34,705 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4f6b2741]]
2021-03-12 01:49:34,705 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:49:34,805 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:49:34,806 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4f6b2741]
2021-03-12 01:49:34,806 [main:117] - GENERATED CALL = (value).compareTo(1953704605).and(x)
2021-03-12 01:49:34,806 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@566e5161]]
2021-03-12 01:49:34,806 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:49:34,806 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@566e5161]
2021-03-12 01:49:34,904 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:49:34,905 [main:117] - GENERATED CALL = (value).toChar().minus('쩊')
2021-03-12 01:49:34,905 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@259bc032]]
2021-03-12 01:49:34,905 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e]
2021-03-12 01:49:34,906 [main:117] - GENERATED CALL = (value).toLong().sign
2021-03-12 01:49:34,906 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@20ae2b62]]
2021-03-12 01:49:34,906 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235]
2021-03-12 01:49:34,906 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@20ae2b62]
2021-03-12 01:49:35,029 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:49:35,030 [main:117] - GENERATED CALL = (value).toByte().div(18)
2021-03-12 01:49:35,031 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7b59aa7b]]
2021-03-12 01:49:35,031 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:49:35,156 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:49:35,157 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7b59aa7b]
2021-03-12 01:49:35,157 [main:117] - GENERATED CALL = (value).compareTo(1411966397).countOneBits()
2021-03-12 01:49:35,157 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2fba18e9], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Float.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@29571bd7]]
2021-03-12 01:49:35,157 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2fba18e9]
2021-03-12 01:49:35,157 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Float.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@29571bd7]
2021-03-12 01:49:35,158 [main:117] - GENERATED CALL = (value).toFloat().roundToInt()
2021-03-12 01:49:35,158 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@406267da]]
2021-03-12 01:49:35,158 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:49:35,158 [main:117] - GENERATED CALL = (value).compareTo(x).sign
2021-03-12 01:49:35,158 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7142bc15]]
2021-03-12 01:49:35,158 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73]
2021-03-12 01:49:35,259 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:49:35,260 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7142bc15]
2021-03-12 01:49:35,261 [main:117] - GENERATED CALL = (value).div(3902629822493756011).countTrailingZeroBits()
2021-03-12 01:49:35,261 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2d1f1e5a]]
2021-03-12 01:49:35,261 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:49:35,261 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2d1f1e5a]
2021-03-12 01:49:35,261 [main:117] - GENERATED CALL = (value).compareTo(i1).or(value)
2021-03-12 01:49:35,261 [main:61] - replacement of i2 of type Int is (value).compareTo(x).sign
2021-03-12 01:49:35,358 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:49:35,358 [main:66] - Compilation checking started
2021-03-12 01:49:35,797 [main:53] - Result = true
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also {a: T -> print("kaczm")}

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != ('㣝').toFloat().compareTo(-117)) throw AssertionError((actual).toInt().toString(A.x))
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also {a: Int -> repeat(-445802008, {a: Int -> println("nebdx")})}

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $(value).compareTo(x).sign, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", (linkedSetOf<A>(A)).size.shl(B.x), "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { 1997282016}

    doTest("++getB()[1, 2, 3]", 1, (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).contentToString()) {
        (B.x).div(-25)
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { (9107430422333898917.toULong()).compareTo(12.toUByte()).takeLowestOneBit() }

    return "OK"
}


2021-03-12 01:49:35,799 [main:53] - replacing (log, String)
2021-03-12 01:49:35,799 [main:50] - replacing log String
2021-03-12 01:49:35,799 [main:54] - Getting value of type String
2021-03-12 01:49:35,915 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:49:35,916 [main:58] - GENERATED VALUE OF TYPE String = "jrcqm"
2021-03-12 01:49:35,916 [main:61] - GENERATED IS CALL =false
2021-03-12 01:49:35,918 [main:67] - randomType = Boolean
2021-03-12 01:49:36,010 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:49:36,019 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@19b05991]
2021-03-12 01:49:36,128 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:49:36,129 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:49:36,129 [main:78] - Generated call from random type = (false).compareTo(true).toString(B.get())
2021-03-12 01:49:36,130 [main:106] - GETTING String from Int
2021-03-12 01:49:36,176 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:49:36,176 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:49:36,176 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:49:36,177 [main:117] - GENERATED CALL = (B.x).toInt().toString(A.x)
2021-03-12 01:49:36,177 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]]
2021-03-12 01:49:36,177 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60]
2021-03-12 01:49:36,177 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]
2021-03-12 01:49:36,270 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:49:36,271 [main:117] - GENERATED CALL = (B.x).toShort().toString(-1927748230)
2021-03-12 01:49:36,271 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]]
2021-03-12 01:49:36,272 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:49:36,272 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]
2021-03-12 01:49:36,272 [main:117] - GENERATED CALL = (B.x).toChar().titlecase()
2021-03-12 01:49:36,272 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a36c448]]
2021-03-12 01:49:36,272 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:49:36,272 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a36c448]
2021-03-12 01:49:36,272 [main:117] - GENERATED CALL = (B.x).toChar().lowercase()
2021-03-12 01:49:36,272 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:49:36,272 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e]
2021-03-12 01:49:36,272 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:49:36,273 [main:117] - GENERATED CALL = (B.x).toLong().toString(B.x)
2021-03-12 01:49:36,273 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]]
2021-03-12 01:49:36,273 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:49:36,273 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]
2021-03-12 01:49:36,273 [main:117] - GENERATED CALL = (B.x).toChar().uppercase()
2021-03-12 01:49:36,273 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:49:36,273 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:49:36,273 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:49:36,370 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:49:36,371 [main:117] - GENERATED CALL = (B.x).compareTo(A.x).toString(1315707734)
2021-03-12 01:49:36,372 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc0516]]
2021-03-12 01:49:36,372 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235]
2021-03-12 01:49:36,372 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc0516]
2021-03-12 01:49:36,372 [main:117] - GENERATED CALL = (B.x).toByte().toString(expected)
2021-03-12 01:49:36,372 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:49:36,372 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73]
2021-03-12 01:49:36,468 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:49:36,469 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:49:36,563 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:49:36,564 [main:117] - GENERATED CALL = (B.x).div(-6243263929781294453).toString(-529852379)
2021-03-12 01:49:36,564 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:49:36,564 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:49:36,565 [main:117] - GENERATED CALL = (B.x).toString(A.x)
2021-03-12 01:49:36,565 [main:61] - replacement of log of type String is (false).compareTo(true).toString(B.get())
2021-03-12 01:49:36,658 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:49:36,658 [main:66] - Compilation checking started
2021-03-12 01:49:36,925 [main:49] - Result = false
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also {a: T -> print("kaczm")}

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != ('㣝').toFloat().compareTo(-117)) throw AssertionError((actual).toInt().toString(A.x))
    if ((false).compareTo(true).toString(B.get()) != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also {a: Int -> repeat(-445802008, {a: Int -> println("nebdx")})}

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $(value).compareTo(x).sign, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", (linkedSetOf<A>(A)).size.shl(B.x), "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { 1997282016}

    doTest("++getB()[1, 2, 3]", 1, (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).contentToString()) {
        (B.x).div(-25)
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { (9107430422333898917.toULong()).compareTo(12.toUByte()).takeLowestOneBit() }

    return "OK"
}


2021-03-12 01:49:36,926 [main:53] - replacing (1, Int)
2021-03-12 01:49:36,926 [main:50] - replacing 1 Int
2021-03-12 01:49:36,926 [main:54] - Getting value of type Int
2021-03-12 01:49:37,020 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:49:37,021 [main:58] - GENERATED VALUE OF TYPE Int = -809683709
2021-03-12 01:49:37,021 [main:61] - GENERATED IS CALL =false
2021-03-12 01:49:37,022 [main:67] - randomType = Boolean
2021-03-12 01:49:37,129 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:49:37,139 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@19b05991]
2021-03-12 01:49:37,232 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:49:37,233 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7b59aa7b]
2021-03-12 01:49:37,233 [main:78] - Generated call from random type = (false).compareTo(true).countOneBits()
2021-03-12 01:49:37,233 [main:106] - GETTING Int from Int
2021-03-12 01:49:37,263 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235], public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7f5ee33d]]
2021-03-12 01:49:37,263 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235]
2021-03-12 01:49:37,263 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7f5ee33d]
2021-03-12 01:49:37,357 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:49:37,358 [main:117] - GENERATED CALL = (B.get()).toByte().compareTo(123)
2021-03-12 01:49:37,358 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5958298b], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.ranges.IntRange.random(): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@473ae517]]
2021-03-12 01:49:37,358 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5958298b]
2021-03-12 01:49:37,451 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:49:37,452 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.ranges.IntRange.random(): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@473ae517]
2021-03-12 01:49:37,452 [main:117] - GENERATED CALL = (B.get()).rangeTo(119).random()
2021-03-12 01:49:37,452 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@788cd72f]]
2021-03-12 01:49:37,452 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:49:37,453 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@788cd72f]
2021-03-12 01:49:37,545 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:49:37,546 [main:117] - GENERATED CALL = (B.get()).toInt().xor(23143572)
2021-03-12 01:49:37,547 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@788cd72f]]
2021-03-12 01:49:37,547 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:49:37,547 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@788cd72f]
2021-03-12 01:49:37,547 [main:117] - GENERATED CALL = (B.get()).compareTo(B.get()).xor(B.x)
2021-03-12 01:49:37,547 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5cb9291b]]
2021-03-12 01:49:37,547 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73]
2021-03-12 01:49:37,639 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:49:37,640 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5cb9291b]
2021-03-12 01:49:37,640 [main:117] - GENERATED CALL = (B.get()).div(6317369658461910238).countLeadingZeroBits()
2021-03-12 01:49:37,640 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7b59aa7b]]
2021-03-12 01:49:37,640 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:49:37,640 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7b59aa7b]
2021-03-12 01:49:37,641 [main:117] - GENERATED CALL = (B.get()).compareTo(B.get()).countOneBits()
2021-03-12 01:49:37,641 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7107ffd9]]
2021-03-12 01:49:37,641 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:49:37,641 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7107ffd9]
2021-03-12 01:49:37,641 [main:117] - GENERATED CALL = (B.get()).compareTo(B.x).takeLowestOneBit()
2021-03-12 01:49:37,641 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@496ff244]]
2021-03-12 01:49:37,641 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60]
2021-03-12 01:49:37,641 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@496ff244]
2021-03-12 01:49:37,735 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:49:37,736 [main:117] - GENERATED CALL = (B.get()).toShort().compareTo(-86)
2021-03-12 01:49:37,736 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d8dcc4]]
2021-03-12 01:49:37,736 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:49:37,850 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:49:37,851 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d8dcc4]
2021-03-12 01:49:37,957 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:49:37,958 [main:117] - GENERATED CALL = (B.get()).compareTo(-340358676).shl(1130461744)
2021-03-12 01:49:37,958 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@31b01837], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@78d45150]]
2021-03-12 01:49:37,958 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@31b01837]
2021-03-12 01:49:38,052 [main:302] - generating value of type = Double true depth = 0
2021-03-12 01:49:38,053 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@78d45150]
2021-03-12 01:49:38,147 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:49:38,148 [main:117] - GENERATED CALL = (B.get()).div(0.7287814259677334).compareTo(0)
2021-03-12 01:49:38,148 [main:61] - replacement of 1 of type Int is (B.get()).toShort().compareTo(-86)
2021-03-12 01:49:38,241 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:49:38,242 [main:53] - replacing (log, String)
2021-03-12 01:49:38,243 [main:50] - replacing log String
2021-03-12 01:49:38,243 [main:54] - Getting value of type String
2021-03-12 01:49:38,337 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:49:38,337 [main:58] - GENERATED VALUE OF TYPE String = "bupkl"
2021-03-12 01:49:38,338 [main:61] - GENERATED IS CALL =false
2021-03-12 01:49:38,442 [main:67] - randomType = Set<B>
2021-03-12 01:49:38,443 [main:106] - GETTING String from Int
2021-03-12 01:49:38,474 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:49:38,474 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e]
2021-03-12 01:49:38,474 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:49:38,570 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:49:38,571 [main:117] - GENERATED CALL = (A.x).toLong().toString(-2030362457)
2021-03-12 01:49:38,571 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]]
2021-03-12 01:49:38,571 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60]
2021-03-12 01:49:38,571 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]
2021-03-12 01:49:38,572 [main:117] - GENERATED CALL = (A.x).toShort().toString(A.x)
2021-03-12 01:49:38,572 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]]
2021-03-12 01:49:38,572 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:49:38,572 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]
2021-03-12 01:49:38,572 [main:117] - GENERATED CALL = (A.x).toChar().titlecase()
2021-03-12 01:49:38,572 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:49:38,572 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:49:38,572 [main:117] - GENERATED CALL = (A.x).toString(actual)
2021-03-12 01:49:38,572 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:49:38,572 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:49:38,573 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:49:38,573 [main:117] - GENERATED CALL = (A.x).compareTo(A.x).toString(actual)
2021-03-12 01:49:38,573 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]]
2021-03-12 01:49:38,573 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:49:38,573 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]
2021-03-12 01:49:38,573 [main:117] - GENERATED CALL = (A.x).toChar().uppercase()
2021-03-12 01:49:38,573 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:49:38,573 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73]
2021-03-12 01:49:38,702 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:49:38,704 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:49:38,704 [main:117] - GENERATED CALL = (A.x).div(-8903243216526875664).toString(A.x)
2021-03-12 01:49:38,704 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6122df5e]]
2021-03-12 01:49:38,704 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:49:38,704 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6122df5e]
2021-03-12 01:49:38,704 [main:117] - GENERATED CALL = (A.x).toChar().plus(id)
2021-03-12 01:49:38,704 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:49:38,705 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:49:38,705 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:49:38,815 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:49:38,816 [main:117] - GENERATED CALL = (A.x).toInt().toString(1121574910)
2021-03-12 01:49:38,817 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc0516]]
2021-03-12 01:49:38,817 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235]
2021-03-12 01:49:38,817 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc0516]
2021-03-12 01:49:38,817 [main:117] - GENERATED CALL = (A.x).toByte().toString(expected)
2021-03-12 01:49:38,817 [main:61] - replacement of log of type String is (A.x).toString(actual)
2021-03-12 01:49:38,910 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:49:38,910 [main:66] - Compilation checking started
2021-03-12 01:49:39,292 [main:53] - Result = true
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also {a: T -> print("kaczm")}

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != ('㣝').toFloat().compareTo(-117)) throw AssertionError((actual).toInt().toString(A.x))
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $(A.x).toString(actual)")
}

object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also {a: Int -> repeat(-445802008, {a: Int -> println("nebdx")})}

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $(value).compareTo(x).sign, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", (linkedSetOf<A>(A)).size.shl(B.x), "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { 1997282016}

    doTest("++getB()[1, 2, 3]", 1, (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).contentToString()) {
        (B.x).div(-25)
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { (9107430422333898917.toULong()).compareTo(12.toUByte()).takeLowestOneBit() }

    return "OK"
}


2021-03-12 01:49:39,293 [main:53] - replacing (2, Int)
2021-03-12 01:49:39,293 [main:50] - replacing 2 Int
2021-03-12 01:49:39,293 [main:54] - Getting value of type Int
2021-03-12 01:49:39,421 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:49:39,422 [main:58] - GENERATED VALUE OF TYPE Int = 190251376
2021-03-12 01:49:39,422 [main:61] - GENERATED IS CALL =false
2021-03-12 01:49:39,541 [main:67] - randomType = Collection<Char>
2021-03-12 01:49:39,541 [main:106] - GETTING Int from Int
2021-03-12 01:49:39,592 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@69b1ef5]]
2021-03-12 01:49:39,592 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60]
2021-03-12 01:49:39,592 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@69b1ef5]
2021-03-12 01:49:39,592 [main:117] - GENERATED CALL = (B.x).toShort().unaryPlus()
2021-03-12 01:49:39,592 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5d605014]]
2021-03-12 01:49:39,592 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:49:39,592 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5d605014]
2021-03-12 01:49:39,593 [main:117] - GENERATED CALL = (B.x).compareTo(B.x).countLeadingZeroBits()
2021-03-12 01:49:39,593 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@27f1a51e]]
2021-03-12 01:49:39,593 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:49:39,692 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:49:39,693 [main:117] - GENERATED CALL = (B.x).compareTo(2003766209).absoluteValue
2021-03-12 01:49:39,694 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@620fb700]]
2021-03-12 01:49:39,694 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235]
2021-03-12 01:49:39,694 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@620fb700]
2021-03-12 01:49:39,694 [main:117] - GENERATED CALL = (B.x).toByte().unaryPlus()
2021-03-12 01:49:39,694 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ea6d3]]
2021-03-12 01:49:39,694 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:49:39,694 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ea6d3]
2021-03-12 01:49:39,695 [main:117] - GENERATED CALL = (B.x).toInt().rotateRight(A.x)
2021-03-12 01:49:39,695 [main:113] - Case = [public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@788cd72f]]
2021-03-12 01:49:39,695 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@788cd72f]
2021-03-12 01:49:39,811 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:49:39,812 [main:117] - GENERATED CALL = (B.x).xor(221852265)
2021-03-12 01:49:39,812 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@27f1a51e]]
2021-03-12 01:49:39,812 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:49:39,812 [main:117] - GENERATED CALL = (B.x).toInt().absoluteValue
2021-03-12 01:49:39,812 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70b68745]]
2021-03-12 01:49:39,812 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:49:39,813 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70b68745]
2021-03-12 01:49:39,910 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:49:39,911 [main:117] - GENERATED CALL = (B.x).compareTo(A.x).ushr(1265031656)
2021-03-12 01:49:39,911 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78080c68]]
2021-03-12 01:49:39,911 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:49:40,008 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:49:40,009 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78080c68]
2021-03-12 01:49:40,009 [main:117] - GENERATED CALL = (B.x).compareTo(-611732780).toInt()
2021-03-12 01:49:40,009 [main:113] - Case = [public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@153454d9]]
2021-03-12 01:49:40,009 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@153454d9]
2021-03-12 01:49:40,009 [main:117] - GENERATED CALL = (B.x).coerceAtMost(B.get())
2021-03-12 01:49:40,010 [main:61] - replacement of 2 of type Int is (B.x).compareTo(A.x).ushr(1265031656)
2021-03-12 01:49:40,105 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:49:40,107 [main:53] - replacing ({ log += "getB();" }, Function1<B, Unit>)
2021-03-12 01:49:40,107 [main:50] - replacing { log += "getB();" } Function1<B, Unit>
2021-03-12 01:49:40,107 [main:54] - Getting value of type Function1<B, Unit>
2021-03-12 01:49:40,202 [main:302] - generating value of type = Function1<B, Unit> false depth = 0
2021-03-12 01:49:40,202 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 01:49:40,300 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 01:49:40,302 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 01:49:40,597 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 01:49:40,598 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 01:49:40,599 [main:302] - generating value of type = Any false depth = 5
2021-03-12 01:49:40,599 [main:95] - GENERATED = require(false, { "nyaed"})
2021-03-12 01:49:40,599 [main:58] - GENERATED VALUE OF TYPE Function1<B, Unit> = {a: B -> require(false, { "nyaed"})}
2021-03-12 01:49:40,599 [main:61] - GENERATED IS CALL =false
2021-03-12 01:49:40,736 [main:67] - randomType = UInt
2021-03-12 01:49:40,845 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 01:49:40,878 [main:106] - GETTING Function1<B, Unit> from A
2021-03-12 01:49:40,883 [main:106] - GETTING Function1<B, Unit> from Array<Float>
2021-03-12 01:49:40,895 [main:106] - GETTING Function1<B, Unit> from Int
2021-03-12 01:49:40,924 [main:106] - GETTING Function1<B, Unit> from B
2021-03-12 01:49:40,930 [main:106] - GETTING Function1<B, Unit> from Int
2021-03-12 01:49:40,931 [main:106] - GETTING Function1<B, Unit> from Int
2021-03-12 01:49:40,932 [main:106] - GETTING Function1<B, Unit> from String
2021-03-12 01:49:40,949 [main:106] - GETTING Function1<B, Unit> from Int
2021-03-12 01:49:40,951 [main:106] - GETTING Function1<B, Unit> from Int
2021-03-12 01:49:40,951 [main:61] - replacement of { log += "getB();" } of type Function1<B, Unit> is {a: B -> require(false, { "nyaed"})}
2021-03-12 01:49:41,059 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 01:49:41,059 [main:66] - Compilation checking started
2021-03-12 01:49:41,443 [main:53] - Result = true
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also {a: T -> print("kaczm")}

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != ('㣝').toFloat().compareTo(-117)) throw AssertionError((actual).toInt().toString(A.x))
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $(A.x).toString(actual)")
}

object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also {a: Int -> repeat(-445802008, {a: Int -> println("nebdx")})}

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $(value).compareTo(x).sign, $i3, $value);"
        x = value
    }
}

fun getB() = B.also {a: B -> require(false, { "nyaed"})}

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", (linkedSetOf<A>(A)).size.shl(B.x), "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { 1997282016}

    doTest("++getB()[1, 2, 3]", 1, (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).contentToString()) {
        (B.x).div(-25)
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { (9107430422333898917.toULong()).compareTo(12.toUByte()).takeLowestOneBit() }

    return "OK"
}


2021-03-12 01:49:41,445 [main:53] - replacing ("getA();", String)
2021-03-12 01:49:41,445 [main:50] - replacing "getA();" String
2021-03-12 01:49:41,445 [main:54] - Getting value of type String
2021-03-12 01:49:41,541 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:49:41,542 [main:58] - GENERATED VALUE OF TYPE String = "ldnnz"
2021-03-12 01:49:41,542 [main:61] - GENERATED IS CALL =false
2021-03-12 01:49:41,771 [main:67] - randomType = Map<B, A?>
2021-03-12 01:49:41,772 [main:106] - GETTING String from A
2021-03-12 01:49:41,778 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@3414cfd1], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:49:41,778 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:49:41,778 [main:117] - GENERATED CALL = (getA()).x.toString(B.x)
2021-03-12 01:49:41,778 [main:61] - replacement of "getA();" of type String is (getA()).x.toString(B.x)
2021-03-12 01:49:41,876 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:49:41,876 [main:66] - Compilation checking started
2021-03-12 01:50:09,322 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_ejfkydh_FILE.kt 0.2637920101458465 stacks: 0.2607415585610452
2021-03-12 01:50:11,070 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/FRONTEND_rtsmobs_FILE.kt 0.22550276243093922 stacks: 0.2207798228939682
2021-03-12 01:50:11,468 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_spkahud_FILE.kt 0.17578879587894397 stacks: 0.17355454003576395
2021-03-12 01:50:11,736 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_mjdvuoo_FILE.kt 0.435877907317359 stacks: 0.4389399471232532
2021-03-12 01:50:12,056 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_bovsjtu_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:50:13,112 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_zjjxhhx_FILE.kt 0.21700954400848357 stacks: 0.3070216776625825
2021-03-12 01:50:13,837 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_vlyzobb_FILE.kt 0.2552582257392753 stacks: 0.3070216776625825
2021-03-12 01:50:14,115 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_mdipjkt_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:50:14,605 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_nldonyx_FILE.kt 0.30227862705509084 stacks: 0.29955255514561585
2021-03-12 01:50:15,132 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_oesqkaa_FILE.kt 0.3093956953642384 stacks: 0.30703592814371256
2021-03-12 01:50:15,409 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_nxmqlfq_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:50:15,658 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_fhzzjaw_FILE.kt 0.00547112462006079 stacks: 4.9E-324
2021-03-12 01:50:16,354 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/FRONTEND_luxgeay_FILE.kt 0.28717948717948716 stacks: 0.28088502465611215
2021-03-12 01:50:16,653 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_rhdohpv_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:50:17,464 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_uxtnghj_FILE.kt 0.24891468955073195 stacks: 0.3070216776625825
2021-03-12 01:50:17,758 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_xirkdcy_FILE.kt 0.4108427686987562 stacks: 0.4104923518164436
2021-03-12 01:50:18,759 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/FRONTEND_bxxjzym_FILE.kt 0.25645775989836966 stacks: 0.24843260188087773
2021-03-12 01:50:18,996 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_xsbguuc_FILE.kt 0.2799211248285322 stacks: 0.2698442840865932
2021-03-12 01:50:19,564 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_sejhain_FILE.kt 0.2884717080909572 stacks: 0.1868241890268322
2021-03-12 01:50:20,526 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_svitksd_PROJECT.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:50:20,800 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_gkayych_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:50:21,626 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_npevgtu_FILE.kt 0.24998733856672575 stacks: 0.3070216776625825
2021-03-12 01:50:22,203 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/FRONTEND_zlhomgs_FILE.kt 0.24143290652061283 stacks: 0.23263199682413657
2021-03-12 01:50:22,979 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/FRONTEND_dvrkmlq_FILE.kt 0.27044025157232704 stacks: 0.26289862587503243
2021-03-12 01:50:23,824 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/FRONTEND_mqolqpg_FILE.kt 0.27178931767656617 stacks: 0.26391740128003865
2021-03-12 01:50:24,070 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_kamwpby_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:50:24,792 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_jxhhjcm_FILE.kt 0.22110883557636044 stacks: 0.22469823584029713
2021-03-12 01:50:25,689 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/FRONTEND_jkqoqns_FILE.kt 0.2618943692710607 stacks: 0.25330104364873435
2021-03-12 01:50:26,095 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_fbxykym_FILE.kt 0.37194303993395933 stacks: 0.36748280605226963
2021-03-12 01:50:27,070 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/FRONTEND_klllmvi_PROJECT.kt 0.25257731958762886 stacks: 0.24613793942342782
2021-03-12 01:50:27,322 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_ksovqnv_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:50:27,990 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_jkzkwpd_FILE.kt 0.19895799413871704 stacks: 0.20317899101589496
2021-03-12 01:50:28,263 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_cbcjrrb_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:50:28,649 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_jbiiaoa_FILE.kt 0.2699738462836413 stacks: 0.26304957904583726
2021-03-12 01:50:29,265 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_cinhbav_FILE.kt 0.1902771855010661 stacks: 0.19335901669418457
2021-03-12 01:50:29,455 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/FRONTEND_ryidhrg_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:50:29,694 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_pxguiie_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:50:29,932 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_oswtfas_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:50:30,927 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/FRONTEND_ffrledu_FILE.kt 0.2605278530083373 stacks: 0.252962650940747
2021-03-12 01:50:32,085 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/FRONTEND_spkgzfi_FILE.kt 0.2547535894450912 stacks: 0.2500795587143312
2021-03-12 01:50:33,652 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/FRONTEND_nmdpvgr_FILE.kt 0.2255771862446475 stacks: 0.2202620734361254
2021-03-12 01:50:34,601 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/FRONTEND_fvcynzl_FILE.kt 0.2512783053323594 stacks: 0.24266888282084767
2021-03-12 01:50:34,855 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_cqfirei_FILE.kt 0.4304968287526427 stacks: 0.4345336101367313
2021-03-12 01:50:35,295 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_dxavupr_FILE.kt 0.26702584392625645 stacks: 0.26074844460952734
2021-03-12 01:50:36,357 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/FRONTEND_mlzaufp_FILE.kt 0.2575545534649873 stacks: 0.24993150309606005
2021-03-12 01:50:36,564 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/FRONTEND_hztxwsd_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:50:37,071 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_fdempgb_FILE.kt 0.3039037533680055 stacks: 0.3108691040237607
2021-03-12 01:50:37,315 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_prkmlfi_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:50:37,792 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_mchkqoi_FILE.kt 0.29172693086491175 stacks: 0.28992895946510655
2021-03-12 01:50:38,046 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_eozuxrd_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:50:38,290 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_rndegzx_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:50:39,311 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/FRONTEND_ssmqrnq_FILE.kt 0.24351734470439093 stacks: 0.24083189761260151
2021-03-12 01:50:39,568 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_sqedimf_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:50:40,919 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/FRONTEND_ypekxgt_FILE.kt 0.23536237058193502 stacks: 0.22651234712525187
2021-03-12 01:50:41,903 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/FRONTEND_qrngorq_FILE.kt 0.2470561848155209 stacks: 0.24306049822064058
2021-03-12 01:50:42,137 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_dqoqnxo_FILE.kt 0.34975979036249816 stacks: 0.33760307421343366
2021-03-12 01:50:42,703 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_eeciwpn_PROJECT.kt 0.22527603463341012 stacks: 0.23981463603012165
2021-03-12 01:50:43,530 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_wgcvnbb_FILE.kt 0.25065817669748364 stacks: 0.24629677754677753
2021-03-12 01:50:43,781 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_fqgkrpn_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:50:44,183 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_kdoszos_FILE.kt 0.26405982240224335 stacks: 0.26332603139832056
2021-03-12 01:50:45,154 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/FRONTEND_sfbrtkx_FILE.kt 0.2604747490839573 stacks: 0.252962650940747
2021-03-12 01:50:46,351 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/FRONTEND_qyopxok_FILE.kt 0.24474275214373215 stacks: 0.24012714832174992
2021-03-12 01:50:47,483 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/FRONTEND_knozvna_FILE.kt 0.24718877500248781 stacks: 0.23870730811604848
2021-03-12 01:50:47,721 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_oxswypk_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:50:47,944 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/FRONTEND_zyyajhv_FILE.kt 0.0225752508361204 stacks: 4.9E-324
2021-03-12 01:50:48,529 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_ruhhuqf_FILE.kt 0.27916547585024293 stacks: 0.3129129129129129
2021-03-12 01:50:48,777 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_mjmjamg_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:50:49,777 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/FRONTEND_gmaenrl_FILE.kt 0.25743611227482194 stacks: 0.2496817401892954
2021-03-12 01:50:49,993 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_jvlkkdv_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:50:50,201 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_uyatgki_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:50:50,407 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_srbrijm_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:50:51,276 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_umsehhq_FILE.kt 0.2403682451604767 stacks: 0.24246256239600666
2021-03-12 01:50:51,555 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_ajutlmg_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:50:52,381 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/FRONTEND_nmnorkq_FILE.kt 0.24566735644076565 stacks: 0.24396986661137604
2021-03-12 01:50:52,620 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_ndkzysf_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:50:52,873 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_neeuknm_FILE.kt 0.4339917489686211 stacks: 0.4369560817648249
2021-03-12 01:50:53,124 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_wbvjnch_FILE.kt 0.4290064208644999 stacks: 0.43293864370290636
2021-03-12 01:50:53,715 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_kuurgcf_FILE.kt 0.28739246514387423 stacks: 0.31275440976933516
2021-03-12 01:50:54,612 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_rzcinim_FILE.kt 0.24062326784504526 stacks: 0.2422077922077922
2021-03-12 01:50:54,849 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_ygqbovr_FILE.kt 0.3651166097838453 stacks: 0.35429998439207117
2021-03-12 01:50:55,111 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_mwwisem_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:50:56,020 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/FRONTEND_lsnstec_PROJECT.kt 0.2430765581450513 stacks: 0.24347771813756086
2021-03-12 01:50:56,257 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_sspuvod_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:50:56,496 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_qboukjt_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:50:56,826 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_jyutvwe_FILE.kt 0.26671208379460104 stacks: 0.2592382572535677
2021-03-12 01:50:57,071 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_maqqoxs_FILE.kt 0.42980661342485643 stacks: 0.43382195209152663
2021-03-12 01:50:57,272 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_mmjedpx_FILE.kt 0.004746835443037975 stacks: 4.9E-324
2021-03-12 01:50:58,176 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_gbdwjsw_PROJECT.kt 0.24317264307765377 stacks: 0.2437043054427295
2021-03-12 01:50:58,422 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_aontrro_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:50:58,648 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_pylszzf_FILE.kt 0.005594745803940647 stacks: 4.9E-324
2021-03-12 01:50:58,937 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_wkgxyco_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:50:59,363 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_mlulikr_FILE.kt 0.28260001597061407 stacks: 0.2779872008415885
2021-03-12 01:51:00,018 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_wsqgxyc_PROJECT.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:51:00,479 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_mwnxoln_FILE.kt 0.27150516745667885 stacks: 0.27332000347735375
2021-03-12 01:51:00,755 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_bxjrqrt_FILE.kt 0.43342683801944026 stacks: 0.43761033825294826
2021-03-12 01:51:01,027 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_kyprhjh_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:51:01,276 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_gbwboce_FILE.kt 0.2881876332622601 stacks: 0.27917877566326055
2021-03-12 01:51:01,510 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_lwdrcvn_FILE.kt 0.44281890057897033 stacks: 0.44757874941231784
2021-03-12 01:51:01,897 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_lpjmgwc_FILE.kt 0.17901008249312558 stacks: 0.17355454003576395
2021-03-12 01:51:02,803 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/FRONTEND_vyqnsfe_FILE.kt 0.2619086593550499 stacks: 0.25330104364873435
2021-03-12 01:51:03,038 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_gmkqifj_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:51:03,285 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_kmunfyr_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:51:03,546 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_rwwexbb_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:51:03,774 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_soouyic_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:51:04,014 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_qqojlnd_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:51:05,381 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_nkdukxx_FILE.kt 0.24014700904299047 stacks: 0.23679701673049788
2021-03-12 01:51:05,627 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_xxbdqqs_PROJECT.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:51:05,859 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_nabzjov_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:51:06,943 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_pmmaakv_FILE.kt 0.24983895211509555 stacks: 0.24799326410328376
2021-03-12 01:51:07,397 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_owbhymt_FILE.kt 0.2806195393169182 stacks: 0.27739636742852175
2021-03-12 01:51:07,624 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_wcrqstr_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:51:08,684 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/FRONTEND_rpagdop_FILE.kt 0.2524474811339996 stacks: 0.24405210463989666
2021-03-12 01:51:09,556 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/FRONTEND_xwkqvyh_FILE.kt 0.26196322365908226 stacks: 0.25330104364873435
2021-03-12 01:51:10,433 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/FRONTEND_iwsqsbw_FILE.kt 0.26196322365908226 stacks: 0.25330104364873435
2021-03-12 01:51:10,628 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_zlgbflt_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:51:10,868 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_iejlgia_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:51:11,122 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_pblvxue_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:51:11,550 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_asptvbh_FILE.kt 0.29053106992680267 stacks: 0.2872942386831276
2021-03-12 01:51:12,504 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/FRONTEND_atwufco_FILE.kt 0.2467539767298072 stacks: 0.24416377349455284
2021-03-12 01:51:12,746 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_qsqwhpy_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:51:13,266 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_cjvfkbf_FILE.kt 0.2623196404636127 stacks: 0.2606975246158093
2021-03-12 01:51:13,516 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_idwgeby_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:51:14,257 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_myhqazf_FILE.kt 0.22554075347371436 stacks: 0.22896698615548455
2021-03-12 01:51:14,499 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_idumlic_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:51:14,740 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_gbrngij_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:51:16,147 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_rssdzej_FILE.kt 0.25372772457267545 stacks: 0.2490423086745552
2021-03-12 01:51:16,367 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_jsfiekh_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:51:16,624 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_ycpxelu_FILE.kt 0.43021601345233473 stacks: 0.4340190316260845
2021-03-12 01:51:16,867 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_pvgkval_FILE.kt 0.4291956305858987 stacks: 0.4292070326515967
2021-03-12 01:51:17,078 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_ieqgenx_FILE.kt 0.4457389710695117 stacks: 0.450995677131316
2021-03-12 01:51:17,295 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_mnbeoja_FILE.kt 0.43865567216391804 stacks: 0.4430738119312437
2021-03-12 01:51:17,518 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/FRONTEND_uykaxhb_FILE.kt 0.03164108618654073 stacks: 4.9E-324
2021-03-12 01:51:18,361 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/FRONTEND_ihlgvef_FILE.kt 0.2537048377219841 stacks: 0.24399685080698072
2021-03-12 01:51:18,555 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_hitkhrm_FILE.kt 0.005594745803940647 stacks: 4.9E-324
2021-03-12 01:51:19,306 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_swceqbj_FILE.kt 0.23589275687815833 stacks: 0.2395547309833024
2021-03-12 01:51:19,721 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_udzupkw_FILE.kt 0.28260001597061407 stacks: 0.2779872008415885
2021-03-12 01:51:19,963 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_syyfvsh_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:51:20,926 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_tsyyyhs_FILE.kt 0.22160676901605025 stacks: 0.3070216776625825
2021-03-12 01:51:21,142 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_mnakvke_FILE.kt 0.4457389710695117 stacks: 0.450995677131316
2021-03-12 01:51:21,892 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_orbuxwh_FILE.kt 0.24773761311934403 stacks: 0.3070216776625825
2021-03-12 01:51:22,258 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_fvtjvdc_FILE.kt 0.27255969836614996 stacks: 0.2658991737071767
2021-03-12 01:51:23,025 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_tlgefrw_FILE.kt 0.2478461230214386 stacks: 0.3070216776625825
2021-03-12 01:51:23,355 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_ufzpwub_FILE.kt 0.26310813133917826 stacks: 0.255463307567516
2021-03-12 01:51:23,566 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_aydkiis_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:51:23,775 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_dyxfrrj_FILE.kt 0.005594745803940647 stacks: 4.9E-324
2021-03-12 01:51:24,104 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_qohehkf_FILE.kt 0.2631262352840079 stacks: 0.255463307567516
2021-03-12 01:51:25,041 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/FRONTEND_orelaeo_FILE.kt 0.2467144906743185 stacks: 0.24221642289251685
2021-03-12 01:51:25,523 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_mawahfi_FILE.kt 0.29338842975206614 stacks: 0.2893723980834184
2021-03-12 01:51:26,309 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_eplndcn_FILE.kt 0.24110367409832908 stacks: 0.3070216776625825
2021-03-12 01:51:27,804 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/FRONTEND_wchhuoa_FILE.kt 0.23296118092212828 stacks: 0.22864580775087184
2021-03-12 01:51:28,051 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_mwkghck_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:51:28,350 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_wiaqaqi_FILE.kt 0.40539323312503517 stacks: 0.40462253334137954
2021-03-12 01:51:28,573 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_tuunlfk_FILE.kt 0.005594745803940647 stacks: 4.9E-324
2021-03-12 01:51:28,808 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_ihhvkms_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:51:29,020 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_udhsyli_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:51:29,261 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_lljvdmu_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:51:29,522 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_gotxcdm_FILE.kt 0.42890055036477664 stacks: 0.43258388101003115
2021-03-12 01:51:29,787 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_sjscbeb_FILE.kt 0.4288769360378459 stacks: 0.432458970402581
2021-03-12 01:51:30,606 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_ocndwlz_FILE.kt 0.24398844213722512 stacks: 0.3070216776625825
2021-03-12 01:51:31,058 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_mtednfb_FILE.kt 0.35442979197622587 stacks: 0.35259944860181175
2021-03-12 01:51:31,572 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_oexejin_FILE.kt 0.24741961832627904 stacks: 0.26078954633293455
2021-03-12 01:51:31,838 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_aptdcwp_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:51:32,579 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_opalsrv_FILE.kt 0.2345827439886846 stacks: 0.23833034111310591
2021-03-12 01:51:33,346 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM/BACKEND_cipqwga_FILE.kt 0.24504743646463156 stacks: 0.3070216776625825
2021-03-12 01:51:59,667 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/FRONTEND_ogyzajb_FILE.kt 0.2619086593550499 stacks: 0.25330104364873435
2021-03-12 01:51:59,868 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/FRONTEND_covtmkr_FILE.kt 0.0225752508361204 stacks: 4.9E-324
2021-03-12 01:52:00,379 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_tlnrshv_FILE.kt 0.3120613046558053 stacks: 0.3098503740648379
2021-03-12 01:52:00,695 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_gtbbpdf_FILE.kt 0.26331615120274915 stacks: 0.255463307567516
2021-03-12 01:52:01,255 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_aymufyx_FILE.kt 0.31832927818329276 stacks: 0.31647066143986063
2021-03-12 01:52:01,466 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_kzvmgai_FILE.kt 0.004746835443037975 stacks: 4.9E-324
2021-03-12 01:52:01,872 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_gdydtwh_FILE.kt 0.27150516745667885 stacks: 0.27332000347735375
2021-03-12 01:52:02,796 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_sfrlqcd_FILE.kt 0.285955843277453 stacks: 0.2818009914652221
2021-03-12 01:52:03,015 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_feyvptn_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:52:04,056 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/FRONTEND_qeftqwr_FILE.kt 0.25249847032429124 stacks: 0.24405210463989666
2021-03-12 01:52:04,998 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/FRONTEND_shqioye_FILE.kt 0.2467539767298072 stacks: 0.24416377349455284
2021-03-12 01:52:05,710 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_fquoogr_FILE.kt 0.3062643770395335 stacks: 0.30390026306759693
2021-03-12 01:52:06,593 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_orkjbag_FILE.kt 0.24060844931641828 stacks: 0.2422077922077922
2021-03-12 01:52:07,099 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_mazlpnx_FILE.kt 0.3120613046558053 stacks: 0.3098503740648379
2021-03-12 01:52:07,382 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_uqtgsji_FILE.kt 0.3313885647607935 stacks: 0.3267294837722477
2021-03-12 01:52:07,607 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_ghduvuz_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:52:07,900 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_yawjbrk_FILE.kt 0.33056478405315615 stacks: 0.3274684662970997
2021-03-12 01:52:08,333 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_cjyirde_FILE.kt 0.284638783269962 stacks: 0.28159626038781166
2021-03-12 01:52:09,345 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/FRONTEND_movzlyw_FILE.kt 0.25743611227482194 stacks: 0.2496817401892954
2021-03-12 01:52:09,860 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_itvlwrk_FILE.kt 0.29850655288021943 stacks: 0.310939820380454
2021-03-12 01:52:10,242 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_uguvgxa_FILE.kt 0.2703509479628883 stacks: 0.25797320249103606
2021-03-12 01:52:10,459 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_iiumjho_FILE.kt 0.2881876332622601 stacks: 0.27917877566326055
2021-03-12 01:52:11,133 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_cxziyib_FILE.kt 0.25806286997346395 stacks: 0.31488016468166447
2021-03-12 01:52:11,461 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_idsjfrm_FILE.kt 0.2631262352840079 stacks: 0.255463307567516
2021-03-12 01:52:12,406 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/FRONTEND_tqqrgvk_FILE.kt 0.2512783053323594 stacks: 0.24266888282084767
2021-03-12 01:52:12,836 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_obbggdg_FILE.kt 0.2893341190335887 stacks: 0.28688732752052826
2021-03-12 01:52:13,240 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_hiwuupf_FILE.kt 0.2806195393169182 stacks: 0.27739636742852175
2021-03-12 01:52:13,912 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/FRONTEND_pucfrjc_FILE.kt 0.28717948717948716 stacks: 0.28088502465611215
2021-03-12 01:52:14,298 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_gxkfhjf_FILE.kt 0.2808350663893777 stacks: 0.27610432949855096
2021-03-12 01:52:14,535 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_gbvxtuy_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:52:14,978 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_gckhthm_FILE.kt 0.28572491813039597 stacks: 0.2816206389057225
2021-03-12 01:52:15,644 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_jwwkkwx_FILE.kt 0.307546351512523 stacks: 0.3063047387042515
2021-03-12 01:52:16,514 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/FRONTEND_qnhbzij_FILE.kt 0.26196322365908226 stacks: 0.25330104364873435
2021-03-12 01:52:17,418 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/FRONTEND_fumzsxe_FILE.kt 0.2618943692710607 stacks: 0.25330104364873435
2021-03-12 01:52:17,935 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_gacukjn_FILE.kt 0.2970248937462052 stacks: 0.3109885447602885
2021-03-12 01:52:19,663 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/FRONTEND_hpfmiko_FILE.kt 0.22550276243093922 stacks: 0.2207798228939682
2021-03-12 01:52:20,350 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/FRONTEND_ardsfpw_FILE.kt 0.2736875395319418 stacks: 0.2670252100840336
2021-03-12 01:52:20,569 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_hgzpohd_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:52:20,812 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_twxsqos_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:52:21,018 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_vzczjpe_FILE.kt 0.43128439135686486 stacks: 0.43790945896209055
2021-03-12 01:52:21,221 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_etcwekt_FILE.kt 0.005594745803940647 stacks: 4.9E-324
2021-03-12 01:52:22,229 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/FRONTEND_iwpsjss_FILE.kt 0.2470561848155209 stacks: 0.24306049822064058
2021-03-12 01:52:22,608 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_srqapxm_FILE.kt 0.17901008249312558 stacks: 0.17355454003576395
2021-03-12 01:52:22,858 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_uchbmgp_FILE.kt 0.333805811481219 stacks: 0.3316684192078514
2021-03-12 01:52:23,113 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_dwkevjg_FILE.kt 0.37026668631206716 stacks: 0.3718785702627713
2021-03-12 01:52:24,678 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/FRONTEND_onycsva_FILE.kt 0.2255771862446475 stacks: 0.2202620734361254
2021-03-12 01:52:25,612 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/FRONTEND_uzuqupt_FILE.kt 0.2467144906743185 stacks: 0.24221642289251685
2021-03-12 01:52:25,789 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_kvyvbki_FILE.kt 0.331152367710804 stacks: 0.3140698944302876
2021-03-12 01:52:26,500 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_nduzqqf_FILE.kt 0.3062643770395335 stacks: 0.30390026306759693
2021-03-12 01:52:26,717 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_mliwdmv_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:52:27,275 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_hugehcn_FILE.kt 0.27916547585024293 stacks: 0.3129129129129129
2021-03-12 01:52:27,479 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_plyujvu_FILE.kt 0.39335951445912176 stacks: 0.39678664251397966
2021-03-12 01:52:28,306 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_ditytra_FILE.kt 0.29247420085577647 stacks: 0.28840510111520196
2021-03-12 01:52:28,517 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_xypedwi_FILE.kt 0.44281890057897033 stacks: 0.44757874941231784
2021-03-12 01:52:29,485 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/FRONTEND_gxgiabv_PROJECT.kt 0.25257731958762886 stacks: 0.24613793942342782
2021-03-12 01:52:30,460 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/FRONTEND_zeovszf_FILE.kt 0.2565242708167911 stacks: 0.24843260188087773
2021-03-12 01:52:30,658 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_hkwezhj_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:52:31,171 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_czmaobb_FILE.kt 0.2790766063814145 stacks: 0.2708981159685385
2021-03-12 01:52:32,019 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_phcsnwg_FILE.kt 0.24032034304452013 stacks: 0.24246256239600666
2021-03-12 01:52:32,228 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_nbniusk_FILE.kt 0.4457389710695117 stacks: 0.450995677131316
2021-03-12 01:52:32,478 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_lxmfzyu_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:52:32,702 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_gumcesx_FILE.kt 0.4321146178279381 stacks: 0.4386641929499072
2021-03-12 01:52:33,236 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_mvrnpyq_FILE.kt 0.31082336546278017 stacks: 0.321526597830349
2021-03-12 01:52:33,973 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_xufaecf_FILE.kt 0.2345827439886846 stacks: 0.23833034111310591
2021-03-12 01:52:34,345 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_zwrxrqt_FILE.kt 0.26702584392625645 stacks: 0.26074844460952734
2021-03-12 01:52:34,567 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_dioohue_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:52:34,839 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_khpjvhq_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:52:35,810 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/FRONTEND_qxhfxpl_FILE.kt 0.2604747490839573 stacks: 0.252962650940747
2021-03-12 01:52:36,217 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_biuzdmh_FILE.kt 0.2888526626300264 stacks: 0.2848763070645244
2021-03-12 01:52:36,400 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_httupvk_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:52:36,715 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_lnbthyr_FILE.kt 0.31414680050188204 stacks: 0.31131174581126836
2021-03-12 01:52:37,620 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_gfntkav_FILE.kt 0.2314885985139636 stacks: 0.3119485172162144
2021-03-12 01:52:38,001 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_wszblbk_FILE.kt 0.17578879587894397 stacks: 0.17355454003576395
2021-03-12 01:52:38,232 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_ihzkocw_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:52:39,365 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/FRONTEND_pluhpzt_FILE.kt 0.2458504682158252 stacks: 0.2380204241948154
2021-03-12 01:52:39,798 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_hhksmmp_FILE.kt 0.30227862705509084 stacks: 0.29955255514561585
2021-03-12 01:52:41,137 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/FRONTEND_budzvis_FILE.kt 0.23540699750089253 stacks: 0.22651234712525187
2021-03-12 01:52:41,419 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_gszivhg_FILE.kt 0.2963536993229464 stacks: 0.28971454463072044
2021-03-12 01:52:42,481 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_aeimvfw_FILE.kt 0.24983895211509555 stacks: 0.24799326410328376
2021-03-12 01:52:42,898 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_txoaefn_FILE.kt 0.28260001597061407 stacks: 0.2779872008415885
2021-03-12 01:52:43,117 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_ggzxwej_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:52:43,504 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_rkfvgeb_FILE.kt 0.2638012925328973 stacks: 0.26332603139832056
2021-03-12 01:52:43,716 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_wsnegsz_FILE.kt 0.44041553629325747 stacks: 0.4453685116145684
2021-03-12 01:52:43,985 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_loxctfw_FILE.kt 0.34597268016957133 stacks: 0.34453420419388103
2021-03-12 01:52:45,214 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_kwdmsmw_FILE.kt 0.26643793972031615 stacks: 0.2622026673999725
2021-03-12 01:52:45,543 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_wcxdzir_FILE.kt 0.3145576533000468 stacks: 0.31174334140435833
2021-03-12 01:52:46,347 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/FRONTEND_wiqiuyq_FILE.kt 0.27178931767656617 stacks: 0.26391740128003865
2021-03-12 01:52:46,573 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_yntggyb_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:52:47,369 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/FRONTEND_pidxpbp_FILE.kt 0.24566735644076565 stacks: 0.24396986661137604
2021-03-12 01:52:47,833 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_eqqjxuv_FILE.kt 0.30148664834777705 stacks: 0.29804822043628015
2021-03-12 01:52:48,094 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_xkymzwq_FILE.kt 0.3327652982184353 stacks: 0.33245936025170425
2021-03-12 01:52:48,619 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_woagibc_FILE.kt 0.3039037533680055 stacks: 0.3108691040237607
2021-03-12 01:52:49,317 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_bebtaac_FILE.kt 0.3050640957728573 stacks: 0.30241753276095795
2021-03-12 01:52:49,542 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_kpbekuy_FILE.kt 0.2799211248285322 stacks: 0.2698442840865932
2021-03-12 01:52:50,192 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_nnmpnou_FILE.kt 0.19895799413871704 stacks: 0.20317899101589496
2021-03-12 01:52:50,462 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_utjollq_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:52:50,930 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_dejqezm_FILE.kt 0.3093956953642384 stacks: 0.30703592814371256
2021-03-12 01:52:51,141 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_jdjotpi_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:52:51,880 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_okxdxfx_FILE.kt 0.23589275687815833 stacks: 0.2395547309833024
2021-03-12 01:52:52,988 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/FRONTEND_ectiisp_FILE.kt 0.24718877500248781 stacks: 0.23870730811604848
2021-03-12 01:52:53,417 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_ihttjmz_FILE.kt 0.35442979197622587 stacks: 0.35259944860181175
2021-03-12 01:52:53,651 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_atvfwtf_FILE.kt 0.43342683801944026 stacks: 0.43761033825294826
2021-03-12 01:52:54,480 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_idgxavf_FILE.kt 0.24547850586203762 stacks: 0.30660196654322563
2021-03-12 01:52:54,830 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_gtgvjpd_FILE.kt 0.2699738462836413 stacks: 0.26304957904583726
2021-03-12 01:52:55,687 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/FRONTEND_rmrmecj_FILE.kt 0.26196322365908226 stacks: 0.25330104364873435
2021-03-12 01:52:55,908 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_ilvjoqs_FILE.kt 0.005594745803940647 stacks: 4.9E-324
2021-03-12 01:52:56,159 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_xyglvhv_FILE.kt 0.3749538506977774 stacks: 0.37674646621456004
2021-03-12 01:52:56,982 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_waubyer_FILE.kt 0.25065817669748364 stacks: 0.24629677754677753
2021-03-12 01:52:57,345 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_gpzhojk_FILE.kt 0.2755127052863796 stacks: 0.27026784109293545
2021-03-12 01:52:57,517 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_ggemfic_FILE.kt 0.00402046783625731 stacks: 4.9E-324
2021-03-12 01:52:57,885 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_egkrvlh_FILE.kt 0.2637920101458465 stacks: 0.2607415585610452
2021-03-12 01:52:58,154 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_oeawuua_FILE.kt 0.3351988657562868 stacks: 0.3302401302401302
2021-03-12 01:52:58,866 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_lyktebc_FILE.kt 0.22110883557636044 stacks: 0.22469823584029713
2021-03-12 01:52:59,683 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_umitmzu_FILE.kt 0.2435565252966044 stacks: 0.3088838268792711
2021-03-12 01:53:00,009 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_plguazi_FILE.kt 0.26310813133917826 stacks: 0.255463307567516
2021-03-12 01:53:00,234 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_gdjdcjr_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:53:01,199 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_xbswajp_FILE.kt 0.2546685472496474 stacks: 0.2516251034156719
2021-03-12 01:53:01,410 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/FRONTEND_tsrphaj_FILE.kt 0.03164108618654073 stacks: 4.9E-324
2021-03-12 01:53:01,822 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_zxklxof_FILE.kt 0.29053106992680267 stacks: 0.2872942386831276
2021-03-12 01:53:02,340 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_nlkhlhd_FILE.kt 0.3196926267000061 stacks: 0.31745616330803456
2021-03-12 01:53:02,594 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_okfrepb_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:53:02,826 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_tpwkekc_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:53:03,067 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_gmmdffb_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:53:03,514 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_nmwnwlb_FILE.kt 0.29416828061114697 stacks: 0.2927469642271086
2021-03-12 01:53:04,955 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_bpgwcoa_FILE.kt 0.14654270057262483 stacks: 0.3018417671174203
2021-03-12 01:53:05,180 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_bdogeyc_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:53:05,959 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_gmjsieh_FILE.kt 0.3018386374290328 stacks: 0.2993272919330628
2021-03-12 01:53:06,211 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_dpykikn_FILE.kt 0.32910086501071345 stacks: 0.3268296989494129
2021-03-12 01:53:06,936 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_rpxfdhx_FILE.kt 0.22554075347371436 stacks: 0.22896698615548455
2021-03-12 01:53:07,411 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_uuqmxmk_FILE.kt 0.26234032486989434 stacks: 0.2606975246158093
2021-03-12 01:53:07,598 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/FRONTEND_zphihfp_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:53:07,836 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_gxexgyl_FILE.kt 0.43021601345233473 stacks: 0.4340190316260845
2021-03-12 01:53:08,023 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/FRONTEND_ujufqqh_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:53:08,251 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_dvjgagw_FILE.kt 0.4290064208644999 stacks: 0.43293864370290636
2021-03-12 01:53:08,523 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_bnkhnya_FILE.kt 0.4108427686987562 stacks: 0.4104923518164436
2021-03-12 01:53:08,766 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_djpavwr_FILE.kt 0.34975979036249816 stacks: 0.33760307421343366
2021-03-12 01:53:08,988 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_onruupo_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:53:09,559 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/FRONTEND_lejknhn_FILE.kt 0.24143290652061283 stacks: 0.23263199682413657
2021-03-12 01:53:10,043 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_grfpupe_FILE.kt 0.24741961832627904 stacks: 0.26078954633293455
2021-03-12 01:53:10,986 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/FRONTEND_nojnelh_FILE.kt 0.24351734470439093 stacks: 0.24083189761260151
2021-03-12 01:53:11,211 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_soundfq_FILE.kt 0.4304968287526427 stacks: 0.4345336101367313
2021-03-12 01:53:11,668 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_nmmfsbn_FILE.kt 0.29172693086491175 stacks: 0.28992895946510655
2021-03-12 01:53:12,669 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/FRONTEND_ycwzqbp_FILE.kt 0.2575027211942155 stacks: 0.24993150309606005
2021-03-12 01:53:14,039 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_uxmnifc_FILE.kt 0.25372772457267545 stacks: 0.2490423086745552
2021-03-12 01:53:14,267 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_blredtk_FILE.kt 0.435877907317359 stacks: 0.4389399471232532
2021-03-12 01:53:15,353 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/FRONTEND_hgdgbqq_FILE.kt 0.24405930871956008 stacks: 0.23540976821192053
2021-03-12 01:53:15,573 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_qmvjndd_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:53:15,805 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_svntbdz_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:53:16,191 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_rbzvkej_FILE.kt 0.28260001597061407 stacks: 0.2779872008415885
2021-03-12 01:53:17,361 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/FRONTEND_yttjopc_FILE.kt 0.2446792221711836 stacks: 0.24012714832174992
2021-03-12 01:53:17,577 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_bljwsrg_FILE.kt 0.2881876332622601 stacks: 0.27917877566326055
2021-03-12 01:53:17,796 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_iutecjd_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:53:18,017 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_veuavzy_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:53:18,231 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_ehazesh_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:53:18,456 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_wxfohbi_FILE.kt 0.39114846596920183 stacks: 0.3938640132669983
2021-03-12 01:53:18,670 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_hcblnqy_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:53:18,881 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_fvojbrf_FILE.kt 0.43865567216391804 stacks: 0.4430738119312437
2021-03-12 01:53:19,140 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_usomdsl_FILE.kt 0.43525626552269137 stacks: 0.43819204937375206
2021-03-12 01:53:19,354 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_wycrlbo_FILE.kt 0.38095583436072233 stacks: 0.38362103572862305
2021-03-12 01:53:20,174 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/FRONTEND_bwqyykc_FILE.kt 0.2537048377219841 stacks: 0.24399685080698072
2021-03-12 01:53:21,136 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/FRONTEND_lwrrmwa_FILE.kt 0.2604747490839573 stacks: 0.252962650940747
2021-03-12 01:53:21,519 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_hymcgcs_FILE.kt 0.26562132497059976 stacks: 0.26332603139832056
2021-03-12 01:53:21,753 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_uljhldm_FILE.kt 0.42980661342485643 stacks: 0.43382195209152663
2021-03-12 01:53:22,157 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_qzuqsgd_PROJECT.kt 0.22873544631306597 stacks: 0.23981463603012165
2021-03-12 01:53:22,569 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_qknjgsj_FILE.kt 0.28229912196561646 stacks: 0.2786723921989622
2021-03-12 01:53:22,830 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_dnbakkl_FILE.kt 0.3344728891715694 stacks: 0.3315342417271279
2021-03-12 01:53:23,316 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_ndzwhci_FILE.kt 0.29338842975206614 stacks: 0.2893723980834184
2021-03-12 01:53:23,522 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/BACKEND_wdgsnsc_FILE.kt 4.9E-324 stacks: 4.9E-324
2021-03-12 01:53:24,258 [main:28] - Comparing bug with /home/stepanov/Kotlin/bbfgradle/tmp/results/JVM-Xuse-ir/FRONTEND_rmgkdof_FILE.kt 0.27044025157232704 stacks: 0.26289862587503243
2021-03-12 01:53:24,259 [main:49] - Result = false
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also {a: T -> print("kaczm")}

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != ('㣝').toFloat().compareTo(-117)) throw AssertionError((actual).toInt().toString(A.x))
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $(A.x).toString(actual)")
}

object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += (getA()).x.toString(B.x) }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also {a: Int -> repeat(-445802008, {a: Int -> println("nebdx")})}

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $(value).compareTo(x).sign, $i3, $value);"
        x = value
    }
}

fun getB() = B.also {a: B -> require(false, { "nyaed"})}

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", (linkedSetOf<A>(A)).size.shl(B.x), "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { 1997282016}

    doTest("++getB()[1, 2, 3]", 1, (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).contentToString()) {
        (B.x).div(-25)
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { (9107430422333898917.toULong()).compareTo(12.toUByte()).takeLowestOneBit() }

    return "OK"
}


2021-03-12 01:53:24,260 [main:53] - replacing (getB()[logged((B.get()).toShort().compareTo(-86)), (B.x).toByte().div(-3), (getA()).x.ushr(694822013)], Int)
2021-03-12 01:53:24,260 [main:50] - replacing getB()[logged((B.get()).toShort().compareTo(-86)), (B.x).toByte().div(-3), (getA()).x.ushr(694822013)] Int
2021-03-12 01:53:24,260 [main:54] - Getting value of type Int
2021-03-12 01:53:24,358 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:53:24,358 [main:58] - GENERATED VALUE OF TYPE Int = -1275982534
2021-03-12 01:53:24,359 [main:61] - GENERATED IS CALL =false
2021-03-12 01:53:24,459 [main:67] - randomType = UInt
2021-03-12 01:53:24,554 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 01:53:24,596 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@73b3ac35]
2021-03-12 01:53:24,698 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 01:53:24,700 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@35754437]
2021-03-12 01:53:24,798 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:53:24,799 [main:78] - Generated call from random type = (121000277.toUInt()).compareTo(19.toUByte()).coerceAtLeast(476471256)
2021-03-12 01:53:24,799 [main:106] - GETTING Int from Int
2021-03-12 01:53:24,834 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5aba40f]]
2021-03-12 01:53:24,834 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:53:24,834 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5aba40f]
2021-03-12 01:53:24,834 [main:117] - GENERATED CALL = (B.get()).toInt().inc()
2021-03-12 01:53:24,834 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@11ef4c3c]]
2021-03-12 01:53:24,834 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60]
2021-03-12 01:53:24,835 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@11ef4c3c]
2021-03-12 01:53:24,835 [main:117] - GENERATED CALL = (B.get()).toShort().countLeadingZeroBits()
2021-03-12 01:53:24,835 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@788cd72f]]
2021-03-12 01:53:24,835 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:53:24,835 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@788cd72f]
2021-03-12 01:53:24,835 [main:117] - GENERATED CALL = (B.get()).compareTo(B.get()).xor(B.x)
2021-03-12 01:53:24,835 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5aba40f]]
2021-03-12 01:53:24,835 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:53:24,835 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5aba40f]
2021-03-12 01:53:24,836 [main:117] - GENERATED CALL = (B.get()).compareTo(B.get()).inc()
2021-03-12 01:53:24,836 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2097313e]]
2021-03-12 01:53:24,836 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60]
2021-03-12 01:53:24,836 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2097313e]
2021-03-12 01:53:24,935 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:53:24,936 [main:117] - GENERATED CALL = (B.get()).toShort().minus(-15)
2021-03-12 01:53:24,936 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5958298b], public open val start: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@786533ac]]
2021-03-12 01:53:24,936 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5958298b]
2021-03-12 01:53:25,031 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:53:25,032 [main:117] - GENERATED CALL = (B.get()).rangeTo(-34).start
2021-03-12 01:53:25,032 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3f32c47a]]
2021-03-12 01:53:25,032 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73]
2021-03-12 01:53:25,129 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:53:25,130 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3f32c47a]
2021-03-12 01:53:25,130 [main:117] - GENERATED CALL = (B.get()).div(3820828512254885653).countOneBits()
2021-03-12 01:53:25,130 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@41d04a80]]
2021-03-12 01:53:25,130 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@41d04a80]
2021-03-12 01:53:25,230 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:53:25,231 [main:117] - GENERATED CALL = (B.get()).rotateLeft(689975700)
2021-03-12 01:53:25,232 [main:113] - Case = [public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3ef045d8]]
2021-03-12 01:53:25,232 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3ef045d8]
2021-03-12 01:53:25,382 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:53:25,384 [main:117] - GENERATED CALL = (B.get()).minus(8)
2021-03-12 01:53:25,384 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2dec1507], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@78d45150]]
2021-03-12 01:53:25,384 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2dec1507]
2021-03-12 01:53:25,384 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@78d45150]
2021-03-12 01:53:25,533 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:53:25,535 [main:117] - GENERATED CALL = (B.get()).toDouble().compareTo(-48)
2021-03-12 01:53:25,535 [main:61] - replacement of getB()[logged((B.get()).toShort().compareTo(-86)), (B.x).toByte().div(-3), (getA()).x.ushr(694822013)] of type Int is -1275982534
2021-03-12 01:53:25,679 [main:33] - Trying to replace Element(ARRAY_ACCESS_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 01:53:25,680 [main:53] - replacing (1, Int)
2021-03-12 01:53:25,680 [main:50] - replacing 1 Int
2021-03-12 01:53:25,680 [main:54] - Getting value of type Int
2021-03-12 01:53:25,802 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:53:25,803 [main:58] - GENERATED VALUE OF TYPE Int = 1101293453
2021-03-12 01:53:25,803 [main:61] - GENERATED IS CALL =false
2021-03-12 01:53:25,806 [main:67] - randomType = A
2021-03-12 01:53:25,905 [main:302] - generating value of type = A false depth = 0
2021-03-12 01:53:25,906 [main:112] - generating klass A text = object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}
2021-03-12 01:53:25,913 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@77efaf86]
2021-03-12 01:53:26,007 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:53:26,008 [main:78] - Generated call from random type = (A).x.compareTo(-98)
2021-03-12 01:53:26,009 [main:106] - GETTING Int from Array<Float>
2021-03-12 01:53:26,019 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Float defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@66790fc], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@44daa517]]
2021-03-12 01:53:26,019 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Float defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@66790fc]
2021-03-12 01:53:26,019 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@44daa517]
2021-03-12 01:53:26,114 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:53:26,115 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).get(B.get()).compareTo(-112)
2021-03-12 01:53:26,115 [main:113] - Case = [@kotlin.jvm.JvmName public fun kotlin.Array<out kotlin.Byte>.sum(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4e4afcf]]
2021-03-12 01:53:26,115 [main:149] - GENERATING call of type @kotlin.jvm.JvmName public fun kotlin.Array<out kotlin.Byte>.sum(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4e4afcf]
2021-03-12 01:53:26,115 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).sum()
2021-03-12 01:53:26,115 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@92dca8f], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7107ffd9]]
2021-03-12 01:53:26,115 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7107ffd9]
2021-03-12 01:53:26,115 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).size.takeLowestOneBit()
2021-03-12 01:53:26,115 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@92dca8f], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d8dcc4]]
2021-03-12 01:53:26,115 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d8dcc4]
2021-03-12 01:53:26,116 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).size.shl(B.get())
2021-03-12 01:53:26,116 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@92dca8f], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@28919d13]]
2021-03-12 01:53:26,116 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@28919d13]
2021-03-12 01:53:26,211 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:53:26,212 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).size.plus(-29)
2021-03-12 01:53:26,212 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@92dca8f], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6344afcd]]
2021-03-12 01:53:26,212 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6344afcd]
2021-03-12 01:53:26,212 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).size.shr(A.x)
2021-03-12 01:53:26,212 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Float defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@66790fc], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@47e67f87]]
2021-03-12 01:53:26,212 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Float defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@66790fc]
2021-03-12 01:53:26,212 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@47e67f87]
2021-03-12 01:53:26,213 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).get(A.x).toBits()
2021-03-12 01:53:26,213 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@92dca8f], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4fc424b]]
2021-03-12 01:53:26,213 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4fc424b]
2021-03-12 01:53:26,213 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).size.coerceIn(B.get(), B.x)
2021-03-12 01:53:26,213 [main:113] - Case = [public fun <@kotlin.internal.OnlyInputTypes T> kotlin.Array<out T>.indexOf(element: T): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@53a69315]]
2021-03-12 01:53:26,213 [main:149] - GENERATING call of type public fun <@kotlin.internal.OnlyInputTypes T> kotlin.Array<out T>.indexOf(element: T): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@53a69315]
2021-03-12 01:53:26,311 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).indexOf(null)
2021-03-12 01:53:26,311 [main:113] - Case = [public inline fun <T> kotlin.Array<out T>.indexOfLast(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7b1473a6]]
2021-03-12 01:53:26,311 [main:149] - GENERATING call of type public inline fun <T> kotlin.Array<out T>.indexOfLast(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7b1473a6]
2021-03-12 01:53:26,407 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-12 01:53:26,408 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:53:26,409 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).indexOfLast({a: T -> false})
2021-03-12 01:53:26,409 [main:61] - replacement of 1 of type Int is (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).indexOf(null)
2021-03-12 01:53:26,504 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:53:26,505 [main:53] - replacing (A.also { log += "getA();" }, A)
2021-03-12 01:53:26,505 [main:50] - replacing A.also { log += "getA();" } A
2021-03-12 01:53:26,505 [main:54] - Getting value of type A
2021-03-12 01:53:26,602 [main:302] - generating value of type = A false depth = 0
2021-03-12 01:53:26,603 [main:112] - generating klass A text = object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}
2021-03-12 01:53:26,774 [main:58] - GENERATED VALUE OF TYPE A = A
2021-03-12 01:53:26,774 [main:61] - GENERATED IS CALL =false
2021-03-12 01:53:26,895 [main:67] - randomType = Long?
2021-03-12 01:53:27,023 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:53:27,110 [main:106] - GETTING A from Int
2021-03-12 01:53:27,166 [main:106] - GETTING A from Int
2021-03-12 01:53:27,167 [main:106] - GETTING A from Int
2021-03-12 01:53:27,168 [main:106] - GETTING A from String
2021-03-12 01:53:27,195 [main:106] - GETTING A from Array<Float>
2021-03-12 01:53:27,211 [main:113] - Case = [public fun <T, A : kotlin.text.Appendable> kotlin.Array<out T>.joinTo(buffer: A, separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): A defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@ef88b6d]]
2021-03-12 01:53:27,211 [main:149] - GENERATING call of type public fun <T, A : kotlin.text.Appendable> kotlin.Array<out T>.joinTo(buffer: A, separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): A defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@ef88b6d]
2021-03-12 01:53:27,307 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:53:27,407 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:53:27,504 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 01:53:27,505 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 01:53:27,696 [main:302] - generating value of type = String true depth = 3
2021-03-12 01:53:27,697 [main:95] - GENERATED = StringBuilder("qhxht")
2021-03-12 01:53:27,790 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:53:27,887 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 01:53:27,889 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 01:53:28,086 [main:302] - generating value of type = String true depth = 3
2021-03-12 01:53:28,087 [main:95] - GENERATED = StringBuilder("nxzsl")
2021-03-12 01:53:28,184 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:53:28,334 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:53:28,446 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 01:53:28,447 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 01:53:28,565 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:53:28,566 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:53:28,769 [main:302] - generating value of type = Int true depth = 4
2021-03-12 01:53:28,770 [main:95] - GENERATED = StringBuilder(757655148)
2021-03-12 01:53:28,770 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).joinTo(getA(), "wzkwf", StringBuilder("qhxht"), StringBuilder("nxzsl"), -1510370519, "uzmyy", {a: T -> StringBuilder(757655148)})
2021-03-12 01:53:28,770 [main:61] - replacement of A.also { log += "getA();" } of type A is A
2021-03-12 01:53:28,870 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 01:53:28,870 [main:66] - Compilation checking started
2021-03-12 01:53:29,260 [main:53] - Result = true
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also {a: T -> print("kaczm")}

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != ('㣝').toFloat().compareTo(-117)) throw AssertionError((actual).toInt().toString(A.x))
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $(A.x).toString(actual)")
}

object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also {a: Int -> repeat(-445802008, {a: Int -> println("nebdx")})}

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $(value).compareTo(x).sign, $i3, $value);"
        x = value
    }
}

fun getB() = B.also {a: B -> require(false, { "nyaed"})}

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", (linkedSetOf<A>(A)).size.shl(B.x), "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { 1997282016}

    doTest("++getB()[1, 2, 3]", 1, (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).contentToString()) {
        (B.x).div(-25)
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { (9107430422333898917.toULong()).compareTo(12.toUByte()).takeLowestOneBit() }

    return "OK"
}


2021-03-12 01:53:29,261 [main:53] - replacing (logged((B.get()).toShort().compareTo(-86)), Int)
2021-03-12 01:53:29,261 [main:50] - replacing logged((B.get()).toShort().compareTo(-86)) Int
2021-03-12 01:53:29,261 [main:54] - Getting value of type Int
2021-03-12 01:53:29,364 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:53:29,365 [main:58] - GENERATED VALUE OF TYPE Int = 1241168044
2021-03-12 01:53:29,365 [main:61] - GENERATED IS CALL =false
2021-03-12 01:53:29,368 [main:67] - randomType = A
2021-03-12 01:53:29,461 [main:302] - generating value of type = A false depth = 0
2021-03-12 01:53:29,462 [main:112] - generating klass A text = object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}
2021-03-12 01:53:29,467 [main:78] - Generated call from random type = (A).x
2021-03-12 01:53:29,468 [main:106] - GETTING Int from Array<Float>
2021-03-12 01:53:29,477 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@92dca8f], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@48efa366]]
2021-03-12 01:53:29,477 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@48efa366]
2021-03-12 01:53:29,478 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).size.dec()
2021-03-12 01:53:29,478 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@92dca8f], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@77efaf86]]
2021-03-12 01:53:29,478 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@77efaf86]
2021-03-12 01:53:29,567 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:53:29,569 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).size.compareTo(-34)
2021-03-12 01:53:29,569 [main:113] - Case = [@kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentHashCode(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@77045c4]]
2021-03-12 01:53:29,569 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentHashCode(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@77045c4]
2021-03-12 01:53:29,569 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).contentHashCode()
2021-03-12 01:53:29,569 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@92dca8f], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5d605014]]
2021-03-12 01:53:29,569 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5d605014]
2021-03-12 01:53:29,569 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).size.countLeadingZeroBits()
2021-03-12 01:53:29,569 [main:113] - Case = [@kotlin.jvm.JvmName public fun kotlin.Array<out kotlin.Byte>.sum(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4e4afcf]]
2021-03-12 01:53:29,569 [main:149] - GENERATING call of type @kotlin.jvm.JvmName public fun kotlin.Array<out kotlin.Byte>.sum(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4e4afcf]
2021-03-12 01:53:29,570 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).sum()
2021-03-12 01:53:29,570 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Float defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@66790fc], public open fun toInt(): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@55a9d905]]
2021-03-12 01:53:29,570 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Float defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@66790fc]
2021-03-12 01:53:29,570 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@55a9d905]
2021-03-12 01:53:29,570 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).get(A.x).toInt()
2021-03-12 01:53:29,570 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@92dca8f], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7b59aa7b]]
2021-03-12 01:53:29,570 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7b59aa7b]
2021-03-12 01:53:29,570 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).size.countOneBits()
2021-03-12 01:53:29,570 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@92dca8f], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4f6b2741]]
2021-03-12 01:53:29,570 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4f6b2741]
2021-03-12 01:53:29,660 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:53:29,661 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).size.and(1480514333)
2021-03-12 01:53:29,662 [main:113] - Case = [public fun <@kotlin.internal.OnlyInputTypes T> kotlin.Array<out T>.lastIndexOf(element: T): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1daaed00]]
2021-03-12 01:53:29,662 [main:149] - GENERATING call of type public fun <@kotlin.internal.OnlyInputTypes T> kotlin.Array<out T>.lastIndexOf(element: T): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1daaed00]
2021-03-12 01:53:29,753 [main:302] - generating value of type = T false depth = 0
2021-03-12 01:53:29,850 [main:43] - GENERATING CALL OF fun <T> requireNotNull(value: A, lazyMessage: ()->kotlin.Any): T = TODO()
2021-03-12 01:53:29,851 [main:61] - WITHOUT TYPE PARAMS = fun <T> requireNotNull(value: A, lazyMessage: ()->kotlin.Any): T = TODO()
2021-03-12 01:53:30,072 [main:302] - generating value of type = A false depth = 3
2021-03-12 01:53:30,072 [main:112] - generating klass A text = object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}
2021-03-12 01:53:30,073 [main:302] - generating value of type = Function0<Any> false depth = 3
2021-03-12 01:53:30,073 [main:302] - generating value of type = Any false depth = 4
2021-03-12 01:53:30,074 [main:95] - GENERATED = requireNotNull<A>(A, { "dqbzb"})
2021-03-12 01:53:30,074 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).lastIndexOf(requireNotNull<A>(A, { "dqbzb"}))
2021-03-12 01:53:30,074 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.sumOf(selector: (T) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@21aab942]]
2021-03-12 01:53:30,074 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.sumOf(selector: (T) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@21aab942]
2021-03-12 01:53:30,182 [main:302] - generating value of type = Function1<T, Int> false depth = 0
2021-03-12 01:53:30,183 [main:302] - generating value of type = Int true depth = 1
2021-03-12 01:53:30,184 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).sumOf({a: T -> -1970910540})
2021-03-12 01:53:30,184 [main:61] - replacement of logged((B.get()).toShort().compareTo(-86)) of type Int is (A).x
2021-03-12 01:53:30,276 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:53:30,277 [main:53] - replacing (value, T)
2021-03-12 01:53:30,277 [main:50] - replacing value T
2021-03-12 01:53:30,277 [main:54] - Getting value of type T
2021-03-12 01:53:30,369 [main:302] - generating value of type = T false depth = 0
2021-03-12 01:53:31,730 [main:43] - GENERATING CALL OF fun <T> requireNotNull(value: Map<LinkedHashMap<UShort, Double>, Function1<B?, Triple<UInt, List<Int?>, ArrayDeque<B>>?>>, lazyMessage: ()->kotlin.Any): T = TODO()
2021-03-12 01:53:31,732 [main:61] - WITHOUT TYPE PARAMS = fun <T> requireNotNull(value: Map<LinkedHashMap<UShort, Double>, Function1<B?, Triple<UInt, List<Int?>, ArrayDeque<B>>?>>, lazyMessage: ()->kotlin.Any): T = TODO()
2021-03-12 01:53:32,089 [main:302] - generating value of type = Map<LinkedHashMap<UShort, Double>, Function1<B?, Triple<UInt, List<Int?>, ArrayDeque<B>>?>> false depth = 3
2021-03-12 01:53:32,193 [main:43] - GENERATING CALL OF fun <K, V> mutableMapOf(): Map<LkedHashMap<UShort, Double>, Function1<B?, Triple<UInt, List<Int?>, ArrayDeque<B>>?>> = TODO()
2021-03-12 01:53:32,195 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> mutableMapOf(): Map<LkedHashMap<UShort, Double>, Function1<B?, Triple<UInt, List<Int?>, ArrayDeque<B>>?>> = TODO()
2021-03-12 01:53:32,292 [main:95] - GENERATED = mutableMapOf<LinkedHashMap<UShort, Double>, Function1<B?, Triple<UInt, List<Int?>, ArrayDeque<B>>?>>()
2021-03-12 01:53:32,292 [main:302] - generating value of type = Function0<Any> false depth = 3
2021-03-12 01:53:32,293 [main:302] - generating value of type = Any false depth = 4
2021-03-12 01:53:32,294 [main:95] - GENERATED = requireNotNull<Map<LinkedHashMap<UShort, Double>, Function1<B?, Triple<UInt, List<Int?>, ArrayDeque<B>>?>>>(mutableMapOf<LinkedHashMap<UShort, Double>, Function1<B?, Triple<UInt, List<Int?>, ArrayDeque<B>>?>>(), { "wqwcs"})
2021-03-12 01:53:32,294 [main:58] - GENERATED VALUE OF TYPE T = requireNotNull<Map<LinkedHashMap<UShort, Double>, Function1<B?, Triple<UInt, List<Int?>, ArrayDeque<B>>?>>>(mutableMapOf<LinkedHashMap<UShort, Double>, Function1<B?, Triple<UInt, List<Int?>, ArrayDeque<B>>?>>(), { "wqwcs"})
2021-03-12 01:53:32,294 [main:61] - GENERATED IS CALL =true
2021-03-12 01:53:32,297 [main:67] - randomType = A
2021-03-12 01:53:32,388 [main:302] - generating value of type = A false depth = 0
2021-03-12 01:53:32,389 [main:112] - generating klass A text = object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}
2021-03-12 01:53:32,394 [main:106] - GETTING T from Int
2021-03-12 01:53:32,423 [main:106] - GETTING T from Int
2021-03-12 01:53:32,424 [main:106] - GETTING T from B
2021-03-12 01:53:32,429 [main:106] - GETTING T from Int
2021-03-12 01:53:32,430 [main:106] - GETTING T from Array<Float>
2021-03-12 01:53:32,439 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun <T> kotlin.Array<out T>.component1(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@69fe3c4c]]
2021-03-12 01:53:32,440 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun <T> kotlin.Array<out T>.component1(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@69fe3c4c]
2021-03-12 01:53:32,440 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f})))?.component1()
2021-03-12 01:53:32,440 [main:113] - Case = [public fun <T> kotlin.Array<out T>.single(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@49bdd957]]
2021-03-12 01:53:32,440 [main:149] - GENERATING call of type public fun <T> kotlin.Array<out T>.single(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@49bdd957]
2021-03-12 01:53:32,440 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f})))?.single()
2021-03-12 01:53:32,440 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun <T> kotlin.Array<out T>.component3(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3867e848]]
2021-03-12 01:53:32,440 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun <T> kotlin.Array<out T>.component3(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3867e848]
2021-03-12 01:53:32,441 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f})))?.component3()
2021-03-12 01:53:32,441 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.random(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5f196dfe]]
2021-03-12 01:53:32,441 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.random(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5f196dfe]
2021-03-12 01:53:32,441 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f})))?.random()
2021-03-12 01:53:32,441 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun <T> kotlin.Array<out T>.component5(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@77e1f2a2]]
2021-03-12 01:53:32,441 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun <T> kotlin.Array<out T>.component5(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@77e1f2a2]
2021-03-12 01:53:32,441 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f})))?.component5()
2021-03-12 01:53:32,441 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun <T> kotlin.Array<out T>.component2(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5f3b0da6]]
2021-03-12 01:53:32,441 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun <T> kotlin.Array<out T>.component2(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5f3b0da6]
2021-03-12 01:53:32,441 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f})))?.component2()
2021-03-12 01:53:32,441 [main:113] - Case = [public fun <T> kotlin.Array<out T>.first(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@130b5b00]]
2021-03-12 01:53:32,442 [main:149] - GENERATING call of type public fun <T> kotlin.Array<out T>.first(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@130b5b00]
2021-03-12 01:53:32,442 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f})))?.first()
2021-03-12 01:53:32,442 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.elementAtOrElse(index: kotlin.Int, defaultValue: (kotlin.Int) -> T): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3df3c2d2]]
2021-03-12 01:53:32,442 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.elementAtOrElse(index: kotlin.Int, defaultValue: (kotlin.Int) -> T): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3df3c2d2]
2021-03-12 01:53:32,531 [main:302] - generating value of type = Function1<Int, T> false depth = 0
2021-03-12 01:53:32,532 [main:302] - generating value of type = T false depth = 1
2021-03-12 01:53:32,651 [main:43] - GENERATING CALL OF fun <T> minOf(a: ULong, b: ULong): T = TODO()
2021-03-12 01:53:32,653 [main:61] - WITHOUT TYPE PARAMS = fun <T> minOf(a: ULong, b: ULong): T = TODO()
2021-03-12 01:53:32,750 [main:302] - generating value of type = ULong true depth = 4
2021-03-12 01:53:32,751 [main:302] - generating value of type = ULong true depth = 4
2021-03-12 01:53:32,752 [main:95] - GENERATED = minOf<ULong>(971430387160938925.toULong(), 1241709703650649544.toULong())
2021-03-12 01:53:32,752 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f})))?.elementAtOrElse(A.x, {a: Int -> minOf<ULong>(971430387160938925.toULong(), 1241709703650649544.toULong())})
2021-03-12 01:53:32,753 [main:113] - Case = [public fun <T> kotlin.Array<out T>.elementAt(index: kotlin.Int): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@527864c8]]
2021-03-12 01:53:32,753 [main:149] - GENERATING call of type public fun <T> kotlin.Array<out T>.elementAt(index: kotlin.Int): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@527864c8]
2021-03-12 01:53:32,753 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f})))?.elementAt(A.x)
2021-03-12 01:53:32,753 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.getOrElse(index: kotlin.Int, defaultValue: (kotlin.Int) -> T): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@d28b90b]]
2021-03-12 01:53:32,753 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.getOrElse(index: kotlin.Int, defaultValue: (kotlin.Int) -> T): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@d28b90b]
2021-03-12 01:53:32,864 [main:302] - generating value of type = Function1<Int, T> false depth = 0
2021-03-12 01:53:32,865 [main:302] - generating value of type = T false depth = 1
2021-03-12 01:53:32,964 [main:43] - GENERATING CALL OF fun <T> minOf(a: Comparable<T>, other: Comparable<T>): T = TODO()
2021-03-12 01:53:32,965 [main:61] - WITHOUT TYPE PARAMS = fun <T> minOf(a: Comparable<T>, other: Comparable<T>): T = TODO()
2021-03-12 01:53:33,058 [main:302] - generating value of type = Comparable<T> false depth = 4
2021-03-12 01:53:33,063 [main:302] - generating value of type = Comparable<T> false depth = 4
2021-03-12 01:53:33,067 [main:95] - GENERATED = minOf<Comparable<T>>(38.toUByte(), 21842694.toUInt())
2021-03-12 01:53:33,068 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f})))?.getOrElse(A.x, {a: Int -> minOf<Comparable<T>>(38.toUByte(), 21842694.toUInt())})
2021-03-12 01:53:33,068 [main:61] - replacement of value of type T is (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f})))?.component2()
2021-03-12 01:53:33,158 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 01:53:33,159 [main:53] - replacing (test(), Int)
2021-03-12 01:53:33,159 [main:50] - replacing test() Int
2021-03-12 01:53:33,159 [main:54] - Getting value of type Int
2021-03-12 01:53:33,259 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:53:33,259 [main:58] - GENERATED VALUE OF TYPE Int = 1853425067
2021-03-12 01:53:33,260 [main:61] - GENERATED IS CALL =false
2021-03-12 01:53:33,353 [main:67] - randomType = UInt
2021-03-12 01:53:33,443 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 01:53:33,472 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@2825e334]
2021-03-12 01:53:33,562 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 01:53:33,563 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@35754437]
2021-03-12 01:53:33,655 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:53:33,656 [main:78] - Generated call from random type = (1613922177.toUInt()).compareTo(45.toUByte()).coerceAtLeast(-845415303)
2021-03-12 01:53:33,656 [main:106] - GETTING Int from Int
2021-03-12 01:53:33,692 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@77efaf86]]
2021-03-12 01:53:33,692 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:53:33,785 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:53:33,786 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@77efaf86]
2021-03-12 01:53:33,937 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:53:33,938 [main:117] - GENERATED CALL = (B.x).compareTo(361997451).compareTo(-2)
2021-03-12 01:53:33,938 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2fba18e9], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@44daa517]]
2021-03-12 01:53:33,938 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2fba18e9]
2021-03-12 01:53:33,938 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@44daa517]
2021-03-12 01:53:34,040 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:53:34,041 [main:117] - GENERATED CALL = (B.x).toFloat().compareTo(-127)
2021-03-12 01:53:34,041 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@788cd72f]]
2021-03-12 01:53:34,041 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:53:34,041 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@788cd72f]
2021-03-12 01:53:34,041 [main:117] - GENERATED CALL = (B.x).toInt().xor(expected)
2021-03-12 01:53:34,041 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5958298b], public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@64c33b37]]
2021-03-12 01:53:34,041 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5958298b]
2021-03-12 01:53:34,149 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:53:34,150 [main:117] - GENERATED CALL = (B.x).rangeTo(-26).endInclusive
2021-03-12 01:53:34,150 [main:113] - Case = [public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4f6b2741]]
2021-03-12 01:53:34,150 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4f6b2741]
2021-03-12 01:53:34,150 [main:117] - GENERATED CALL = (B.x).and(B.get())
2021-03-12 01:53:34,151 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5958298b], public open val start: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@786533ac]]
2021-03-12 01:53:34,151 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5958298b]
2021-03-12 01:53:34,249 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:53:34,250 [main:117] - GENERATED CALL = (B.x).rangeTo(115).start
2021-03-12 01:53:34,250 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@35754437]]
2021-03-12 01:53:34,250 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:53:34,250 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@35754437]
2021-03-12 01:53:34,353 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:53:34,354 [main:117] - GENERATED CALL = (B.x).compareTo(A.x).coerceAtLeast(-70059747)
2021-03-12 01:53:34,355 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2fba18e9], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Float.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@29571bd7]]
2021-03-12 01:53:34,355 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2fba18e9]
2021-03-12 01:53:34,355 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Float.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@29571bd7]
2021-03-12 01:53:34,355 [main:117] - GENERATED CALL = (B.x).toFloat().roundToInt()
2021-03-12 01:53:34,355 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@259bc032]]
2021-03-12 01:53:34,355 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73]
2021-03-12 01:53:34,445 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:53:34,446 [main:117] - GENERATED CALL = (B.x).div(-8456256272801641189).sign
2021-03-12 01:53:34,446 [main:113] - Case = [public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@48efa366]]
2021-03-12 01:53:34,446 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@48efa366]
2021-03-12 01:53:34,446 [main:117] - GENERATED CALL = (B.x).dec()
2021-03-12 01:53:34,446 [main:61] - replacement of test() of type Int is (B.x).div(-8456256272801641189).sign
2021-03-12 01:53:34,535 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:53:34,535 [main:66] - Compilation checking started
2021-03-12 01:53:34,755 [main:49] - Result = false
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also {a: T -> print("kaczm")}

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = (B.x).div(-8456256272801641189).sign
    if (actual != ('㣝').toFloat().compareTo(-117)) throw AssertionError((actual).toInt().toString(A.x))
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $(A.x).toString(actual)")
}

object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also {a: Int -> repeat(-445802008, {a: Int -> println("nebdx")})}

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $(value).compareTo(x).sign, $i3, $value);"
        x = value
    }
}

fun getB() = B.also {a: B -> require(false, { "nyaed"})}

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", (linkedSetOf<A>(A)).size.shl(B.x), "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { 1997282016}

    doTest("++getB()[1, 2, 3]", 1, (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).contentToString()) {
        (B.x).div(-25)
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { (9107430422333898917.toULong()).compareTo(12.toUByte()).takeLowestOneBit() }

    return "OK"
}


2021-03-12 01:53:34,756 [main:53] - replacing (log, String)
2021-03-12 01:53:34,757 [main:50] - replacing log String
2021-03-12 01:53:34,757 [main:54] - Getting value of type String
2021-03-12 01:53:34,848 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:53:34,848 [main:58] - GENERATED VALUE OF TYPE String = "ohbkx"
2021-03-12 01:53:34,849 [main:61] - GENERATED IS CALL =false
2021-03-12 01:53:34,942 [main:67] - randomType = UInt
2021-03-12 01:53:35,031 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 01:53:35,060 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@1e95ea7e]
2021-03-12 01:53:35,060 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7dbce7d4]
2021-03-12 01:53:35,151 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:53:35,152 [main:78] - Generated call from random type = (424940877.toUInt()).toUByte().toString(-85791483)
2021-03-12 01:53:35,153 [main:106] - GETTING String from A
2021-03-12 01:53:35,159 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@3414cfd1], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:53:35,159 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:53:35,159 [main:117] - GENERATED CALL = (getA()).x.toString(B.x)
2021-03-12 01:53:35,159 [main:61] - replacement of log of type String is (424940877.toUInt()).toUByte().toString(-85791483)
2021-03-12 01:53:35,253 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:53:35,253 [main:66] - Compilation checking started
2021-03-12 01:53:35,514 [main:49] - Result = false
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also {a: T -> print("kaczm")}

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != ('㣝').toFloat().compareTo(-117)) throw AssertionError((actual).toInt().toString(A.x))
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $(A.x).toString(actual)")
}

object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            (424940877.toUInt()).toUByte().toString(-85791483) += "set-A.x;"
            field = value
        }

}

fun getA() = A

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also {a: Int -> repeat(-445802008, {a: Int -> println("nebdx")})}

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $(value).compareTo(x).sign, $i3, $value);"
        x = value
    }
}

fun getB() = B.also {a: B -> require(false, { "nyaed"})}

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", (linkedSetOf<A>(A)).size.shl(B.x), "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { 1997282016}

    doTest("++getB()[1, 2, 3]", 1, (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).contentToString()) {
        (B.x).div(-25)
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { (9107430422333898917.toULong()).compareTo(12.toUByte()).takeLowestOneBit() }

    return "OK"
}


2021-03-12 01:53:35,515 [main:53] - replacing (log, String)
2021-03-12 01:53:35,515 [main:50] - replacing log String
2021-03-12 01:53:35,515 [main:54] - Getting value of type String
2021-03-12 01:53:35,605 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:53:35,606 [main:58] - GENERATED VALUE OF TYPE String = "jgrzg"
2021-03-12 01:53:35,606 [main:61] - GENERATED IS CALL =false
2021-03-12 01:53:35,609 [main:67] - randomType = A
2021-03-12 01:53:35,698 [main:302] - generating value of type = A false depth = 0
2021-03-12 01:53:35,698 [main:112] - generating klass A text = object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}
2021-03-12 01:53:35,704 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:53:35,704 [main:78] - Generated call from random type = (A).x.toString(A.x)
2021-03-12 01:53:35,704 [main:61] - replacement of log of type String is (A).x.toString(A.x)
2021-03-12 01:53:35,793 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:53:35,795 [main:53] - replacing ("++getB()[1, 2, 3]", String)
2021-03-12 01:53:35,795 [main:50] - replacing "++getB()[1, 2, 3]" String
2021-03-12 01:53:35,795 [main:54] - Getting value of type String
2021-03-12 01:53:35,888 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:53:35,889 [main:58] - GENERATED VALUE OF TYPE String = "ejxem"
2021-03-12 01:53:35,890 [main:61] - GENERATED IS CALL =false
2021-03-12 01:53:35,891 [main:67] - randomType = Float
2021-03-12 01:53:35,982 [main:302] - generating value of type = Float true depth = 0
2021-03-12 01:53:36,013 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@75043e31]
2021-03-12 01:53:36,013 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]
2021-03-12 01:53:36,013 [main:78] - Generated call from random type = (0.093165815f).toChar().titlecase()
2021-03-12 01:53:36,014 [main:106] - GETTING String from B
2021-03-12 01:53:36,020 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@6181ff7e], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:53:36,020 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:53:36,111 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:53:36,112 [main:117] - GENERATED CALL = (getB()).x.toString(1177719665)
2021-03-12 01:53:36,112 [main:61] - replacement of "++getB()[1, 2, 3]" of type String is (0.093165815f).toChar().titlecase()
2021-03-12 01:53:36,202 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:53:36,202 [main:66] - Compilation checking started
2021-03-12 01:53:36,575 [main:53] - Result = true
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also {a: T -> print("kaczm")}

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != ('㣝').toFloat().compareTo(-117)) throw AssertionError((actual).toInt().toString(A.x))
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $(A.x).toString(actual)")
}

object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also {a: Int -> repeat(-445802008, {a: Int -> println("nebdx")})}

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $(value).compareTo(x).sign, $i3, $value);"
        x = value
    }
}

fun getB() = B.also {a: B -> require(false, { "nyaed"})}

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", (linkedSetOf<A>(A)).size.shl(B.x), "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { 1997282016}

    doTest((0.093165815f).toChar().titlecase(), 1, (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).contentToString()) {
        (B.x).div(-25)
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { (9107430422333898917.toULong()).compareTo(12.toUByte()).takeLowestOneBit() }

    return "OK"
}


2021-03-12 01:53:36,576 [main:53] - replacing (getA().x--, Int)
2021-03-12 01:53:36,576 [main:50] - replacing getA().x-- Int
2021-03-12 01:53:36,576 [main:54] - Getting value of type Int
2021-03-12 01:53:36,675 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:53:36,675 [main:58] - GENERATED VALUE OF TYPE Int = -1924624667
2021-03-12 01:53:36,676 [main:61] - GENERATED IS CALL =false
2021-03-12 01:53:36,679 [main:67] - randomType = A
2021-03-12 01:53:36,772 [main:302] - generating value of type = A false depth = 0
2021-03-12 01:53:36,772 [main:112] - generating klass A text = object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}
2021-03-12 01:53:36,778 [main:78] - Generated call from random type = (A).x.sign
2021-03-12 01:53:36,779 [main:106] - GETTING Int from B
2021-03-12 01:53:36,785 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@6181ff7e], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b28a80]]
2021-03-12 01:53:36,785 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b28a80]
2021-03-12 01:53:36,879 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:53:36,880 [main:117] - GENERATED CALL = (getB()).x.rem(66)
2021-03-12 01:53:36,880 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@6181ff7e], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@35754437]]
2021-03-12 01:53:36,880 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@35754437]
2021-03-12 01:53:36,880 [main:117] - GENERATED CALL = (getB()).x.coerceAtLeast(B.x)
2021-03-12 01:53:36,881 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@6181ff7e], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4fc424b]]
2021-03-12 01:53:36,881 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4fc424b]
2021-03-12 01:53:36,881 [main:117] - GENERATED CALL = (getB()).x.coerceIn(B.x, B.get())
2021-03-12 01:53:36,881 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@6181ff7e]]
2021-03-12 01:53:36,881 [main:117] - GENERATED CALL = (getB()).x
2021-03-12 01:53:36,881 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@6181ff7e], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e6ef7e7]]
2021-03-12 01:53:36,881 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e6ef7e7]
2021-03-12 01:53:36,881 [main:117] - GENERATED CALL = (getB()).x.unaryPlus()
2021-03-12 01:53:36,881 [main:113] - Case = [public final operator fun get(i1: kotlin.Int, i2: kotlin.Int, i3: kotlin.Int): kotlin.Int defined in B[SimpleFunctionDescriptorImpl@5a611e82]]
2021-03-12 01:53:36,881 [main:149] - GENERATING call of type public final operator fun get(i1: kotlin.Int, i2: kotlin.Int, i3: kotlin.Int): kotlin.Int defined in B[SimpleFunctionDescriptorImpl@5a611e82]
2021-03-12 01:53:36,882 [main:117] - GENERATED CALL = (getB()).get(A.x, A.x, B.x)
2021-03-12 01:53:36,882 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@6181ff7e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@41d04a80]]
2021-03-12 01:53:36,882 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@41d04a80]
2021-03-12 01:53:36,882 [main:117] - GENERATED CALL = (getB()).x.rotateLeft(B.x)
2021-03-12 01:53:36,882 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@6181ff7e], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@472c0627]]
2021-03-12 01:53:36,882 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@472c0627]
2021-03-12 01:53:36,977 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:53:36,978 [main:117] - GENERATED CALL = (getB()).x.div(-70)
2021-03-12 01:53:36,978 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@6181ff7e], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d8dcc4]]
2021-03-12 01:53:36,978 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d8dcc4]
2021-03-12 01:53:37,071 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:53:37,072 [main:117] - GENERATED CALL = (getB()).x.shl(32644160)
2021-03-12 01:53:37,072 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@6181ff7e], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@27f1a51e]]
2021-03-12 01:53:37,072 [main:117] - GENERATED CALL = (getB()).x.absoluteValue
2021-03-12 01:53:37,072 [main:61] - replacement of getA().x-- of type Int is (A).x.sign
2021-03-12 01:53:37,187 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:53:37,188 [main:53] - replacing (logged((B.x).compareTo(A.x).ushr(1265031656)), Int)
2021-03-12 01:53:37,188 [main:50] - replacing logged((B.x).compareTo(A.x).ushr(1265031656)) Int
2021-03-12 01:53:37,188 [main:54] - Getting value of type Int
2021-03-12 01:53:37,293 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:53:37,294 [main:58] - GENERATED VALUE OF TYPE Int = 1607520576
2021-03-12 01:53:37,294 [main:61] - GENERATED IS CALL =false
2021-03-12 01:53:37,510 [main:67] - randomType = Byte?
2021-03-12 01:53:37,603 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:53:37,642 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7f5ee33d]
2021-03-12 01:53:37,733 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:53:37,734 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@41d04a80]
2021-03-12 01:53:37,822 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:53:37,823 [main:78] - Generated call from random type = (24)?.compareTo(-118).rotateLeft(-1655784644)
2021-03-12 01:53:37,824 [main:106] - GETTING Int from Array<Float>
2021-03-12 01:53:37,835 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@92dca8f], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@406267da]]
2021-03-12 01:53:37,835 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).size.sign
2021-03-12 01:53:37,835 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@92dca8f], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6344afcd]]
2021-03-12 01:53:37,835 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6344afcd]
2021-03-12 01:53:37,835 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).size.shr(A.x)
2021-03-12 01:53:37,836 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@92dca8f], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3854cce]]
2021-03-12 01:53:37,836 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3854cce]
2021-03-12 01:53:37,836 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).size.unaryMinus()
2021-03-12 01:53:37,836 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@92dca8f], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@48efa366]]
2021-03-12 01:53:37,836 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@48efa366]
2021-03-12 01:53:37,836 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).size.dec()
2021-03-12 01:53:37,836 [main:113] - Case = [public val <T> kotlin.Array<out T>.lastIndex: kotlin.Int defined in kotlin.collections[DeserializedPropertyDescriptor@40bdb06d]]
2021-03-12 01:53:37,836 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).lastIndex
2021-03-12 01:53:37,836 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.sumOf(selector: (T) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@21aab942]]
2021-03-12 01:53:37,836 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.sumOf(selector: (T) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@21aab942]
2021-03-12 01:53:37,925 [main:302] - generating value of type = Function1<T, Int> false depth = 0
2021-03-12 01:53:37,926 [main:302] - generating value of type = Int true depth = 1
2021-03-12 01:53:37,927 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).sumOf({a: T -> 1751474502})
2021-03-12 01:53:37,927 [main:113] - Case = [public final operator fun get(index: kotlin.Int): kotlin.Float defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@66790fc], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63ef0ce]]
2021-03-12 01:53:37,927 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Float defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@66790fc]
2021-03-12 01:53:38,017 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:53:38,018 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63ef0ce]
2021-03-12 01:53:38,018 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).get(1129704983).toRawBits()
2021-03-12 01:53:38,018 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@92dca8f], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e6ef7e7]]
2021-03-12 01:53:38,018 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e6ef7e7]
2021-03-12 01:53:38,018 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).size.unaryPlus()
2021-03-12 01:53:38,018 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@92dca8f], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@472c0627]]
2021-03-12 01:53:38,019 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@472c0627]
2021-03-12 01:53:38,111 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:53:38,112 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).size.div(-30)
2021-03-12 01:53:38,112 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@92dca8f], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@15c2ea37]]
2021-03-12 01:53:38,112 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@15c2ea37]
2021-03-12 01:53:38,112 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).size.inv()
2021-03-12 01:53:38,112 [main:61] - replacement of logged((B.x).compareTo(A.x).ushr(1265031656)) of type Int is (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).get(1129704983).toRawBits()
2021-03-12 01:53:38,203 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:53:38,204 [main:53] - replacing (log, String)
2021-03-12 01:53:38,204 [main:50] - replacing log String
2021-03-12 01:53:38,204 [main:54] - Getting value of type String
2021-03-12 01:53:38,293 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:53:38,294 [main:58] - GENERATED VALUE OF TYPE String = "kxsfu"
2021-03-12 01:53:38,294 [main:61] - GENERATED IS CALL =false
2021-03-12 01:53:38,421 [main:67] - randomType = UInt
2021-03-12 01:53:38,517 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 01:53:38,555 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@7d0c1df7]
2021-03-12 01:53:38,556 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]
2021-03-12 01:53:38,659 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:53:38,660 [main:78] - Generated call from random type = (875842647.toUInt()).toShort().toString(992666739)
2021-03-12 01:53:38,661 [main:106] - GETTING String from Function0<Int>
2021-03-12 01:53:38,674 [main:113] - Case = [public abstract operator fun invoke(): kotlin.Int defined in kotlin.Function0[FunctionInvokeDescriptor@77cca343], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:53:38,675 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.Int defined in kotlin.Function0[FunctionInvokeDescriptor@77cca343]
2021-03-12 01:53:38,675 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:53:38,768 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:53:38,769 [main:117] - GENERATED CALL = (test).invoke().toString(-374791483)
2021-03-12 01:53:38,769 [main:61] - replacement of log of type String is (test).invoke().toString(-374791483)
2021-03-12 01:53:38,869 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:53:38,870 [main:66] - Compilation checking started
2021-03-12 01:53:39,270 [main:53] - Result = true
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also {a: T -> print("kaczm")}

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != ('㣝').toFloat().compareTo(-117)) throw AssertionError((actual).toInt().toString(A.x))
    if ((test).invoke().toString(-374791483) != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $(A.x).toString(actual)")
}

object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also {a: Int -> repeat(-445802008, {a: Int -> println("nebdx")})}

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $(value).compareTo(x).sign, $i3, $value);"
        x = value
    }
}

fun getB() = B.also {a: B -> require(false, { "nyaed"})}

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", (linkedSetOf<A>(A)).size.shl(B.x), "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { 1997282016}

    doTest((0.093165815f).toChar().titlecase(), 1, (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).contentToString()) {
        (B.x).div(-25)
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { (9107430422333898917.toULong()).compareTo(12.toUByte()).takeLowestOneBit() }

    return "OK"
}


2021-03-12 01:53:39,271 [main:53] - replacing (1, Int)
2021-03-12 01:53:39,272 [main:50] - replacing 1 Int
2021-03-12 01:53:39,272 [main:54] - Getting value of type Int
2021-03-12 01:53:39,373 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:53:39,374 [main:58] - GENERATED VALUE OF TYPE Int = -1019452869
2021-03-12 01:53:39,374 [main:61] - GENERATED IS CALL =false
2021-03-12 01:53:39,771 [main:67] - randomType = Function2<B, Set<A>, Collection<String>>
2021-03-12 01:53:39,772 [main:106] - GETTING Int from Int
2021-03-12 01:53:39,801 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3854cce]]
2021-03-12 01:53:39,802 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:53:39,891 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:53:39,892 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3854cce]
2021-03-12 01:53:39,892 [main:117] - GENERATED CALL = (x).compareTo(1021102216).unaryMinus()
2021-03-12 01:53:39,892 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36f2d9f6]]
2021-03-12 01:53:39,892 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60]
2021-03-12 01:53:39,892 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36f2d9f6]
2021-03-12 01:53:39,892 [main:117] - GENERATED CALL = (x).toShort().countTrailingZeroBits()
2021-03-12 01:53:39,893 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@153454d9]]
2021-03-12 01:53:39,893 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:53:39,983 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:53:39,984 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@153454d9]
2021-03-12 01:53:40,075 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:53:40,076 [main:117] - GENERATED CALL = (x).compareTo(-235521017).coerceAtMost(-1190217933)
2021-03-12 01:53:40,076 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b28a80]]
2021-03-12 01:53:40,076 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:53:40,076 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b28a80]
2021-03-12 01:53:40,211 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:53:40,212 [main:117] - GENERATED CALL = (x).compareTo(B.x).rem(61)
2021-03-12 01:53:40,212 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@32702e11]]
2021-03-12 01:53:40,213 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:53:40,213 [main:117] - GENERATED CALL = (x).toChar().code
2021-03-12 01:53:40,213 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@1ee9b128]]
2021-03-12 01:53:40,213 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e]
2021-03-12 01:53:40,213 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@1ee9b128]
2021-03-12 01:53:40,311 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:53:40,312 [main:117] - GENERATED CALL = (x).toLong().compareTo(-54)
2021-03-12 01:53:40,313 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@31b01837], @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@1348cb25]]
2021-03-12 01:53:40,313 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@31b01837]
2021-03-12 01:53:40,429 [main:302] - generating value of type = Double true depth = 0
2021-03-12 01:53:40,430 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@1348cb25]
2021-03-12 01:53:40,430 [main:117] - GENERATED CALL = (x).div(0.22070730615223233).roundToInt()
2021-03-12 01:53:40,430 [main:113] - Case = [public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5305e1c], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63ef0ce]]
2021-03-12 01:53:40,430 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5305e1c]
2021-03-12 01:53:40,525 [main:302] - generating value of type = Float true depth = 0
2021-03-12 01:53:40,526 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63ef0ce]
2021-03-12 01:53:40,526 [main:117] - GENERATED CALL = (x).div(0.7384615f).toRawBits()
2021-03-12 01:53:40,526 [main:113] - Case = [public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78080c68]]
2021-03-12 01:53:40,526 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78080c68]
2021-03-12 01:53:40,526 [main:117] - GENERATED CALL = (x).toInt()
2021-03-12 01:53:40,526 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@ac6f788]]
2021-03-12 01:53:40,526 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235]
2021-03-12 01:53:40,526 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@ac6f788]
2021-03-12 01:53:40,526 [main:117] - GENERATED CALL = (x).toByte().countOneBits()
2021-03-12 01:53:40,526 [main:61] - replacement of 1 of type Int is (x).compareTo(B.x).rem(61)
2021-03-12 01:53:40,616 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:53:40,617 [main:66] - Compilation checking started
2021-03-12 01:53:40,850 [main:49] - Result = false
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also {a: T -> print("kaczm")}

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != ('㣝').toFloat().compareTo(-117)) throw AssertionError((actual).toInt().toString(A.x))
    if ((test).invoke().toString(-374791483) != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $(A.x).toString(actual)")
}

object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also {a: Int -> repeat(-445802008, {a: Int -> println("nebdx")})}

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $(value).compareTo(x).sign, $i3, $value);"
        x = value
    }
}

fun getB() = B.also {a: B -> require(false, { "nyaed"})}

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", (linkedSetOf<A>(A)).size.shl(B.x), "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { 1997282016}

    doTest((0.093165815f).toChar().titlecase(), 1, (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).contentToString()) {
        (B.x).div(-25)
    }
    doTest("getB()[1, 2, 3].x--", (x).compareTo(B.x).rem(61), "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { (9107430422333898917.toULong()).compareTo(12.toUByte()).takeLowestOneBit() }

    return "OK"
}


2021-03-12 01:53:40,850 [main:53] - replacing (getB()[logged(1), (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).get(1129704983).toRawBits(), logged(3)], Int)
2021-03-12 01:53:40,850 [main:50] - replacing getB()[logged(1), (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).get(1129704983).toRawBits(), logged(3)] Int
2021-03-12 01:53:40,850 [main:54] - Getting value of type Int
2021-03-12 01:53:40,941 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:53:40,942 [main:58] - GENERATED VALUE OF TYPE Int = -1585131423
2021-03-12 01:53:40,942 [main:61] - GENERATED IS CALL =false
2021-03-12 01:53:41,046 [main:67] - randomType = Triple<Char, A, B>
2021-03-12 01:53:41,137 [main:302] - generating value of type = Triple<Char, A, B> false depth = 0
2021-03-12 01:53:41,232 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Char, second: A, third: B): Triple<Char, A, B> = TODO()
2021-03-12 01:53:41,234 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Char, second: A, third: B): Triple<Char, A, B> = TODO()
2021-03-12 01:53:41,325 [main:302] - generating value of type = Char true depth = 3
2021-03-12 01:53:41,326 [main:302] - generating value of type = A false depth = 3
2021-03-12 01:53:41,326 [main:112] - generating klass A text = object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}
2021-03-12 01:53:41,327 [main:302] - generating value of type = B false depth = 3
2021-03-12 01:53:41,327 [main:112] - generating klass B text = object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also {a: Int -> repeat(-445802008, {a: Int -> println("nebdx")})}

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $(value).compareTo(x).sign, $i3, $value);"
        x = value
    }
}
2021-03-12 01:53:41,328 [main:95] - GENERATED = Triple<Char, A, B>('䀜', A, B)
2021-03-12 01:53:41,340 [main:78] - Generated call from random type = (Triple<Char, A, B>('䀜', A, B)).first.code
2021-03-12 01:53:41,340 [main:106] - GETTING Int from Int
2021-03-12 01:53:41,373 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@35754437]]
2021-03-12 01:53:41,373 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:53:41,374 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@35754437]
2021-03-12 01:53:41,374 [main:117] - GENERATED CALL = (A.x).toInt().coerceAtLeast(B.get())
2021-03-12 01:53:41,374 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7107ffd9]]
2021-03-12 01:53:41,374 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7107ffd9]
2021-03-12 01:53:41,374 [main:117] - GENERATED CALL = (A.x).takeLowestOneBit()
2021-03-12 01:53:41,374 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3854cce]]
2021-03-12 01:53:41,374 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:53:41,374 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3854cce]
2021-03-12 01:53:41,374 [main:117] - GENERATED CALL = (A.x).toInt().unaryMinus()
2021-03-12 01:53:41,374 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5958298b], public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@64c33b37]]
2021-03-12 01:53:41,374 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5958298b]
2021-03-12 01:53:41,467 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:53:41,468 [main:117] - GENERATED CALL = (A.x).rangeTo(101).endInclusive
2021-03-12 01:53:41,469 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@75e04100]]
2021-03-12 01:53:41,469 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60]
2021-03-12 01:53:41,469 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@75e04100]
2021-03-12 01:53:41,558 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:53:41,559 [main:117] - GENERATED CALL = (A.x).toShort().rem(81)
2021-03-12 01:53:41,560 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ea6d3]]
2021-03-12 01:53:41,560 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:53:41,560 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ea6d3]
2021-03-12 01:53:41,560 [main:117] - GENERATED CALL = (A.x).toInt().rotateRight(B.get())
2021-03-12 01:53:41,560 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@788cd72f]]
2021-03-12 01:53:41,560 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:53:41,678 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:53:41,679 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@788cd72f]
2021-03-12 01:53:41,679 [main:117] - GENERATED CALL = (A.x).compareTo(-32858456).xor(B.get())
2021-03-12 01:53:41,679 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@395d0861]]
2021-03-12 01:53:41,679 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60]
2021-03-12 01:53:41,679 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@395d0861]
2021-03-12 01:53:41,679 [main:117] - GENERATED CALL = (A.x).toShort().countOneBits()
2021-03-12 01:53:41,679 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5958298b], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.ranges.IntRange.random(): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@473ae517]]
2021-03-12 01:53:41,679 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5958298b]
2021-03-12 01:53:41,778 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:53:41,779 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.ranges.IntRange.random(): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@473ae517]
2021-03-12 01:53:41,779 [main:117] - GENERATED CALL = (A.x).rangeTo(31).random()
2021-03-12 01:53:41,779 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@ac6f788]]
2021-03-12 01:53:41,779 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235]
2021-03-12 01:53:41,779 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@ac6f788]
2021-03-12 01:53:41,779 [main:117] - GENERATED CALL = (A.x).toByte().countOneBits()
2021-03-12 01:53:41,779 [main:61] - replacement of getB()[logged(1), (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).get(1129704983).toRawBits(), logged(3)] of type Int is (A.x).compareTo(-32858456).xor(B.get())
2021-03-12 01:53:41,899 [main:33] - Trying to replace Element(ARRAY_ACCESS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:53:41,901 [main:53] - replacing ("getA();get-A.x;set-A.x;", String)
2021-03-12 01:53:41,902 [main:50] - replacing "getA();get-A.x;set-A.x;" String
2021-03-12 01:53:41,902 [main:54] - Getting value of type String
2021-03-12 01:53:41,995 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:53:41,996 [main:58] - GENERATED VALUE OF TYPE String = "wronz"
2021-03-12 01:53:41,997 [main:61] - GENERATED IS CALL =false
2021-03-12 01:53:42,000 [main:67] - randomType = A
2021-03-12 01:53:42,095 [main:302] - generating value of type = A false depth = 0
2021-03-12 01:53:42,097 [main:112] - generating klass A text = object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}
2021-03-12 01:53:42,105 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:53:42,106 [main:78] - Generated call from random type = (A).x.toString(x)
2021-03-12 01:53:42,106 [main:106] - GETTING String from String
2021-03-12 01:53:42,140 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65792f68]]
2021-03-12 01:53:42,140 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65792f68]
2021-03-12 01:53:42,245 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:53:42,246 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:53:42,247 [main:117] - GENERATED CALL = (log).takeLastWhile({a: Char -> true})
2021-03-12 01:53:42,247 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4be590b9]]
2021-03-12 01:53:42,247 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4be590b9]
2021-03-12 01:53:42,247 [main:117] - GENERATED CALL = (log).capitalize()
2021-03-12 01:53:42,247 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d254a49]]
2021-03-12 01:53:42,247 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d254a49]
2021-03-12 01:53:42,336 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:53:42,337 [main:117] - GENERATED CALL = (log).padStart(x, '䰉')
2021-03-12 01:53:42,337 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39872086]]
2021-03-12 01:53:42,337 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39872086]
2021-03-12 01:53:42,427 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:53:42,428 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:53:42,429 [main:117] - GENERATED CALL = (log).dropLastWhile({a: Char -> false})
2021-03-12 01:53:42,429 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40fccd13]]
2021-03-12 01:53:42,429 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40fccd13]
2021-03-12 01:53:42,519 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:53:42,609 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:53:42,700 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:53:42,701 [main:117] - GENERATED CALL = (log).replaceFirst('ⅅ', 'ၐ', false)
2021-03-12 01:53:42,701 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55eeebea]]
2021-03-12 01:53:42,701 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55eeebea]
2021-03-12 01:53:42,701 [main:117] - GENERATED CALL = (log).trimEnd()
2021-03-12 01:53:42,701 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f903f1f]]
2021-03-12 01:53:42,701 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f903f1f]
2021-03-12 01:53:42,701 [main:117] - GENERATED CALL = (log).reversed()
2021-03-12 01:53:42,701 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b461c18]]
2021-03-12 01:53:42,701 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b461c18]
2021-03-12 01:53:42,796 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:53:42,797 [main:117] - GENERATED CALL = (log).substringBefore('匙', log)
2021-03-12 01:53:42,797 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@724ff4db]]
2021-03-12 01:53:42,797 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@724ff4db]
2021-03-12 01:53:42,888 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:53:42,889 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:53:42,890 [main:117] - GENERATED CALL = (log).takeWhile({a: Char -> false})
2021-03-12 01:53:42,890 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40ed279b]]
2021-03-12 01:53:42,890 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40ed279b]
2021-03-12 01:53:42,890 [main:117] - GENERATED CALL = (log).uppercase()
2021-03-12 01:53:42,890 [main:61] - replacement of "getA();get-A.x;set-A.x;" of type String is (log).uppercase()
2021-03-12 01:53:43,036 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:53:43,036 [main:66] - Compilation checking started
2021-03-12 01:53:43,515 [main:53] - Result = true
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also {a: T -> print("kaczm")}

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != ('㣝').toFloat().compareTo(-117)) throw AssertionError((actual).toInt().toString(A.x))
    if ((test).invoke().toString(-374791483) != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $(A.x).toString(actual)")
}

object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also {a: Int -> repeat(-445802008, {a: Int -> println("nebdx")})}

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $(value).compareTo(x).sign, $i3, $value);"
        x = value
    }
}

fun getB() = B.also {a: B -> require(false, { "nyaed"})}

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", (linkedSetOf<A>(A)).size.shl(B.x), "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, (log).uppercase()) { 1997282016}

    doTest((0.093165815f).toChar().titlecase(), 1, (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).contentToString()) {
        (B.x).div(-25)
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { (9107430422333898917.toULong()).compareTo(12.toUByte()).takeLowestOneBit() }

    return "OK"
}


2021-03-12 01:53:43,516 [main:53] - replacing (logged(1), Int)
2021-03-12 01:53:43,516 [main:50] - replacing logged(1) Int
2021-03-12 01:53:43,516 [main:54] - Getting value of type Int
2021-03-12 01:53:43,612 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:53:43,613 [main:58] - GENERATED VALUE OF TYPE Int = 1860503135
2021-03-12 01:53:43,613 [main:61] - GENERATED IS CALL =false
2021-03-12 01:53:43,805 [main:67] - randomType = Short?
2021-03-12 01:53:43,896 [main:302] - generating value of type = Short true depth = 0
2021-03-12 01:53:43,928 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:53:43,928 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@28919d13]
2021-03-12 01:53:44,018 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:53:44,019 [main:78] - Generated call from random type = (-4861)?.toInt().plus(41)
2021-03-12 01:53:44,020 [main:106] - GETTING Int from B
2021-03-12 01:53:44,027 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@6181ff7e], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3854cce]]
2021-03-12 01:53:44,027 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3854cce]
2021-03-12 01:53:44,027 [main:117] - GENERATED CALL = (getB()).x.unaryMinus()
2021-03-12 01:53:44,027 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@6181ff7e], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7107ffd9]]
2021-03-12 01:53:44,027 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7107ffd9]
2021-03-12 01:53:44,027 [main:117] - GENERATED CALL = (getB()).x.takeLowestOneBit()
2021-03-12 01:53:44,027 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@6181ff7e], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@788cd72f]]
2021-03-12 01:53:44,027 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@788cd72f]
2021-03-12 01:53:44,027 [main:117] - GENERATED CALL = (getB()).x.xor(B.x)
2021-03-12 01:53:44,027 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@6181ff7e], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2d1f1e5a]]
2021-03-12 01:53:44,028 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2d1f1e5a]
2021-03-12 01:53:44,123 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:53:44,124 [main:117] - GENERATED CALL = (getB()).x.or(-584144322)
2021-03-12 01:53:44,124 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@6181ff7e], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6344afcd]]
2021-03-12 01:53:44,124 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6344afcd]
2021-03-12 01:53:44,124 [main:117] - GENERATED CALL = (getB()).x.shr(B.x)
2021-03-12 01:53:44,124 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@6181ff7e], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1ffceeae]]
2021-03-12 01:53:44,124 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1ffceeae]
2021-03-12 01:53:44,124 [main:117] - GENERATED CALL = (getB()).x.countTrailingZeroBits()
2021-03-12 01:53:44,124 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@6181ff7e], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70b68745]]
2021-03-12 01:53:44,124 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70b68745]
2021-03-12 01:53:44,214 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:53:44,215 [main:117] - GENERATED CALL = (getB()).x.ushr(342288722)
2021-03-12 01:53:44,215 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@6181ff7e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@41d04a80]]
2021-03-12 01:53:44,215 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@41d04a80]
2021-03-12 01:53:44,215 [main:117] - GENERATED CALL = (getB()).x.rotateLeft(B.x)
2021-03-12 01:53:44,215 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@6181ff7e], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@153454d9]]
2021-03-12 01:53:44,215 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@153454d9]
2021-03-12 01:53:44,305 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:53:44,306 [main:117] - GENERATED CALL = (getB()).x.coerceAtMost(1032154970)
2021-03-12 01:53:44,306 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@36852e13], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@19b05991]]
2021-03-12 01:53:44,306 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@36852e13]
2021-03-12 01:53:44,396 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:53:44,396 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@19b05991]
2021-03-12 01:53:44,486 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:53:44,487 [main:117] - GENERATED CALL = (getB()).equals("mnbbo").compareTo(false)
2021-03-12 01:53:44,487 [main:61] - replacement of logged(1) of type Int is (getB()).x.shr(B.x)
2021-03-12 01:53:44,576 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:53:44,577 [main:53] - replacing (B.also {a: B -> require(false, { "nyaed"})}, B)
2021-03-12 01:53:44,577 [main:50] - replacing B.also {a: B -> require(false, { "nyaed"})} B
2021-03-12 01:53:44,577 [main:54] - Getting value of type B
2021-03-12 01:53:44,667 [main:302] - generating value of type = B false depth = 0
2021-03-12 01:53:44,668 [main:112] - generating klass B text = object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also {a: Int -> repeat(-445802008, {a: Int -> println("nebdx")})}

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $(value).compareTo(x).sign, $i3, $value);"
        x = value
    }
}
2021-03-12 01:53:44,668 [main:58] - GENERATED VALUE OF TYPE B = B
2021-03-12 01:53:44,668 [main:61] - GENERATED IS CALL =false
2021-03-12 01:53:44,670 [main:67] - randomType = Float
2021-03-12 01:53:44,785 [main:302] - generating value of type = Float true depth = 0
2021-03-12 01:53:44,817 [main:106] - GETTING B from B
2021-03-12 01:53:44,822 [main:61] - replacement of B.also {a: B -> require(false, { "nyaed"})} of type B is B
2021-03-12 01:53:44,918 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 01:53:44,918 [main:66] - Compilation checking started
2021-03-12 01:53:45,289 [main:53] - Result = true
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also {a: T -> print("kaczm")}

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != ('㣝').toFloat().compareTo(-117)) throw AssertionError((actual).toInt().toString(A.x))
    if ((test).invoke().toString(-374791483) != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $(A.x).toString(actual)")
}

object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also {a: Int -> repeat(-445802008, {a: Int -> println("nebdx")})}

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $(value).compareTo(x).sign, $i3, $value);"
        x = value
    }
}

fun getB() = B

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", (linkedSetOf<A>(A)).size.shl(B.x), "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, (log).uppercase()) { 1997282016}

    doTest((0.093165815f).toChar().titlecase(), 1, (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).contentToString()) {
        (B.x).div(-25)
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { (9107430422333898917.toULong()).compareTo(12.toUByte()).takeLowestOneBit() }

    return "OK"
}


2021-03-12 01:53:45,289 [main:53] - replacing ({ log += "get-B($i1, $i2, $i3);" }, Function1<Int, Unit>)
2021-03-12 01:53:45,289 [main:50] - replacing { log += "get-B($i1, $i2, $i3);" } Function1<Int, Unit>
2021-03-12 01:53:45,289 [main:54] - Getting value of type Function1<Int, Unit>
2021-03-12 01:53:45,379 [main:302] - generating value of type = Function1<Int, Unit> false depth = 0
2021-03-12 01:53:45,380 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 01:53:45,472 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 01:53:45,473 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 01:53:45,656 [main:302] - generating value of type = Any false depth = 4
2021-03-12 01:53:45,656 [main:95] - GENERATED = print("vwgvs")
2021-03-12 01:53:45,656 [main:58] - GENERATED VALUE OF TYPE Function1<Int, Unit> = {a: Int -> print("vwgvs")}
2021-03-12 01:53:45,656 [main:61] - GENERATED IS CALL =false
2021-03-12 01:53:45,659 [main:67] - randomType = B
2021-03-12 01:53:45,750 [main:302] - generating value of type = B false depth = 0
2021-03-12 01:53:45,751 [main:112] - generating klass B text = object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also {a: Int -> repeat(-445802008, {a: Int -> println("nebdx")})}

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $(value).compareTo(x).sign, $i3, $value);"
        x = value
    }
}
2021-03-12 01:53:45,761 [main:106] - GETTING Function1<Int, Unit> from Int
2021-03-12 01:53:45,790 [main:106] - GETTING Function1<Int, Unit> from Int
2021-03-12 01:53:45,792 [main:106] - GETTING Function1<Int, Unit> from B
2021-03-12 01:53:45,798 [main:106] - GETTING Function1<Int, Unit> from Array<Float>
2021-03-12 01:53:45,809 [main:106] - GETTING Function1<Int, Unit> from A
2021-03-12 01:53:45,814 [main:106] - GETTING Function1<Int, Unit> from Int
2021-03-12 01:53:45,814 [main:61] - replacement of { log += "get-B($i1, $i2, $i3);" } of type Function1<Int, Unit> is {a: Int -> print("vwgvs")}
2021-03-12 01:53:45,903 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 01:53:45,903 [main:53] - replacing (i2, Int)
2021-03-12 01:53:45,903 [main:50] - replacing i2 Int
2021-03-12 01:53:45,903 [main:54] - Getting value of type Int
2021-03-12 01:53:45,992 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:53:45,993 [main:58] - GENERATED VALUE OF TYPE Int = -2064537085
2021-03-12 01:53:45,993 [main:61] - GENERATED IS CALL =false
2021-03-12 01:53:46,187 [main:67] - randomType = HashMap<A, B>
2021-03-12 01:53:46,277 [main:302] - generating value of type = HashMap<A, B> false depth = 0
2021-03-12 01:53:46,421 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(): HashMap<A, B> = TODO()
2021-03-12 01:53:46,423 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(): HashMap<A, B> = TODO()
2021-03-12 01:53:46,532 [main:95] - GENERATED = hashMapOf<A, B>()
2021-03-12 01:53:46,676 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ea6d3]
2021-03-12 01:53:46,771 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:53:46,772 [main:78] - Generated call from random type = (hashMapOf<A, B>()).size.rotateRight(1617984604)
2021-03-12 01:53:46,772 [main:61] - replacement of i2 of type Int is (hashMapOf<A, B>()).size.rotateRight(1617984604)
2021-03-12 01:53:46,864 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:53:46,864 [main:53] - replacing ({ log += "getA();" }, Function1<A, Unit>)
2021-03-12 01:53:46,864 [main:50] - replacing { log += "getA();" } Function1<A, Unit>
2021-03-12 01:53:46,864 [main:54] - Getting value of type Function1<A, Unit>
2021-03-12 01:53:46,953 [main:302] - generating value of type = Function1<A, Unit> false depth = 0
2021-03-12 01:53:46,953 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 01:53:47,046 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 01:53:47,047 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 01:53:47,329 [main:302] - generating value of type = Int true depth = 4
2021-03-12 01:53:47,330 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 01:53:47,331 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 01:53:47,426 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 01:53:47,427 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 01:53:47,706 [main:302] - generating value of type = Int true depth = 8
2021-03-12 01:53:47,706 [main:302] - generating value of type = Function1<Int, Unit> false depth = 8
2021-03-12 01:53:47,707 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 01:53:47,843 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 01:53:47,845 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 01:53:48,057 [main:302] - generating value of type = Boolean true depth = 12
2021-03-12 01:53:48,059 [main:95] - GENERATED = require(true)
2021-03-12 01:53:48,059 [main:95] - GENERATED = repeat(-1925868440, {a: Int -> require(true)})
2021-03-12 01:53:48,059 [main:95] - GENERATED = repeat(-1141040483, {a: Int -> repeat(-1925868440, {a: Int -> require(true)})})
2021-03-12 01:53:48,060 [main:58] - GENERATED VALUE OF TYPE Function1<A, Unit> = {a: A -> repeat(-1141040483, {a: Int -> repeat(-1925868440, {a: Int -> require(true)})})}
2021-03-12 01:53:48,060 [main:61] - GENERATED IS CALL =false
2021-03-12 01:53:49,472 [main:67] - randomType = Function2<Function1<B, List<Boolean?>?>, Map<ArrayDeque<B>, B>?, Function1<Short, Function1<Set<Boolean>, B?>>>
2021-03-12 01:53:49,474 [main:106] - GETTING Function1<A, Unit> from A
2021-03-12 01:53:49,482 [main:106] - GETTING Function1<A, Unit> from Int
2021-03-12 01:53:49,523 [main:106] - GETTING Function1<A, Unit> from Array<Float>
2021-03-12 01:53:49,541 [main:106] - GETTING Function1<A, Unit> from Int
2021-03-12 01:53:49,542 [main:106] - GETTING Function1<A, Unit> from Int
2021-03-12 01:53:49,543 [main:106] - GETTING Function1<A, Unit> from B
2021-03-12 01:53:49,553 [main:61] - replacement of { log += "getA();" } of type Function1<A, Unit> is {a: A -> repeat(-1141040483, {a: Int -> repeat(-1925868440, {a: Int -> require(true)})})}
2021-03-12 01:53:49,642 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 01:53:49,642 [main:53] - replacing ({ (A).x.sign }, Function0<Int>)
2021-03-12 01:53:49,642 [main:50] - replacing { (A).x.sign } Function0<Int>
2021-03-12 01:53:49,643 [main:54] - Getting value of type Function0<Int>
2021-03-12 01:53:49,732 [main:302] - generating value of type = Function0<Int> false depth = 0
2021-03-12 01:53:49,733 [main:302] - generating value of type = Int true depth = 1
2021-03-12 01:53:49,734 [main:58] - GENERATED VALUE OF TYPE Function0<Int> = { -2048444008}
2021-03-12 01:53:49,734 [main:61] - GENERATED IS CALL =false
2021-03-12 01:53:49,827 [main:67] - randomType = Short
2021-03-12 01:53:49,917 [main:302] - generating value of type = Short true depth = 0
2021-03-12 01:53:49,949 [main:106] - GETTING Function0<Int> from Int
2021-03-12 01:53:49,987 [main:106] - GETTING Function0<Int> from B
2021-03-12 01:53:49,995 [main:106] - GETTING Function0<Int> from Int
2021-03-12 01:53:49,996 [main:106] - GETTING Function0<Int> from Int
2021-03-12 01:53:49,997 [main:106] - GETTING Function0<Int> from Array<Float>
2021-03-12 01:53:50,014 [main:106] - GETTING Function0<Int> from A
2021-03-12 01:53:50,021 [main:61] - replacement of { (A).x.sign } of type Function0<Int> is { -2048444008}
2021-03-12 01:53:50,111 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 01:53:50,113 [main:53] - replacing ("getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);", String)
2021-03-12 01:53:50,113 [main:50] - replacing "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);" String
2021-03-12 01:53:50,113 [main:54] - Getting value of type String
2021-03-12 01:53:50,202 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:53:50,203 [main:58] - GENERATED VALUE OF TYPE String = "hhqzm"
2021-03-12 01:53:50,203 [main:61] - GENERATED IS CALL =false
2021-03-12 01:53:50,421 [main:67] - randomType = Collection<A?>
2021-03-12 01:53:50,422 [main:106] - GETTING String from Int
2021-03-12 01:53:50,473 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:53:50,473 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:53:50,473 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:53:50,571 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:53:50,572 [main:117] - GENERATED CALL = (B.x).toInt().toString(-799716309)
2021-03-12 01:53:50,573 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc0516]]
2021-03-12 01:53:50,573 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235]
2021-03-12 01:53:50,573 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc0516]
2021-03-12 01:53:50,675 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:53:50,676 [main:117] - GENERATED CALL = (B.x).toByte().toString(-361219780)
2021-03-12 01:53:50,676 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]]
2021-03-12 01:53:50,676 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60]
2021-03-12 01:53:50,676 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]
2021-03-12 01:53:50,676 [main:117] - GENERATED CALL = (B.x).toShort().toString(x)
2021-03-12 01:53:50,676 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]]
2021-03-12 01:53:50,676 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:53:50,676 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]
2021-03-12 01:53:50,677 [main:117] - GENERATED CALL = (B.x).toChar().uppercase()
2021-03-12 01:53:50,677 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:53:50,677 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:53:50,771 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:53:50,772 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:53:50,772 [main:117] - GENERATED CALL = (B.x).compareTo(-1029537605).toString(B.get())
2021-03-12 01:53:50,772 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:53:50,772 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e]
2021-03-12 01:53:50,772 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:53:50,772 [main:117] - GENERATED CALL = (B.x).toLong().toString(B.x)
2021-03-12 01:53:50,772 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:53:50,772 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73]
2021-03-12 01:53:50,863 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:53:50,864 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:53:50,864 [main:117] - GENERATED CALL = (B.x).div(-5633266679512474847).toString(A.x)
2021-03-12 01:53:50,864 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6122df5e]]
2021-03-12 01:53:50,864 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:53:50,864 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6122df5e]
2021-03-12 01:53:50,864 [main:117] - GENERATED CALL = (B.x).toChar().plus(log)
2021-03-12 01:53:50,864 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:53:50,864 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:53:50,957 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:53:50,958 [main:117] - GENERATED CALL = (B.x).toString(-2146474420)
2021-03-12 01:53:50,958 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]]
2021-03-12 01:53:50,958 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:53:50,958 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]
2021-03-12 01:53:50,958 [main:117] - GENERATED CALL = (B.x).toChar().titlecase()
2021-03-12 01:53:50,958 [main:61] - replacement of "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);" of type String is "hhqzm"
2021-03-12 01:53:51,048 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 01:53:51,048 [main:66] - Compilation checking started
2021-03-12 01:53:51,409 [main:53] - Result = true
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also {a: T -> print("kaczm")}

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != ('㣝').toFloat().compareTo(-117)) throw AssertionError((actual).toInt().toString(A.x))
    if ((test).invoke().toString(-374791483) != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $(A.x).toString(actual)")
}

object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also {a: Int -> repeat(-445802008, {a: Int -> println("nebdx")})}

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $(value).compareTo(x).sign, $i3, $value);"
        x = value
    }
}

fun getB() = B

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", (linkedSetOf<A>(A)).size.shl(B.x), "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, (log).uppercase()) { 1997282016}

    doTest((0.093165815f).toChar().titlecase(), 1, (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).contentToString()) {
        (B.x).div(-25)
    }
    doTest("getB()[1, 2, 3].x--", 1, "hhqzm") { (9107430422333898917.toULong()).compareTo(12.toUByte()).takeLowestOneBit() }

    return "OK"
}


2021-03-12 01:53:51,410 [main:53] - replacing ({ log += "$(logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f})))?.random();" }, Function1<T, Unit>)
2021-03-12 01:53:51,410 [main:50] - replacing { log += "$(logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f})))?.random();" } Function1<T, Unit>
2021-03-12 01:53:51,410 [main:54] - Getting value of type Function1<T, Unit>
2021-03-12 01:53:51,539 [main:302] - generating value of type = Function1<T, Unit> false depth = 0
2021-03-12 01:53:51,540 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 01:53:51,639 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 01:53:51,640 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 01:53:51,823 [main:302] - generating value of type = Any false depth = 4
2021-03-12 01:53:51,823 [main:95] - GENERATED = print("qylux")
2021-03-12 01:53:51,824 [main:58] - GENERATED VALUE OF TYPE Function1<T, Unit> = {a: T -> print("qylux")}
2021-03-12 01:53:51,824 [main:61] - GENERATED IS CALL =false
2021-03-12 01:53:51,917 [main:67] - randomType = ULong?
2021-03-12 01:53:52,006 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 01:53:52,036 [main:106] - GETTING Function1<T, Unit> from Int
2021-03-12 01:53:52,070 [main:106] - GETTING Function1<T, Unit> from A
2021-03-12 01:53:52,077 [main:106] - GETTING Function1<T, Unit> from B
2021-03-12 01:53:52,085 [main:106] - GETTING Function1<T, Unit> from Int
2021-03-12 01:53:52,086 [main:106] - GETTING Function1<T, Unit> from Array<Float>
2021-03-12 01:53:52,098 [main:106] - GETTING Function1<T, Unit> from Int
2021-03-12 01:53:52,098 [main:61] - replacement of { log += "$(logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f})))?.random();" } of type Function1<T, Unit> is {a: T -> print("qylux")}
2021-03-12 01:53:52,215 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 01:53:52,217 [main:53] - replacing ("getA();get-A.x;set-A.x;get-A.x;", String)
2021-03-12 01:53:52,217 [main:50] - replacing "getA();get-A.x;set-A.x;get-A.x;" String
2021-03-12 01:53:52,217 [main:54] - Getting value of type String
2021-03-12 01:53:52,310 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:53:52,310 [main:58] - GENERATED VALUE OF TYPE String = "tsnqe"
2021-03-12 01:53:52,311 [main:61] - GENERATED IS CALL =false
2021-03-12 01:53:53,291 [main:67] - randomType = Array<Function1<Triple<A?, Double, Function1<Function1<Long, A>, Short>>?, B>>?
2021-03-12 01:53:53,381 [main:302] - generating value of type = Array<Function1<Triple<A?, Double, Function1<Function1<Long, A>, Short>>?, B>> false depth = 0
2021-03-12 01:53:53,511 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<Function1<Triple<A?, Double, Function1<Function1<Long, A>, Short>>?, B>> = TODO()
2021-03-12 01:53:53,513 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<Function1<Triple<A?, Double, Function1<Function1<Long, A>, Short>>?, B>> = TODO()
2021-03-12 01:53:53,613 [main:95] - GENERATED = emptyArray<Function1<Triple<A?, Double, Function1<Function1<Long, A>, Short>>?, B>>()
2021-03-12 01:53:53,652 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:53:53,652 [main:78] - Generated call from random type = (emptyArray<Function1<Triple<A?, Double, Function1<Function1<Long, A>, Short>>?, B>>())?.size.toString(B.x)
2021-03-12 01:53:53,653 [main:106] - GETTING String from Int
2021-03-12 01:53:53,707 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:53:53,707 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:53:53,808 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:53:53,809 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:53:53,809 [main:117] - GENERATED CALL = (B.get()).compareTo(-1131113929).toString(B.get())
2021-03-12 01:53:53,809 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:53:53,809 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:53:53,903 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:53:53,904 [main:117] - GENERATED CALL = (B.get()).toString(-730281003)
2021-03-12 01:53:53,905 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]]
2021-03-12 01:53:53,905 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:53:53,905 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]
2021-03-12 01:53:53,905 [main:117] - GENERATED CALL = (B.get()).toChar().uppercase()
2021-03-12 01:53:53,905 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]]
2021-03-12 01:53:53,905 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:53:53,905 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]
2021-03-12 01:53:53,905 [main:117] - GENERATED CALL = (B.get()).toChar().titlecase()
2021-03-12 01:53:53,905 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]]
2021-03-12 01:53:53,905 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60]
2021-03-12 01:53:53,905 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]
2021-03-12 01:53:53,995 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:53:53,995 [main:117] - GENERATED CALL = (B.get()).toShort().toString(-1538510810)
2021-03-12 01:53:53,996 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:53:53,996 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e]
2021-03-12 01:53:53,996 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:53:53,996 [main:117] - GENERATED CALL = (B.get()).toLong().toString(B.get())
2021-03-12 01:53:53,996 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6122df5e]]
2021-03-12 01:53:53,996 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:53:53,996 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6122df5e]
2021-03-12 01:53:53,996 [main:117] - GENERATED CALL = (B.get()).toChar().plus(log)
2021-03-12 01:53:53,996 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:53:53,996 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:53:53,996 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:53:53,997 [main:117] - GENERATED CALL = (B.get()).toInt().toString(B.x)
2021-03-12 01:53:53,997 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc0516]]
2021-03-12 01:53:53,997 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235]
2021-03-12 01:53:53,997 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc0516]
2021-03-12 01:53:53,997 [main:117] - GENERATED CALL = (B.get()).toByte().toString(x)
2021-03-12 01:53:53,997 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:53:53,997 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73]
2021-03-12 01:53:54,091 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:53:54,092 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:53:54,181 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:53:54,182 [main:117] - GENERATED CALL = (B.get()).div(-4019842249214577801).toString(-1361672577)
2021-03-12 01:53:54,182 [main:61] - replacement of "getA();get-A.x;set-A.x;get-A.x;" of type String is "tsnqe"
2021-03-12 01:53:54,270 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 01:53:54,270 [main:66] - Compilation checking started
2021-03-12 01:53:54,607 [main:53] - Result = true
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also {a: T -> print("kaczm")}

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != ('㣝').toFloat().compareTo(-117)) throw AssertionError((actual).toInt().toString(A.x))
    if ((test).invoke().toString(-374791483) != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $(A.x).toString(actual)")
}

object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also {a: Int -> repeat(-445802008, {a: Int -> println("nebdx")})}

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $(value).compareTo(x).sign, $i3, $value);"
        x = value
    }
}

fun getB() = B

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", (linkedSetOf<A>(A)).size.shl(B.x), "tsnqe") { ++getA().x }
    doTest("getA().x--", 1, (log).uppercase()) { 1997282016}

    doTest((0.093165815f).toChar().titlecase(), 1, (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).contentToString()) {
        (B.x).div(-25)
    }
    doTest("getB()[1, 2, 3].x--", 1, "hhqzm") { (9107430422333898917.toULong()).compareTo(12.toUByte()).takeLowestOneBit() }

    return "OK"
}


2021-03-12 01:53:54,608 [main:53] - replacing (log, String)
2021-03-12 01:53:54,608 [main:50] - replacing log String
2021-03-12 01:53:54,608 [main:54] - Getting value of type String
2021-03-12 01:53:54,701 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:53:54,702 [main:58] - GENERATED VALUE OF TYPE String = "xdgep"
2021-03-12 01:53:54,702 [main:61] - GENERATED IS CALL =false
2021-03-12 01:53:54,899 [main:67] - randomType = List<ULong>
2021-03-12 01:53:54,900 [main:106] - GETTING String from Int
2021-03-12 01:53:54,939 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:53:54,939 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:53:54,939 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:53:54,939 [main:117] - GENERATED CALL = (B.get()).toInt().toString(B.x)
2021-03-12 01:53:54,940 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:53:54,940 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e]
2021-03-12 01:53:54,940 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:53:54,940 [main:117] - GENERATED CALL = (B.get()).toLong().toString(B.get())
2021-03-12 01:53:54,940 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:53:54,940 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73]
2021-03-12 01:53:55,030 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:53:55,031 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:53:55,031 [main:117] - GENERATED CALL = (B.get()).div(-7582614498699386785).toString(A.x)
2021-03-12 01:53:55,031 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]]
2021-03-12 01:53:55,032 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60]
2021-03-12 01:53:55,032 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]
2021-03-12 01:53:55,121 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:53:55,122 [main:117] - GENERATED CALL = (B.get()).toShort().toString(-752368741)
2021-03-12 01:53:55,123 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:53:55,123 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:53:55,123 [main:117] - GENERATED CALL = (B.get()).toString(B.x)
2021-03-12 01:53:55,123 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a36c448]]
2021-03-12 01:53:55,123 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:53:55,123 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a36c448]
2021-03-12 01:53:55,123 [main:117] - GENERATED CALL = (B.get()).toChar().lowercase()
2021-03-12 01:53:55,123 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]]
2021-03-12 01:53:55,123 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:53:55,123 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]
2021-03-12 01:53:55,123 [main:117] - GENERATED CALL = (B.get()).toChar().titlecase()
2021-03-12 01:53:55,124 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6122df5e]]
2021-03-12 01:53:55,124 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:53:55,124 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6122df5e]
2021-03-12 01:53:55,267 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:53:55,268 [main:117] - GENERATED CALL = (B.get()).toChar().plus("vrwxp")
2021-03-12 01:53:55,268 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:53:55,268 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:53:55,366 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:53:55,367 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:53:55,367 [main:117] - GENERATED CALL = (B.get()).compareTo(-1841027380).toString(B.get())
2021-03-12 01:53:55,367 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]]
2021-03-12 01:53:55,367 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:53:55,367 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]
2021-03-12 01:53:55,367 [main:117] - GENERATED CALL = (B.get()).toChar().uppercase()
2021-03-12 01:53:55,368 [main:61] - replacement of log of type String is (B.get()).toChar().titlecase()
2021-03-12 01:53:55,473 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:53:55,474 [main:53] - replacing ((test).invoke().toString(-374791483) != expectedLog, Boolean)
2021-03-12 01:53:55,475 [main:50] - replacing (test).invoke().toString(-374791483) != expectedLog Boolean
2021-03-12 01:53:55,475 [main:54] - Getting value of type Boolean
2021-03-12 01:53:55,566 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:53:55,567 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 01:53:55,567 [main:61] - GENERATED IS CALL =false
2021-03-12 01:53:55,666 [main:67] - randomType = Set<String>
2021-03-12 01:53:55,667 [main:106] - GETTING Boolean from Int
2021-03-12 01:53:55,697 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74700b97]]
2021-03-12 01:53:55,697 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:53:55,697 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74700b97]
2021-03-12 01:53:55,697 [main:117] - GENERATED CALL = (actual).toChar().isISOControl()
2021-03-12 01:53:55,697 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2fba18e9], public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@54fadb00]]
2021-03-12 01:53:55,697 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2fba18e9]
2021-03-12 01:53:55,697 [main:149] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@54fadb00]
2021-03-12 01:53:55,697 [main:117] - GENERATED CALL = (actual).toFloat().isNaN()
2021-03-12 01:53:55,697 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@31b01837], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@7db5d73b]]
2021-03-12 01:53:55,697 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@31b01837]
2021-03-12 01:53:55,786 [main:302] - generating value of type = Double true depth = 0
2021-03-12 01:53:55,787 [main:149] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@7db5d73b]
2021-03-12 01:53:55,787 [main:117] - GENERATED CALL = (actual).div(0.6072814010828359).isNaN()
2021-03-12 01:53:55,787 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5958298b], public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@38212b52]]
2021-03-12 01:53:55,787 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5958298b]
2021-03-12 01:53:55,875 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:53:55,876 [main:149] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@38212b52]
2021-03-12 01:53:55,876 [main:117] - GENERATED CALL = (actual).rangeTo(-17).isEmpty()
2021-03-12 01:53:55,876 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@147c729a]]
2021-03-12 01:53:55,876 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@147c729a]
2021-03-12 01:53:55,965 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:53:55,965 [main:117] - GENERATED CALL = (actual).equals("zqrlz")
2021-03-12 01:53:55,965 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fd3927c]]
2021-03-12 01:53:55,965 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:53:55,965 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fd3927c]
2021-03-12 01:53:55,965 [main:117] - GENERATED CALL = (actual).toChar().isUpperCase()
2021-03-12 01:53:55,966 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2dec1507], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@1d6bfc9d]]
2021-03-12 01:53:55,966 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2dec1507]
2021-03-12 01:53:55,966 [main:149] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@1d6bfc9d]
2021-03-12 01:53:55,966 [main:117] - GENERATED CALL = (actual).toDouble().isFinite()
2021-03-12 01:53:55,966 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27c836fd]]
2021-03-12 01:53:55,966 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:53:55,966 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27c836fd]
2021-03-12 01:53:55,966 [main:117] - GENERATED CALL = (actual).toChar().isTitleCase()
2021-03-12 01:53:55,966 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@486a2f6a]]
2021-03-12 01:53:55,966 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:53:55,966 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@486a2f6a]
2021-03-12 01:53:55,966 [main:117] - GENERATED CALL = (actual).toChar().isDefined()
2021-03-12 01:53:55,966 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@3315ee5e]]
2021-03-12 01:53:55,966 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60]
2021-03-12 01:53:55,966 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@3315ee5e]
2021-03-12 01:53:56,055 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:53:56,055 [main:117] - GENERATED CALL = (actual).toShort().equals("pwgwa")
2021-03-12 01:53:56,055 [main:61] - replacement of (test).invoke().toString(-374791483) != expectedLog of type Boolean is (actual).equals("zqrlz")
2021-03-12 01:53:56,144 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:53:56,144 [main:66] - Compilation checking started
2021-03-12 01:53:56,486 [main:53] - Result = true
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also {a: T -> print("kaczm")}

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != ('㣝').toFloat().compareTo(-117)) throw AssertionError((actual).toInt().toString(A.x))
    if ((actual).equals("zqrlz")) throw AssertionError("$id expectedLog: $expectedLog, actual: $(A.x).toString(actual)")
}

object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also {a: Int -> repeat(-445802008, {a: Int -> println("nebdx")})}

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $(value).compareTo(x).sign, $i3, $value);"
        x = value
    }
}

fun getB() = B

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", (linkedSetOf<A>(A)).size.shl(B.x), "tsnqe") { ++getA().x }
    doTest("getA().x--", 1, (log).uppercase()) { 1997282016}

    doTest((0.093165815f).toChar().titlecase(), 1, (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).contentToString()) {
        (B.x).div(-25)
    }
    doTest("getB()[1, 2, 3].x--", 1, "hhqzm") { (9107430422333898917.toULong()).compareTo(12.toUByte()).takeLowestOneBit() }

    return "OK"
}


2021-03-12 01:53:56,487 [main:53] - replacing (getB(), B)
2021-03-12 01:53:56,487 [main:50] - replacing getB() B
2021-03-12 01:53:56,487 [main:54] - Getting value of type B
2021-03-12 01:53:56,579 [main:302] - generating value of type = B false depth = 0
2021-03-12 01:53:56,580 [main:112] - generating klass B text = object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also {a: Int -> repeat(-445802008, {a: Int -> println("nebdx")})}

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $(value).compareTo(x).sign, $i3, $value);"
        x = value
    }
}
2021-03-12 01:53:56,580 [main:58] - GENERATED VALUE OF TYPE B = B
2021-03-12 01:53:56,580 [main:61] - GENERATED IS CALL =false
2021-03-12 01:53:56,672 [main:67] - randomType = Double
2021-03-12 01:53:56,760 [main:302] - generating value of type = Double true depth = 0
2021-03-12 01:53:56,789 [main:106] - GETTING B from Array<Float>
2021-03-12 01:53:56,799 [main:106] - GETTING B from B
2021-03-12 01:53:56,803 [main:61] - replacement of getB() of type B is getB()
2021-03-12 01:53:56,936 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 01:53:56,936 [main:53] - replacing (getB(), B)
2021-03-12 01:53:56,937 [main:50] - replacing getB() B
2021-03-12 01:53:56,937 [main:54] - Getting value of type B
2021-03-12 01:53:57,031 [main:302] - generating value of type = B false depth = 0
2021-03-12 01:53:57,032 [main:112] - generating klass B text = object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also {a: Int -> repeat(-445802008, {a: Int -> println("nebdx")})}

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $(value).compareTo(x).sign, $i3, $value);"
        x = value
    }
}
2021-03-12 01:53:57,032 [main:58] - GENERATED VALUE OF TYPE B = B
2021-03-12 01:53:57,032 [main:61] - GENERATED IS CALL =false
2021-03-12 01:53:57,143 [main:67] - randomType = Byte
2021-03-12 01:53:57,234 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:53:57,277 [main:106] - GETTING B from A
2021-03-12 01:53:57,285 [main:106] - GETTING B from Array<Float>
2021-03-12 01:53:57,300 [main:106] - GETTING B from Int
2021-03-12 01:53:57,334 [main:106] - GETTING B from Int
2021-03-12 01:53:57,334 [main:106] - GETTING B from B
2021-03-12 01:53:57,339 [main:61] - replacement of getB() of type B is getB()
2021-03-12 01:53:57,427 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 01:53:57,428 [main:53] - replacing ("$(A)?.x.toString(B.x) expected: $expected, actual: $actual", String)
2021-03-12 01:53:57,428 [main:50] - replacing "$(A)?.x.toString(B.x) expected: $expected, actual: $actual" String
2021-03-12 01:53:57,428 [main:54] - Getting value of type String
2021-03-12 01:53:57,516 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:53:57,517 [main:58] - GENERATED VALUE OF TYPE String = "bduyu"
2021-03-12 01:53:57,517 [main:61] - GENERATED IS CALL =false
2021-03-12 01:53:57,520 [main:67] - randomType = B
2021-03-12 01:53:57,607 [main:302] - generating value of type = B false depth = 0
2021-03-12 01:53:57,608 [main:112] - generating klass B text = object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also {a: Int -> repeat(-445802008, {a: Int -> println("nebdx")})}

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $(value).compareTo(x).sign, $i3, $value);"
        x = value
    }
}
2021-03-12 01:53:57,614 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:53:57,702 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:53:57,703 [main:78] - Generated call from random type = (B).x.toString(1435588525)
2021-03-12 01:53:57,704 [main:106] - GETTING String from Array<Float>
2021-03-12 01:53:57,714 [main:113] - Case = [@kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@a5810be]]
2021-03-12 01:53:57,714 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@a5810be]
2021-03-12 01:53:57,714 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).contentToString()
2021-03-12 01:53:57,715 [main:113] - Case = [public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4961b6f0]]
2021-03-12 01:53:57,715 [main:149] - GENERATING call of type public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4961b6f0]
2021-03-12 01:53:57,802 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:53:57,893 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:53:57,983 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:53:58,075 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:53:58,166 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 01:53:58,167 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 01:53:58,386 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 01:53:58,487 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:53:58,489 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:53:58,690 [main:302] - generating value of type = Int true depth = 6
2021-03-12 01:53:58,691 [main:95] - GENERATED = StringBuilder(1723529489)
2021-03-12 01:53:58,691 [main:95] - GENERATED = StringBuilder(StringBuilder(1723529489))
2021-03-12 01:53:58,782 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 01:53:58,783 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 01:53:58,787 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).joinToString("xoeqa", "lrviv", "bornu", B.get(), StringBuilder(StringBuilder(1723529489)), {a: T -> "tumfa"})
2021-03-12 01:53:58,787 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7973195e]]
2021-03-12 01:53:58,787 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7973195e]
2021-03-12 01:53:58,787 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).contentDeepToString()
2021-03-12 01:53:58,787 [main:113] - Case = [public final val size: kotlin.Int defined in kotlin.Array[DeserializedPropertyDescriptor@92dca8f], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:53:58,787 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:53:58,788 [main:117] - GENERATED CALL = (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).size.toString(A.x)
2021-03-12 01:53:58,788 [main:61] - replacement of "$(A)?.x.toString(B.x) expected: $expected, actual: $actual" of type String is (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).size.toString(A.x)
2021-03-12 01:53:58,875 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:53:58,876 [main:53] - replacing ("++getA().x", String)
2021-03-12 01:53:58,876 [main:50] - replacing "++getA().x" String
2021-03-12 01:53:58,876 [main:54] - Getting value of type String
2021-03-12 01:53:58,964 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:53:58,964 [main:58] - GENERATED VALUE OF TYPE String = "xzonw"
2021-03-12 01:53:58,965 [main:61] - GENERATED IS CALL =false
2021-03-12 01:53:59,057 [main:67] - randomType = Long?
2021-03-12 01:53:59,146 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:53:59,178 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Long): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@1b8a0420]
2021-03-12 01:53:59,266 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:53:59,267 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:53:59,355 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:53:59,356 [main:78] - Generated call from random type = (-4531628078926379086)?.and(-7276588941002865507).toString(-1352118568)
2021-03-12 01:53:59,357 [main:106] - GETTING String from Int
2021-03-12 01:53:59,387 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]]
2021-03-12 01:53:59,387 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:53:59,387 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]
2021-03-12 01:53:59,387 [main:117] - GENERATED CALL = (B.x).toChar().titlecase()
2021-03-12 01:53:59,387 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:53:59,387 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73]
2021-03-12 01:53:59,475 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:53:59,476 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:53:59,477 [main:117] - GENERATED CALL = (B.x).div(5350804557017732675).toString(B.x)
2021-03-12 01:53:59,477 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:53:59,477 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:53:59,477 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:53:59,477 [main:117] - GENERATED CALL = (B.x).toInt().toString(B.get())
2021-03-12 01:53:59,477 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6122df5e]]
2021-03-12 01:53:59,477 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:53:59,477 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6122df5e]
2021-03-12 01:53:59,477 [main:117] - GENERATED CALL = (B.x).toChar().plus(log)
2021-03-12 01:53:59,477 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a36c448]]
2021-03-12 01:53:59,477 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:53:59,477 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a36c448]
2021-03-12 01:53:59,478 [main:117] - GENERATED CALL = (B.x).toChar().lowercase()
2021-03-12 01:53:59,478 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:53:59,478 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:53:59,593 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:53:59,594 [main:117] - GENERATED CALL = (B.x).toString(-1904583495)
2021-03-12 01:53:59,594 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]]
2021-03-12 01:53:59,594 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:53:59,595 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]
2021-03-12 01:53:59,595 [main:117] - GENERATED CALL = (B.x).toChar().uppercase()
2021-03-12 01:53:59,595 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]]
2021-03-12 01:53:59,595 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60]
2021-03-12 01:53:59,595 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]
2021-03-12 01:53:59,595 [main:117] - GENERATED CALL = (B.x).toShort().toString(x)
2021-03-12 01:53:59,595 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:53:59,595 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e]
2021-03-12 01:53:59,595 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:53:59,689 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:53:59,690 [main:117] - GENERATED CALL = (B.x).toLong().toString(831717749)
2021-03-12 01:53:59,690 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc0516]]
2021-03-12 01:53:59,690 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235]
2021-03-12 01:53:59,690 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc0516]
2021-03-12 01:53:59,785 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:53:59,786 [main:117] - GENERATED CALL = (B.x).toByte().toString(-223703503)
2021-03-12 01:53:59,787 [main:61] - replacement of "++getA().x" of type String is (B.x).toLong().toString(831717749)
2021-03-12 01:53:59,886 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:53:59,886 [main:66] - Compilation checking started
2021-03-12 01:54:00,249 [main:53] - Result = true
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also {a: T -> print("kaczm")}

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != ('㣝').toFloat().compareTo(-117)) throw AssertionError((actual).toInt().toString(A.x))
    if ((actual).equals("zqrlz")) throw AssertionError("$id expectedLog: $expectedLog, actual: $(A.x).toString(actual)")
}

object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also {a: Int -> repeat(-445802008, {a: Int -> println("nebdx")})}

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $(value).compareTo(x).sign, $i3, $value);"
        x = value
    }
}

fun getB() = B

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest((B.x).toLong().toString(831717749), (linkedSetOf<A>(A)).size.shl(B.x), "tsnqe") { ++getA().x }
    doTest("getA().x--", 1, (log).uppercase()) { 1997282016}

    doTest((0.093165815f).toChar().titlecase(), 1, (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).contentToString()) {
        (B.x).div(-25)
    }
    doTest("getB()[1, 2, 3].x--", 1, "hhqzm") { (9107430422333898917.toULong()).compareTo(12.toUByte()).takeLowestOneBit() }

    return "OK"
}


2021-03-12 01:54:00,249 [main:53] - replacing (2, Int)
2021-03-12 01:54:00,249 [main:50] - replacing 2 Int
2021-03-12 01:54:00,249 [main:54] - Getting value of type Int
2021-03-12 01:54:00,340 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:54:00,340 [main:58] - GENERATED VALUE OF TYPE Int = 1263012690
2021-03-12 01:54:00,341 [main:61] - GENERATED IS CALL =false
2021-03-12 01:54:00,343 [main:67] - randomType = A
2021-03-12 01:54:00,432 [main:302] - generating value of type = A false depth = 0
2021-03-12 01:54:00,433 [main:112] - generating klass A text = object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}
2021-03-12 01:54:00,438 [main:78] - Generated call from random type = (A).x
2021-03-12 01:54:00,438 [main:61] - replacement of 2 of type Int is (A).x
2021-03-12 01:54:00,526 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:54:00,527 [main:53] - replacing (1, Int)
2021-03-12 01:54:00,528 [main:50] - replacing 1 Int
2021-03-12 01:54:00,528 [main:54] - Getting value of type Int
2021-03-12 01:54:00,616 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:54:00,617 [main:58] - GENERATED VALUE OF TYPE Int = 20657780
2021-03-12 01:54:00,617 [main:61] - GENERATED IS CALL =false
2021-03-12 01:54:00,712 [main:67] - randomType = B?
2021-03-12 01:54:00,799 [main:302] - generating value of type = B false depth = 0
2021-03-12 01:54:00,800 [main:112] - generating klass B text = object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also {a: Int -> repeat(-445802008, {a: Int -> println("nebdx")})}

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $(value).compareTo(x).sign, $i3, $value);"
        x = value
    }
}
2021-03-12 01:54:00,807 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2d1f1e5a]
2021-03-12 01:54:00,807 [main:78] - Generated call from random type = (B)?.x.or(x)
2021-03-12 01:54:00,807 [main:106] - GETTING Int from Int
2021-03-12 01:54:00,835 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@153454d9]]
2021-03-12 01:54:00,835 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:54:00,924 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:54:00,925 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@153454d9]
2021-03-12 01:54:00,925 [main:117] - GENERATED CALL = (A.x).compareTo(-1044114928).coerceAtMost(x)
2021-03-12 01:54:00,925 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2dec1507], public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4bfbf297]]
2021-03-12 01:54:00,925 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2dec1507]
2021-03-12 01:54:00,925 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4bfbf297]
2021-03-12 01:54:00,925 [main:117] - GENERATED CALL = (A.x).toDouble().toInt()
2021-03-12 01:54:00,925 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@ac6f788]]
2021-03-12 01:54:00,925 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235]
2021-03-12 01:54:00,925 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@ac6f788]
2021-03-12 01:54:00,926 [main:117] - GENERATED CALL = (A.x).toByte().countOneBits()
2021-03-12 01:54:00,926 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ea6d3]]
2021-03-12 01:54:00,926 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:54:00,926 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ea6d3]
2021-03-12 01:54:00,926 [main:117] - GENERATED CALL = (A.x).toInt().rotateRight(x)
2021-03-12 01:54:00,926 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235], public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6368f752]]
2021-03-12 01:54:00,926 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235]
2021-03-12 01:54:00,926 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6368f752]
2021-03-12 01:54:00,926 [main:117] - GENERATED CALL = (A.x).toByte().toInt()
2021-03-12 01:54:00,926 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7142bc15]]
2021-03-12 01:54:00,926 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73]
2021-03-12 01:54:01,015 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:54:01,015 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7142bc15]
2021-03-12 01:54:01,016 [main:117] - GENERATED CALL = (A.x).div(2875080275203743280).countTrailingZeroBits()
2021-03-12 01:54:01,016 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@496ff244]]
2021-03-12 01:54:01,016 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60]
2021-03-12 01:54:01,016 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@496ff244]
2021-03-12 01:54:01,105 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:54:01,106 [main:117] - GENERATED CALL = (A.x).toShort().compareTo(-83)
2021-03-12 01:54:01,106 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@c19fc05]]
2021-03-12 01:54:01,106 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235]
2021-03-12 01:54:01,106 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@c19fc05]
2021-03-12 01:54:01,229 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:54:01,231 [main:117] - GENERATED CALL = (A.x).toByte().rem(119)
2021-03-12 01:54:01,231 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d8dcc4]]
2021-03-12 01:54:01,231 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:54:01,231 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d8dcc4]
2021-03-12 01:54:01,231 [main:117] - GENERATED CALL = (A.x).compareTo(x).shl(B.get())
2021-03-12 01:54:01,231 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6344afcd]]
2021-03-12 01:54:01,231 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:54:01,231 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6344afcd]
2021-03-12 01:54:01,231 [main:117] - GENERATED CALL = (A.x).toInt().shr(B.x)
2021-03-12 01:54:01,232 [main:61] - replacement of 1 of type Int is (A.x).toInt().shr(B.x)
2021-03-12 01:54:01,332 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:54:01,332 [main:66] - Compilation checking started
2021-03-12 01:54:01,743 [main:53] - Result = true
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also {a: T -> print("kaczm")}

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != ('㣝').toFloat().compareTo(-117)) throw AssertionError((actual).toInt().toString(A.x))
    if ((actual).equals("zqrlz")) throw AssertionError("$id expectedLog: $expectedLog, actual: $(A.x).toString(actual)")
}

object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also {a: Int -> repeat(-445802008, {a: Int -> println("nebdx")})}

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $(value).compareTo(x).sign, $i3, $value);"
        x = value
    }
}

fun getB() = B

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest((B.x).toLong().toString(831717749), (linkedSetOf<A>(A)).size.shl(B.x), "tsnqe") { ++getA().x }
    doTest("getA().x--", 1, (log).uppercase()) { 1997282016}

    doTest((0.093165815f).toChar().titlecase(), 1, (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).contentToString()) {
        (B.x).div(-25)
    }
    doTest("getB()[1, 2, 3].x--", (A.x).toInt().shr(B.x), "hhqzm") { (9107430422333898917.toULong()).compareTo(12.toUByte()).takeLowestOneBit() }

    return "OK"
}


2021-03-12 01:54:01,745 [main:53] - replacing ({
        (B.x).div(-25)
    }, Function0<Int>)
2021-03-12 01:54:01,745 [main:50] - replacing {
        (B.x).div(-25)
    } Function0<Int>
2021-03-12 01:54:01,745 [main:54] - Getting value of type Function0<Int>
2021-03-12 01:54:01,842 [main:302] - generating value of type = Function0<Int> false depth = 0
2021-03-12 01:54:01,843 [main:302] - generating value of type = Int true depth = 1
2021-03-12 01:54:01,844 [main:58] - GENERATED VALUE OF TYPE Function0<Int> = { -404305331}
2021-03-12 01:54:01,844 [main:61] - GENERATED IS CALL =false
2021-03-12 01:54:01,846 [main:67] - randomType = Boolean
2021-03-12 01:54:01,935 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:54:01,947 [main:106] - GETTING Function0<Int> from Int
2021-03-12 01:54:01,977 [main:106] - GETTING Function0<Int> from String
2021-03-12 01:54:01,993 [main:106] - GETTING Function0<Int> from Int
2021-03-12 01:54:01,994 [main:106] - GETTING Function0<Int> from Int
2021-03-12 01:54:01,995 [main:106] - GETTING Function0<Int> from Int
2021-03-12 01:54:01,996 [main:106] - GETTING Function0<Int> from Array<Float>
2021-03-12 01:54:02,007 [main:106] - GETTING Function0<Int> from A
2021-03-12 01:54:02,012 [main:106] - GETTING Function0<Int> from B
2021-03-12 01:54:02,018 [main:106] - GETTING Function0<Int> from Int
2021-03-12 01:54:02,018 [main:61] - replacement of {
        (B.x).div(-25)
    } of type Function0<Int> is { -404305331}
2021-03-12 01:54:02,108 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 01:54:02,108 [main:66] - Compilation checking started
2021-03-12 01:54:02,446 [main:53] - Result = true
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also {a: T -> print("kaczm")}

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != ('㣝').toFloat().compareTo(-117)) throw AssertionError((actual).toInt().toString(A.x))
    if ((actual).equals("zqrlz")) throw AssertionError("$id expectedLog: $expectedLog, actual: $(A.x).toString(actual)")
}

object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also {a: Int -> repeat(-445802008, {a: Int -> println("nebdx")})}

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $(value).compareTo(x).sign, $i3, $value);"
        x = value
    }
}

fun getB() = B

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest((B.x).toLong().toString(831717749), (linkedSetOf<A>(A)).size.shl(B.x), "tsnqe") { ++getA().x }
    doTest("getA().x--", 1, (log).uppercase()) { 1997282016}

    doTest((0.093165815f).toChar().titlecase(), 1, (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).contentToString()) { -404305331}
    doTest("getB()[1, 2, 3].x--", (A.x).toInt().shr(B.x), "hhqzm") { (9107430422333898917.toULong()).compareTo(12.toUByte()).takeLowestOneBit() }

    return "OK"
}


2021-03-12 01:54:02,446 [main:53] - replacing (log, String)
2021-03-12 01:54:02,446 [main:50] - replacing log String
2021-03-12 01:54:02,446 [main:54] - Getting value of type String
2021-03-12 01:54:02,535 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:54:02,536 [main:58] - GENERATED VALUE OF TYPE String = "urnsr"
2021-03-12 01:54:02,536 [main:61] - GENERATED IS CALL =false
2021-03-12 01:54:02,539 [main:67] - randomType = A
2021-03-12 01:54:02,627 [main:302] - generating value of type = A false depth = 0
2021-03-12 01:54:02,628 [main:112] - generating klass A text = object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}
2021-03-12 01:54:02,632 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:54:02,633 [main:78] - Generated call from random type = (A).x.toString(B.x)
2021-03-12 01:54:02,633 [main:106] - GETTING String from Int
2021-03-12 01:54:02,662 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc0516]]
2021-03-12 01:54:02,662 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235]
2021-03-12 01:54:02,662 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc0516]
2021-03-12 01:54:02,752 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:54:02,753 [main:117] - GENERATED CALL = (A.x).toByte().toString(-576468109)
2021-03-12 01:54:02,753 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:54:02,753 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:54:02,753 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:54:02,753 [main:117] - GENERATED CALL = (A.x).toInt().toString(A.x)
2021-03-12 01:54:02,753 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:54:02,753 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:54:02,843 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:54:02,844 [main:117] - GENERATED CALL = (A.x).toString(261560964)
2021-03-12 01:54:02,844 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a36c448]]
2021-03-12 01:54:02,844 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:54:02,844 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a36c448]
2021-03-12 01:54:02,844 [main:117] - GENERATED CALL = (A.x).toChar().lowercase()
2021-03-12 01:54:02,844 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6122df5e]]
2021-03-12 01:54:02,844 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:54:02,844 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6122df5e]
2021-03-12 01:54:02,933 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:54:02,934 [main:117] - GENERATED CALL = (A.x).toChar().plus("oumkv")
2021-03-12 01:54:02,934 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:54:02,934 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:54:03,022 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:54:03,023 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:54:03,136 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:54:03,138 [main:117] - GENERATED CALL = (A.x).compareTo(-538917603).toString(-663202272)
2021-03-12 01:54:03,138 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]]
2021-03-12 01:54:03,138 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:54:03,138 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]
2021-03-12 01:54:03,138 [main:117] - GENERATED CALL = (A.x).toChar().titlecase()
2021-03-12 01:54:03,138 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:54:03,138 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e]
2021-03-12 01:54:03,138 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:54:03,138 [main:117] - GENERATED CALL = (A.x).toLong().toString(B.x)
2021-03-12 01:54:03,138 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:54:03,138 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73]
2021-03-12 01:54:03,228 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:54:03,228 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:54:03,317 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:54:03,318 [main:117] - GENERATED CALL = (A.x).div(8079027630537614002).toString(-1589044286)
2021-03-12 01:54:03,318 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]]
2021-03-12 01:54:03,318 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:54:03,318 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]
2021-03-12 01:54:03,319 [main:117] - GENERATED CALL = (A.x).toChar().uppercase()
2021-03-12 01:54:03,319 [main:61] - replacement of log of type String is (A.x).toString(261560964)
2021-03-12 01:54:03,408 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:54:03,408 [main:53] - replacing ({ log += "getA();" }, Function1<A, Unit>)
2021-03-12 01:54:03,408 [main:50] - replacing { log += "getA();" } Function1<A, Unit>
2021-03-12 01:54:03,408 [main:54] - Getting value of type Function1<A, Unit>
2021-03-12 01:54:03,497 [main:302] - generating value of type = Function1<A, Unit> false depth = 0
2021-03-12 01:54:03,498 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 01:54:03,590 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 01:54:03,592 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 01:54:03,866 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 01:54:03,867 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 01:54:03,867 [main:302] - generating value of type = Any false depth = 5
2021-03-12 01:54:03,868 [main:95] - GENERATED = check(false, { "nrkoy"})
2021-03-12 01:54:03,868 [main:58] - GENERATED VALUE OF TYPE Function1<A, Unit> = {a: A -> check(false, { "nrkoy"})}
2021-03-12 01:54:03,868 [main:61] - GENERATED IS CALL =false
2021-03-12 01:54:03,871 [main:67] - randomType = B
2021-03-12 01:54:03,960 [main:302] - generating value of type = B false depth = 0
2021-03-12 01:54:03,961 [main:112] - generating klass B text = object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also {a: Int -> repeat(-445802008, {a: Int -> println("nebdx")})}

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $(value).compareTo(x).sign, $i3, $value);"
        x = value
    }
}
2021-03-12 01:54:03,969 [main:106] - GETTING Function1<A, Unit> from Array<Float>
2021-03-12 01:54:03,980 [main:106] - GETTING Function1<A, Unit> from B
2021-03-12 01:54:03,986 [main:106] - GETTING Function1<A, Unit> from A
2021-03-12 01:54:03,991 [main:106] - GETTING Function1<A, Unit> from Int
2021-03-12 01:54:04,021 [main:106] - GETTING Function1<A, Unit> from Int
2021-03-12 01:54:04,023 [main:106] - GETTING Function1<A, Unit> from Int
2021-03-12 01:54:04,023 [main:61] - replacement of { log += "getA();" } of type Function1<A, Unit> is {a: A -> check(false, { "nrkoy"})}
2021-03-12 01:54:04,112 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 01:54:04,112 [main:53] - replacing (getB(), B)
2021-03-12 01:54:04,112 [main:50] - replacing getB() B
2021-03-12 01:54:04,112 [main:54] - Getting value of type B
2021-03-12 01:54:04,200 [main:302] - generating value of type = B false depth = 0
2021-03-12 01:54:04,201 [main:112] - generating klass B text = object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also {a: Int -> repeat(-445802008, {a: Int -> println("nebdx")})}

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $(value).compareTo(x).sign, $i3, $value);"
        x = value
    }
}
2021-03-12 01:54:04,201 [main:58] - GENERATED VALUE OF TYPE B = B
2021-03-12 01:54:04,201 [main:61] - GENERATED IS CALL =false
2021-03-12 01:54:04,203 [main:67] - randomType = Int
2021-03-12 01:54:04,291 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:54:04,322 [main:106] - GETTING B from Int
2021-03-12 01:54:04,352 [main:106] - GETTING B from Int
2021-03-12 01:54:04,352 [main:106] - GETTING B from B
2021-03-12 01:54:04,357 [main:61] - replacement of getB() of type B is B
2021-03-12 01:54:04,445 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 01:54:04,446 [main:53] - replacing (2, Int)
2021-03-12 01:54:04,446 [main:50] - replacing 2 Int
2021-03-12 01:54:04,446 [main:54] - Getting value of type Int
2021-03-12 01:54:04,563 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:54:04,564 [main:58] - GENERATED VALUE OF TYPE Int = 1495616200
2021-03-12 01:54:04,564 [main:61] - GENERATED IS CALL =false
2021-03-12 01:54:04,663 [main:67] - randomType = Double
2021-03-12 01:54:04,759 [main:302] - generating value of type = Double true depth = 0
2021-03-12 01:54:04,802 [main:149] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@254d9b7a]
2021-03-12 01:54:04,803 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@25a935e1]
2021-03-12 01:54:04,803 [main:78] - Generated call from random type = (0.19296656504886345).toByte().countLeadingZeroBits()
2021-03-12 01:54:04,803 [main:106] - GETTING Int from Int
2021-03-12 01:54:04,848 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@35754437]]
2021-03-12 01:54:04,849 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:54:04,849 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@35754437]
2021-03-12 01:54:04,849 [main:117] - GENERATED CALL = (A.x).toInt().coerceAtLeast(A.x)
2021-03-12 01:54:04,849 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e], public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@294c229]]
2021-03-12 01:54:04,849 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e]
2021-03-12 01:54:04,849 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@294c229]
2021-03-12 01:54:04,849 [main:117] - GENERATED CALL = (A.x).toLong().toInt()
2021-03-12 01:54:04,849 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2d1f1e5a]]
2021-03-12 01:54:04,849 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:54:04,849 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2d1f1e5a]
2021-03-12 01:54:04,849 [main:117] - GENERATED CALL = (A.x).toInt().or(B.get())
2021-03-12 01:54:04,850 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cb551b2]]
2021-03-12 01:54:04,850 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:54:04,850 [main:149] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cb551b2]
2021-03-12 01:54:04,850 [main:117] - GENERATED CALL = (A.x).toChar().digitToInt()
2021-03-12 01:54:04,850 [main:113] - Case = [public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@35754437]]
2021-03-12 01:54:04,850 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@35754437]
2021-03-12 01:54:04,850 [main:117] - GENERATED CALL = (A.x).coerceAtLeast(B.get())
2021-03-12 01:54:04,850 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5cb9291b]]
2021-03-12 01:54:04,850 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e]
2021-03-12 01:54:04,850 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5cb9291b]
2021-03-12 01:54:04,850 [main:117] - GENERATED CALL = (A.x).toLong().countLeadingZeroBits()
2021-03-12 01:54:04,850 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@406267da]]
2021-03-12 01:54:04,850 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:54:04,851 [main:117] - GENERATED CALL = (A.x).compareTo(B.get()).sign
2021-03-12 01:54:04,851 [main:113] - Case = [@kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b28a80]]
2021-03-12 01:54:04,851 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b28a80]
2021-03-12 01:54:04,945 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:54:04,947 [main:117] - GENERATED CALL = (A.x).rem(17)
2021-03-12 01:54:04,947 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@647e2e5d]]
2021-03-12 01:54:04,947 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@647e2e5d]
2021-03-12 01:54:04,947 [main:117] - GENERATED CALL = (A.x).takeHighestOneBit()
2021-03-12 01:54:04,947 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@406267da]]
2021-03-12 01:54:04,947 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:54:04,947 [main:117] - GENERATED CALL = (A.x).toInt().sign
2021-03-12 01:54:04,947 [main:61] - replacement of 2 of type Int is (A.x).toInt().sign
2021-03-12 01:54:05,037 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:54:05,038 [main:53] - replacing (field.also { log += "get-A.x;" }, Int)
2021-03-12 01:54:05,038 [main:50] - replacing field.also { log += "get-A.x;" } Int
2021-03-12 01:54:05,038 [main:54] - Getting value of type Int
2021-03-12 01:54:05,126 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:54:05,127 [main:58] - GENERATED VALUE OF TYPE Int = -59965415
2021-03-12 01:54:05,127 [main:61] - GENERATED IS CALL =false
2021-03-12 01:54:05,312 [main:67] - randomType = ArrayDeque<UShort>
2021-03-12 01:54:05,402 [main:302] - generating value of type = ArrayDeque<UShort> false depth = 0
2021-03-12 01:54:05,494 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<UShort> = TODO()
2021-03-12 01:54:05,496 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<UShort> = TODO()
2021-03-12 01:54:05,585 [main:95] - GENERATED = ArrayDeque<UShort>()
2021-03-12 01:54:05,704 [main:149] - GENERATING call of type public open fun lastIndexOf(element: kotlin.UShort): kotlin.Int defined in kotlin.collections.ArrayDeque[DeserializedSimpleFunctionDescriptor@26b998e]
2021-03-12 01:54:05,794 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 01:54:05,795 [main:78] - Generated call from random type = (ArrayDeque<UShort>()).lastIndexOf(3867.toUShort())
2021-03-12 01:54:05,795 [main:106] - GETTING Int from Int
2021-03-12 01:54:05,829 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36f2d9f6]]
2021-03-12 01:54:05,829 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60]
2021-03-12 01:54:05,829 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36f2d9f6]
2021-03-12 01:54:05,829 [main:117] - GENERATED CALL = (B.get()).toShort().countTrailingZeroBits()
2021-03-12 01:54:05,830 [main:113] - Case = [public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6344afcd]]
2021-03-12 01:54:05,830 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6344afcd]
2021-03-12 01:54:05,919 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:54:05,920 [main:117] - GENERATED CALL = (B.get()).shr(-755302888)
2021-03-12 01:54:05,920 [main:113] - Case = [public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3854cce]]
2021-03-12 01:54:05,920 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3854cce]
2021-03-12 01:54:05,920 [main:117] - GENERATED CALL = (B.get()).unaryMinus()
2021-03-12 01:54:05,921 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2572ce0f]]
2021-03-12 01:54:05,921 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:54:06,040 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:54:06,041 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2572ce0f]
2021-03-12 01:54:06,135 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:54:06,136 [main:117] - GENERATED CALL = (B.get()).compareTo(-802821773).times(-13)
2021-03-12 01:54:06,136 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70b68745]]
2021-03-12 01:54:06,136 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:54:06,136 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70b68745]
2021-03-12 01:54:06,234 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:54:06,235 [main:117] - GENERATED CALL = (B.get()).toInt().ushr(1787302866)
2021-03-12 01:54:06,235 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@472c0627]]
2021-03-12 01:54:06,236 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:54:06,236 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@472c0627]
2021-03-12 01:54:06,339 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:54:06,340 [main:117] - GENERATED CALL = (B.get()).toInt().div(-50)
2021-03-12 01:54:06,340 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@31b01837], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@78d45150]]
2021-03-12 01:54:06,341 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@31b01837]
2021-03-12 01:54:06,434 [main:302] - generating value of type = Double true depth = 0
2021-03-12 01:54:06,435 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@78d45150]
2021-03-12 01:54:06,525 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:54:06,526 [main:117] - GENERATED CALL = (B.get()).div(0.43051504693058074).compareTo(85)
2021-03-12 01:54:06,526 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@188a4e82]]
2021-03-12 01:54:06,527 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235]
2021-03-12 01:54:06,527 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@188a4e82]
2021-03-12 01:54:06,527 [main:117] - GENERATED CALL = (B.get()).toByte().countTrailingZeroBits()
2021-03-12 01:54:06,527 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@28919d13]]
2021-03-12 01:54:06,527 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:54:06,527 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@28919d13]
2021-03-12 01:54:06,616 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:54:06,617 [main:117] - GENERATED CALL = (B.get()).toInt().plus(122)
2021-03-12 01:54:06,617 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235], public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6368f752]]
2021-03-12 01:54:06,617 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235]
2021-03-12 01:54:06,617 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6368f752]
2021-03-12 01:54:06,617 [main:117] - GENERATED CALL = (B.get()).toByte().toInt()
2021-03-12 01:54:06,617 [main:61] - replacement of field.also { log += "get-A.x;" } of type Int is (ArrayDeque<UShort>()).lastIndexOf(3867.toUShort())
2021-03-12 01:54:06,706 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:54:06,706 [main:53] - replacing ("$(logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f})))?.random();", String)
2021-03-12 01:54:06,706 [main:50] - replacing "$(logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f})))?.random();" String
2021-03-12 01:54:06,706 [main:54] - Getting value of type String
2021-03-12 01:54:06,794 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:54:06,795 [main:58] - GENERATED VALUE OF TYPE String = "ypnti"
2021-03-12 01:54:06,795 [main:61] - GENERATED IS CALL =false
2021-03-12 01:54:06,797 [main:67] - randomType = ULong
2021-03-12 01:54:06,885 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 01:54:06,919 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@3247307e]
2021-03-12 01:54:06,919 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7dbce7d4]
2021-03-12 01:54:07,010 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:54:07,011 [main:78] - Generated call from random type = (7219325397597076109.toULong()).toUByte().toString(-387708986)
2021-03-12 01:54:07,016 [main:106] - GETTING String from Int
2021-03-12 01:54:07,051 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6122df5e]]
2021-03-12 01:54:07,051 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:54:07,051 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6122df5e]
2021-03-12 01:54:07,139 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:54:07,140 [main:117] - GENERATED CALL = (B.get()).toChar().plus("oifvq")
2021-03-12 01:54:07,141 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a36c448]]
2021-03-12 01:54:07,141 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:54:07,141 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a36c448]
2021-03-12 01:54:07,141 [main:117] - GENERATED CALL = (B.get()).toChar().lowercase()
2021-03-12 01:54:07,141 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:54:07,141 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:54:07,141 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:54:07,229 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:54:07,230 [main:117] - GENERATED CALL = (B.get()).toInt().toString(-131429145)
2021-03-12 01:54:07,230 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]]
2021-03-12 01:54:07,230 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:54:07,231 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]
2021-03-12 01:54:07,231 [main:117] - GENERATED CALL = (B.get()).toChar().titlecase()
2021-03-12 01:54:07,231 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]]
2021-03-12 01:54:07,231 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:54:07,231 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]
2021-03-12 01:54:07,231 [main:117] - GENERATED CALL = (B.get()).toChar().uppercase()
2021-03-12 01:54:07,231 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:54:07,231 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e]
2021-03-12 01:54:07,231 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:54:07,231 [main:117] - GENERATED CALL = (B.get()).toLong().toString(B.get())
2021-03-12 01:54:07,231 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:54:07,231 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73]
2021-03-12 01:54:07,320 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:54:07,320 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:54:07,321 [main:117] - GENERATED CALL = (B.get()).div(7200027267606233508).toString(B.x)
2021-03-12 01:54:07,321 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:54:07,321 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:54:07,321 [main:117] - GENERATED CALL = (B.get()).toString(A.x)
2021-03-12 01:54:07,321 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:54:07,321 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:54:07,439 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:54:07,440 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:54:07,441 [main:117] - GENERATED CALL = (B.get()).compareTo(-31256167).toString(A.x)
2021-03-12 01:54:07,441 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]]
2021-03-12 01:54:07,441 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60]
2021-03-12 01:54:07,441 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]
2021-03-12 01:54:07,441 [main:117] - GENERATED CALL = (B.get()).toShort().toString(B.x)
2021-03-12 01:54:07,441 [main:61] - replacement of "$(logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f})))?.random();" of type String is (B.get()).toChar().titlecase()
2021-03-12 01:54:07,536 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:54:07,537 [main:53] - replacing (B.also {a: B -> require(false, { "nyaed"})}, B)
2021-03-12 01:54:07,537 [main:50] - replacing B.also {a: B -> require(false, { "nyaed"})} B
2021-03-12 01:54:07,537 [main:54] - Getting value of type B
2021-03-12 01:54:07,631 [main:302] - generating value of type = B false depth = 0
2021-03-12 01:54:07,632 [main:112] - generating klass B text = object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also {a: Int -> repeat(-445802008, {a: Int -> println("nebdx")})}

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $(value).compareTo(x).sign, $i3, $value);"
        x = value
    }
}
2021-03-12 01:54:07,632 [main:58] - GENERATED VALUE OF TYPE B = B
2021-03-12 01:54:07,632 [main:61] - GENERATED IS CALL =false
2021-03-12 01:54:07,834 [main:67] - randomType = Short?
2021-03-12 01:54:07,924 [main:302] - generating value of type = Short true depth = 0
2021-03-12 01:54:07,957 [main:106] - GETTING B from Int
2021-03-12 01:54:07,986 [main:106] - GETTING B from A
2021-03-12 01:54:07,990 [main:106] - GETTING B from Array<Float>
2021-03-12 01:54:08,000 [main:106] - GETTING B from Int
2021-03-12 01:54:08,001 [main:106] - GETTING B from Int
2021-03-12 01:54:08,001 [main:106] - GETTING B from B
2021-03-12 01:54:08,006 [main:61] - replacement of B.also {a: B -> require(false, { "nyaed"})} of type B is B
2021-03-12 01:54:08,093 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 01:54:08,183 [main:119] - TRYING TO REPLACE CONSTANT 9107430422333898917
2021-03-12 01:54:08,271 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 01:54:08,271 [main:66] - Compilation checking started
2021-03-12 01:54:08,492 [main:49] - Result = false
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also {a: T -> print("kaczm")}

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != ('㣝').toFloat().compareTo(-117)) throw AssertionError((actual).toInt().toString(A.x))
    if ((actual).equals("zqrlz")) throw AssertionError("$id expectedLog: $expectedLog, actual: $(A.x).toString(actual)")
}

object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also {a: Int -> repeat(-445802008, {a: Int -> println("nebdx")})}

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $(value).compareTo(x).sign, $i3, $value);"
        x = value
    }
}

fun getB() = B

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest((B.x).toLong().toString(831717749), (linkedSetOf<A>(A)).size.shl(B.x), "tsnqe") { ++getA().x }
    doTest("getA().x--", 1, (log).uppercase()) { 1997282016}

    doTest((0.093165815f).toChar().titlecase(), 1, (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).contentToString()) { -404305331}
    doTest("getB()[1, 2, 3].x--", (A.x).toInt().shr(B.x), "hhqzm") { (toLong().toULong()).compareTo(12.toUByte()).takeLowestOneBit() }

    return "OK"
}


2021-03-12 01:54:08,492 [main:119] - TRYING TO REPLACE CONSTANT 12
2021-03-12 01:54:08,580 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-12 01:54:08,580 [main:66] - Compilation checking started
2021-03-12 01:54:08,801 [main:49] - Result = false
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also {a: T -> print("kaczm")}

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != ('㣝').toFloat().compareTo(-117)) throw AssertionError((actual).toInt().toString(A.x))
    if ((actual).equals("zqrlz")) throw AssertionError("$id expectedLog: $expectedLog, actual: $(A.x).toString(actual)")
}

object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also {a: Int -> repeat(-445802008, {a: Int -> println("nebdx")})}

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $(value).compareTo(x).sign, $i3, $value);"
        x = value
    }
}

fun getB() = B

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest((B.x).toLong().toString(831717749), (linkedSetOf<A>(A)).size.shl(B.x), "tsnqe") { ++getA().x }
    doTest("getA().x--", 1, (log).uppercase()) { 1997282016}

    doTest((0.093165815f).toChar().titlecase(), 1, (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).contentToString()) { -404305331}
    doTest("getB()[1, 2, 3].x--", (A.x).toInt().shr(B.x), "hhqzm") { (9107430422333898917.toULong()).compareTo(x.toUByte()).takeLowestOneBit() }

    return "OK"
}


2021-03-12 01:54:08,801 [main:119] - TRYING TO REPLACE CONSTANT 1997282016
2021-03-12 01:54:08,890 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PARENTHESIZED)
2021-03-12 01:54:08,890 [main:66] - Compilation checking started
2021-03-12 01:54:09,273 [main:53] - Result = true
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also {a: T -> print("kaczm")}

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != ('㣝').toFloat().compareTo(-117)) throw AssertionError((actual).toInt().toString(A.x))
    if ((actual).equals("zqrlz")) throw AssertionError("$id expectedLog: $expectedLog, actual: $(A.x).toString(actual)")
}

object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also {a: Int -> repeat(-445802008, {a: Int -> println("nebdx")})}

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $(value).compareTo(x).sign, $i3, $value);"
        x = value
    }
}

fun getB() = B

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest((B.x).toLong().toString(831717749), (linkedSetOf<A>(A)).size.shl(B.x), "tsnqe") { ++getA().x }
    doTest("getA().x--", 1, (log).uppercase()) { (A.x)}

    doTest((0.093165815f).toChar().titlecase(), 1, (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).contentToString()) { -404305331}
    doTest("getB()[1, 2, 3].x--", (A.x).toInt().shr(B.x), "hhqzm") { (9107430422333898917.toULong()).compareTo(12.toUByte()).takeLowestOneBit() }

    return "OK"
}


2021-03-12 01:54:09,273 [main:119] - TRYING TO REPLACE CONSTANT 1513132776
2021-03-12 01:54:09,367 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:54:09,367 [main:66] - Compilation checking started
2021-03-12 01:54:09,696 [main:53] - Result = true
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also {a: T -> print("kaczm")}

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != ('㣝').toFloat().compareTo(-117)) throw AssertionError((actual).toInt().toString(A.x))
    if ((actual).equals("zqrlz")) throw AssertionError("$id expectedLog: $expectedLog, actual: $(A.x).toString(actual)")
}

object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also {a: Int -> repeat(-445802008, {a: Int -> println("nebdx")})}

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $(value).compareTo(x).sign, $i3, $value);"
        x = value
    }
}

fun getB() = B

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest((B.x).toLong().toString(831717749), (linkedSetOf<A>(A)).size.shl(B.x), "tsnqe") { ++getA().x }
    doTest("getA().x--", 1, (log).uppercase()) { (A.x)}

    doTest((0.093165815f).toChar().titlecase(), 1, (logged<Array<Float>>(Array<Float>((linkedSetOf<A>(A)).size.shl(B.x), {a: Int -> 0.6006693f}))).contentToString()) { -404305331}
    doTest("getB()[1, 2, 3].x--", (A.x).toInt().shr(B.x), "hhqzm") { (9107430422333898917.toULong()).compareTo(12.toUByte()).takeLowestOneBit() }

    return "OK"
}


2021-03-12 01:54:09,696 [main:119] - TRYING TO REPLACE CONSTANT 0.6006693f
2021-03-12 01:54:09,806 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(FLOAT_CONSTANT)
2021-03-12 01:54:09,806 [main:66] - Compilation checking started
2021-03-12 01:54:10,169 [main:53] - Result = true
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also {a: T -> print("kaczm")}

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != ('㣝').toFloat().compareTo(-117)) throw AssertionError((actual).toInt().toString(A.x))
    if ((actual).equals("zqrlz")) throw AssertionError("$id expectedLog: $expectedLog, actual: $(A.x).toString(actual)")
}

object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also {a: Int -> repeat(-445802008, {a: Int -> println("nebdx")})}

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $(value).compareTo(x).sign, $i3, $value);"
        x = value
    }
}

fun getB() = B

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest((B.x).toLong().toString(831717749), (linkedSetOf<A>(A)).size.shl(B.x), "tsnqe") { ++getA().x }
    doTest("getA().x--", 1, (log).uppercase()) { (A.x)}

    doTest((0.093165815f).toChar().titlecase(), 1, (logged<Array<Float>>(Array<Float>((linkedSetOf<A>(A)).size.shl(B.x), {a: Int -> 0.093165815f}))).contentToString()) { -404305331}
    doTest("getB()[1, 2, 3].x--", (A.x).toInt().shr(B.x), "hhqzm") { (9107430422333898917.toULong()).compareTo(12.toUByte()).takeLowestOneBit() }

    return "OK"
}


2021-03-12 01:54:10,169 [main:119] - TRYING TO REPLACE CONSTANT '㣝'
2021-03-12 01:54:10,271 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 01:54:10,272 [main:66] - Compilation checking started
2021-03-12 01:54:10,526 [main:49] - Result = false
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also {a: T -> print("kaczm")}

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != (toChar()).toFloat().compareTo(-117)) throw AssertionError((actual).toInt().toString(A.x))
    if ((actual).equals("zqrlz")) throw AssertionError("$id expectedLog: $expectedLog, actual: $(A.x).toString(actual)")
}

object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also {a: Int -> repeat(-445802008, {a: Int -> println("nebdx")})}

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $(value).compareTo(x).sign, $i3, $value);"
        x = value
    }
}

fun getB() = B

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest((B.x).toLong().toString(831717749), (linkedSetOf<A>(A)).size.shl(B.x), "tsnqe") { ++getA().x }
    doTest("getA().x--", 1, (log).uppercase()) { (A.x)}

    doTest((0.093165815f).toChar().titlecase(), 1, (logged<Array<Float>>(Array<Float>((linkedSetOf<A>(A)).size.shl(B.x), {a: Int -> 0.093165815f}))).contentToString()) { -404305331}
    doTest("getB()[1, 2, 3].x--", (A.x).toInt().shr(B.x), "hhqzm") { (9107430422333898917.toULong()).compareTo(12.toUByte()).takeLowestOneBit() }

    return "OK"
}


2021-03-12 01:54:10,526 [main:119] - TRYING TO REPLACE CONSTANT 117
2021-03-12 01:54:10,617 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 01:54:10,618 [main:66] - Compilation checking started
2021-03-12 01:54:10,854 [main:49] - Result = false
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also {a: T -> print("kaczm")}

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != ('㣝').toFloat().compareTo(compareTo(-117))) throw AssertionError((actual).toInt().toString(A.x))
    if ((actual).equals("zqrlz")) throw AssertionError("$id expectedLog: $expectedLog, actual: $(A.x).toString(actual)")
}

object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also {a: Int -> repeat(-445802008, {a: Int -> println("nebdx")})}

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $(value).compareTo(x).sign, $i3, $value);"
        x = value
    }
}

fun getB() = B

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest((B.x).toLong().toString(831717749), (linkedSetOf<A>(A)).size.shl(B.x), "tsnqe") { ++getA().x }
    doTest("getA().x--", 1, (log).uppercase()) { (A.x)}

    doTest((0.093165815f).toChar().titlecase(), 1, (logged<Array<Float>>(Array<Float>((linkedSetOf<A>(A)).size.shl(B.x), {a: Int -> 0.093165815f}))).contentToString()) { -404305331}
    doTest("getB()[1, 2, 3].x--", (A.x).toInt().shr(B.x), "hhqzm") { (9107430422333898917.toULong()).compareTo(12.toUByte()).takeLowestOneBit() }

    return "OK"
}


2021-03-12 01:54:10,854 [main:119] - TRYING TO REPLACE CONSTANT 445802008
2021-03-12 01:54:10,945 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 01:54:10,946 [main:66] - Compilation checking started
2021-03-12 01:54:11,264 [main:53] - Result = true
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also {a: T -> print("kaczm")}

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != ('㣝').toFloat().compareTo(-117)) throw AssertionError((actual).toInt().toString(A.x))
    if ((actual).equals("zqrlz")) throw AssertionError("$id expectedLog: $expectedLog, actual: $(A.x).toString(actual)")
}

object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also {a: Int -> repeat(117, {a: Int -> println("nebdx")})}

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $(value).compareTo(x).sign, $i3, $value);"
        x = value
    }
}

fun getB() = B

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest((B.x).toLong().toString(831717749), (linkedSetOf<A>(A)).size.shl(B.x), "tsnqe") { ++getA().x }
    doTest("getA().x--", 1, (log).uppercase()) { (A.x)}

    doTest((0.093165815f).toChar().titlecase(), 1, (logged<Array<Float>>(Array<Float>((linkedSetOf<A>(A)).size.shl(B.x), {a: Int -> 0.093165815f}))).contentToString()) { -404305331}
    doTest("getB()[1, 2, 3].x--", (A.x).toInt().shr(B.x), "hhqzm") { (9107430422333898917.toULong()).compareTo(12.toUByte()).takeLowestOneBit() }

    return "OK"
}


2021-03-12 01:54:11,264 [main:119] - TRYING TO REPLACE CONSTANT 0.093165815f
2021-03-12 01:54:11,369 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(PARENTHESIZED)
2021-03-12 01:54:11,370 [main:66] - Compilation checking started
2021-03-12 01:54:11,717 [main:53] - Result = true
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also {a: T -> print("kaczm")}

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != ('㣝').toFloat().compareTo(-117)) throw AssertionError((actual).toInt().toString(A.x))
    if ((actual).equals("zqrlz")) throw AssertionError("$id expectedLog: $expectedLog, actual: $(A.x).toString(actual)")
}

object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also {a: Int -> repeat(117, {a: Int -> println("nebdx")})}

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $(value).compareTo(x).sign, $i3, $value);"
        x = value
    }
}

fun getB() = B

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest((B.x).toLong().toString(831717749), (linkedSetOf<A>(A)).size.shl(B.x), "tsnqe") { ++getA().x }
    doTest("getA().x--", 1, (log).uppercase()) { (A.x)}

    doTest(((0.093165815f)).toChar().titlecase(), 1, (logged<Array<Float>>(Array<Float>((linkedSetOf<A>(A)).size.shl(B.x), {a: Int -> 0.093165815f}))).contentToString()) { -404305331}
    doTest("getB()[1, 2, 3].x--", (A.x).toInt().shr(B.x), "hhqzm") { (9107430422333898917.toULong()).compareTo(12.toUByte()).takeLowestOneBit() }

    return "OK"
}


2021-03-12 01:54:11,717 [main:119] - TRYING TO REPLACE CONSTANT 831717749
2021-03-12 01:54:11,819 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PARENTHESIZED)
2021-03-12 01:54:11,819 [main:66] - Compilation checking started
2021-03-12 01:54:12,146 [main:53] - Result = true
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also {a: T -> print("kaczm")}

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != ('㣝').toFloat().compareTo(-117)) throw AssertionError((actual).toInt().toString(A.x))
    if ((actual).equals("zqrlz")) throw AssertionError("$id expectedLog: $expectedLog, actual: $(A.x).toString(actual)")
}

object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also {a: Int -> repeat(117, {a: Int -> println("nebdx")})}

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $(value).compareTo(x).sign, $i3, $value);"
        x = value
    }
}

fun getB() = B

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest((B.x).toLong().toString((A.x)), (linkedSetOf<A>(A)).size.shl(B.x), "tsnqe") { ++getA().x }
    doTest("getA().x--", 1, (log).uppercase()) { (A.x)}

    doTest(((0.093165815f)).toChar().titlecase(), 1, (logged<Array<Float>>(Array<Float>((linkedSetOf<A>(A)).size.shl(B.x), {a: Int -> 0.093165815f}))).contentToString()) { -404305331}
    doTest("getB()[1, 2, 3].x--", (A.x).toInt().shr(B.x), "hhqzm") { (9107430422333898917.toULong()).compareTo(12.toUByte()).takeLowestOneBit() }

    return "OK"
}


2021-03-12 01:54:12,147 [main:119] - TRYING TO REPLACE CONSTANT 404305331
2021-03-12 01:54:12,242 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 01:54:12,242 [main:66] - Compilation checking started
2021-03-12 01:54:12,485 [main:49] - Result = false
Text:
var log = ""

fun <T> logged(value: T): T =
    value.also {a: T -> print("kaczm")}

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != ('㣝').toFloat().compareTo(-117)) throw AssertionError((actual).toInt().toString(A.x))
    if ((actual).equals("zqrlz")) throw AssertionError("$id expectedLog: $expectedLog, actual: $(A.x).toString(actual)")
}

object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also {a: Int -> repeat(117, {a: Int -> println("nebdx")})}

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $(value).compareTo(x).sign, $i3, $value);"
        x = value
    }
}

fun getB() = B

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest((B.x).toLong().toString((A.x)), (linkedSetOf<A>(A)).size.shl(B.x), "tsnqe") { ++getA().x }
    doTest("getA().x--", 1, (log).uppercase()) { (A.x)}

    doTest(((0.093165815f)).toChar().titlecase(), 1, (logged<Array<Float>>(Array<Float>((linkedSetOf<A>(A)).size.shl(B.x), {a: Int -> 0.093165815f}))).contentToString()) { also {a: Int -> repeat(117, {a: Int -> println("nebdx")})}}
    doTest("getB()[1, 2, 3].x--", (A.x).toInt().shr(B.x), "hhqzm") { (9107430422333898917.toULong()).compareTo(12.toUByte()).takeLowestOneBit() }

    return "OK"
}


2021-03-12 01:54:12,501 [main:66] - Compilation checking started
2021-03-12 01:54:12,834 [main:41] - AFTER TRY 0 res = var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}
2021-03-12 01:54:13,027 [main:112] - generating klass A text = object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}
2021-03-12 01:54:13,027 [main:112] - generating klass B text = object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}
2021-03-12 01:54:13,216 [main:43] - GENERATING CALL OF fun <T> logged(value: T): T =
    value.also { log += "$value;" }
2021-03-12 01:54:13,320 [main:61] - WITHOUT TYPE PARAMS = fun <T> logged(value: UInt): UInt =
    value.also { log += "$value;" }
2021-03-12 01:54:13,420 [main:302] - generating value of type = UInt true depth = 1
2021-03-12 01:54:13,421 [main:95] - GENERATED = logged<UInt>(1851723815.toUInt())
2021-03-12 01:54:13,512 [main:43] - GENERATING CALL OF fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}
2021-03-12 01:54:13,512 [main:61] - WITHOUT TYPE PARAMS = fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}
2021-03-12 01:54:13,727 [main:302] - generating value of type = String true depth = 1
2021-03-12 01:54:13,728 [main:302] - generating value of type = Int true depth = 1
2021-03-12 01:54:13,728 [main:302] - generating value of type = String true depth = 1
2021-03-12 01:54:13,729 [main:302] - generating value of type = Function0<Int> false depth = 1
2021-03-12 01:54:13,729 [main:302] - generating value of type = Int true depth = 2
2021-03-12 01:54:13,730 [main:95] - GENERATED = doTest("fqeru", 1883675798, "owoji", { 1731914237})
2021-03-12 01:54:13,828 [main:43] - Try №0
2021-03-12 01:54:21,418 [main:48] - Already checked
2021-03-12 01:54:21,582 [main:48] - Already checked
2021-03-12 01:54:24,897 [main:69] - Trying to insert override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }
2021-03-12 01:54:25,088 [main:66] - Compilation checking started
2021-03-12 01:54:26,065 [main:103] - Trying to change 189 nodes
2021-03-12 01:54:26,065 [main:107] - replacing (it?.methodName?.startsWith(method) == true, Boolean)
2021-03-12 01:54:26,065 [main:50] - replacing it?.methodName?.startsWith(method) == true Boolean
2021-03-12 01:54:26,066 [main:54] - Getting value of type Boolean
2021-03-12 01:54:26,206 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:54:26,208 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 01:54:26,208 [main:61] - GENERATED IS CALL =false
2021-03-12 01:54:26,364 [main:67] - randomType = ULong
2021-03-12 01:54:26,507 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 01:54:26,550 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@559e9236]
2021-03-12 01:54:26,691 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:54:26,691 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@40165da2]
2021-03-12 01:54:26,831 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:54:26,833 [main:78] - Generated call from random type = (3610657577449778905.toULong()).equals("sxaaa").or(false)
2021-03-12 01:54:26,834 [main:106] - GETTING Boolean from A
2021-03-12 01:54:26,841 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@533c3aca], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@147c729a]]
2021-03-12 01:54:26,841 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@147c729a]
2021-03-12 01:54:26,978 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:54:26,978 [main:117] - GENERATED CALL = (getA()).x.equals("dpnqn")
2021-03-12 01:54:26,978 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@13c2842b], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7d7e4be0]]
2021-03-12 01:54:26,979 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@13c2842b]
2021-03-12 01:54:27,119 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:54:27,120 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7d7e4be0]
2021-03-12 01:54:27,265 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:54:27,268 [main:117] - GENERATED CALL = (getA()).equals("iyrju").xor(true)
2021-03-12 01:54:27,268 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@13c2842b], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@40165da2]]
2021-03-12 01:54:27,268 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@13c2842b]
2021-03-12 01:54:27,408 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:54:27,408 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@40165da2]
2021-03-12 01:54:27,545 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:54:27,547 [main:117] - GENERATED CALL = (getA()).equals("evvds").or(true)
2021-03-12 01:54:27,547 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@13c2842b], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b71fb8c]]
2021-03-12 01:54:27,547 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@13c2842b]
2021-03-12 01:54:27,684 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:54:27,684 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b71fb8c]
2021-03-12 01:54:27,684 [main:117] - GENERATED CALL = (getA()).equals("ikuxc").not()
2021-03-12 01:54:27,684 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@13c2842b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4cfdd607]]
2021-03-12 01:54:27,684 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@13c2842b]
2021-03-12 01:54:27,820 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:54:27,821 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4cfdd607]
2021-03-12 01:54:27,996 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:54:27,996 [main:117] - GENERATED CALL = (getA()).equals("fnett").equals("azpks")
2021-03-12 01:54:27,996 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@13c2842b]]
2021-03-12 01:54:27,996 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@13c2842b]
2021-03-12 01:54:28,151 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:54:28,151 [main:117] - GENERATED CALL = (getA()).equals("smdro")
2021-03-12 01:54:28,151 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@13c2842b], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6c23465f]]
2021-03-12 01:54:28,151 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@13c2842b]
2021-03-12 01:54:28,306 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:54:28,307 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6c23465f]
2021-03-12 01:54:28,455 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:54:28,458 [main:117] - GENERATED CALL = (getA()).equals("jqosp").and(true)
2021-03-12 01:54:28,458 [main:114] - replacement of it?.methodName?.startsWith(method) == true of type Boolean is (3610657577449778905.toULong()).equals("sxaaa").or(false)
2021-03-12 01:54:28,598 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:54:28,598 [main:66] - Compilation checking started
2021-03-12 01:54:29,195 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        val prope8: Kla1 = this
        return prope8.fu4()!!.s
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    fu0 {
        Kla2().fu5()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"
    fu0 {
        Kla2().fu6()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 2 $prope0"

    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:54:29,198 [main:107] - replacing (suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}, Ty0)
2021-03-12 01:54:29,198 [main:50] - replacing suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
} Ty0
2021-03-12 01:54:29,198 [main:54] - Getting value of type Ty0
2021-03-12 01:54:29,337 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 01:54:29,342 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 01:54:30,344 [main:67] - randomType = HashMap<Kla2, MutableMap<Function1<String, LinkedHashSet<Long?>>, String?>?>
2021-03-12 01:54:30,514 [main:302] - generating value of type = HashMap<Kla2, MutableMap<Function1<String, LinkedHashSet<Long?>>, String?>?> false depth = 0
2021-03-12 01:54:30,658 [main:43] - GENERATING CALL OF fun <K, V> HashMap(): HashMap<Kla2, MutableMap<Function1<String, LinkedHashSet<Long?>>, String?>?> = TODO()
2021-03-12 01:54:30,662 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> HashMap(): HashMap<Kla2, MutableMap<Function1<String, LinkedHashSet<Long?>>, String?>?> = TODO()
2021-03-12 01:54:30,804 [main:95] - GENERATED = HashMap<Kla2, MutableMap<Function1<String, LinkedHashSet<Long?>>, String?>?>()
2021-03-12 01:54:31,003 [main:106] - GETTING Ty0 from Int
2021-03-12 01:54:31,033 [main:106] - GETTING Ty0 from Int
2021-03-12 01:54:31,034 [main:106] - GETTING Ty0 from Int
2021-03-12 01:54:31,035 [main:106] - GETTING Ty0 from B
2021-03-12 01:54:31,040 [main:106] - GETTING Ty0 from A
2021-03-12 01:54:31,046 [main:106] - GETTING Ty0 from Int
2021-03-12 01:54:31,047 [main:106] - GETTING Ty0 from UInt
2021-03-12 01:54:31,076 [main:106] - GETTING Ty0 from A
2021-03-12 01:54:31,077 [main:106] - GETTING Ty0 from B
2021-03-12 01:54:31,077 [main:106] - GETTING Ty0 from Int
2021-03-12 01:54:31,078 [main:106] - GETTING Ty0 from Int
2021-03-12 01:54:31,078 [main:111] - Cant find and generate replacement for suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
} type Ty0
2021-03-12 01:54:31,078 [main:107] - replacing (prope0, String)
2021-03-12 01:54:31,078 [main:50] - replacing prope0 String
2021-03-12 01:54:31,079 [main:54] - Getting value of type String
2021-03-12 01:54:31,216 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:54:31,218 [main:58] - GENERATED VALUE OF TYPE String = "degsi"
2021-03-12 01:54:31,218 [main:61] - GENERATED IS CALL =false
2021-03-12 01:54:31,374 [main:67] - randomType = Kla8
2021-03-12 01:54:31,512 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-12 01:54:31,515 [main:112] - generating klass Kla8 text = object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}
2021-03-12 01:54:31,533 [main:106] - GETTING String from A
2021-03-12 01:54:31,537 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@2dfd7342], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:54:31,537 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:54:31,538 [main:117] - GENERATED CALL = (getA()).x.toString(B.get())
2021-03-12 01:54:31,538 [main:114] - replacement of prope0 of type String is "degsi"
2021-03-12 01:54:31,672 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 01:54:31,673 [main:66] - Compilation checking started
2021-03-12 01:54:32,068 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        "degsi" = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        val prope8: Kla1 = this
        return prope8.fu4()!!.s
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    fu0 {
        Kla2().fu5()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"
    fu0 {
        Kla2().fu6()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 2 $prope0"

    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:54:32,070 [main:107] - replacing (prope0.getOrThrow(), Ty0)
2021-03-12 01:54:32,070 [main:50] - replacing prope0.getOrThrow() Ty0
2021-03-12 01:54:32,070 [main:54] - Getting value of type Ty0
2021-03-12 01:54:32,209 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 01:54:32,214 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 01:54:32,549 [main:67] - randomType = MutableMap<String, Kla2>
2021-03-12 01:54:32,550 [main:106] - GETTING Ty0 from Int
2021-03-12 01:54:32,581 [main:106] - GETTING Ty0 from A
2021-03-12 01:54:32,585 [main:106] - GETTING Ty0 from Int
2021-03-12 01:54:32,586 [main:106] - GETTING Ty0 from Int
2021-03-12 01:54:32,587 [main:106] - GETTING Ty0 from B
2021-03-12 01:54:32,592 [main:106] - GETTING Ty0 from Int
2021-03-12 01:54:32,593 [main:106] - GETTING Ty0 from Int
2021-03-12 01:54:32,593 [main:106] - GETTING Ty0 from A
2021-03-12 01:54:32,594 [main:106] - GETTING Ty0 from Int
2021-03-12 01:54:32,595 [main:106] - GETTING Ty0 from B
2021-03-12 01:54:32,595 [main:106] - GETTING Ty0 from UInt
2021-03-12 01:54:32,617 [main:111] - Cant find and generate replacement for prope0.getOrThrow() type Ty0
2021-03-12 01:54:32,617 [main:107] - replacing ("\n", String)
2021-03-12 01:54:32,618 [main:50] - replacing "\n" String
2021-03-12 01:54:32,618 [main:54] - Getting value of type String
2021-03-12 01:54:32,756 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:54:32,758 [main:58] - GENERATED VALUE OF TYPE String = "eolcf"
2021-03-12 01:54:32,758 [main:61] - GENERATED IS CALL =false
2021-03-12 01:54:32,945 [main:67] - randomType = Kla8
2021-03-12 01:54:33,085 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-12 01:54:33,087 [main:112] - generating klass Kla8 text = object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}
2021-03-12 01:54:33,106 [main:106] - GETTING String from Int
2021-03-12 01:54:33,140 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]]
2021-03-12 01:54:33,140 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:54:33,140 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]
2021-03-12 01:54:33,140 [main:117] - GENERATED CALL = (B.get()).toChar().uppercase()
2021-03-12 01:54:33,140 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]]
2021-03-12 01:54:33,140 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60]
2021-03-12 01:54:33,140 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]
2021-03-12 01:54:33,140 [main:117] - GENERATED CALL = (B.get()).toShort().toString(B.x)
2021-03-12 01:54:33,140 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:54:33,140 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:54:33,283 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:54:33,286 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:54:33,286 [main:117] - GENERATED CALL = (B.get()).compareTo(534068877).toString(B.get())
2021-03-12 01:54:33,286 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:54:33,286 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:54:33,286 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:54:33,428 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:54:33,431 [main:117] - GENERATED CALL = (B.get()).toInt().toString(21352546)
2021-03-12 01:54:33,431 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:54:33,431 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e]
2021-03-12 01:54:33,431 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:54:33,431 [main:117] - GENERATED CALL = (B.get()).toLong().toString(logged(1))
2021-03-12 01:54:33,431 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc0516]]
2021-03-12 01:54:33,431 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235]
2021-03-12 01:54:33,431 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc0516]
2021-03-12 01:54:33,431 [main:117] - GENERATED CALL = (B.get()).toByte().toString(logged(2))
2021-03-12 01:54:33,431 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a36c448]]
2021-03-12 01:54:33,431 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:54:33,431 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a36c448]
2021-03-12 01:54:33,432 [main:117] - GENERATED CALL = (B.get()).toChar().lowercase()
2021-03-12 01:54:33,432 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6122df5e]]
2021-03-12 01:54:33,432 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:54:33,432 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6122df5e]
2021-03-12 01:54:33,573 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:54:33,577 [main:117] - GENERATED CALL = (B.get()).toChar().plus("dawee")
2021-03-12 01:54:33,577 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:54:33,577 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:54:33,577 [main:117] - GENERATED CALL = (B.get()).toString(B.x)
2021-03-12 01:54:33,577 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:54:33,578 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73]
2021-03-12 01:54:33,719 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:54:33,722 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:54:33,722 [main:117] - GENERATED CALL = (B.get()).div(-7963045271796185603).toString(B.x)
2021-03-12 01:54:33,722 [main:114] - replacement of "\n" of type String is (B.get()).toLong().toString(logged(1))
2021-03-12 01:54:33,857 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:54:33,857 [main:66] - Compilation checking started
2021-03-12 01:54:34,231 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        val prope8: Kla1 = this
        return prope8.fu4()!!.s
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    fu0 {
        Kla2().fu5()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"
    fu0 {
        Kla2().fu6()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 2 $prope0"

    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = (B.get()).toLong().toString(logged(1))))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:54:34,233 [main:107] - replacing ("tail-call optimization hit: method " + method, String)
2021-03-12 01:54:34,233 [main:50] - replacing "tail-call optimization hit: method " + method String
2021-03-12 01:54:34,233 [main:54] - Getting value of type String
2021-03-12 01:54:34,369 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:54:34,372 [main:58] - GENERATED VALUE OF TYPE String = "rhuas"
2021-03-12 01:54:34,372 [main:61] - GENERATED IS CALL =false
2021-03-12 01:54:34,382 [main:67] - randomType = A
2021-03-12 01:54:34,521 [main:302] - generating value of type = A false depth = 0
2021-03-12 01:54:34,524 [main:112] - generating klass A text = object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}
2021-03-12 01:54:34,529 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:54:34,666 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:54:34,668 [main:78] - Generated call from random type = (A).x.toString(2001813799)
2021-03-12 01:54:34,669 [main:106] - GETTING String from A
2021-03-12 01:54:34,674 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@2dfd7342], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:54:34,674 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:54:34,674 [main:117] - GENERATED CALL = (getA()).x.toString(B.x)
2021-03-12 01:54:34,674 [main:114] - replacement of "tail-call optimization hit: method " + method of type String is "rhuas"
2021-03-12 01:54:34,810 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 01:54:34,810 [main:66] - Compilation checking started
2021-03-12 01:54:35,400 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        val prope8: Kla1 = this
        return prope8.fu4()!!.s
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    fu0 {
        Kla2().fu5()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"
    fu0 {
        Kla2().fu6()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 2 $prope0"

    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:54:35,402 [main:107] - replacing (!prope6, Boolean)
2021-03-12 01:54:35,403 [main:50] - replacing !prope6 Boolean
2021-03-12 01:54:35,403 [main:54] - Getting value of type Boolean
2021-03-12 01:54:35,538 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:54:35,541 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 01:54:35,541 [main:61] - GENERATED IS CALL =false
2021-03-12 01:54:35,702 [main:67] - randomType = Array<Kla0>
2021-03-12 01:54:35,875 [main:302] - generating value of type = Array<Kla0> false depth = 0
2021-03-12 01:54:36,014 [main:43] - GENERATING CALL OF fun <T> enumValues(): Array<Kla0> = TODO()
2021-03-12 01:54:36,017 [main:61] - WITHOUT TYPE PARAMS = fun <T> enumValues(): Array<Kla0> = TODO()
2021-03-12 01:54:36,159 [main:95] - GENERATED = enumValues<Kla0>()
2021-03-12 01:54:36,169 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@60486fcc]
2021-03-12 01:54:36,303 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:54:36,303 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b71fb8c]
2021-03-12 01:54:36,304 [main:78] - Generated call from random type = (enumValues<Kla0>()).equals("vhmlp").not()
2021-03-12 01:54:36,304 [main:114] - replacement of !prope6 of type Boolean is (enumValues<Kla0>()).equals("vhmlp").not()
2021-03-12 01:54:36,441 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:54:36,441 [main:66] - Compilation checking started
2021-03-12 01:54:36,842 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        val prope8: Kla1 = this
        return prope8.fu4()!!.s
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    fu0 {
        Kla2().fu5()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"
    fu0 {
        Kla2().fu6()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 2 $prope0"

    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (enumValues<Kla0>()).equals("vhmlp").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:54:36,844 [main:107] - replacing (Kla2().fu5(), String)
2021-03-12 01:54:36,844 [main:50] - replacing Kla2().fu5() String
2021-03-12 01:54:36,844 [main:54] - Getting value of type String
2021-03-12 01:54:36,981 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:54:36,984 [main:58] - GENERATED VALUE OF TYPE String = "pytvs"
2021-03-12 01:54:36,984 [main:61] - GENERATED IS CALL =false
2021-03-12 01:54:36,994 [main:67] - randomType = Kla2
2021-03-12 01:54:37,129 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 01:54:37,132 [main:112] - generating klass Kla2 text = class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        val prope8: Kla1 = this
        return prope8.fu4()!!.s
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}
2021-03-12 01:54:37,270 [main:194] - Type params = []
2021-03-12 01:54:37,414 [main:149] - GENERATING call of type public final suspend fun fu5(): kotlin.String defined in Kla2[SimpleFunctionDescriptorImpl@3daff0d7]
2021-03-12 01:54:37,414 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65792f68]
2021-03-12 01:54:37,549 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:54:37,552 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:54:37,554 [main:78] - Generated call from random type = (Kla2()).fu5().takeLastWhile({a: Char -> true})
2021-03-12 01:54:37,555 [main:106] - GETTING String from Int
2021-03-12 01:54:37,585 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]]
2021-03-12 01:54:37,585 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60]
2021-03-12 01:54:37,585 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]
2021-03-12 01:54:37,585 [main:117] - GENERATED CALL = (logged(1)).toShort().toString(logged(2))
2021-03-12 01:54:37,585 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]]
2021-03-12 01:54:37,585 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:54:37,585 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]
2021-03-12 01:54:37,585 [main:117] - GENERATED CALL = (logged(1)).toChar().uppercase()
2021-03-12 01:54:37,585 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:54:37,585 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:54:37,586 [main:117] - GENERATED CALL = (logged(1)).toString(B.get())
2021-03-12 01:54:37,586 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:54:37,586 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e]
2021-03-12 01:54:37,586 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:54:37,586 [main:117] - GENERATED CALL = (logged(1)).toLong().toString(logged(3))
2021-03-12 01:54:37,586 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]]
2021-03-12 01:54:37,586 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:54:37,586 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]
2021-03-12 01:54:37,586 [main:117] - GENERATED CALL = (logged(1)).toChar().titlecase()
2021-03-12 01:54:37,586 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:54:37,586 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:54:37,586 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:54:37,722 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:54:37,724 [main:117] - GENERATED CALL = (logged(1)).toInt().toString(648642357)
2021-03-12 01:54:37,724 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:54:37,724 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73]
2021-03-12 01:54:37,860 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:54:37,863 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:54:37,863 [main:117] - GENERATED CALL = (logged(1)).div(-4534054416181813181).toString(B.x)
2021-03-12 01:54:37,863 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6122df5e]]
2021-03-12 01:54:37,863 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:54:37,863 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6122df5e]
2021-03-12 01:54:37,864 [main:117] - GENERATED CALL = (logged(1)).toChar().plus(var log =
2021-03-12 01:54:37,864 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:54:37,864 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:54:37,864 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:54:37,864 [main:117] - GENERATED CALL = (logged(1)).compareTo(B.x).toString(B.get())
2021-03-12 01:54:37,864 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a36c448]]
2021-03-12 01:54:37,864 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:54:37,864 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a36c448]
2021-03-12 01:54:37,864 [main:117] - GENERATED CALL = (logged(1)).toChar().lowercase()
2021-03-12 01:54:37,864 [main:114] - replacement of Kla2().fu5() of type String is (logged(1)).div(-4534054416181813181).toString(B.x)
2021-03-12 01:54:37,999 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:54:37,999 [main:66] - Compilation checking started
2021-03-12 01:54:38,570 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        val prope8: Kla1 = this
        return prope8.fu4()!!.s
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"
    fu0 {
        Kla2().fu6()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 2 $prope0"

    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:54:38,572 [main:107] - replacing (prope0, String)
2021-03-12 01:54:38,572 [main:50] - replacing prope0 String
2021-03-12 01:54:38,572 [main:54] - Getting value of type String
2021-03-12 01:54:38,747 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:54:38,750 [main:58] - GENERATED VALUE OF TYPE String = "bwjeq"
2021-03-12 01:54:38,750 [main:61] - GENERATED IS CALL =false
2021-03-12 01:54:39,876 [main:67] - randomType = MutableMap<Function1<Kla5<Kla7>, UByte>, Byte>?
2021-03-12 01:54:39,877 [main:106] - GETTING String from B
2021-03-12 01:54:39,884 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@4f270825], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:54:39,884 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:54:39,884 [main:117] - GENERATED CALL = (getB()).x.toString(logged(3))
2021-03-12 01:54:39,884 [main:114] - replacement of prope0 of type String is (getB()).x.toString(logged(3))
2021-03-12 01:54:40,021 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:54:40,021 [main:66] - Compilation checking started
2021-03-12 01:54:40,612 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        val prope8: Kla1 = this
        return prope8.fu4()!!.s
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"
    fu0 {
        Kla2().fu6()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:54:40,614 [main:107] - replacing ("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"), String)
2021-03-12 01:54:40,614 [main:50] - replacing "rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n") String
2021-03-12 01:54:40,614 [main:54] - Getting value of type String
2021-03-12 01:54:40,753 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:54:40,755 [main:58] - GENERATED VALUE OF TYPE String = "vwsvg"
2021-03-12 01:54:40,755 [main:61] - GENERATED IS CALL =false
2021-03-12 01:54:40,766 [main:67] - randomType = Kla2
2021-03-12 01:54:40,905 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 01:54:40,907 [main:112] - generating klass Kla2 text = class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        val prope8: Kla1 = this
        return prope8.fu4()!!.s
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}
2021-03-12 01:54:41,047 [main:194] - Type params = []
2021-03-12 01:54:41,192 [main:149] - GENERATING call of type public final suspend fun fu5(): kotlin.String defined in Kla2[SimpleFunctionDescriptorImpl@3daff0d7]
2021-03-12 01:54:41,192 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e4461a1]
2021-03-12 01:54:41,330 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:54:41,333 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:54:41,336 [main:78] - Generated call from random type = (Kla2()).fu5().dropWhile({a: Char -> true})
2021-03-12 01:54:41,336 [main:106] - GETTING String from B
2021-03-12 01:54:41,342 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@4f270825], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:54:41,342 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:54:41,343 [main:117] - GENERATED CALL = (getB()).x.toString(B.get())
2021-03-12 01:54:41,343 [main:114] - replacement of "rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n") of type String is (getB()).x.toString(B.get())
2021-03-12 01:54:41,479 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:54:41,479 [main:66] - Compilation checking started
2021-03-12 01:54:41,908 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        val prope8: Kla1 = this
        return prope8.fu4()!!.s
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"
    fu0 {
        Kla2().fu6()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith(method) == true } ?: error((getB()).x.toString(B.get()))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:54:41,911 [main:107] - replacing (" is not subtype of CoroutineStackFrame", String)
2021-03-12 01:54:41,911 [main:50] - replacing " is not subtype of CoroutineStackFrame" String
2021-03-12 01:54:41,911 [main:54] - Getting value of type String
2021-03-12 01:54:42,059 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:54:42,061 [main:58] - GENERATED VALUE OF TYPE String = "wjykb"
2021-03-12 01:54:42,061 [main:61] - GENERATED IS CALL =false
2021-03-12 01:54:42,227 [main:67] - randomType = Kla6?
2021-03-12 01:54:42,373 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 01:54:42,375 [main:112] - generating klass Kla6 text = class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}
2021-03-12 01:54:42,383 [main:106] - GETTING String from B
2021-03-12 01:54:42,392 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@446e19b3], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:54:42,392 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:54:42,531 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:54:42,534 [main:117] - GENERATED CALL = (getB()).x.toString(847668034)
2021-03-12 01:54:42,534 [main:114] - replacement of " is not subtype of CoroutineStackFrame" of type String is (getB()).x.toString(847668034)
2021-03-12 01:54:42,674 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:54:42,674 [main:66] - Compilation checking started
2021-03-12 01:54:43,272 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        val prope8: Kla1 = this
        return prope8.fu4()!!.s
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"
    fu0 {
        Kla2().fu6()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:54:43,274 [main:107] - replacing ("OK", String)
2021-03-12 01:54:43,274 [main:50] - replacing "OK" String
2021-03-12 01:54:43,274 [main:54] - Getting value of type String
2021-03-12 01:54:43,413 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:54:43,416 [main:58] - GENERATED VALUE OF TYPE String = "kpirk"
2021-03-12 01:54:43,416 [main:61] - GENERATED IS CALL =false
2021-03-12 01:54:44,084 [main:67] - randomType = LinkedHashMap<UByte, HashMap<Boolean, Kla6>>?
2021-03-12 01:54:44,222 [main:302] - generating value of type = LinkedHashMap<UByte, HashMap<Boolean, Kla6>> false depth = 0
2021-03-12 01:54:44,368 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<UByte, HashMap<Boolean, Kla6>> = TODO()
2021-03-12 01:54:44,371 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<UByte, HashMap<Boolean, Kla6>> = TODO()
2021-03-12 01:54:44,519 [main:95] - GENERATED = linkedMapOf<UByte, HashMap<Boolean, Kla6>>()
2021-03-12 01:54:44,691 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:54:44,691 [main:78] - Generated call from random type = (linkedMapOf<UByte, HashMap<Boolean, Kla6>>())?.size.toString(logged(1))
2021-03-12 01:54:44,692 [main:106] - GETTING String from Int
2021-03-12 01:54:44,721 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:54:44,721 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:54:44,722 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:54:44,899 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:54:44,902 [main:117] - GENERATED CALL = (logged(1)).compareTo(logged(3)).toString(-836426958)
2021-03-12 01:54:44,902 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:54:44,902 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e]
2021-03-12 01:54:44,902 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:54:44,902 [main:117] - GENERATED CALL = (logged(1)).toLong().toString(B.x)
2021-03-12 01:54:44,902 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a36c448]]
2021-03-12 01:54:44,902 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:54:44,902 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a36c448]
2021-03-12 01:54:44,902 [main:117] - GENERATED CALL = (logged(1)).toChar().lowercase()
2021-03-12 01:54:44,902 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:54:44,902 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:54:44,902 [main:117] - GENERATED CALL = (logged(1)).toString(logged(2))
2021-03-12 01:54:44,902 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:54:44,902 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73]
2021-03-12 01:54:45,045 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:54:45,047 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:54:45,189 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:54:45,192 [main:117] - GENERATED CALL = (logged(1)).div(-4931299584051357143).toString(-113669981)
2021-03-12 01:54:45,192 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]]
2021-03-12 01:54:45,192 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:54:45,192 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]
2021-03-12 01:54:45,192 [main:117] - GENERATED CALL = (logged(1)).toChar().titlecase()
2021-03-12 01:54:45,192 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]]
2021-03-12 01:54:45,192 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:54:45,192 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]
2021-03-12 01:54:45,193 [main:117] - GENERATED CALL = (logged(1)).toChar().uppercase()
2021-03-12 01:54:45,193 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:54:45,193 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:54:45,193 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:54:45,193 [main:117] - GENERATED CALL = (logged(1)).toInt().toString(logged(2))
2021-03-12 01:54:45,193 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]]
2021-03-12 01:54:45,193 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60]
2021-03-12 01:54:45,193 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]
2021-03-12 01:54:45,193 [main:117] - GENERATED CALL = (logged(1)).toShort().toString(logged(2))
2021-03-12 01:54:45,193 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6122df5e]]
2021-03-12 01:54:45,193 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:54:45,193 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6122df5e]
2021-03-12 01:54:45,194 [main:117] - GENERATED CALL = (logged(1)).toChar().plus(var log =
2021-03-12 01:54:45,194 [main:114] - replacement of "OK" of type String is (logged(1)).div(-4931299584051357143).toString(-113669981)
2021-03-12 01:54:45,330 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:54:45,331 [main:66] - Compilation checking started
2021-03-12 01:54:45,915 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        val prope8: Kla1 = this
        return prope8.fu4()!!.s
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"
    fu0 {
        Kla2().fu6()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:54:45,917 [main:107] - replacing (1, Int)
2021-03-12 01:54:45,917 [main:50] - replacing 1 Int
2021-03-12 01:54:45,917 [main:54] - Getting value of type Int
2021-03-12 01:54:46,059 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:54:46,062 [main:58] - GENERATED VALUE OF TYPE Int = 1447691614
2021-03-12 01:54:46,062 [main:61] - GENERATED IS CALL =false
2021-03-12 01:54:46,072 [main:67] - randomType = Kla6
2021-03-12 01:54:46,210 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 01:54:46,213 [main:112] - generating klass Kla6 text = class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}
2021-03-12 01:54:46,217 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla6[DeserializedSimpleFunctionDescriptor@155e7fe9]
2021-03-12 01:54:46,356 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:54:46,357 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@19b05991]
2021-03-12 01:54:46,496 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:54:46,498 [main:78] - Generated call from random type = (Kla6()).equals("chqfs").compareTo(true)
2021-03-12 01:54:46,498 [main:106] - GETTING Int from Int
2021-03-12 01:54:46,530 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235], public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7f5ee33d]]
2021-03-12 01:54:46,531 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235]
2021-03-12 01:54:46,531 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7f5ee33d]
2021-03-12 01:54:46,670 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:54:46,672 [main:117] - GENERATED CALL = (logged(2)).toByte().compareTo(-46)
2021-03-12 01:54:46,672 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@77efaf86]]
2021-03-12 01:54:46,673 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@77efaf86]
2021-03-12 01:54:46,810 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:54:46,813 [main:117] - GENERATED CALL = (logged(2)).compareTo(16)
2021-03-12 01:54:46,813 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@566e5161]]
2021-03-12 01:54:46,813 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:54:46,813 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@566e5161]
2021-03-12 01:54:46,952 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:54:46,955 [main:117] - GENERATED CALL = (logged(2)).toChar().minus('')
2021-03-12 01:54:46,955 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5958298b], public open val start: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@786533ac]]
2021-03-12 01:54:46,955 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5958298b]
2021-03-12 01:54:47,093 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:54:47,095 [main:117] - GENERATED CALL = (logged(2)).rangeTo(-116).start
2021-03-12 01:54:47,095 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5958298b], public final val step: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@582b514]]
2021-03-12 01:54:47,095 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5958298b]
2021-03-12 01:54:47,234 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:54:47,236 [main:117] - GENERATED CALL = (logged(2)).rangeTo(-45).step
2021-03-12 01:54:47,236 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5958298b], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.ranges.IntRange.random(): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@473ae517]]
2021-03-12 01:54:47,236 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5958298b]
2021-03-12 01:54:47,391 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:54:47,394 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.ranges.IntRange.random(): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@473ae517]
2021-03-12 01:54:47,394 [main:117] - GENERATED CALL = (logged(2)).rangeTo(35).random()
2021-03-12 01:54:47,394 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@15c2ea37]]
2021-03-12 01:54:47,394 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:54:47,394 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@15c2ea37]
2021-03-12 01:54:47,395 [main:117] - GENERATED CALL = (logged(2)).toInt().inv()
2021-03-12 01:54:47,395 [main:113] - Case = [public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5aba40f]]
2021-03-12 01:54:47,395 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5aba40f]
2021-03-12 01:54:47,395 [main:117] - GENERATED CALL = (logged(2)).inc()
2021-03-12 01:54:47,395 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6ac7dd2a]]
2021-03-12 01:54:47,395 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:54:47,395 [main:149] - GENERATING call of type public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6ac7dd2a]
2021-03-12 01:54:47,395 [main:117] - GENERATED CALL = (logged(2)).toChar().toInt()
2021-03-12 01:54:47,395 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@ac6f788]]
2021-03-12 01:54:47,395 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235]
2021-03-12 01:54:47,395 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@ac6f788]
2021-03-12 01:54:47,395 [main:117] - GENERATED CALL = (logged(2)).toByte().countOneBits()
2021-03-12 01:54:47,395 [main:114] - replacement of 1 of type Int is (logged(2)).toChar().minus('')
2021-03-12 01:54:47,535 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:54:47,535 [main:66] - Compilation checking started
2021-03-12 01:54:48,164 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        val prope8: Kla1 = this
        return prope8.fu4()!!.s
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"
    fu0 {
        Kla2().fu6()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:54:48,166 [main:107] - replacing (method, String)
2021-03-12 01:54:48,166 [main:50] - replacing method String
2021-03-12 01:54:48,166 [main:54] - Getting value of type String
2021-03-12 01:54:48,311 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:54:48,313 [main:58] - GENERATED VALUE OF TYPE String = "ezmle"
2021-03-12 01:54:48,313 [main:61] - GENERATED IS CALL =false
2021-03-12 01:54:48,481 [main:67] - randomType = Kla6?
2021-03-12 01:54:48,621 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 01:54:48,624 [main:112] - generating klass Kla6 text = class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}
2021-03-12 01:54:48,631 [main:106] - GETTING String from UInt
2021-03-12 01:54:48,659 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@11926dc1], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:54:48,659 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@11926dc1]
2021-03-12 01:54:48,659 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:54:48,659 [main:117] - GENERATED CALL = (logged<UInt>(1851723815.toUInt())).toLong().toString(A.x)
2021-03-12 01:54:48,659 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@2dd6f8b7], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7dbce7d4]]
2021-03-12 01:54:48,659 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@2dd6f8b7]
2021-03-12 01:54:48,660 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7dbce7d4]
2021-03-12 01:54:48,660 [main:117] - GENERATED CALL = (logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)
2021-03-12 01:54:48,660 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@7b948bf8], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]]
2021-03-12 01:54:48,660 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@7b948bf8]
2021-03-12 01:54:48,660 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]
2021-03-12 01:54:48,660 [main:117] - GENERATED CALL = (logged<UInt>(1851723815.toUInt())).toShort().toString(logged(2))
2021-03-12 01:54:48,660 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c847f6]]
2021-03-12 01:54:48,660 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c847f6]
2021-03-12 01:54:48,660 [main:117] - GENERATED CALL = (logged<UInt>(1851723815.toUInt())).toString(B.get())
2021-03-12 01:54:48,660 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.ULong): kotlin.ULong defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@2474d279], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.ULong.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c330c2b]]
2021-03-12 01:54:48,660 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.ULong): kotlin.ULong defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@2474d279]
2021-03-12 01:54:48,807 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 01:54:48,809 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.ULong.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c330c2b]
2021-03-12 01:54:48,810 [main:117] - GENERATED CALL = (logged<UInt>(1851723815.toUInt())).div(3855204138125244366.toULong()).toString(A.x)
2021-03-12 01:54:48,810 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@3e412d33], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc0516]]
2021-03-12 01:54:48,810 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@3e412d33]
2021-03-12 01:54:48,810 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc0516]
2021-03-12 01:54:48,810 [main:117] - GENERATED CALL = (logged<UInt>(1851723815.toUInt())).toByte().toString(B.x)
2021-03-12 01:54:48,810 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@3ff0371e], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:54:48,810 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@3ff0371e]
2021-03-12 01:54:48,949 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 01:54:48,952 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:54:48,952 [main:117] - GENERATED CALL = (logged<UInt>(1851723815.toUInt())).compareTo(5.toUByte()).toString(logged(3))
2021-03-12 01:54:48,952 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@2015071a], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@436cb179]]
2021-03-12 01:54:48,952 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@2015071a]
2021-03-12 01:54:48,952 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@436cb179]
2021-03-12 01:54:49,090 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:54:49,093 [main:117] - GENERATED CALL = (logged<UInt>(1851723815.toUInt())).toUShort().toString(211277516)
2021-03-12 01:54:49,093 [main:114] - replacement of method of type String is (logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)
2021-03-12 01:54:49,239 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:54:49,239 [main:66] - Compilation checking started
2021-03-12 01:54:49,866 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        val prope8: Kla1 = this
        return prope8.fu4()!!.s
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"
    fu0 {
        Kla2().fu6()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:54:49,868 [main:107] - replacing ({
        prope0.exceptionOrNull()?.let(x)
    }, Unit?)
2021-03-12 01:54:49,868 [main:50] - replacing {
        var log = ""
prope0.exceptionOrNull()?.let(x)
    } Unit?
2021-03-12 01:54:49,868 [main:54] - Getting value of type Unit?
2021-03-12 01:54:50,015 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 01:54:50,163 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 01:54:50,167 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 01:54:50,486 [main:302] - generating value of type = Any false depth = 3
2021-03-12 01:54:50,486 [main:95] - GENERATED = println("qkpng")
2021-03-12 01:54:50,486 [main:58] - GENERATED VALUE OF TYPE Unit? = println("qkpng")
2021-03-12 01:54:50,486 [main:61] - GENERATED IS CALL =true
2021-03-12 01:54:50,493 [main:67] - randomType = UByte
2021-03-12 01:54:50,633 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 01:54:50,667 [main:106] - GETTING Unit? from Int
2021-03-12 01:54:50,701 [main:106] - GETTING Unit? from Int
2021-03-12 01:54:50,702 [main:106] - GETTING Unit? from Int
2021-03-12 01:54:50,703 [main:106] - GETTING Unit? from A
2021-03-12 01:54:50,709 [main:106] - GETTING Unit? from Int
2021-03-12 01:54:50,710 [main:106] - GETTING Unit? from UInt
2021-03-12 01:54:50,738 [main:106] - GETTING Unit? from Int
2021-03-12 01:54:50,738 [main:106] - GETTING Unit? from B
2021-03-12 01:54:50,743 [main:113] - Case = [public final operator fun set(i1: kotlin.Int, i2: kotlin.Int, i3: kotlin.Int, value: kotlin.Int): kotlin.Unit defined in B[SimpleFunctionDescriptorImpl@442f9200]]
2021-03-12 01:54:50,744 [main:149] - GENERATING call of type public final operator fun set(i1: kotlin.Int, i2: kotlin.Int, i3: kotlin.Int, value: kotlin.Int): kotlin.Unit defined in B[SimpleFunctionDescriptorImpl@442f9200]
2021-03-12 01:54:50,887 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:54:51,035 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:54:51,177 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:54:51,355 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:54:51,359 [main:117] - GENERATED CALL = (getB())?.set(-791983408, -1333788572, 1701419030, -151215142)
2021-03-12 01:54:51,359 [main:114] - replacement of {
        var log = ""
prope0.exceptionOrNull()?.let(x)
    } of type Unit? is println("qkpng")
2021-03-12 01:54:51,503 [main:33] - Trying to replace BLOCK on Element(CALL_EXPRESSION)
2021-03-12 01:54:51,504 [main:66] - Compilation checking started
2021-03-12 01:54:51,510 [main:71] - Wrong syntax or breaks conditions
2021-03-12 01:54:51,510 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        val prope8: Kla1 = this
        return prope8.fu4()!!.s
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $prope0"

    prope0 = "FAIL2"
    fu0 {
        Kla2().fu6()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) println("qkpng")
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:54:51,512 [main:107] - replacing (prope0, String)
2021-03-12 01:54:51,512 [main:50] - replacing prope0 String
2021-03-12 01:54:51,512 [main:54] - Getting value of type String
2021-03-12 01:54:51,653 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:54:51,657 [main:58] - GENERATED VALUE OF TYPE String = "dezpj"
2021-03-12 01:54:51,657 [main:61] - GENERATED IS CALL =false
2021-03-12 01:54:52,167 [main:67] - randomType = MutableMap<Collection<UByte>, UShort>
2021-03-12 01:54:52,168 [main:106] - GETTING String from Int
2021-03-12 01:54:52,197 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:54:52,197 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e]
2021-03-12 01:54:52,198 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:54:52,198 [main:117] - GENERATED CALL = (logged(2)).toLong().toString(A.x)
2021-03-12 01:54:52,198 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]]
2021-03-12 01:54:52,198 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:54:52,198 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]
2021-03-12 01:54:52,198 [main:117] - GENERATED CALL = (logged(2)).toChar().titlecase()
2021-03-12 01:54:52,198 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:54:52,198 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73]
2021-03-12 01:54:52,339 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:54:52,342 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:54:52,490 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:54:52,493 [main:117] - GENERATED CALL = (logged(2)).div(-888227775589710824).toString(1818607099)
2021-03-12 01:54:52,494 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a36c448]]
2021-03-12 01:54:52,494 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:54:52,494 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a36c448]
2021-03-12 01:54:52,494 [main:117] - GENERATED CALL = (logged(2)).toChar().lowercase()
2021-03-12 01:54:52,494 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc0516]]
2021-03-12 01:54:52,494 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235]
2021-03-12 01:54:52,494 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc0516]
2021-03-12 01:54:52,494 [main:117] - GENERATED CALL = (logged(2)).toByte().toString(logged(2))
2021-03-12 01:54:52,494 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:54:52,494 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:54:52,638 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:54:52,641 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:54:52,785 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:54:52,789 [main:117] - GENERATED CALL = (logged(2)).compareTo(1673945390).toString(-2089902335)
2021-03-12 01:54:52,789 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]]
2021-03-12 01:54:52,789 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60]
2021-03-12 01:54:52,789 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]
2021-03-12 01:54:52,940 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:54:52,943 [main:117] - GENERATED CALL = (logged(2)).toShort().toString(560422861)
2021-03-12 01:54:52,943 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:54:52,943 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:54:52,944 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:54:53,086 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:54:53,089 [main:117] - GENERATED CALL = (logged(2)).toInt().toString(1581865344)
2021-03-12 01:54:53,089 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:54:53,089 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:54:53,090 [main:117] - GENERATED CALL = (logged(2)).toString(B.x)
2021-03-12 01:54:53,090 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6122df5e]]
2021-03-12 01:54:53,090 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:54:53,090 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6122df5e]
2021-03-12 01:54:53,090 [main:117] - GENERATED CALL = (logged(2)).toChar().plus(var log =
2021-03-12 01:54:53,090 [main:114] - replacement of prope0 of type String is (logged(2)).toChar().plus(var log =
2021-03-12 01:54:53,230 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 01:54:53,230 [main:66] - Compilation checking started
2021-03-12 01:54:53,853 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        val prope8: Kla1 = this
        return prope8.fu4()!!.s
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = "FAIL2"
    fu0 {
        Kla2().fu6()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:54:53,856 [main:107] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5, String)
2021-03-12 01:54:53,856 [main:50] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5 String
2021-03-12 01:54:53,856 [main:54] - Getting value of type String
2021-03-12 01:54:54,005 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:54:54,008 [main:58] - GENERATED VALUE OF TYPE String = "ftwwe"
2021-03-12 01:54:54,008 [main:61] - GENERATED IS CALL =false
2021-03-12 01:54:54,339 [main:67] - randomType = ArrayList<Double>
2021-03-12 01:54:54,483 [main:302] - generating value of type = ArrayList<Double> false depth = 0
2021-03-12 01:54:54,636 [main:43] - GENERATING CALL OF fun <E> ArrayList(elements: kotlin.collections.Collection<Double>): ArrayList<Double> = TODO()
2021-03-12 01:54:54,640 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(elements: kotlin.collections.Collection<Double>): ArrayList<Double> = TODO()
2021-03-12 01:54:55,032 [main:302] - generating value of type = Collection<Double> false depth = 3
2021-03-12 01:54:55,192 [main:43] - GENERATING CALL OF fun <T> mutableSetOf(): Collection<Double> = TODO()
2021-03-12 01:54:55,197 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableSetOf(): Collection<Double> = TODO()
2021-03-12 01:54:55,350 [main:95] - GENERATED = mutableSetOf<Double>()
2021-03-12 01:54:55,350 [main:95] - GENERATED = ArrayList<Double>(mutableSetOf<Double>())
2021-03-12 01:54:55,469 [main:149] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@3bf915d0]
2021-03-12 01:54:55,469 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@a5810be]
2021-03-12 01:54:55,470 [main:78] - Generated call from random type = (ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString()
2021-03-12 01:54:55,470 [main:106] - GETTING String from B
2021-03-12 01:54:55,476 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@4f270825], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:54:55,476 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:54:55,476 [main:117] - GENERATED CALL = (getB()).x.toString(logged(1))
2021-03-12 01:54:55,476 [main:114] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5 of type String is (ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString()
2021-03-12 01:54:55,617 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:54:55,618 [main:66] - Compilation checking started
2021-03-12 01:54:56,258 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        val prope8: Kla1 = this
        return prope8.fu4()!!.s
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = "FAIL2"
    fu0 {
        Kla2().fu6()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if (prope5 != i) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:54:56,261 [main:107] - replacing (prope1, Continuation<*>)
2021-03-12 01:54:56,261 [main:50] - replacing prope1 Continuation<*>
2021-03-12 01:54:56,261 [main:54] - Getting value of type Continuation<*>
2021-03-12 01:54:56,422 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-12 01:54:56,583 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 01:54:56,587 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 01:54:57,097 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 01:54:57,248 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:54:57,252 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:54:57,581 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 01:54:57,735 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:54:57,740 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:54:58,236 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 9
2021-03-12 01:54:58,456 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 01:54:58,461 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 01:54:58,951 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 12
2021-03-12 01:54:59,109 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 01:54:59,113 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 01:54:59,606 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 01:54:59,606 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 01:54:59,606 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:54:59,606 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:54:59,606 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 01:54:59,606 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-12 01:54:59,613 [main:67] - randomType = Boolean
2021-03-12 01:54:59,757 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:54:59,770 [main:106] - GETTING Continuation<*> from Int
2021-03-12 01:54:59,800 [main:106] - GETTING Continuation<*> from B
2021-03-12 01:54:59,805 [main:106] - GETTING Continuation<*> from Int
2021-03-12 01:54:59,806 [main:106] - GETTING Continuation<*> from Int
2021-03-12 01:54:59,807 [main:106] - GETTING Continuation<*> from Int
2021-03-12 01:54:59,808 [main:106] - GETTING Continuation<*> from Int
2021-03-12 01:54:59,809 [main:106] - GETTING Continuation<*> from A
2021-03-12 01:54:59,814 [main:106] - GETTING Continuation<*> from A
2021-03-12 01:54:59,815 [main:106] - GETTING Continuation<*> from Int
2021-03-12 01:54:59,815 [main:106] - GETTING Continuation<*> from B
2021-03-12 01:54:59,816 [main:106] - GETTING Continuation<*> from UInt
2021-03-12 01:54:59,838 [main:111] - Cant find and generate replacement for prope1 type Continuation<*>
2021-03-12 01:54:59,838 [main:107] - replacing (Kla7(), Kla7)
2021-03-12 01:54:59,838 [main:50] - replacing Kla7() Kla7
2021-03-12 01:54:59,838 [main:54] - Getting value of type Kla7
2021-03-12 01:54:59,984 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 01:54:59,987 [main:112] - generating klass Kla7 text = class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if (prope5 != i) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 01:54:59,987 [main:58] - GENERATED VALUE OF TYPE Kla7 = Kla7()
2021-03-12 01:54:59,987 [main:61] - GENERATED IS CALL =true
2021-03-12 01:55:00,338 [main:67] - randomType = ArrayDeque<Kla2>
2021-03-12 01:55:00,482 [main:302] - generating value of type = ArrayDeque<Kla2> false depth = 0
2021-03-12 01:55:00,637 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<Kla2> = TODO()
2021-03-12 01:55:00,642 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<Kla2> = TODO()
2021-03-12 01:55:00,795 [main:95] - GENERATED = ArrayDeque<Kla2>()
2021-03-12 01:55:00,909 [main:106] - GETTING Kla7 from B
2021-03-12 01:55:00,915 [main:106] - GETTING Kla7 from A
2021-03-12 01:55:00,920 [main:106] - GETTING Kla7 from Int
2021-03-12 01:55:00,949 [main:106] - GETTING Kla7 from UInt
2021-03-12 01:55:00,971 [main:106] - GETTING Kla7 from Int
2021-03-12 01:55:00,972 [main:106] - GETTING Kla7 from Int
2021-03-12 01:55:00,972 [main:106] - GETTING Kla7 from Int
2021-03-12 01:55:00,973 [main:106] - GETTING Kla7 from Int
2021-03-12 01:55:00,973 [main:106] - GETTING Kla7 from B
2021-03-12 01:55:00,974 [main:106] - GETTING Kla7 from A
2021-03-12 01:55:00,974 [main:106] - GETTING Kla7 from Int
2021-03-12 01:55:00,974 [main:114] - replacement of Kla7() of type Kla7 is Kla7()
2021-03-12 01:55:01,120 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 01:55:01,122 [main:107] - replacing (0, Int)
2021-03-12 01:55:01,123 [main:50] - replacing 0 Int
2021-03-12 01:55:01,123 [main:54] - Getting value of type Int
2021-03-12 01:55:01,273 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:55:01,277 [main:58] - GENERATED VALUE OF TYPE Int = -330538340
2021-03-12 01:55:01,277 [main:61] - GENERATED IS CALL =false
2021-03-12 01:55:01,284 [main:67] - randomType = UByte
2021-03-12 01:55:01,429 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 01:55:01,458 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@74d6f3fa]
2021-03-12 01:55:01,637 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 01:55:01,641 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@324b261c]
2021-03-12 01:55:01,786 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 01:55:01,789 [main:78] - Generated call from random type = (108.toUByte()).div(71.toUByte()).compareTo(25.toUByte())
2021-03-12 01:55:01,790 [main:106] - GETTING Int from Int
2021-03-12 01:55:01,819 [main:113] - Case = [public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3ef045d8]]
2021-03-12 01:55:01,820 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3ef045d8]
2021-03-12 01:55:01,963 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:55:01,967 [main:117] - GENERATED CALL = (logged(2)).minus(-87)
2021-03-12 01:55:01,967 [main:113] - Case = [@kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@406267da]]
2021-03-12 01:55:01,967 [main:117] - GENERATED CALL = (logged(2)).sign
2021-03-12 01:55:01,967 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@147c729a], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@19b05991]]
2021-03-12 01:55:01,967 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@147c729a]
2021-03-12 01:55:02,111 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:55:02,112 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@19b05991]
2021-03-12 01:55:02,256 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:55:02,259 [main:117] - GENERATED CALL = (logged(2)).equals("odyee").compareTo(true)
2021-03-12 01:55:02,260 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7107ffd9]]
2021-03-12 01:55:02,260 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:55:02,260 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7107ffd9]
2021-03-12 01:55:02,260 [main:117] - GENERATED CALL = (logged(2)).compareTo(B.x).takeLowestOneBit()
2021-03-12 01:55:02,260 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2572ce0f]]
2021-03-12 01:55:02,260 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:55:02,260 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2572ce0f]
2021-03-12 01:55:02,405 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:55:02,408 [main:117] - GENERATED CALL = (logged(2)).toInt().times(-55)
2021-03-12 01:55:02,409 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@20ae2b62]]
2021-03-12 01:55:02,409 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235]
2021-03-12 01:55:02,409 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@20ae2b62]
2021-03-12 01:55:02,560 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:55:02,564 [main:117] - GENERATED CALL = (logged(2)).toByte().div(42)
2021-03-12 01:55:02,564 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@788cd72f]]
2021-03-12 01:55:02,564 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:55:02,564 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@788cd72f]
2021-03-12 01:55:02,564 [main:117] - GENERATED CALL = (logged(2)).toInt().xor(B.get())
2021-03-12 01:55:02,564 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b28a80]]
2021-03-12 01:55:02,564 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:55:02,564 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b28a80]
2021-03-12 01:55:02,708 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:55:02,711 [main:117] - GENERATED CALL = (logged(2)).toInt().rem(-88)
2021-03-12 01:55:02,711 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@41d04a80]]
2021-03-12 01:55:02,711 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@41d04a80]
2021-03-12 01:55:02,854 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:55:02,858 [main:117] - GENERATED CALL = (logged(2)).rotateLeft(254594837)
2021-03-12 01:55:02,858 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6344afcd]]
2021-03-12 01:55:02,858 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:55:02,858 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6344afcd]
2021-03-12 01:55:02,858 [main:117] - GENERATED CALL = (logged(2)).compareTo(logged(3)).shr(logged(1))
2021-03-12 01:55:02,858 [main:114] - replacement of 0 of type Int is (logged(2)).toByte().div(42)
2021-03-12 01:55:03,001 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:55:03,002 [main:66] - Compilation checking started
2021-03-12 01:55:03,622 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        val prope8: Kla1 = this
        return prope8.fu4()!!.s
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = "FAIL2"
    fu0 {
        Kla2().fu6()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if (prope5 != i) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope7 = {
            prope3.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:55:03,625 [main:107] - replacing (true, Boolean)
2021-03-12 01:55:03,625 [main:50] - replacing true Boolean
2021-03-12 01:55:03,625 [main:54] - Getting value of type Boolean
2021-03-12 01:55:03,772 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:55:03,775 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 01:55:03,776 [main:61] - GENERATED IS CALL =false
2021-03-12 01:55:03,969 [main:67] - randomType = Function1<Double, B>
2021-03-12 01:55:03,970 [main:106] - GETTING Boolean from A
2021-03-12 01:55:03,975 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@13c2842b], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b71fb8c]]
2021-03-12 01:55:03,975 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@13c2842b]
2021-03-12 01:55:04,133 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:55:04,133 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b71fb8c]
2021-03-12 01:55:04,133 [main:117] - GENERATED CALL = (getA()).equals("gnlag").not()
2021-03-12 01:55:04,134 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@13c2842b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4cfdd607]]
2021-03-12 01:55:04,134 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@13c2842b]
2021-03-12 01:55:04,281 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:55:04,281 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4cfdd607]
2021-03-12 01:55:04,427 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:55:04,427 [main:117] - GENERATED CALL = (getA()).equals("chaza").equals("sqnko")
2021-03-12 01:55:04,427 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@13c2842b], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@40165da2]]
2021-03-12 01:55:04,427 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@13c2842b]
2021-03-12 01:55:04,580 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:55:04,580 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@40165da2]
2021-03-12 01:55:04,725 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:55:04,729 [main:117] - GENERATED CALL = (getA()).equals("tvgio").or(true)
2021-03-12 01:55:04,729 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@13c2842b]]
2021-03-12 01:55:04,729 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@13c2842b]
2021-03-12 01:55:04,878 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:55:04,878 [main:117] - GENERATED CALL = (getA()).equals("sosal")
2021-03-12 01:55:04,878 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@13c2842b], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7d7e4be0]]
2021-03-12 01:55:04,878 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@13c2842b]
2021-03-12 01:55:05,027 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:55:05,027 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7d7e4be0]
2021-03-12 01:55:05,173 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:55:05,177 [main:117] - GENERATED CALL = (getA()).equals("ymqbk").xor(true)
2021-03-12 01:55:05,177 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@533c3aca], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@147c729a]]
2021-03-12 01:55:05,177 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@147c729a]
2021-03-12 01:55:05,357 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:55:05,358 [main:117] - GENERATED CALL = (getA()).x.equals("pkwuz")
2021-03-12 01:55:05,358 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@13c2842b], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6c23465f]]
2021-03-12 01:55:05,358 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@13c2842b]
2021-03-12 01:55:05,503 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:55:05,504 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6c23465f]
2021-03-12 01:55:05,650 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:55:05,653 [main:117] - GENERATED CALL = (getA()).equals("ezuyu").and(true)
2021-03-12 01:55:05,653 [main:114] - replacement of true of type Boolean is (getA()).equals("chaza").equals("sqnko")
2021-03-12 01:55:05,799 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:55:05,799 [main:66] - Compilation checking started
2021-03-12 01:55:06,408 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        val prope8: Kla1 = this
        return prope8.fu4()!!.s
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = "FAIL2"
    fu0 {
        Kla2().fu6()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if (prope5 != i) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            prope3.prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:55:06,411 [main:107] - replacing (this, Kla2)
2021-03-12 01:55:06,412 [main:50] - replacing this Kla2
2021-03-12 01:55:06,412 [main:54] - Getting value of type Kla2
2021-03-12 01:55:06,558 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 01:55:06,562 [main:112] - generating klass Kla2 text = class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = this
        return prope8.fu4()!!.s
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}
2021-03-12 01:55:06,721 [main:194] - Type params = []
2021-03-12 01:55:06,883 [main:58] - GENERATED VALUE OF TYPE Kla2 = Kla2()
2021-03-12 01:55:06,883 [main:61] - GENERATED IS CALL =true
2021-03-12 01:55:07,050 [main:67] - randomType = UShort
2021-03-12 01:55:07,196 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 01:55:07,226 [main:106] - GETTING Kla2 from Int
2021-03-12 01:55:07,255 [main:106] - GETTING Kla2 from Int
2021-03-12 01:55:07,256 [main:106] - GETTING Kla2 from Int
2021-03-12 01:55:07,256 [main:106] - GETTING Kla2 from Int
2021-03-12 01:55:07,257 [main:106] - GETTING Kla2 from A
2021-03-12 01:55:07,262 [main:106] - GETTING Kla2 from A
2021-03-12 01:55:07,262 [main:106] - GETTING Kla2 from Int
2021-03-12 01:55:07,263 [main:106] - GETTING Kla2 from UInt
2021-03-12 01:55:07,284 [main:106] - GETTING Kla2 from B
2021-03-12 01:55:07,290 [main:106] - GETTING Kla2 from B
2021-03-12 01:55:07,290 [main:106] - GETTING Kla2 from Int
2021-03-12 01:55:07,291 [main:114] - replacement of this of type Kla2 is Kla2()
2021-03-12 01:55:07,437 [main:33] - Trying to replace Element(THIS_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 01:55:07,437 [main:66] - Compilation checking started
2021-03-12 01:55:08,048 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return prope8.fu4()!!.s
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = "FAIL2"
    fu0 {
        Kla2().fu6()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if (prope5 != i) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            prope3.prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:55:08,051 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 01:55:08,051 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 01:55:08,051 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 01:55:08,203 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 01:55:08,211 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 01:55:08,225 [main:67] - randomType = B
2021-03-12 01:55:08,376 [main:302] - generating value of type = B false depth = 0
2021-03-12 01:55:08,380 [main:112] - generating klass B text = object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}
2021-03-12 01:55:08,386 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 01:55:08,416 [main:106] - GETTING EmptyCoroutineContext from B
2021-03-12 01:55:08,422 [main:106] - GETTING EmptyCoroutineContext from UInt
2021-03-12 01:55:08,444 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 01:55:08,445 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 01:55:08,446 [main:106] - GETTING EmptyCoroutineContext from A
2021-03-12 01:55:08,450 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 01:55:08,451 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 01:55:08,452 [main:106] - GETTING EmptyCoroutineContext from B
2021-03-12 01:55:08,452 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 01:55:08,453 [main:106] - GETTING EmptyCoroutineContext from A
2021-03-12 01:55:08,453 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 01:55:08,453 [main:107] - replacing (prope8.fu4()!!.s, String)
2021-03-12 01:55:08,453 [main:50] - replacing prope8.fu4()!!.s String
2021-03-12 01:55:08,453 [main:54] - Getting value of type String
2021-03-12 01:55:08,603 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:55:08,607 [main:58] - GENERATED VALUE OF TYPE String = "mbbaa"
2021-03-12 01:55:08,607 [main:61] - GENERATED IS CALL =false
2021-03-12 01:55:08,799 [main:67] - randomType = Pair<Double, A>
2021-03-12 01:55:08,949 [main:302] - generating value of type = Pair<Double, A> false depth = 0
2021-03-12 01:55:09,104 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Double, second: A): Pair<Double, A> = TODO()
2021-03-12 01:55:09,109 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Double, second: A): Pair<Double, A> = TODO()
2021-03-12 01:55:09,297 [main:302] - generating value of type = Double true depth = 3
2021-03-12 01:55:09,301 [main:302] - generating value of type = A false depth = 3
2021-03-12 01:55:09,304 [main:112] - generating klass A text = object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}
2021-03-12 01:55:09,304 [main:95] - GENERATED = Pair<Double, A>(0.08147327944788396, A)
2021-03-12 01:55:09,315 [main:106] - GETTING String from Int
2021-03-12 01:55:09,346 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:55:09,346 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73]
2021-03-12 01:55:09,500 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:55:09,504 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:55:09,657 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:55:09,661 [main:117] - GENERATED CALL = (logged(2)).div(-9046869770485497896).toString(1431951966)
2021-03-12 01:55:09,661 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]]
2021-03-12 01:55:09,661 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60]
2021-03-12 01:55:09,661 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]
2021-03-12 01:55:09,807 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:55:09,810 [main:117] - GENERATED CALL = (logged(2)).toShort().toString(-180553735)
2021-03-12 01:55:09,810 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]]
2021-03-12 01:55:09,810 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:55:09,811 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]
2021-03-12 01:55:09,811 [main:117] - GENERATED CALL = (logged(2)).toChar().titlecase()
2021-03-12 01:55:09,811 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc0516]]
2021-03-12 01:55:09,811 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235]
2021-03-12 01:55:09,811 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc0516]
2021-03-12 01:55:09,811 [main:117] - GENERATED CALL = (logged(2)).toByte().toString(logged(3))
2021-03-12 01:55:09,811 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:55:09,811 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:55:09,811 [main:117] - GENERATED CALL = (logged(2)).toString(A.x)
2021-03-12 01:55:09,811 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:55:09,811 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:55:09,811 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:55:09,811 [main:117] - GENERATED CALL = (logged(2)).toInt().toString(logged(3))
2021-03-12 01:55:09,812 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:55:09,812 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e]
2021-03-12 01:55:09,812 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:55:09,966 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:55:09,969 [main:117] - GENERATED CALL = (logged(2)).toLong().toString(-96980648)
2021-03-12 01:55:09,969 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a36c448]]
2021-03-12 01:55:09,970 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:55:09,970 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a36c448]
2021-03-12 01:55:09,970 [main:117] - GENERATED CALL = (logged(2)).toChar().lowercase()
2021-03-12 01:55:09,970 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:55:09,970 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:55:09,970 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:55:09,970 [main:117] - GENERATED CALL = (logged(2)).compareTo(B.get()).toString(logged(3))
2021-03-12 01:55:09,970 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]]
2021-03-12 01:55:09,970 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:55:09,970 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]
2021-03-12 01:55:09,970 [main:117] - GENERATED CALL = (logged(2)).toChar().uppercase()
2021-03-12 01:55:09,970 [main:114] - replacement of prope8.fu4()!!.s of type String is (logged(2)).div(-9046869770485497896).toString(1431951966)
2021-03-12 01:55:10,130 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:55:10,130 [main:66] - Compilation checking started
2021-03-12 01:55:10,757 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = "FAIL2"
    fu0 {
        Kla2().fu6()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if (prope5 != i) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            prope3.prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:55:10,759 [main:107] - replacing (prope7, Function0<Unit>)
2021-03-12 01:55:10,759 [main:50] - replacing prope7 Function0<Unit>
2021-03-12 01:55:10,759 [main:54] - Getting value of type Function0<Unit>
2021-03-12 01:55:10,907 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 01:55:10,910 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 01:55:11,064 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 01:55:11,069 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 01:55:11,566 [main:302] - generating value of type = Int true depth = 4
2021-03-12 01:55:11,570 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 01:55:11,573 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 01:55:11,725 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 01:55:11,729 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 01:55:12,049 [main:302] - generating value of type = Any false depth = 8
2021-03-12 01:55:12,049 [main:95] - GENERATED = println("yuxne")
2021-03-12 01:55:12,049 [main:95] - GENERATED = repeat(1616046703, {a: Int -> println("yuxne")})
2021-03-12 01:55:12,049 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(1616046703, {a: Int -> println("yuxne")})}
2021-03-12 01:55:12,049 [main:61] - GENERATED IS CALL =false
2021-03-12 01:55:12,424 [main:67] - randomType = HashMap<Kla3, Kla3>
2021-03-12 01:55:12,569 [main:302] - generating value of type = HashMap<Kla3, Kla3> false depth = 0
2021-03-12 01:55:12,723 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): HashMap<Kla3, Kla3> = TODO()
2021-03-12 01:55:12,727 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): HashMap<Kla3, Kla3> = TODO()
2021-03-12 01:55:12,879 [main:95] - GENERATED = linkedMapOf<Kla3, Kla3>()
2021-03-12 01:55:13,011 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 01:55:13,042 [main:106] - GETTING Function0<Unit> from A
2021-03-12 01:55:13,046 [main:106] - GETTING Function0<Unit> from UInt
2021-03-12 01:55:13,068 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 01:55:13,069 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 01:55:13,070 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 01:55:13,071 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 01:55:13,072 [main:106] - GETTING Function0<Unit> from B
2021-03-12 01:55:13,079 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 01:55:13,080 [main:106] - GETTING Function0<Unit> from A
2021-03-12 01:55:13,081 [main:106] - GETTING Function0<Unit> from B
2021-03-12 01:55:13,081 [main:114] - replacement of prope7 of type Function0<Unit> is { repeat(1616046703, {a: Int -> println("yuxne")})}
2021-03-12 01:55:13,224 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 01:55:13,225 [main:66] - Compilation checking started
2021-03-12 01:55:13,642 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = "FAIL2"
    fu0 {
        Kla2().fu6()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if (prope5 != i) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.{ repeat(1616046703, {a: Int -> println("yuxne")})} = {
            prope3.prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:55:13,644 [main:107] - replacing (prope1, Continuation<*>)
2021-03-12 01:55:13,645 [main:50] - replacing prope1 Continuation<*>
2021-03-12 01:55:13,645 [main:54] - Getting value of type Continuation<*>
2021-03-12 01:55:13,792 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-12 01:55:13,946 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 01:55:13,951 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 01:55:14,476 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 01:55:14,631 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:55:14,636 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:55:14,962 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 01:55:15,116 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:55:15,121 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:55:15,642 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 9
2021-03-12 01:55:15,803 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 01:55:15,807 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 01:55:16,323 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 01:55:16,324 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:55:16,324 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:55:16,324 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 01:55:16,324 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-12 01:55:17,276 [main:67] - randomType = HashMap<HashMap<UByte, Collection<Kla0>>?, Kla3>
2021-03-12 01:55:17,421 [main:302] - generating value of type = HashMap<HashMap<UByte, Collection<Kla0>>?, Kla3> false depth = 0
2021-03-12 01:55:17,576 [main:43] - GENERATING CALL OF fun <K, V> HashMap(initialCapacity: kotlin.Int): HashMap<HashMap<UByte, Collection<Kla0>>?, Kla3> = TODO()
2021-03-12 01:55:17,580 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> HashMap(initialCapacity: kotlin.Int): HashMap<HashMap<UByte, Collection<Kla0>>?, Kla3> = TODO()
2021-03-12 01:55:17,913 [main:302] - generating value of type = Int true depth = 3
2021-03-12 01:55:17,917 [main:95] - GENERATED = HashMap<HashMap<UByte, Collection<Kla0>>?, Kla3>(2055607791)
2021-03-12 01:55:18,083 [main:106] - GETTING Continuation<*> from Int
2021-03-12 01:55:18,120 [main:106] - GETTING Continuation<*> from Int
2021-03-12 01:55:18,120 [main:106] - GETTING Continuation<*> from UInt
2021-03-12 01:55:18,143 [main:106] - GETTING Continuation<*> from Int
2021-03-12 01:55:18,144 [main:106] - GETTING Continuation<*> from Int
2021-03-12 01:55:18,145 [main:106] - GETTING Continuation<*> from A
2021-03-12 01:55:18,150 [main:106] - GETTING Continuation<*> from A
2021-03-12 01:55:18,151 [main:106] - GETTING Continuation<*> from B
2021-03-12 01:55:18,157 [main:106] - GETTING Continuation<*> from Int
2021-03-12 01:55:18,158 [main:106] - GETTING Continuation<*> from B
2021-03-12 01:55:18,159 [main:106] - GETTING Continuation<*> from Int
2021-03-12 01:55:18,159 [main:111] - Cant find and generate replacement for prope1 type Continuation<*>
2021-03-12 01:55:18,159 [main:107] - replacing (exceptionOrNull(), Throwable?)
2021-03-12 01:55:18,159 [main:50] - replacing exceptionOrNull() Throwable?
2021-03-12 01:55:18,159 [main:54] - Getting value of type Throwable?
2021-03-12 01:55:18,308 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 01:55:18,461 [main:43] - GENERATING CALL OF fun RuntimeException(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 01:55:18,465 [main:61] - WITHOUT TYPE PARAMS = fun RuntimeException(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 01:55:18,952 [main:302] - generating value of type = String true depth = 3
2021-03-12 01:55:18,955 [main:302] - generating value of type = Throwable false depth = 3
2021-03-12 01:55:19,109 [main:43] - GENERATING CALL OF fun IllegalArgumentException(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 01:55:19,113 [main:61] - WITHOUT TYPE PARAMS = fun IllegalArgumentException(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 01:55:19,600 [main:302] - generating value of type = String true depth = 6
2021-03-12 01:55:19,604 [main:302] - generating value of type = Throwable false depth = 6
2021-03-12 01:55:19,755 [main:43] - GENERATING CALL OF fun NumberFormatException(message: kotlin.String?): Throwable = TODO()
2021-03-12 01:55:19,759 [main:61] - WITHOUT TYPE PARAMS = fun NumberFormatException(message: kotlin.String?): Throwable = TODO()
2021-03-12 01:55:20,083 [main:302] - generating value of type = String true depth = 9
2021-03-12 01:55:20,087 [main:95] - GENERATED = NumberFormatException("fdssl")
2021-03-12 01:55:20,087 [main:95] - GENERATED = IllegalArgumentException("vwwde", NumberFormatException("fdssl"))
2021-03-12 01:55:20,087 [main:95] - GENERATED = RuntimeException("lcrww", IllegalArgumentException("vwwde", NumberFormatException("fdssl")))
2021-03-12 01:55:20,087 [main:58] - GENERATED VALUE OF TYPE Throwable? = RuntimeException("lcrww", IllegalArgumentException("vwwde", NumberFormatException("fdssl")))
2021-03-12 01:55:20,087 [main:61] - GENERATED IS CALL =true
2021-03-12 01:55:20,271 [main:67] - randomType = A?
2021-03-12 01:55:20,419 [main:302] - generating value of type = A false depth = 0
2021-03-12 01:55:20,422 [main:112] - generating klass A text = object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}
2021-03-12 01:55:20,428 [main:106] - GETTING Throwable? from Int
2021-03-12 01:55:20,457 [main:106] - GETTING Throwable? from Int
2021-03-12 01:55:20,458 [main:106] - GETTING Throwable? from Int
2021-03-12 01:55:20,459 [main:106] - GETTING Throwable? from B
2021-03-12 01:55:20,464 [main:106] - GETTING Throwable? from UInt
2021-03-12 01:55:20,486 [main:106] - GETTING Throwable? from Int
2021-03-12 01:55:20,487 [main:106] - GETTING Throwable? from B
2021-03-12 01:55:20,487 [main:106] - GETTING Throwable? from Int
2021-03-12 01:55:20,488 [main:106] - GETTING Throwable? from A
2021-03-12 01:55:20,493 [main:106] - GETTING Throwable? from A
2021-03-12 01:55:20,494 [main:106] - GETTING Throwable? from Int
2021-03-12 01:55:20,494 [main:114] - replacement of exceptionOrNull() of type Throwable? is RuntimeException("lcrww", IllegalArgumentException("vwwde", NumberFormatException("fdssl")))
2021-03-12 01:55:20,639 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 01:55:20,639 [main:66] - Compilation checking started
2021-03-12 01:55:21,088 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = "FAIL2"
    fu0 {
        Kla2().fu6()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
prope0.RuntimeException("lcrww", IllegalArgumentException("vwwde", NumberFormatException("fdssl")))?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if (prope5 != i) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            prope3.prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:55:21,091 [main:107] - replacing (prope7, Function0<Unit>)
2021-03-12 01:55:21,091 [main:50] - replacing prope7 Function0<Unit>
2021-03-12 01:55:21,091 [main:54] - Getting value of type Function0<Unit>
2021-03-12 01:55:21,242 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 01:55:21,246 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 01:55:21,402 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 01:55:21,407 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 01:55:21,900 [main:302] - generating value of type = Int true depth = 4
2021-03-12 01:55:21,903 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 01:55:21,907 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 01:55:22,057 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 01:55:22,062 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 01:55:22,554 [main:302] - generating value of type = Int true depth = 8
2021-03-12 01:55:22,557 [main:302] - generating value of type = Function1<Int, Unit> false depth = 8
2021-03-12 01:55:22,560 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 01:55:22,710 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 01:55:22,715 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 01:55:23,030 [main:302] - generating value of type = Any false depth = 12
2021-03-12 01:55:23,031 [main:95] - GENERATED = print("nallj")
2021-03-12 01:55:23,031 [main:95] - GENERATED = repeat(68212539, {a: Int -> print("nallj")})
2021-03-12 01:55:23,031 [main:95] - GENERATED = repeat(1172937570, {a: Int -> repeat(68212539, {a: Int -> print("nallj")})})
2021-03-12 01:55:23,031 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(1172937570, {a: Int -> repeat(68212539, {a: Int -> print("nallj")})})}
2021-03-12 01:55:23,031 [main:61] - GENERATED IS CALL =false
2021-03-12 01:55:23,038 [main:67] - randomType = UInt
2021-03-12 01:55:23,184 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 01:55:23,218 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 01:55:23,270 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 01:55:23,271 [main:106] - GETTING Function0<Unit> from A
2021-03-12 01:55:23,280 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 01:55:23,282 [main:106] - GETTING Function0<Unit> from UInt
2021-03-12 01:55:23,304 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 01:55:23,305 [main:106] - GETTING Function0<Unit> from B
2021-03-12 01:55:23,312 [main:106] - GETTING Function0<Unit> from A
2021-03-12 01:55:23,313 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 01:55:23,314 [main:106] - GETTING Function0<Unit> from B
2021-03-12 01:55:23,315 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 01:55:23,315 [main:114] - replacement of prope7 of type Function0<Unit> is { repeat(1172937570, {a: Int -> repeat(68212539, {a: Int -> print("nallj")})})}
2021-03-12 01:55:23,459 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 01:55:23,460 [main:66] - Compilation checking started
2021-03-12 01:55:23,878 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = "FAIL2"
    fu0 {
        Kla2().fu6()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        { repeat(1172937570, {a: Int -> repeat(68212539, {a: Int -> print("nallj")})})} = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if (prope5 != i) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            prope3.prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:55:23,881 [main:107] - replacing (prope0, String)
2021-03-12 01:55:23,881 [main:50] - replacing prope0 String
2021-03-12 01:55:23,881 [main:54] - Getting value of type String
2021-03-12 01:55:24,026 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:55:24,029 [main:58] - GENERATED VALUE OF TYPE String = "fprnk"
2021-03-12 01:55:24,030 [main:61] - GENERATED IS CALL =false
2021-03-12 01:55:24,208 [main:67] - randomType = ArrayDeque<UInt>
2021-03-12 01:55:24,357 [main:302] - generating value of type = ArrayDeque<UInt> false depth = 0
2021-03-12 01:55:24,512 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<UInt>): ArrayDeque<UInt> = TODO()
2021-03-12 01:55:24,517 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<UInt>): ArrayDeque<UInt> = TODO()
2021-03-12 01:55:24,888 [main:302] - generating value of type = Collection<UInt> false depth = 3
2021-03-12 01:55:25,040 [main:43] - GENERATING CALL OF fun UIntArray(size: kotlin.Int): Collection<UInt> = TODO()
2021-03-12 01:55:25,045 [main:61] - WITHOUT TYPE PARAMS = fun UIntArray(size: kotlin.Int): Collection<UInt> = TODO()
2021-03-12 01:55:25,369 [main:302] - generating value of type = Int true depth = 6
2021-03-12 01:55:25,373 [main:95] - GENERATED = UIntArray(1513099087)
2021-03-12 01:55:25,373 [main:95] - GENERATED = ArrayDeque<UInt>(UIntArray(1513099087))
2021-03-12 01:55:25,491 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:55:25,492 [main:78] - Generated call from random type = (ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2))
2021-03-12 01:55:25,492 [main:114] - replacement of prope0 of type String is (ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2))
2021-03-12 01:55:25,636 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:55:25,637 [main:66] - Compilation checking started
2021-03-12 01:55:26,278 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = "FAIL2"
    fu0 {
        Kla2().fu6()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if (prope5 != i) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            prope3.prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:55:26,281 [main:107] - replacing (exceptionOrNull(), Throwable?)
2021-03-12 01:55:26,281 [main:50] - replacing exceptionOrNull() Throwable?
2021-03-12 01:55:26,281 [main:54] - Getting value of type Throwable?
2021-03-12 01:55:26,430 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 01:55:26,583 [main:43] - GENERATING CALL OF fun NoSuchElementException(message: kotlin.String?): Throwable = TODO()
2021-03-12 01:55:26,587 [main:61] - WITHOUT TYPE PARAMS = fun NoSuchElementException(message: kotlin.String?): Throwable = TODO()
2021-03-12 01:55:26,927 [main:302] - generating value of type = String true depth = 3
2021-03-12 01:55:26,931 [main:95] - GENERATED = NoSuchElementException("ltqti")
2021-03-12 01:55:26,931 [main:58] - GENERATED VALUE OF TYPE Throwable? = NoSuchElementException("ltqti")
2021-03-12 01:55:26,931 [main:61] - GENERATED IS CALL =true
2021-03-12 01:55:27,675 [main:67] - randomType = List<LinkedHashMap<Long, Kla0>>?
2021-03-12 01:55:27,676 [main:106] - GETTING Throwable? from Int
2021-03-12 01:55:27,707 [main:106] - GETTING Throwable? from A
2021-03-12 01:55:27,711 [main:106] - GETTING Throwable? from A
2021-03-12 01:55:27,712 [main:106] - GETTING Throwable? from Int
2021-03-12 01:55:27,712 [main:106] - GETTING Throwable? from UInt
2021-03-12 01:55:27,734 [main:106] - GETTING Throwable? from Int
2021-03-12 01:55:27,735 [main:106] - GETTING Throwable? from Int
2021-03-12 01:55:27,736 [main:106] - GETTING Throwable? from Int
2021-03-12 01:55:27,736 [main:106] - GETTING Throwable? from Int
2021-03-12 01:55:27,737 [main:106] - GETTING Throwable? from B
2021-03-12 01:55:27,745 [main:106] - GETTING Throwable? from B
2021-03-12 01:55:27,745 [main:114] - replacement of exceptionOrNull() of type Throwable? is NoSuchElementException("ltqti")
2021-03-12 01:55:27,897 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 01:55:27,897 [main:66] - Compilation checking started
2021-03-12 01:55:28,327 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = "FAIL2"
    fu0 {
        Kla2().fu6()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
prope0.NoSuchElementException("ltqti")?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if (prope5 != i) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            prope3.prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:55:28,329 [main:107] - replacing (prope5++, Int)
2021-03-12 01:55:28,329 [main:50] - replacing prope5++ Int
2021-03-12 01:55:28,329 [main:54] - Getting value of type Int
2021-03-12 01:55:28,477 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:55:28,481 [main:58] - GENERATED VALUE OF TYPE Int = -1864161717
2021-03-12 01:55:28,481 [main:61] - GENERATED IS CALL =false
2021-03-12 01:55:29,057 [main:67] - randomType = Pair<Set<A>, UByte>?
2021-03-12 01:55:29,202 [main:302] - generating value of type = Pair<Set<A>, UByte> false depth = 0
2021-03-12 01:55:29,354 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Set<A>, second: UByte): Pair<Set<A>, UByte> = TODO()
2021-03-12 01:55:29,358 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Set<A>, second: UByte): Pair<Set<A>, UByte> = TODO()
2021-03-12 01:55:29,509 [main:302] - generating value of type = Set<A> false depth = 3
2021-03-12 01:55:29,664 [main:43] - GENERATING CALL OF fun <T> setOf(element: A): Set<A> = TODO()
2021-03-12 01:55:29,668 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOf(element: A): Set<A> = TODO()
2021-03-12 01:55:29,832 [main:302] - generating value of type = A false depth = 6
2021-03-12 01:55:29,836 [main:112] - generating klass A text = object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}
2021-03-12 01:55:29,836 [main:95] - GENERATED = setOf<A>(A)
2021-03-12 01:55:29,836 [main:302] - generating value of type = UByte true depth = 3
2021-03-12 01:55:29,840 [main:95] - GENERATED = Pair<Set<A>, UByte>(setOf<A>(A), 73.toUByte())
2021-03-12 01:55:29,864 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toInt(): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@3545484a]
2021-03-12 01:55:29,864 [main:78] - Generated call from random type = (Pair<Set<A>, UByte>(setOf<A>(A), 73.toUByte()))?.second.toInt()
2021-03-12 01:55:29,864 [main:106] - GETTING Int from Int
2021-03-12 01:55:29,902 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@472c0627]]
2021-03-12 01:55:29,902 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:55:29,902 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@472c0627]
2021-03-12 01:55:30,048 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:55:30,052 [main:117] - GENERATED CALL = (logged(3)).toInt().div(91)
2021-03-12 01:55:30,052 [main:113] - Case = [public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70b68745]]
2021-03-12 01:55:30,052 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70b68745]
2021-03-12 01:55:30,052 [main:117] - GENERATED CALL = (logged(3)).ushr(logged(3))
2021-03-12 01:55:30,052 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@48efa366]]
2021-03-12 01:55:30,052 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:55:30,052 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@48efa366]
2021-03-12 01:55:30,052 [main:117] - GENERATED CALL = (logged(3)).compareTo(A.x).dec()
2021-03-12 01:55:30,052 [main:113] - Case = [public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d8dcc4]]
2021-03-12 01:55:30,052 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d8dcc4]
2021-03-12 01:55:30,053 [main:117] - GENERATED CALL = (logged(3)).shl(B.get())
2021-03-12 01:55:30,053 [main:113] - Case = [public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2572ce0f]]
2021-03-12 01:55:30,053 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2572ce0f]
2021-03-12 01:55:30,197 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:55:30,201 [main:117] - GENERATED CALL = (logged(3)).times(-73)
2021-03-12 01:55:30,201 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5d605014]]
2021-03-12 01:55:30,201 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:55:30,347 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:55:30,350 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5d605014]
2021-03-12 01:55:30,350 [main:117] - GENERATED CALL = (logged(3)).compareTo(1276446191).countLeadingZeroBits()
2021-03-12 01:55:30,351 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@7acce0d5]]
2021-03-12 01:55:30,351 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60]
2021-03-12 01:55:30,351 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@7acce0d5]
2021-03-12 01:55:30,351 [main:117] - GENERATED CALL = (logged(3)).toShort().unaryMinus()
2021-03-12 01:55:30,351 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@75e04100]]
2021-03-12 01:55:30,351 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60]
2021-03-12 01:55:30,351 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@75e04100]
2021-03-12 01:55:30,496 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:55:30,499 [main:117] - GENERATED CALL = (logged(3)).toShort().rem(19)
2021-03-12 01:55:30,499 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3ef045d8]]
2021-03-12 01:55:30,500 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:55:30,500 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3ef045d8]
2021-03-12 01:55:30,646 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:55:30,650 [main:117] - GENERATED CALL = (logged(3)).compareTo(B.x).minus(-53)
2021-03-12 01:55:30,650 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@5cacbb8c]]
2021-03-12 01:55:30,650 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60]
2021-03-12 01:55:30,650 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@5cacbb8c]
2021-03-12 01:55:30,796 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:55:30,799 [main:117] - GENERATED CALL = (logged(3)).toShort().div(-126)
2021-03-12 01:55:30,800 [main:114] - replacement of prope5++ of type Int is (logged(3)).shl(B.get())
2021-03-12 01:55:30,944 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:55:30,944 [main:66] - Compilation checking started
2021-03-12 01:55:31,361 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = "FAIL2"
    fu0 {
        Kla2().fu6()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        (logged(3)).shl(B.get())
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if (prope5 != i) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            prope3.prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:55:31,363 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 01:55:31,363 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 01:55:31,363 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 01:55:31,510 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 01:55:31,516 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 01:55:31,523 [main:67] - randomType = Double
2021-03-12 01:55:31,669 [main:302] - generating value of type = Double true depth = 0
2021-03-12 01:55:31,701 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 01:55:31,730 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 01:55:31,731 [main:106] - GETTING EmptyCoroutineContext from A
2021-03-12 01:55:31,735 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 01:55:31,736 [main:106] - GETTING EmptyCoroutineContext from A
2021-03-12 01:55:31,736 [main:106] - GETTING EmptyCoroutineContext from UInt
2021-03-12 01:55:31,758 [main:106] - GETTING EmptyCoroutineContext from B
2021-03-12 01:55:31,764 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 01:55:31,764 [main:106] - GETTING EmptyCoroutineContext from B
2021-03-12 01:55:31,765 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 01:55:31,766 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 01:55:31,766 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 01:55:31,766 [main:107] - replacing (false, Boolean)
2021-03-12 01:55:31,766 [main:50] - replacing false Boolean
2021-03-12 01:55:31,766 [main:54] - Getting value of type Boolean
2021-03-12 01:55:31,911 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:55:31,915 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 01:55:31,915 [main:61] - GENERATED IS CALL =false
2021-03-12 01:55:31,922 [main:67] - randomType = Int
2021-03-12 01:55:32,067 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:55:32,101 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:55:32,101 [main:149] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6116094d]
2021-03-12 01:55:32,101 [main:78] - Generated call from random type = (-705506642).toChar().isLetter()
2021-03-12 01:55:32,102 [main:106] - GETTING Boolean from B
2021-03-12 01:55:32,107 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@5cadb6c9], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7d7e4be0]]
2021-03-12 01:55:32,107 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@5cadb6c9]
2021-03-12 01:55:32,254 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:55:32,254 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7d7e4be0]
2021-03-12 01:55:32,400 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:55:32,403 [main:117] - GENERATED CALL = (getB()).equals("dhdqq").xor(false)
2021-03-12 01:55:32,403 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@5cadb6c9], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@40165da2]]
2021-03-12 01:55:32,404 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@5cadb6c9]
2021-03-12 01:55:32,549 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:55:32,549 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@40165da2]
2021-03-12 01:55:32,696 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:55:32,699 [main:117] - GENERATED CALL = (getB()).equals("azuox").or(true)
2021-03-12 01:55:32,699 [main:113] - Case = [public final operator fun set(i1: kotlin.Int, i2: kotlin.Int, i3: kotlin.Int, value: kotlin.Int): kotlin.Unit defined in B[SimpleFunctionDescriptorImpl@442f9200], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@7a6c3e3d]]
2021-03-12 01:55:32,700 [main:149] - GENERATING call of type public final operator fun set(i1: kotlin.Int, i2: kotlin.Int, i3: kotlin.Int, value: kotlin.Int): kotlin.Unit defined in B[SimpleFunctionDescriptorImpl@442f9200]
2021-03-12 01:55:32,845 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:55:33,026 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:55:33,030 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@7a6c3e3d]
2021-03-12 01:55:33,178 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:55:33,178 [main:117] - GENERATED CALL = (getB()).set(965922105, A.x, logged(3), 1604482738).equals("gykjl")
2021-03-12 01:55:33,178 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@5cadb6c9], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6c23465f]]
2021-03-12 01:55:33,178 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@5cadb6c9]
2021-03-12 01:55:33,325 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6c23465f]
2021-03-12 01:55:33,476 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:55:33,479 [main:117] - GENERATED CALL = (getB()).equals(null).and(true)
2021-03-12 01:55:33,638 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@5cadb6c9], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b71fb8c]]
2021-03-12 01:55:33,638 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@5cadb6c9]
2021-03-12 01:55:33,787 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:55:33,787 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b71fb8c]
2021-03-12 01:55:33,788 [main:117] - GENERATED CALL = (getB()).equals("jynyw").not()
2021-03-12 01:55:33,788 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@5cadb6c9]]
2021-03-12 01:55:33,788 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@5cadb6c9]
2021-03-12 01:55:33,936 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:55:33,936 [main:117] - GENERATED CALL = (getB()).equals("onwyq")
2021-03-12 01:55:33,936 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@4f270825], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@147c729a]]
2021-03-12 01:55:33,936 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@147c729a]
2021-03-12 01:55:34,082 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:55:34,083 [main:117] - GENERATED CALL = (getB()).x.equals("bzfra")
2021-03-12 01:55:34,083 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@5cadb6c9], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4cfdd607]]
2021-03-12 01:55:34,083 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@5cadb6c9]
2021-03-12 01:55:34,229 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:55:34,229 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4cfdd607]
2021-03-12 01:55:34,379 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:55:34,379 [main:117] - GENERATED CALL = (getB()).equals("aigqd").equals("egtrm")
2021-03-12 01:55:34,379 [main:114] - replacement of false of type Boolean is (getB()).equals(null).and(true)
2021-03-12 01:55:34,534 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:55:34,535 [main:66] - Compilation checking started
2021-03-12 01:55:35,174 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = "FAIL2"
    fu0 {
        Kla2().fu6()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if (prope5 != i) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            prope3.prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 01:55:35,176 [main:107] - replacing (exception, Throwable)
2021-03-12 01:55:35,177 [main:50] - replacing exception Throwable
2021-03-12 01:55:35,177 [main:54] - Getting value of type Throwable
2021-03-12 01:55:35,325 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 01:55:35,479 [main:43] - GENERATING CALL OF fun Error(message: kotlin.String?): Throwable = TODO()
2021-03-12 01:55:35,484 [main:61] - WITHOUT TYPE PARAMS = fun Error(message: kotlin.String?): Throwable = TODO()
2021-03-12 01:55:35,807 [main:302] - generating value of type = String true depth = 3
2021-03-12 01:55:35,811 [main:95] - GENERATED = Error("jrxcm")
2021-03-12 01:55:35,811 [main:58] - GENERATED VALUE OF TYPE Throwable = Error("jrxcm")
2021-03-12 01:55:35,811 [main:61] - GENERATED IS CALL =true
2021-03-12 01:55:35,824 [main:67] - randomType = Kla2
2021-03-12 01:55:35,977 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 01:55:35,980 [main:112] - generating klass Kla2 text = class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}
2021-03-12 01:55:36,134 [main:194] - Type params = []
2021-03-12 01:55:36,298 [main:106] - GETTING Throwable from Int
2021-03-12 01:55:36,327 [main:106] - GETTING Throwable from A
2021-03-12 01:55:36,332 [main:106] - GETTING Throwable from Int
2021-03-12 01:55:36,332 [main:106] - GETTING Throwable from Int
2021-03-12 01:55:36,333 [main:106] - GETTING Throwable from A
2021-03-12 01:55:36,334 [main:106] - GETTING Throwable from UInt
2021-03-12 01:55:36,358 [main:106] - GETTING Throwable from Int
2021-03-12 01:55:36,359 [main:106] - GETTING Throwable from B
2021-03-12 01:55:36,365 [main:106] - GETTING Throwable from B
2021-03-12 01:55:36,365 [main:106] - GETTING Throwable from Int
2021-03-12 01:55:36,366 [main:106] - GETTING Throwable from Int
2021-03-12 01:55:36,366 [main:114] - replacement of exception of type Throwable is Error("jrxcm")
2021-03-12 01:55:36,518 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 01:55:36,519 [main:66] - Compilation checking started
2021-03-12 01:55:37,163 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = "FAIL2"
    fu0 {
        Kla2().fu6()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if (prope5 != i) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            prope3.prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:55:37,165 [main:107] - replacing (prope5, Int)
2021-03-12 01:55:37,166 [main:50] - replacing prope5 Int
2021-03-12 01:55:37,166 [main:54] - Getting value of type Int
2021-03-12 01:55:37,320 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:55:37,323 [main:58] - GENERATED VALUE OF TYPE Int = 2040109010
2021-03-12 01:55:37,323 [main:61] - GENERATED IS CALL =false
2021-03-12 01:55:37,337 [main:67] - randomType = Kla6
2021-03-12 01:55:37,522 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 01:55:37,525 [main:112] - generating klass Kla6 text = class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}
2021-03-12 01:55:37,530 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla6[DeserializedSimpleFunctionDescriptor@4abd1408]
2021-03-12 01:55:37,677 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:55:37,677 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@19b05991]
2021-03-12 01:55:37,824 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:55:37,827 [main:78] - Generated call from random type = (Kla6()).equals("uekle").compareTo(true)
2021-03-12 01:55:37,828 [main:106] - GETTING Int from B
2021-03-12 01:55:37,834 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@446e19b3], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@406267da]]
2021-03-12 01:55:37,834 [main:117] - GENERATED CALL = (getB()).x.sign
2021-03-12 01:55:37,834 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@446e19b3], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7107ffd9]]
2021-03-12 01:55:37,834 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7107ffd9]
2021-03-12 01:55:37,834 [main:117] - GENERATED CALL = (getB()).x.takeLowestOneBit()
2021-03-12 01:55:37,834 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@446e19b3], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@788cd72f]]
2021-03-12 01:55:37,834 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@788cd72f]
2021-03-12 01:55:37,834 [main:117] - GENERATED CALL = (getB()).x.xor(logged(3))
2021-03-12 01:55:37,835 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@446e19b3], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78080c68]]
2021-03-12 01:55:37,835 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78080c68]
2021-03-12 01:55:37,835 [main:117] - GENERATED CALL = (getB()).x.toInt()
2021-03-12 01:55:37,835 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@446e19b3], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b28a80]]
2021-03-12 01:55:37,835 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b28a80]
2021-03-12 01:55:37,982 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:55:37,985 [main:117] - GENERATED CALL = (getB()).x.rem(-2)
2021-03-12 01:55:37,986 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@446e19b3], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5d605014]]
2021-03-12 01:55:37,986 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5d605014]
2021-03-12 01:55:37,986 [main:117] - GENERATED CALL = (getB()).x.countLeadingZeroBits()
2021-03-12 01:55:37,986 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@446e19b3], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@153454d9]]
2021-03-12 01:55:37,986 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@153454d9]
2021-03-12 01:55:37,986 [main:117] - GENERATED CALL = (getB()).x.coerceAtMost(logged(1))
2021-03-12 01:55:37,986 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@446e19b3], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4f6b2741]]
2021-03-12 01:55:37,986 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4f6b2741]
2021-03-12 01:55:38,133 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:55:38,137 [main:117] - GENERATED CALL = (getB()).x.and(1471650377)
2021-03-12 01:55:38,137 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@446e19b3], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@647e2e5d]]
2021-03-12 01:55:38,137 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@647e2e5d]
2021-03-12 01:55:38,137 [main:117] - GENERATED CALL = (getB()).x.takeHighestOneBit()
2021-03-12 01:55:38,137 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@446e19b3], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6344afcd]]
2021-03-12 01:55:38,137 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6344afcd]
2021-03-12 01:55:38,137 [main:117] - GENERATED CALL = (getB()).x.shr(logged(1))
2021-03-12 01:55:38,137 [main:114] - replacement of prope5 of type Int is (getB()).x.shr(logged(1))
2021-03-12 01:55:38,285 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:55:38,285 [main:66] - Compilation checking started
2021-03-12 01:55:38,708 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = "FAIL2"
    fu0 {
        Kla2().fu6()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
(getB()).x.shr(logged(1)) = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if (prope5 != i) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            prope3.prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:55:38,710 [main:107] - replacing (prope9 != null, Boolean)
2021-03-12 01:55:38,711 [main:50] - replacing prope9 != null Boolean
2021-03-12 01:55:38,711 [main:54] - Getting value of type Boolean
2021-03-12 01:55:38,871 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:55:38,875 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 01:55:38,875 [main:61] - GENERATED IS CALL =false
2021-03-12 01:55:39,076 [main:67] - randomType = ArrayList<String>
2021-03-12 01:55:39,229 [main:302] - generating value of type = ArrayList<String> false depth = 0
2021-03-12 01:55:39,390 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<Strg> = TODO()
2021-03-12 01:55:39,394 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<Strg> = TODO()
2021-03-12 01:55:39,563 [main:95] - GENERATED = arrayListOf<String>()
2021-03-12 01:55:39,682 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>.isNotEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2e163f44]
2021-03-12 01:55:39,682 [main:78] - Generated call from random type = (arrayListOf<String>()).isNotEmpty()
2021-03-12 01:55:39,682 [main:114] - replacement of prope9 != null of type Boolean is (arrayListOf<String>()).isNotEmpty()
2021-03-12 01:55:39,836 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:55:39,837 [main:66] - Compilation checking started
2021-03-12 01:55:40,286 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = "FAIL2"
    fu0 {
        Kla2().fu6()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while ((arrayListOf<String>()).isNotEmpty()) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if (prope5 != i) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            prope3.prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:55:40,289 [main:107] - replacing (Kla2().fu6(), String)
2021-03-12 01:55:40,289 [main:50] - replacing Kla2().fu6() String
2021-03-12 01:55:40,289 [main:54] - Getting value of type String
2021-03-12 01:55:40,439 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:55:40,443 [main:58] - GENERATED VALUE OF TYPE String = "hzprt"
2021-03-12 01:55:40,443 [main:61] - GENERATED IS CALL =false
2021-03-12 01:55:42,299 [main:67] - randomType = List<Function1<Triple<ULong, UShort?, ArrayDeque<ArrayList<ULong>>?>, Set<Kla7?>>>
2021-03-12 01:55:42,300 [main:106] - GETTING String from Int
2021-03-12 01:55:42,349 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]]
2021-03-12 01:55:42,349 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:55:42,349 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]
2021-03-12 01:55:42,350 [main:117] - GENERATED CALL = (logged(1)).toChar().titlecase()
2021-03-12 01:55:42,350 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:55:42,350 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:55:42,350 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:55:42,350 [main:117] - GENERATED CALL = (logged(1)).compareTo(B.get()).toString(logged(1))
2021-03-12 01:55:42,350 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a36c448]]
2021-03-12 01:55:42,350 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:55:42,350 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a36c448]
2021-03-12 01:55:42,350 [main:117] - GENERATED CALL = (logged(1)).toChar().lowercase()
2021-03-12 01:55:42,350 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]]
2021-03-12 01:55:42,350 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60]
2021-03-12 01:55:42,350 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]
2021-03-12 01:55:42,351 [main:117] - GENERATED CALL = (logged(1)).toShort().toString(A.x)
2021-03-12 01:55:42,351 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:55:42,351 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:55:42,351 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:55:42,501 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:55:42,504 [main:117] - GENERATED CALL = (logged(1)).toInt().toString(1614837211)
2021-03-12 01:55:42,504 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]]
2021-03-12 01:55:42,504 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:55:42,505 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]
2021-03-12 01:55:42,505 [main:117] - GENERATED CALL = (logged(1)).toChar().uppercase()
2021-03-12 01:55:42,505 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:55:42,505 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73]
2021-03-12 01:55:42,651 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:55:42,655 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:55:42,655 [main:117] - GENERATED CALL = (logged(1)).div(-4686893191295603340).toString(B.get())
2021-03-12 01:55:42,655 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:55:42,655 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e]
2021-03-12 01:55:42,655 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:55:42,655 [main:117] - GENERATED CALL = (logged(1)).toLong().toString(A.x)
2021-03-12 01:55:42,655 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc0516]]
2021-03-12 01:55:42,655 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235]
2021-03-12 01:55:42,655 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc0516]
2021-03-12 01:55:42,655 [main:117] - GENERATED CALL = (logged(1)).toByte().toString(logged(3))
2021-03-12 01:55:42,655 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6122df5e]]
2021-03-12 01:55:42,655 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:55:42,656 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6122df5e]
2021-03-12 01:55:42,656 [main:117] - GENERATED CALL = (logged(1)).toChar().plus(var log =
2021-03-12 01:55:42,656 [main:114] - replacement of Kla2().fu6() of type String is (logged(1)).toChar().plus(var log =
2021-03-12 01:55:42,803 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 01:55:42,803 [main:66] - Compilation checking started
2021-03-12 01:55:42,810 [main:71] - Wrong syntax or breaks conditions
2021-03-12 01:55:42,810 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = "FAIL2"
    fu0 {
        (logged(1)).toChar().plus(var log =
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if (prope5 != i) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            prope3.prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:55:42,812 [main:107] - replacing (this, Kla4)
2021-03-12 01:55:42,812 [main:50] - replacing this Kla4
2021-03-12 01:55:42,812 [main:54] - Getting value of type Kla4
2021-03-12 01:55:42,962 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 01:55:42,966 [main:112] - generating klass Kla4 text = class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
this.prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}
2021-03-12 01:55:42,966 [main:58] - GENERATED VALUE OF TYPE Kla4 = Kla4()
2021-03-12 01:55:42,966 [main:61] - GENERATED IS CALL =true
2021-03-12 01:55:42,973 [main:67] - randomType = UInt
2021-03-12 01:55:43,120 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 01:55:43,150 [main:106] - GETTING Kla4 from Int
2021-03-12 01:55:43,178 [main:106] - GETTING Kla4 from B
2021-03-12 01:55:43,184 [main:106] - GETTING Kla4 from Int
2021-03-12 01:55:43,185 [main:106] - GETTING Kla4 from A
2021-03-12 01:55:43,189 [main:106] - GETTING Kla4 from Int
2021-03-12 01:55:43,190 [main:106] - GETTING Kla4 from B
2021-03-12 01:55:43,190 [main:106] - GETTING Kla4 from UInt
2021-03-12 01:55:43,211 [main:106] - GETTING Kla4 from Int
2021-03-12 01:55:43,212 [main:106] - GETTING Kla4 from Int
2021-03-12 01:55:43,213 [main:106] - GETTING Kla4 from Int
2021-03-12 01:55:43,213 [main:106] - GETTING Kla4 from A
2021-03-12 01:55:43,213 [main:114] - replacement of this of type Kla4 is Kla4()
2021-03-12 01:55:43,362 [main:33] - Trying to replace Element(THIS_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 01:55:43,362 [main:66] - Compilation checking started
2021-03-12 01:55:44,021 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = "FAIL2"
    fu0 {
        Kla2().fu6()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if (prope5 != i) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            prope3.prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:55:44,023 [main:107] - replacing (resumeWithException(IllegalStateException("OK")), Unit?)
2021-03-12 01:55:44,023 [main:50] - replacing resumeWithException(IllegalStateException("OK")) Unit?
2021-03-12 01:55:44,023 [main:54] - Getting value of type Unit?
2021-03-12 01:55:44,176 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 01:55:44,183 [main:58] - GENERATED VALUE OF TYPE Unit? = println()
2021-03-12 01:55:44,183 [main:61] - GENERATED IS CALL =true
2021-03-12 01:55:44,197 [main:67] - randomType = A
2021-03-12 01:55:44,346 [main:302] - generating value of type = A false depth = 0
2021-03-12 01:55:44,350 [main:112] - generating klass A text = object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}
2021-03-12 01:55:44,356 [main:106] - GETTING Unit? from UInt
2021-03-12 01:55:44,377 [main:106] - GETTING Unit? from A
2021-03-12 01:55:44,382 [main:106] - GETTING Unit? from B
2021-03-12 01:55:44,388 [main:113] - Case = [public final operator fun set(i1: kotlin.Int, i2: kotlin.Int, i3: kotlin.Int, value: kotlin.Int): kotlin.Unit defined in B[SimpleFunctionDescriptorImpl@49e4b8ca]]
2021-03-12 01:55:44,388 [main:149] - GENERATING call of type public final operator fun set(i1: kotlin.Int, i2: kotlin.Int, i3: kotlin.Int, value: kotlin.Int): kotlin.Unit defined in B[SimpleFunctionDescriptorImpl@49e4b8ca]
2021-03-12 01:55:44,536 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:55:44,540 [main:117] - GENERATED CALL = (getB())?.set(logged(3), logged(1), 1786570049, logged(1))
2021-03-12 01:55:44,540 [main:114] - replacement of resumeWithException(IllegalStateException("OK")) of type Unit? is println()
2021-03-12 01:55:44,688 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 01:55:44,688 [main:66] - Compilation checking started
2021-03-12 01:55:45,103 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.println()
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = "FAIL2"
    fu0 {
        Kla2().fu6()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
prope0.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if (prope5 != i) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            prope3.prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:55:45,105 [main:107] - replacing (prope0.exceptionOrNull(), Throwable?)
2021-03-12 01:55:45,105 [main:50] - replacing prope0.exceptionOrNull() Throwable?
2021-03-12 01:55:45,105 [main:54] - Getting value of type Throwable?
2021-03-12 01:55:45,251 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 01:55:45,258 [main:58] - GENERATED VALUE OF TYPE Throwable? = UninitializedPropertyAccessException()
2021-03-12 01:55:45,258 [main:61] - GENERATED IS CALL =true
2021-03-12 01:55:45,426 [main:67] - randomType = Float
2021-03-12 01:55:45,573 [main:302] - generating value of type = Float true depth = 0
2021-03-12 01:55:45,604 [main:106] - GETTING Throwable? from A
2021-03-12 01:55:45,609 [main:106] - GETTING Throwable? from A
2021-03-12 01:55:45,609 [main:106] - GETTING Throwable? from UInt
2021-03-12 01:55:45,631 [main:106] - GETTING Throwable? from Int
2021-03-12 01:55:45,660 [main:106] - GETTING Throwable? from Int
2021-03-12 01:55:45,660 [main:106] - GETTING Throwable? from B
2021-03-12 01:55:45,666 [main:106] - GETTING Throwable? from Int
2021-03-12 01:55:45,667 [main:106] - GETTING Throwable? from Int
2021-03-12 01:55:45,667 [main:106] - GETTING Throwable? from Int
2021-03-12 01:55:45,668 [main:106] - GETTING Throwable? from B
2021-03-12 01:55:45,669 [main:106] - GETTING Throwable? from Int
2021-03-12 01:55:45,669 [main:114] - replacement of prope0.exceptionOrNull() of type Throwable? is UninitializedPropertyAccessException()
2021-03-12 01:55:45,816 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 01:55:45,816 [main:66] - Compilation checking started
2021-03-12 01:55:46,489 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = "FAIL2"
    fu0 {
        Kla2().fu6()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error("Continuation " + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if (prope5 != i) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            prope3.prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:55:46,492 [main:107] - replacing ("Continuation ", String)
2021-03-12 01:55:46,492 [main:50] - replacing "Continuation " String
2021-03-12 01:55:46,492 [main:54] - Getting value of type String
2021-03-12 01:55:46,644 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:55:46,648 [main:58] - GENERATED VALUE OF TYPE String = "jopdm"
2021-03-12 01:55:46,648 [main:61] - GENERATED IS CALL =false
2021-03-12 01:55:46,655 [main:67] - randomType = Long
2021-03-12 01:55:46,804 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:55:46,837 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@985f543]
2021-03-12 01:55:46,838 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc0516]
2021-03-12 01:55:46,987 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:55:46,990 [main:78] - Generated call from random type = (6975672484593349023).toByte().toString(1562772115)
2021-03-12 01:55:46,991 [main:106] - GETTING String from Int
2021-03-12 01:55:47,022 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a36c448]]
2021-03-12 01:55:47,022 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:55:47,022 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a36c448]
2021-03-12 01:55:47,022 [main:117] - GENERATED CALL = (A.x).toChar().lowercase()
2021-03-12 01:55:47,022 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:55:47,022 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73]
2021-03-12 01:55:47,172 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:55:47,176 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:55:47,176 [main:117] - GENERATED CALL = (A.x).div(-7787030309578882273).toString(logged(2))
2021-03-12 01:55:47,176 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc0516]]
2021-03-12 01:55:47,176 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235]
2021-03-12 01:55:47,176 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc0516]
2021-03-12 01:55:47,176 [main:117] - GENERATED CALL = (A.x).toByte().toString(B.x)
2021-03-12 01:55:47,176 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]]
2021-03-12 01:55:47,176 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:55:47,176 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]
2021-03-12 01:55:47,176 [main:117] - GENERATED CALL = (A.x).toChar().titlecase()
2021-03-12 01:55:47,176 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:55:47,177 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:55:47,177 [main:117] - GENERATED CALL = (A.x).toString(A.x)
2021-03-12 01:55:47,177 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:55:47,177 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:55:47,177 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:55:47,177 [main:117] - GENERATED CALL = (A.x).toInt().toString(logged(1))
2021-03-12 01:55:47,177 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:55:47,177 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e]
2021-03-12 01:55:47,177 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:55:47,177 [main:117] - GENERATED CALL = (A.x).toLong().toString(logged(3))
2021-03-12 01:55:47,177 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]]
2021-03-12 01:55:47,177 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:55:47,177 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]
2021-03-12 01:55:47,178 [main:117] - GENERATED CALL = (A.x).toChar().uppercase()
2021-03-12 01:55:47,178 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6122df5e]]
2021-03-12 01:55:47,178 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:55:47,178 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6122df5e]
2021-03-12 01:55:47,327 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:55:47,330 [main:117] - GENERATED CALL = (A.x).toChar().plus("muyvk")
2021-03-12 01:55:47,331 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]]
2021-03-12 01:55:47,331 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60]
2021-03-12 01:55:47,331 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]
2021-03-12 01:55:47,331 [main:117] - GENERATED CALL = (A.x).toShort().toString(logged(1))
2021-03-12 01:55:47,331 [main:114] - replacement of "Continuation " of type String is (A.x).toInt().toString(logged(1))
2021-03-12 01:55:47,479 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:55:47,479 [main:66] - Compilation checking started
2021-03-12 01:55:48,115 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = "FAIL2"
    fu0 {
        Kla2().fu6()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if (prope5 != i) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            prope3.prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:55:48,118 [main:107] - replacing (", got ", String)
2021-03-12 01:55:48,118 [main:50] - replacing ", got " String
2021-03-12 01:55:48,118 [main:54] - Getting value of type String
2021-03-12 01:55:48,281 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:55:48,286 [main:58] - GENERATED VALUE OF TYPE String = "ebqeo"
2021-03-12 01:55:48,286 [main:61] - GENERATED IS CALL =false
2021-03-12 01:55:48,628 [main:67] - randomType = UShort?
2021-03-12 01:55:48,780 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 01:55:48,818 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@5ad0bfe4]
2021-03-12 01:55:48,819 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7dbce7d4]
2021-03-12 01:55:48,819 [main:78] - Generated call from random type = (10625.toUShort())?.toUByte().toString(logged(3))
2021-03-12 01:55:48,820 [main:106] - GETTING String from A
2021-03-12 01:55:48,827 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@533c3aca], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:55:48,827 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:55:48,827 [main:117] - GENERATED CALL = (getA()).x.toString(logged(1))
2021-03-12 01:55:48,827 [main:114] - replacement of ", got " of type String is (getA()).x.toString(logged(1))
2021-03-12 01:55:48,986 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:55:48,986 [main:66] - Compilation checking started
2021-03-12 01:55:49,698 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = "FAIL2"
    fu0 {
        Kla2().fu6()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if (prope5 != i) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            prope3.prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:55:49,700 [main:107] - replacing ("FAIL", String)
2021-03-12 01:55:49,701 [main:50] - replacing "FAIL" String
2021-03-12 01:55:49,701 [main:54] - Getting value of type String
2021-03-12 01:55:49,860 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:55:49,864 [main:58] - GENERATED VALUE OF TYPE String = "zlbek"
2021-03-12 01:55:49,864 [main:61] - GENERATED IS CALL =false
2021-03-12 01:55:50,056 [main:67] - randomType = Kla1?
2021-03-12 01:55:50,057 [main:106] - GETTING String from Int
2021-03-12 01:55:50,086 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]]
2021-03-12 01:55:50,086 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:55:50,086 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]
2021-03-12 01:55:50,087 [main:117] - GENERATED CALL = (logged(3)).toChar().uppercase()
2021-03-12 01:55:50,087 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:55:50,087 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e]
2021-03-12 01:55:50,087 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:55:50,087 [main:117] - GENERATED CALL = (logged(3)).toLong().toString(logged(1))
2021-03-12 01:55:50,087 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]]
2021-03-12 01:55:50,087 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:55:50,087 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]
2021-03-12 01:55:50,087 [main:117] - GENERATED CALL = (logged(3)).toChar().titlecase()
2021-03-12 01:55:50,087 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:55:50,087 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:55:50,087 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:55:50,088 [main:117] - GENERATED CALL = (logged(3)).toInt().toString(B.get())
2021-03-12 01:55:50,088 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc0516]]
2021-03-12 01:55:50,088 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235]
2021-03-12 01:55:50,088 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc0516]
2021-03-12 01:55:50,088 [main:117] - GENERATED CALL = (logged(3)).toByte().toString(B.get())
2021-03-12 01:55:50,088 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a36c448]]
2021-03-12 01:55:50,088 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:55:50,088 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a36c448]
2021-03-12 01:55:50,088 [main:117] - GENERATED CALL = (logged(3)).toChar().lowercase()
2021-03-12 01:55:50,088 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]]
2021-03-12 01:55:50,088 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60]
2021-03-12 01:55:50,088 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]
2021-03-12 01:55:50,244 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:55:50,247 [main:117] - GENERATED CALL = (logged(3)).toShort().toString(-58919088)
2021-03-12 01:55:50,248 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:55:50,248 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73]
2021-03-12 01:55:50,402 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:55:50,405 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:55:50,406 [main:117] - GENERATED CALL = (logged(3)).div(-2654678171649571439).toString(B.get())
2021-03-12 01:55:50,406 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:55:50,406 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:55:50,406 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:55:50,406 [main:117] - GENERATED CALL = (logged(3)).compareTo(A.x).toString(B.get())
2021-03-12 01:55:50,406 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:55:50,406 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:55:50,588 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:55:50,592 [main:117] - GENERATED CALL = (logged(3)).toString(491817102)
2021-03-12 01:55:50,592 [main:114] - replacement of "FAIL" of type String is (logged(3)).toInt().toString(B.get())
2021-03-12 01:55:50,742 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:55:50,742 [main:66] - Compilation checking started
2021-03-12 01:55:51,169 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = (logged(3)).toInt().toString(B.get())

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = "FAIL2"
    fu0 {
        Kla2().fu6()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if (prope5 != i) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            prope3.prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:55:51,171 [main:107] - replacing (prope3, Kla7)
2021-03-12 01:55:51,171 [main:50] - replacing prope3 Kla7
2021-03-12 01:55:51,171 [main:54] - Getting value of type Kla7
2021-03-12 01:55:51,320 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 01:55:51,323 [main:112] - generating klass Kla7 text = class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if (prope5 != i) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 01:55:51,323 [main:58] - GENERATED VALUE OF TYPE Kla7 = Kla7()
2021-03-12 01:55:51,323 [main:61] - GENERATED IS CALL =true
2021-03-12 01:55:51,687 [main:67] - randomType = List<Kla4>
2021-03-12 01:55:51,688 [main:106] - GETTING Kla7 from B
2021-03-12 01:55:51,694 [main:106] - GETTING Kla7 from Int
2021-03-12 01:55:51,725 [main:106] - GETTING Kla7 from Int
2021-03-12 01:55:51,725 [main:106] - GETTING Kla7 from Int
2021-03-12 01:55:51,726 [main:106] - GETTING Kla7 from A
2021-03-12 01:55:51,731 [main:106] - GETTING Kla7 from Int
2021-03-12 01:55:51,731 [main:106] - GETTING Kla7 from Int
2021-03-12 01:55:51,732 [main:106] - GETTING Kla7 from A
2021-03-12 01:55:51,732 [main:106] - GETTING Kla7 from Int
2021-03-12 01:55:51,733 [main:106] - GETTING Kla7 from UInt
2021-03-12 01:55:51,755 [main:106] - GETTING Kla7 from B
2021-03-12 01:55:51,755 [main:114] - replacement of prope3 of type Kla7 is Kla7()
2021-03-12 01:55:51,905 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 01:55:51,906 [main:66] - Compilation checking started
2021-03-12 01:55:52,575 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = "FAIL2"
    fu0 {
        Kla2().fu6()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if (prope5 != i) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:55:52,578 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 01:55:52,578 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 01:55:52,578 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 01:55:52,740 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 01:55:52,747 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 01:55:52,755 [main:67] - randomType = UByte
2021-03-12 01:55:52,906 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 01:55:52,943 [main:106] - GETTING EmptyCoroutineContext from A
2021-03-12 01:55:52,948 [main:106] - GETTING EmptyCoroutineContext from B
2021-03-12 01:55:52,954 [main:106] - GETTING EmptyCoroutineContext from B
2021-03-12 01:55:52,954 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 01:55:52,984 [main:106] - GETTING EmptyCoroutineContext from A
2021-03-12 01:55:52,984 [main:106] - GETTING EmptyCoroutineContext from UInt
2021-03-12 01:55:53,006 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 01:55:53,006 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 01:55:53,007 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 01:55:53,008 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 01:55:53,008 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 01:55:53,008 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 01:55:53,008 [main:107] - replacing (message, String?)
2021-03-12 01:55:53,009 [main:50] - replacing message String?
2021-03-12 01:55:53,009 [main:54] - Getting value of type String?
2021-03-12 01:55:53,157 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:55:53,161 [main:58] - GENERATED VALUE OF TYPE String? = "auhhr"
2021-03-12 01:55:53,161 [main:61] - GENERATED IS CALL =false
2021-03-12 01:55:53,526 [main:67] - randomType = ArrayList<Char>
2021-03-12 01:55:53,675 [main:302] - generating value of type = ArrayList<Char> false depth = 0
2021-03-12 01:55:53,833 [main:43] - GENERATING CALL OF fun <E> ArrayList(elements: kotlin.collections.Collection<Char>): ArrayList<Char> = TODO()
2021-03-12 01:55:53,838 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(elements: kotlin.collections.Collection<Char>): ArrayList<Char> = TODO()
2021-03-12 01:55:54,176 [main:302] - generating value of type = Collection<Char> false depth = 3
2021-03-12 01:55:54,333 [main:43] - GENERATING CALL OF fun <E> buildList(builderAction: kotlin.collections.MutableList<Char>.()->kotlin.Unit): Collection<Char> = TODO()
2021-03-12 01:55:54,337 [main:61] - WITHOUT TYPE PARAMS = fun <E> buildList(builderAction: kotlin.collections.MutableList<Char>.()->kotlin.Unit): Collection<Char> = TODO()
2021-03-12 01:55:54,681 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<MutableList<Char>, Unit> false depth = 6
2021-03-12 01:55:54,685 [main:302] - generating value of type = Unit false depth = 7
2021-03-12 01:55:54,884 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 01:55:54,889 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 01:55:55,391 [main:302] - generating value of type = Boolean true depth = 10
2021-03-12 01:55:55,395 [main:302] - generating value of type = Function0<Any> false depth = 10
2021-03-12 01:55:55,398 [main:302] - generating value of type = Any false depth = 11
2021-03-12 01:55:55,399 [main:95] - GENERATED = require(true, { "vdxwn"})
2021-03-12 01:55:55,399 [main:95] - GENERATED = buildList<Char>({ require(true, { "vdxwn"})})
2021-03-12 01:55:55,399 [main:95] - GENERATED = ArrayList<Char>(buildList<Char>({ require(true, { "vdxwn"})}))
2021-03-12 01:55:55,515 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@2f081f92]
2021-03-12 01:55:55,515 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]
2021-03-12 01:55:55,516 [main:78] - Generated call from random type = (ArrayList<Char>(buildList<Char>({ require(true, { "vdxwn"})}))).get(logged(2)).uppercase()
2021-03-12 01:55:55,516 [main:106] - GETTING String? from UInt
2021-03-12 01:55:55,539 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@3ff0371e], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:55:55,539 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@3ff0371e]
2021-03-12 01:55:55,689 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 01:55:55,693 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:55:55,693 [main:117] - GENERATED CALL = (logged<UInt>(1851723815.toUInt()))?.compareTo(4.toUByte()).toString(logged(2))
2021-03-12 01:55:55,693 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@2015071a], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@436cb179]]
2021-03-12 01:55:55,693 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@2015071a]
2021-03-12 01:55:55,693 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@436cb179]
2021-03-12 01:55:55,693 [main:117] - GENERATED CALL = (logged<UInt>(1851723815.toUInt()))?.toUShort().toString(A.x)
2021-03-12 01:55:55,694 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@2dd6f8b7], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7dbce7d4]]
2021-03-12 01:55:55,694 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@2dd6f8b7]
2021-03-12 01:55:55,694 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7dbce7d4]
2021-03-12 01:55:55,694 [main:117] - GENERATED CALL = (logged<UInt>(1851723815.toUInt()))?.toUByte().toString(logged(2))
2021-03-12 01:55:55,694 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@11926dc1], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:55:55,694 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@11926dc1]
2021-03-12 01:55:55,694 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:55:55,694 [main:117] - GENERATED CALL = (logged<UInt>(1851723815.toUInt()))?.toLong().toString(B.get())
2021-03-12 01:55:55,694 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@3e412d33], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc0516]]
2021-03-12 01:55:55,694 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@3e412d33]
2021-03-12 01:55:55,694 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc0516]
2021-03-12 01:55:55,694 [main:117] - GENERATED CALL = (logged<UInt>(1851723815.toUInt()))?.toByte().toString(B.x)
2021-03-12 01:55:55,694 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@7b948bf8], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]]
2021-03-12 01:55:55,695 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@7b948bf8]
2021-03-12 01:55:55,695 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]
2021-03-12 01:55:55,695 [main:117] - GENERATED CALL = (logged<UInt>(1851723815.toUInt()))?.toShort().toString(B.get())
2021-03-12 01:55:55,695 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c847f6]]
2021-03-12 01:55:55,695 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c847f6]
2021-03-12 01:55:55,695 [main:117] - GENERATED CALL = (logged<UInt>(1851723815.toUInt()))?.toString(logged(3))
2021-03-12 01:55:55,695 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.ULong): kotlin.ULong defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@2474d279], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.ULong.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c330c2b]]
2021-03-12 01:55:55,695 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.ULong): kotlin.ULong defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@2474d279]
2021-03-12 01:55:55,845 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 01:55:55,849 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.ULong.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c330c2b]
2021-03-12 01:55:55,999 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:55:56,002 [main:117] - GENERATED CALL = (logged<UInt>(1851723815.toUInt()))?.div(4302844697874675311.toULong()).toString(-1905952453)
2021-03-12 01:55:56,002 [main:114] - replacement of message of type String? is (logged<UInt>(1851723815.toUInt()))?.toLong().toString(B.get())
2021-03-12 01:55:56,149 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:55:56,149 [main:66] - Compilation checking started
2021-03-12 01:55:56,579 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.(logged<UInt>(1851723815.toUInt()))?.toLong().toString(B.get())!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = "FAIL2"
    fu0 {
        Kla2().fu6()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if (prope5 != i) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:55:56,581 [main:107] - replacing (prope7, Function0<Unit>)
2021-03-12 01:55:56,581 [main:50] - replacing prope7 Function0<Unit>
2021-03-12 01:55:56,581 [main:54] - Getting value of type Function0<Unit>
2021-03-12 01:55:56,731 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 01:55:56,735 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 01:55:56,898 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 01:55:56,903 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 01:55:57,414 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 01:55:57,417 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 01:55:57,421 [main:302] - generating value of type = Any false depth = 5
2021-03-12 01:55:57,421 [main:95] - GENERATED = check(true, { "ivpii"})
2021-03-12 01:55:57,421 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true, { "ivpii"})}
2021-03-12 01:55:57,421 [main:61] - GENERATED IS CALL =false
2021-03-12 01:55:57,599 [main:67] - randomType = ULong?
2021-03-12 01:55:57,749 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 01:55:57,781 [main:106] - GETTING Function0<Unit> from B
2021-03-12 01:55:57,788 [main:106] - GETTING Function0<Unit> from UInt
2021-03-12 01:55:57,810 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 01:55:57,839 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 01:55:57,840 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 01:55:57,841 [main:106] - GETTING Function0<Unit> from B
2021-03-12 01:55:57,842 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 01:55:57,843 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 01:55:57,844 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 01:55:57,845 [main:106] - GETTING Function0<Unit> from A
2021-03-12 01:55:57,851 [main:106] - GETTING Function0<Unit> from A
2021-03-12 01:55:57,851 [main:114] - replacement of prope7 of type Function0<Unit> is { check(true, { "ivpii"})}
2021-03-12 01:55:58,001 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 01:55:58,001 [main:66] - Compilation checking started
2021-03-12 01:55:58,432 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = "FAIL2"
    fu0 {
        Kla2().fu6()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        { check(true, { "ivpii"})} = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if (prope5 != i) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:55:58,435 [main:107] - replacing (prope0, String)
2021-03-12 01:55:58,435 [main:50] - replacing prope0 String
2021-03-12 01:55:58,435 [main:54] - Getting value of type String
2021-03-12 01:55:58,587 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:55:58,590 [main:58] - GENERATED VALUE OF TYPE String = "rhgag"
2021-03-12 01:55:58,590 [main:61] - GENERATED IS CALL =false
2021-03-12 01:55:58,775 [main:67] - randomType = ArrayList<UByte>
2021-03-12 01:55:58,952 [main:302] - generating value of type = ArrayList<UByte> false depth = 0
2021-03-12 01:55:59,107 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: UByte): ArrayList<UByte> = TODO()
2021-03-12 01:55:59,112 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: UByte): ArrayList<UByte> = TODO()
2021-03-12 01:55:59,266 [main:302] - generating value of type = UByte true depth = 3
2021-03-12 01:55:59,270 [main:95] - GENERATED = arrayListOf<UByte>(44.toUByte())
2021-03-12 01:55:59,387 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@591de409]
2021-03-12 01:55:59,534 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:55:59,689 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:55:59,694 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:56:00,016 [main:302] - generating value of type = Int true depth = 3
2021-03-12 01:56:00,020 [main:95] - GENERATED = StringBuilder(-85801321)
2021-03-12 01:56:00,168 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:56:00,322 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 01:56:00,327 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 01:56:00,651 [main:302] - generating value of type = String true depth = 3
2021-03-12 01:56:00,655 [main:95] - GENERATED = StringBuilder("rfsla")
2021-03-12 01:56:00,802 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:56:00,959 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:56:01,110 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 01:56:01,265 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:56:01,269 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 01:56:01,595 [main:302] - generating value of type = Int true depth = 3
2021-03-12 01:56:01,599 [main:95] - GENERATED = StringBuilder(-953006155)
2021-03-12 01:56:01,748 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 01:56:01,751 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 01:56:01,758 [main:78] - Generated call from random type = (arrayListOf<UByte>(44.toUByte())).joinToString(StringBuilder(-85801321), StringBuilder("rfsla"), "dywwf", 535662062, StringBuilder(-953006155), {a: T -> "iiseq"})
2021-03-12 01:56:01,759 [main:106] - GETTING String from Int
2021-03-12 01:56:01,788 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:56:01,788 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e]
2021-03-12 01:56:01,788 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:56:01,788 [main:117] - GENERATED CALL = (B.x).toLong().toString(logged(1))
2021-03-12 01:56:01,788 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:56:01,788 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:56:01,788 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:56:01,937 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:56:01,941 [main:117] - GENERATED CALL = (B.x).compareTo(A.x).toString(-907425609)
2021-03-12 01:56:01,941 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]]
2021-03-12 01:56:01,941 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:56:01,941 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]
2021-03-12 01:56:01,941 [main:117] - GENERATED CALL = (B.x).toChar().titlecase()
2021-03-12 01:56:01,941 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6122df5e]]
2021-03-12 01:56:01,941 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:56:01,941 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6122df5e]
2021-03-12 01:56:01,941 [main:117] - GENERATED CALL = (B.x).toChar().plus(var log =
2021-03-12 01:56:01,942 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a36c448]]
2021-03-12 01:56:01,942 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:56:01,942 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a36c448]
2021-03-12 01:56:01,942 [main:117] - GENERATED CALL = (B.x).toChar().lowercase()
2021-03-12 01:56:01,942 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:56:01,942 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:56:01,942 [main:117] - GENERATED CALL = (B.x).toString(B.get())
2021-03-12 01:56:01,942 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc0516]]
2021-03-12 01:56:01,942 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235]
2021-03-12 01:56:01,942 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc0516]
2021-03-12 01:56:01,942 [main:117] - GENERATED CALL = (B.x).toByte().toString(logged(3))
2021-03-12 01:56:01,942 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]]
2021-03-12 01:56:01,942 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:56:01,942 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]
2021-03-12 01:56:01,943 [main:117] - GENERATED CALL = (B.x).toChar().uppercase()
2021-03-12 01:56:01,943 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]]
2021-03-12 01:56:01,943 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60]
2021-03-12 01:56:01,943 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]
2021-03-12 01:56:01,943 [main:117] - GENERATED CALL = (B.x).toShort().toString(B.x)
2021-03-12 01:56:01,943 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:56:01,943 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73]
2021-03-12 01:56:02,091 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:56:02,094 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:56:02,094 [main:117] - GENERATED CALL = (B.x).div(3960218680044576955).toString(logged(1))
2021-03-12 01:56:02,094 [main:114] - replacement of prope0 of type String is (B.x).toByte().toString(logged(3))
2021-03-12 01:56:02,242 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:56:02,242 [main:66] - Compilation checking started
2021-03-12 01:56:02,667 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        (B.x).toByte().toString(logged(3)) = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = "FAIL2"
    fu0 {
        Kla2().fu6()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(prope0.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if (prope5 != i) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:56:02,670 [main:107] - replacing (prope0.exceptionOrNull()!!, Throwable)
2021-03-12 01:56:02,670 [main:50] - replacing prope0.exceptionOrNull()!! Throwable
2021-03-12 01:56:02,670 [main:54] - Getting value of type Throwable
2021-03-12 01:56:02,822 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 01:56:02,830 [main:58] - GENERATED VALUE OF TYPE Throwable = Throwable()
2021-03-12 01:56:02,830 [main:61] - GENERATED IS CALL =true
2021-03-12 01:56:02,837 [main:67] - randomType = Char
2021-03-12 01:56:03,022 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:56:03,044 [main:106] - GETTING Throwable from Int
2021-03-12 01:56:03,073 [main:106] - GETTING Throwable from B
2021-03-12 01:56:03,079 [main:106] - GETTING Throwable from UInt
2021-03-12 01:56:03,100 [main:106] - GETTING Throwable from Int
2021-03-12 01:56:03,101 [main:106] - GETTING Throwable from A
2021-03-12 01:56:03,106 [main:106] - GETTING Throwable from B
2021-03-12 01:56:03,107 [main:106] - GETTING Throwable from A
2021-03-12 01:56:03,108 [main:106] - GETTING Throwable from Int
2021-03-12 01:56:03,109 [main:106] - GETTING Throwable from Int
2021-03-12 01:56:03,110 [main:106] - GETTING Throwable from Int
2021-03-12 01:56:03,111 [main:106] - GETTING Throwable from Int
2021-03-12 01:56:03,111 [main:114] - replacement of prope0.exceptionOrNull()!! of type Throwable is Throwable()
2021-03-12 01:56:03,261 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 01:56:03,261 [main:66] - Compilation checking started
2021-03-12 01:56:03,919 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = "FAIL2"
    fu0 {
        Kla2().fu6()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if (prope5 != i) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:56:03,921 [main:107] - replacing (numberOfSuspensions, Int)
2021-03-12 01:56:03,922 [main:50] - replacing numberOfSuspensions Int
2021-03-12 01:56:03,922 [main:54] - Getting value of type Int
2021-03-12 01:56:04,073 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:56:04,076 [main:58] - GENERATED VALUE OF TYPE Int = -1621230566
2021-03-12 01:56:04,076 [main:61] - GENERATED IS CALL =false
2021-03-12 01:56:04,245 [main:67] - randomType = Short
2021-03-12 01:56:04,396 [main:302] - generating value of type = Short true depth = 0
2021-03-12 01:56:04,431 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@a6b240e]
2021-03-12 01:56:04,580 [main:302] - generating value of type = Double true depth = 0
2021-03-12 01:56:04,583 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@78d45150]
2021-03-12 01:56:04,733 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:56:04,737 [main:78] - Generated call from random type = (-29778).div(0.07668015798032068).compareTo(109)
2021-03-12 01:56:04,738 [main:106] - GETTING Int from B
2021-03-12 01:56:04,743 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@446e19b3], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d8dcc4]]
2021-03-12 01:56:04,743 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d8dcc4]
2021-03-12 01:56:04,744 [main:117] - GENERATED CALL = (getB()).x.shl(logged(1))
2021-03-12 01:56:04,744 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@446e19b3], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@48efa366]]
2021-03-12 01:56:04,744 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@48efa366]
2021-03-12 01:56:04,744 [main:117] - GENERATED CALL = (getB()).x.dec()
2021-03-12 01:56:04,744 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@446e19b3], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3ef045d8]]
2021-03-12 01:56:04,744 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3ef045d8]
2021-03-12 01:56:04,893 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:56:04,897 [main:117] - GENERATED CALL = (getB()).x.minus(104)
2021-03-12 01:56:04,897 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@446e19b3], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7b59aa7b]]
2021-03-12 01:56:04,897 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7b59aa7b]
2021-03-12 01:56:04,897 [main:117] - GENERATED CALL = (getB()).x.countOneBits()
2021-03-12 01:56:04,897 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@446e19b3], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6344afcd]]
2021-03-12 01:56:04,897 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6344afcd]
2021-03-12 01:56:04,897 [main:117] - GENERATED CALL = (getB()).x.shr(B.x)
2021-03-12 01:56:04,897 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@446e19b3]]
2021-03-12 01:56:04,897 [main:117] - GENERATED CALL = (getB()).x
2021-03-12 01:56:04,897 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@446e19b3], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70b68745]]
2021-03-12 01:56:04,898 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70b68745]
2021-03-12 01:56:04,898 [main:117] - GENERATED CALL = (getB()).x.ushr(logged(2))
2021-03-12 01:56:04,898 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@446e19b3], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3854cce]]
2021-03-12 01:56:04,898 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3854cce]
2021-03-12 01:56:04,898 [main:117] - GENERATED CALL = (getB()).x.unaryMinus()
2021-03-12 01:56:04,898 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@446e19b3], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78080c68]]
2021-03-12 01:56:04,898 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78080c68]
2021-03-12 01:56:04,898 [main:117] - GENERATED CALL = (getB()).x.toInt()
2021-03-12 01:56:04,898 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@446e19b3], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4f6b2741]]
2021-03-12 01:56:04,898 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4f6b2741]
2021-03-12 01:56:04,898 [main:117] - GENERATED CALL = (getB()).x.and(logged(2))
2021-03-12 01:56:04,898 [main:114] - replacement of numberOfSuspensions of type Int is (getB()).x.dec()
2021-03-12 01:56:05,047 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:56:05,048 [main:66] - Compilation checking started
2021-03-12 01:56:05,690 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = "FAIL2"
    fu0 {
        Kla2().fu6()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if (prope5 != i) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if (prope5 != (getB()).x.dec())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:56:05,692 [main:107] - replacing (fu6(), String)
2021-03-12 01:56:05,693 [main:50] - replacing fu6() String
2021-03-12 01:56:05,693 [main:54] - Getting value of type String
2021-03-12 01:56:05,853 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:56:05,857 [main:58] - GENERATED VALUE OF TYPE String = "gcnow"
2021-03-12 01:56:05,857 [main:61] - GENERATED IS CALL =false
2021-03-12 01:56:05,872 [main:67] - randomType = Kla0
2021-03-12 01:56:06,020 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 01:56:06,024 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)
2021-03-12 01:56:06,175 [main:194] - Type params = []
2021-03-12 01:56:06,325 [main:302] - generating value of type = String true depth = 2
2021-03-12 01:56:06,334 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@155821e1]
2021-03-12 01:56:06,483 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 01:56:06,486 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:56:06,490 [main:78] - Generated call from random type = (Kla0("zngvh")).s.filter({a: Char -> true})
2021-03-12 01:56:06,491 [main:106] - GETTING String from A
2021-03-12 01:56:06,495 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@533c3aca], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:56:06,495 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:56:06,644 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:56:06,648 [main:117] - GENERATED CALL = (getA()).x.toString(-1255832121)
2021-03-12 01:56:06,648 [main:114] - replacement of fu6() of type String is "gcnow"
2021-03-12 01:56:06,795 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 01:56:06,795 [main:66] - Compilation checking started
2021-03-12 01:56:07,220 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = "FAIL2"
    fu0 {
        Kla2()."gcnow"
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if (prope0.isSuccess) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if (prope5 != i) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if (prope5 != (getB()).x.dec())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:56:07,222 [main:107] - replacing (prope0.isSuccess, Boolean)
2021-03-12 01:56:07,222 [main:50] - replacing prope0.isSuccess Boolean
2021-03-12 01:56:07,222 [main:54] - Getting value of type Boolean
2021-03-12 01:56:07,372 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:56:07,375 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 01:56:07,375 [main:61] - GENERATED IS CALL =false
2021-03-12 01:56:07,744 [main:67] - randomType = Short?
2021-03-12 01:56:07,893 [main:302] - generating value of type = Short true depth = 0
2021-03-12 01:56:07,928 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e]
2021-03-12 01:56:07,929 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@1ac3ca6f]
2021-03-12 01:56:08,078 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:56:08,078 [main:78] - Generated call from random type = (32289)?.toLong().equals("jhyhr")
2021-03-12 01:56:08,079 [main:106] - GETTING Boolean from Int
2021-03-12 01:56:08,110 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2fba18e9], public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@54fadb00]]
2021-03-12 01:56:08,110 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2fba18e9]
2021-03-12 01:56:08,110 [main:149] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@54fadb00]
2021-03-12 01:56:08,110 [main:117] - GENERATED CALL = (logged(3)).toFloat().isNaN()
2021-03-12 01:56:08,110 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@147c729a]]
2021-03-12 01:56:08,110 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@147c729a]
2021-03-12 01:56:08,257 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:56:08,258 [main:117] - GENERATED CALL = (logged(3)).equals("ibkkl")
2021-03-12 01:56:08,258 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@31b01837], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@7c78560c]]
2021-03-12 01:56:08,258 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@31b01837]
2021-03-12 01:56:08,405 [main:302] - generating value of type = Double true depth = 0
2021-03-12 01:56:08,409 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@7c78560c]
2021-03-12 01:56:08,409 [main:117] - GENERATED CALL = (logged(3)).div(0.744562806984837).isInfinite()
2021-03-12 01:56:08,409 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@147c729a], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4cfdd607]]
2021-03-12 01:56:08,409 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@147c729a]
2021-03-12 01:56:08,557 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:56:08,557 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4cfdd607]
2021-03-12 01:56:08,704 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:56:08,704 [main:117] - GENERATED CALL = (logged(3)).equals("feycn").equals("fbvrl")
2021-03-12 01:56:08,704 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27c836fd]]
2021-03-12 01:56:08,704 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:56:08,704 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27c836fd]
2021-03-12 01:56:08,704 [main:117] - GENERATED CALL = (logged(3)).toChar().isTitleCase()
2021-03-12 01:56:08,704 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@147c729a]]
2021-03-12 01:56:08,704 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:56:08,705 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@147c729a]
2021-03-12 01:56:08,854 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:56:08,854 [main:117] - GENERATED CALL = (logged(3)).compareTo(A.x).equals("ikkzi")
2021-03-12 01:56:08,854 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5958298b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@7932a589]]
2021-03-12 01:56:08,854 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5958298b]
2021-03-12 01:56:09,006 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:56:09,010 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@7932a589]
2021-03-12 01:56:09,157 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:56:09,158 [main:117] - GENERATED CALL = (logged(3)).rangeTo(69).equals("baprm")
2021-03-12 01:56:09,158 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64c51740]]
2021-03-12 01:56:09,158 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:56:09,158 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64c51740]
2021-03-12 01:56:09,158 [main:117] - GENERATED CALL = (logged(3)).toChar().isDigit()
2021-03-12 01:56:09,158 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@486a2f6a]]
2021-03-12 01:56:09,158 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:56:09,158 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@486a2f6a]
2021-03-12 01:56:09,158 [main:117] - GENERATED CALL = (logged(3)).toChar().isDefined()
2021-03-12 01:56:09,158 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f8f28c8]]
2021-03-12 01:56:09,158 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:56:09,158 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f8f28c8]
2021-03-12 01:56:09,158 [main:117] - GENERATED CALL = (logged(3)).toChar().isLowSurrogate()
2021-03-12 01:56:09,158 [main:114] - replacement of prope0.isSuccess of type Boolean is (logged(3)).div(0.744562806984837).isInfinite()
2021-03-12 01:56:09,307 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:56:09,307 [main:66] - Compilation checking started
2021-03-12 01:56:09,968 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = "FAIL2"
    fu0 {
        Kla2().fu6()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if (prope5 != i) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if (prope5 != (getB()).x.dec())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:56:09,971 [main:107] - replacing (!prope6, Boolean)
2021-03-12 01:56:09,971 [main:50] - replacing !prope6 Boolean
2021-03-12 01:56:09,971 [main:54] - Getting value of type Boolean
2021-03-12 01:56:10,122 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:56:10,125 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 01:56:10,126 [main:61] - GENERATED IS CALL =false
2021-03-12 01:56:10,133 [main:67] - randomType = Byte
2021-03-12 01:56:10,282 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:56:10,315 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@9932a35]
2021-03-12 01:56:10,315 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74700b97]
2021-03-12 01:56:10,315 [main:78] - Generated call from random type = (-25).toChar().isISOControl()
2021-03-12 01:56:10,316 [main:106] - GETTING Boolean from UInt
2021-03-12 01:56:10,338 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@11926dc1], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@1ac3ca6f]]
2021-03-12 01:56:10,338 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@11926dc1]
2021-03-12 01:56:10,338 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@1ac3ca6f]
2021-03-12 01:56:10,488 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:56:10,489 [main:117] - GENERATED CALL = (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")
2021-03-12 01:56:10,489 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@7b948bf8], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@3315ee5e]]
2021-03-12 01:56:10,489 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@7b948bf8]
2021-03-12 01:56:10,489 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@3315ee5e]
2021-03-12 01:56:10,638 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:56:10,638 [main:117] - GENERATED CALL = (logged<UInt>(1851723815.toUInt())).toShort().equals("fvoas")
2021-03-12 01:56:10,639 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.ULong): kotlin.ULong defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@2474d279], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@55f53d84]]
2021-03-12 01:56:10,639 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.ULong): kotlin.ULong defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@2474d279]
2021-03-12 01:56:10,788 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 01:56:10,791 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@55f53d84]
2021-03-12 01:56:10,943 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:56:10,944 [main:117] - GENERATED CALL = (logged<UInt>(1851723815.toUInt())).div(1962664569162221490.toULong()).equals("bqwjh")
2021-03-12 01:56:10,944 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@4fc35e7b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4cfdd607]]
2021-03-12 01:56:10,944 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@4fc35e7b]
2021-03-12 01:56:11,092 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:56:11,092 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4cfdd607]
2021-03-12 01:56:11,241 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:56:11,242 [main:117] - GENERATED CALL = (logged<UInt>(1851723815.toUInt())).equals("vilsw").equals("xzldo")
2021-03-12 01:56:11,242 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@4fc35e7b], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@40165da2]]
2021-03-12 01:56:11,242 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@4fc35e7b]
2021-03-12 01:56:11,392 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:56:11,392 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@40165da2]
2021-03-12 01:56:11,543 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:56:11,547 [main:117] - GENERATED CALL = (logged<UInt>(1851723815.toUInt())).equals("nlgju").or(false)
2021-03-12 01:56:11,547 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@2015071a], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@75a09bc6]]
2021-03-12 01:56:11,547 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@2015071a]
2021-03-12 01:56:11,547 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@75a09bc6]
2021-03-12 01:56:11,695 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:56:11,695 [main:117] - GENERATED CALL = (logged<UInt>(1851723815.toUInt())).toUShort().equals("gxakr")
2021-03-12 01:56:11,695 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@3ff0371e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@147c729a]]
2021-03-12 01:56:11,695 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@3ff0371e]
2021-03-12 01:56:11,877 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 01:56:11,881 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@147c729a]
2021-03-12 01:56:12,030 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:56:12,030 [main:117] - GENERATED CALL = (logged<UInt>(1851723815.toUInt())).compareTo(42.toUByte()).equals("sgdtz")
2021-03-12 01:56:12,030 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@2ee89083], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@1d6bfc9d]]
2021-03-12 01:56:12,030 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@2ee89083]
2021-03-12 01:56:12,030 [main:149] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@1d6bfc9d]
2021-03-12 01:56:12,031 [main:117] - GENERATED CALL = (logged<UInt>(1851723815.toUInt())).toDouble().isFinite()
2021-03-12 01:56:12,031 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@407bf8c9], public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3ff85b4d]]
2021-03-12 01:56:12,031 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@407bf8c9]
2021-03-12 01:56:12,031 [main:149] - GENERATING call of type public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3ff85b4d]
2021-03-12 01:56:12,031 [main:117] - GENERATED CALL = (logged<UInt>(1851723815.toUInt())).toFloat().isInfinite()
2021-03-12 01:56:12,031 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@4fc35e7b]]
2021-03-12 01:56:12,031 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@4fc35e7b]
2021-03-12 01:56:12,180 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:56:12,181 [main:117] - GENERATED CALL = (logged<UInt>(1851723815.toUInt())).equals("shvmi")
2021-03-12 01:56:12,181 [main:114] - replacement of !prope6 of type Boolean is (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")
2021-03-12 01:56:12,335 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:56:12,336 [main:66] - Compilation checking started
2021-03-12 01:56:12,993 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = "FAIL2"
    fu0 {
        Kla2().fu6()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if (prope5 != i) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if (prope5 != (getB()).x.dec())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:56:12,995 [main:107] - replacing (prope5, Int)
2021-03-12 01:56:12,996 [main:50] - replacing prope5 Int
2021-03-12 01:56:12,996 [main:54] - Getting value of type Int
2021-03-12 01:56:13,145 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:56:13,149 [main:58] - GENERATED VALUE OF TYPE Int = -1682325488
2021-03-12 01:56:13,149 [main:61] - GENERATED IS CALL =false
2021-03-12 01:56:13,682 [main:67] - randomType = Kla5<Long?>?
2021-03-12 01:56:13,835 [main:302] - generating value of type = Kla5<Long?> false depth = 0
2021-03-12 01:56:13,838 [main:112] - generating klass Kla5 text = abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 01:56:14,514 [main:302] - generating value of type = Kla8 false depth = 2
2021-03-12 01:56:14,519 [main:112] - generating klass Kla8 text = object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}
2021-03-12 01:56:14,532 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla5[DeserializedSimpleFunctionDescriptor@7a3fd246]
2021-03-12 01:56:14,681 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@19b05991]
2021-03-12 01:56:14,831 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:56:14,834 [main:78] - Generated call from random type = (Kla8)?.equals(null).compareTo(true)
2021-03-12 01:56:14,834 [main:106] - GETTING Int from Int
2021-03-12 01:56:14,864 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2fba18e9], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63ef0ce]]
2021-03-12 01:56:14,865 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2fba18e9]
2021-03-12 01:56:14,865 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63ef0ce]
2021-03-12 01:56:14,865 [main:117] - GENERATED CALL = (logged(1)).toFloat().toRawBits()
2021-03-12 01:56:14,865 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2097313e]]
2021-03-12 01:56:14,865 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60]
2021-03-12 01:56:14,865 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2097313e]
2021-03-12 01:56:15,014 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:56:15,017 [main:117] - GENERATED CALL = (logged(1)).toShort().minus(126)
2021-03-12 01:56:15,017 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1ffceeae]]
2021-03-12 01:56:15,017 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:56:15,017 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1ffceeae]
2021-03-12 01:56:15,018 [main:117] - GENERATED CALL = (logged(1)).toInt().countTrailingZeroBits()
2021-03-12 01:56:15,018 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1ffceeae]]
2021-03-12 01:56:15,018 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:56:15,171 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:56:15,175 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1ffceeae]
2021-03-12 01:56:15,175 [main:117] - GENERATED CALL = (logged(1)).compareTo(-484540301).countTrailingZeroBits()
2021-03-12 01:56:15,175 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5958298b], public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@64c33b37]]
2021-03-12 01:56:15,175 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5958298b]
2021-03-12 01:56:15,328 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:56:15,332 [main:117] - GENERATED CALL = (logged(1)).rangeTo(-82).endInclusive
2021-03-12 01:56:15,332 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@28919d13]]
2021-03-12 01:56:15,332 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:56:15,332 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@28919d13]
2021-03-12 01:56:15,485 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:56:15,489 [main:117] - GENERATED CALL = (logged(1)).compareTo(B.get()).plus(1)
2021-03-12 01:56:15,489 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@31b01837], public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4bfbf297]]
2021-03-12 01:56:15,489 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@31b01837]
2021-03-12 01:56:15,642 [main:302] - generating value of type = Double true depth = 0
2021-03-12 01:56:15,645 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4bfbf297]
2021-03-12 01:56:15,645 [main:117] - GENERATED CALL = (logged(1)).div(0.4401467632853553).toInt()
2021-03-12 01:56:15,645 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4f6b2741]]
2021-03-12 01:56:15,645 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:56:15,646 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4f6b2741]
2021-03-12 01:56:15,646 [main:117] - GENERATED CALL = (logged(1)).toInt().and(logged(1))
2021-03-12 01:56:15,646 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2d1f1e5a]]
2021-03-12 01:56:15,646 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:56:15,646 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2d1f1e5a]
2021-03-12 01:56:15,802 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:56:15,806 [main:117] - GENERATED CALL = (logged(1)).toInt().or(1972197075)
2021-03-12 01:56:15,806 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@25a935e1]]
2021-03-12 01:56:15,806 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235]
2021-03-12 01:56:15,806 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@25a935e1]
2021-03-12 01:56:15,806 [main:117] - GENERATED CALL = (logged(1)).toByte().countLeadingZeroBits()
2021-03-12 01:56:15,806 [main:114] - replacement of prope5 of type Int is (logged(1)).toShort().minus(126)
2021-03-12 01:56:15,955 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:56:15,955 [main:66] - Compilation checking started
2021-03-12 01:56:16,645 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = "FAIL2"
    fu0 {
        Kla2().fu6()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if (prope5 != i) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((logged(1)).toShort().minus(126) != (getB()).x.dec())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:56:16,648 [main:107] - replacing ({
        fu9(it)
    }, Function1<Continuation<Unit>, Unit>)
2021-03-12 01:56:16,648 [main:50] - replacing {
        fu9(it)
    } Function1<Continuation<Unit>, Unit>
2021-03-12 01:56:16,648 [main:54] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-12 01:56:16,801 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-12 01:56:16,804 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 01:56:16,963 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 01:56:16,968 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 01:56:17,295 [main:302] - generating value of type = Any false depth = 4
2021-03-12 01:56:17,295 [main:95] - GENERATED = print("odegf")
2021-03-12 01:56:17,295 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> print("odegf")}
2021-03-12 01:56:17,295 [main:61] - GENERATED IS CALL =false
2021-03-12 01:56:17,310 [main:67] - randomType = Kla4
2021-03-12 01:56:17,461 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 01:56:17,464 [main:112] - generating klass Kla4 text = class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}
2021-03-12 01:56:17,480 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-12 01:56:17,510 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-12 01:56:17,511 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from A
2021-03-12 01:56:17,517 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-12 01:56:17,519 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-12 01:56:17,520 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from UInt
2021-03-12 01:56:17,548 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from B
2021-03-12 01:56:17,557 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-12 01:56:17,558 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from B
2021-03-12 01:56:17,560 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-12 01:56:17,561 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from A
2021-03-12 01:56:17,561 [main:114] - replacement of {
        fu9(it)
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> print("odegf")}
2021-03-12 01:56:17,712 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 01:56:17,712 [main:66] - Compilation checking started
2021-03-12 01:56:18,380 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = "FAIL2"
    fu0 {
        Kla2().fu6()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = prope0.getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if (prope5 != i) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((logged(1)).toShort().minus(126) != (getB()).x.dec())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:56:18,382 [main:107] - replacing (prope0.getOrThrow(), Ty0)
2021-03-12 01:56:18,382 [main:50] - replacing prope0.getOrThrow() Ty0
2021-03-12 01:56:18,382 [main:54] - Getting value of type Ty0
2021-03-12 01:56:18,545 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 01:56:18,552 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 01:56:18,732 [main:67] - randomType = Boolean?
2021-03-12 01:56:18,884 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:56:18,898 [main:106] - GETTING Ty0 from B
2021-03-12 01:56:18,904 [main:106] - GETTING Ty0 from Int
2021-03-12 01:56:18,933 [main:106] - GETTING Ty0 from A
2021-03-12 01:56:18,938 [main:106] - GETTING Ty0 from UInt
2021-03-12 01:56:18,959 [main:106] - GETTING Ty0 from Int
2021-03-12 01:56:18,959 [main:106] - GETTING Ty0 from Int
2021-03-12 01:56:18,960 [main:106] - GETTING Ty0 from B
2021-03-12 01:56:18,961 [main:106] - GETTING Ty0 from A
2021-03-12 01:56:18,961 [main:106] - GETTING Ty0 from Int
2021-03-12 01:56:18,962 [main:106] - GETTING Ty0 from Int
2021-03-12 01:56:18,962 [main:106] - GETTING Ty0 from Int
2021-03-12 01:56:18,962 [main:111] - Cant find and generate replacement for prope0.getOrThrow() type Ty0
2021-03-12 01:56:18,963 [main:107] - replacing (prope0, Result<Any?>)
2021-03-12 01:56:18,963 [main:50] - replacing prope0 Result<Any?>
2021-03-12 01:56:18,963 [main:54] - Getting value of type Result<Any?>
2021-03-12 01:56:19,114 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-12 01:56:19,276 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 01:56:19,281 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 01:56:19,629 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-12 01:56:19,633 [main:302] - generating value of type = Any false depth = 4
2021-03-12 01:56:19,633 [main:95] - GENERATED = runCatching<Any?>({ "djsif"})
2021-03-12 01:56:19,633 [main:58] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ "djsif"})
2021-03-12 01:56:19,633 [main:61] - GENERATED IS CALL =true
2021-03-12 01:56:19,641 [main:67] - randomType = UInt
2021-03-12 01:56:19,792 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 01:56:19,822 [main:106] - GETTING Result<Any?> from Int
2021-03-12 01:56:19,852 [main:106] - GETTING Result<Any?> from B
2021-03-12 01:56:19,859 [main:106] - GETTING Result<Any?> from Int
2021-03-12 01:56:19,860 [main:106] - GETTING Result<Any?> from UInt
2021-03-12 01:56:19,883 [main:106] - GETTING Result<Any?> from Int
2021-03-12 01:56:19,884 [main:106] - GETTING Result<Any?> from Int
2021-03-12 01:56:19,886 [main:106] - GETTING Result<Any?> from A
2021-03-12 01:56:19,891 [main:106] - GETTING Result<Any?> from Int
2021-03-12 01:56:19,893 [main:106] - GETTING Result<Any?> from B
2021-03-12 01:56:19,894 [main:106] - GETTING Result<Any?> from A
2021-03-12 01:56:19,895 [main:106] - GETTING Result<Any?> from Int
2021-03-12 01:56:19,895 [main:114] - replacement of prope0 of type Result<Any?> is runCatching<Any?>({ "djsif"})
2021-03-12 01:56:20,051 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 01:56:20,051 [main:66] - Compilation checking started
2021-03-12 01:56:20,710 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = "FAIL2"
    fu0 {
        Kla2().fu6()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if (prope5 != i) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((logged(1)).toShort().minus(126) != (getB()).x.dec())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:56:20,714 [main:107] - replacing (s, String)
2021-03-12 01:56:20,715 [main:50] - replacing s String
2021-03-12 01:56:20,715 [main:54] - Getting value of type String
2021-03-12 01:56:20,892 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:56:20,896 [main:58] - GENERATED VALUE OF TYPE String = "godyk"
2021-03-12 01:56:20,896 [main:61] - GENERATED IS CALL =false
2021-03-12 01:56:21,310 [main:67] - randomType = Function2<A, Short, Double?>
2021-03-12 01:56:21,311 [main:106] - GETTING String from A
2021-03-12 01:56:21,316 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@533c3aca], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:56:21,316 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:56:21,316 [main:117] - GENERATED CALL = (getA()).x.toString(logged(3))
2021-03-12 01:56:21,316 [main:114] - replacement of s of type String is (getA()).x.toString(logged(3))
2021-03-12 01:56:21,468 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:56:21,469 [main:66] - Compilation checking started
2021-03-12 01:56:21,924 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return fu4().(getA()).x.toString(logged(3))
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = "FAIL2"
    fu0 {
        Kla2().fu6()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if (prope5 != i) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((logged(1)).toShort().minus(126) != (getB()).x.dec())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:56:21,926 [main:107] - replacing (Kla2().fu6(), String)
2021-03-12 01:56:21,926 [main:50] - replacing Kla2().fu6() String
2021-03-12 01:56:21,926 [main:54] - Getting value of type String
2021-03-12 01:56:22,079 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:56:22,083 [main:58] - GENERATED VALUE OF TYPE String = "wwtyy"
2021-03-12 01:56:22,083 [main:61] - GENERATED IS CALL =false
2021-03-12 01:56:22,815 [main:67] - randomType = LinkedHashMap<Long?, UByte?>?
2021-03-12 01:56:22,968 [main:302] - generating value of type = LinkedHashMap<Long?, UByte?> false depth = 0
2021-03-12 01:56:23,135 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Long?, UByte?>): LkedHashMap<Long?, UByte?> = TODO()
2021-03-12 01:56:23,139 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Long?, UByte?>): LkedHashMap<Long?, UByte?> = TODO()
2021-03-12 01:56:23,296 [main:302] - generating value of type = Pair<Long?, UByte?> false depth = 3
2021-03-12 01:56:23,455 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Long?, second: UByte?): Pair<Long?, UByte?> = TODO()
2021-03-12 01:56:23,460 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Long?, second: UByte?): Pair<Long?, UByte?> = TODO()
2021-03-12 01:56:23,620 [main:302] - generating value of type = Long true depth = 6
2021-03-12 01:56:23,624 [main:302] - generating value of type = UByte true depth = 6
2021-03-12 01:56:23,628 [main:95] - GENERATED = Pair<Long?, UByte?>(-7689184159416854025, 79.toUByte())
2021-03-12 01:56:23,628 [main:95] - GENERATED = linkedMapOf<Long?, UByte?>(Pair<Long?, UByte?>(-7689184159416854025, 79.toUByte()))
2021-03-12 01:56:23,743 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:56:23,744 [main:78] - Generated call from random type = (linkedMapOf<Long?, UByte?>(Pair<Long?, UByte?>(-7689184159416854025, 79.toUByte())))?.size.toString(B.get())
2021-03-12 01:56:23,744 [main:106] - GETTING String from Int
2021-03-12 01:56:23,773 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a36c448]]
2021-03-12 01:56:23,773 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:56:23,773 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a36c448]
2021-03-12 01:56:23,774 [main:117] - GENERATED CALL = (A.x).toChar().lowercase()
2021-03-12 01:56:23,774 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:56:23,774 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:56:23,774 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:56:23,774 [main:117] - GENERATED CALL = (A.x).compareTo(B.x).toString(B.get())
2021-03-12 01:56:23,774 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]]
2021-03-12 01:56:23,774 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:56:23,774 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]
2021-03-12 01:56:23,774 [main:117] - GENERATED CALL = (A.x).toChar().uppercase()
2021-03-12 01:56:23,774 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6122df5e]]
2021-03-12 01:56:23,774 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:56:23,774 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6122df5e]
2021-03-12 01:56:23,775 [main:117] - GENERATED CALL = (A.x).toChar().plus(var log =
2021-03-12 01:56:23,775 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:56:23,775 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e]
2021-03-12 01:56:23,775 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:56:23,925 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:56:23,929 [main:117] - GENERATED CALL = (A.x).toLong().toString(1465155057)
2021-03-12 01:56:23,929 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]]
2021-03-12 01:56:23,929 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:56:23,929 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]
2021-03-12 01:56:23,929 [main:117] - GENERATED CALL = (A.x).toChar().titlecase()
2021-03-12 01:56:23,929 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:56:23,929 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:56:23,929 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:56:24,080 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:56:24,083 [main:117] - GENERATED CALL = (A.x).toInt().toString(1530129725)
2021-03-12 01:56:24,084 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]]
2021-03-12 01:56:24,084 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60]
2021-03-12 01:56:24,084 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]
2021-03-12 01:56:24,084 [main:117] - GENERATED CALL = (A.x).toShort().toString(logged(2))
2021-03-12 01:56:24,084 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:56:24,084 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73]
2021-03-12 01:56:24,235 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:56:24,239 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:56:24,239 [main:117] - GENERATED CALL = (A.x).div(8784010603020453715).toString(B.x)
2021-03-12 01:56:24,239 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc0516]]
2021-03-12 01:56:24,239 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235]
2021-03-12 01:56:24,239 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc0516]
2021-03-12 01:56:24,239 [main:117] - GENERATED CALL = (A.x).toByte().toString(logged(1))
2021-03-12 01:56:24,239 [main:114] - replacement of Kla2().fu6() of type String is (A.x).toChar().titlecase()
2021-03-12 01:56:24,390 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:56:24,390 [main:66] - Compilation checking started
2021-03-12 01:56:25,059 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = "FAIL2"
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if (prope5 != i) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((logged(1)).toShort().minus(126) != (getB()).x.dec())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:56:25,062 [main:107] - replacing ({
        prope0.getOrThrow()
    }, Any?)
2021-03-12 01:56:25,063 [main:50] - replacing {
        var log = ""
prope0.getOrThrow()
    } Any?
2021-03-12 01:56:25,063 [main:54] - Getting value of type Any?
2021-03-12 01:56:25,227 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:56:25,228 [main:58] - GENERATED VALUE OF TYPE Any? = "mkbam"
2021-03-12 01:56:25,228 [main:61] - GENERATED IS CALL =false
2021-03-12 01:56:25,417 [main:67] - randomType = Sequence<B>
2021-03-12 01:56:25,418 [main:106] - GETTING Any? from Int
2021-03-12 01:56:25,482 [main:106] - GETTING Any? from B
2021-03-12 01:56:25,488 [main:106] - GETTING Any? from A
2021-03-12 01:56:25,493 [main:106] - GETTING Any? from Int
2021-03-12 01:56:25,494 [main:106] - GETTING Any? from A
2021-03-12 01:56:25,495 [main:106] - GETTING Any? from Int
2021-03-12 01:56:25,496 [main:106] - GETTING Any? from Int
2021-03-12 01:56:25,497 [main:106] - GETTING Any? from Int
2021-03-12 01:56:25,498 [main:106] - GETTING Any? from UInt
2021-03-12 01:56:25,520 [main:106] - GETTING Any? from B
2021-03-12 01:56:25,521 [main:106] - GETTING Any? from Int
2021-03-12 01:56:25,521 [main:114] - replacement of {
        var log = ""
prope0.getOrThrow()
    } of type Any? is "mkbam"
2021-03-12 01:56:25,672 [main:33] - Trying to replace BLOCK on Element(STRING_TEMPLATE)
2021-03-12 01:56:25,672 [main:66] - Compilation checking started
2021-03-12 01:56:25,679 [main:71] - Wrong syntax or breaks conditions
2021-03-12 01:56:25,679 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = "FAIL2"
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) "mkbam"
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if (prope5 != i) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((logged(1)).toShort().minus(126) != (getB()).x.dec())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:56:25,681 [main:107] - replacing ("rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n"), String)
2021-03-12 01:56:25,681 [main:50] - replacing "rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n") String
2021-03-12 01:56:25,681 [main:54] - Getting value of type String
2021-03-12 01:56:25,832 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:56:25,836 [main:58] - GENERATED VALUE OF TYPE String = "kcmhg"
2021-03-12 01:56:25,836 [main:61] - GENERATED IS CALL =false
2021-03-12 01:56:25,857 [main:67] - randomType = Kla0?
2021-03-12 01:56:26,010 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 01:56:26,014 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)
2021-03-12 01:56:26,165 [main:194] - Type params = []
2021-03-12 01:56:26,319 [main:302] - generating value of type = String true depth = 2
2021-03-12 01:56:26,328 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ca1b51f]
2021-03-12 01:56:26,482 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:56:26,486 [main:78] - Generated call from random type = (Kla0("qderv"))?.s.substringBeforeLast('뙦', var log =
2021-03-12 01:56:26,487 [main:106] - GETTING String from Int
2021-03-12 01:56:26,517 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc0516]]
2021-03-12 01:56:26,517 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235]
2021-03-12 01:56:26,517 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc0516]
2021-03-12 01:56:26,517 [main:117] - GENERATED CALL = (B.x).toByte().toString(B.x)
2021-03-12 01:56:26,517 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a36c448]]
2021-03-12 01:56:26,517 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:56:26,517 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a36c448]
2021-03-12 01:56:26,517 [main:117] - GENERATED CALL = (B.x).toChar().lowercase()
2021-03-12 01:56:26,517 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]]
2021-03-12 01:56:26,517 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60]
2021-03-12 01:56:26,517 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]
2021-03-12 01:56:26,518 [main:117] - GENERATED CALL = (B.x).toShort().toString(A.x)
2021-03-12 01:56:26,518 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:56:26,518 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:56:26,518 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:56:26,518 [main:117] - GENERATED CALL = (B.x).compareTo(logged(1)).toString(B.get())
2021-03-12 01:56:26,518 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:56:26,518 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:56:26,518 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:56:26,669 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:56:26,673 [main:117] - GENERATED CALL = (B.x).toInt().toString(499982820)
2021-03-12 01:56:26,673 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]]
2021-03-12 01:56:26,673 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:56:26,673 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]
2021-03-12 01:56:26,673 [main:117] - GENERATED CALL = (B.x).toChar().uppercase()
2021-03-12 01:56:26,673 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:56:26,673 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e]
2021-03-12 01:56:26,673 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:56:26,826 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:56:26,829 [main:117] - GENERATED CALL = (B.x).toLong().toString(-25795298)
2021-03-12 01:56:26,829 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:56:26,830 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73]
2021-03-12 01:56:26,981 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:56:26,985 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:56:26,985 [main:117] - GENERATED CALL = (B.x).div(-88259072686648981).toString(A.x)
2021-03-12 01:56:26,985 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]]
2021-03-12 01:56:26,985 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:56:26,985 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]
2021-03-12 01:56:26,985 [main:117] - GENERATED CALL = (B.x).toChar().titlecase()
2021-03-12 01:56:26,985 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6122df5e]]
2021-03-12 01:56:26,985 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:56:26,985 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6122df5e]
2021-03-12 01:56:26,985 [main:117] - GENERATED CALL = (B.x).toChar().plus(var log =
2021-03-12 01:56:26,985 [main:114] - replacement of "rhuas" + " has no state-machine " +
                prope4.joinToString(separator = "\n") of type String is (B.x).div(-88259072686648981).toString(A.x)
2021-03-12 01:56:27,136 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:56:27,137 [main:66] - Compilation checking started
2021-03-12 01:56:27,998 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = "FAIL2"
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error((B.x).div(-88259072686648981).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if (prope5 != i) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((logged(1)).toShort().minus(126) != (getB()).x.dec())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:56:28,006 [main:107] - replacing (prope1, Continuation<*>)
2021-03-12 01:56:28,006 [main:50] - replacing prope1 Continuation<*>
2021-03-12 01:56:28,006 [main:54] - Getting value of type Continuation<*>
2021-03-12 01:56:28,163 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-12 01:56:28,325 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 01:56:28,330 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 01:56:28,866 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 01:56:29,030 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:56:29,035 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:56:29,381 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 01:56:29,544 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:56:29,549 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:56:30,079 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 9
2021-03-12 01:56:30,303 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 01:56:30,308 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 01:56:30,847 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 01:56:30,848 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:56:30,848 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:56:30,848 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 01:56:30,848 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-12 01:56:31,221 [main:67] - randomType = ArrayDeque<B>
2021-03-12 01:56:31,376 [main:302] - generating value of type = ArrayDeque<B> false depth = 0
2021-03-12 01:56:31,536 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<B> = TODO()
2021-03-12 01:56:31,540 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<B> = TODO()
2021-03-12 01:56:31,874 [main:302] - generating value of type = Int true depth = 3
2021-03-12 01:56:31,878 [main:95] - GENERATED = ArrayDeque<B>(-1250269756)
2021-03-12 01:56:31,992 [main:106] - GETTING Continuation<*> from Int
2021-03-12 01:56:32,023 [main:106] - GETTING Continuation<*> from UInt
2021-03-12 01:56:32,045 [main:106] - GETTING Continuation<*> from Int
2021-03-12 01:56:32,045 [main:106] - GETTING Continuation<*> from Int
2021-03-12 01:56:32,046 [main:106] - GETTING Continuation<*> from B
2021-03-12 01:56:32,052 [main:106] - GETTING Continuation<*> from B
2021-03-12 01:56:32,053 [main:106] - GETTING Continuation<*> from A
2021-03-12 01:56:32,059 [main:106] - GETTING Continuation<*> from Int
2021-03-12 01:56:32,059 [main:106] - GETTING Continuation<*> from Int
2021-03-12 01:56:32,060 [main:106] - GETTING Continuation<*> from Int
2021-03-12 01:56:32,061 [main:106] - GETTING Continuation<*> from A
2021-03-12 01:56:32,061 [main:111] - Cant find and generate replacement for prope1 type Continuation<*>
2021-03-12 01:56:32,061 [main:107] - replacing (prope5, Int)
2021-03-12 01:56:32,061 [main:50] - replacing prope5 Int
2021-03-12 01:56:32,061 [main:54] - Getting value of type Int
2021-03-12 01:56:32,214 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:56:32,218 [main:58] - GENERATED VALUE OF TYPE Int = 790298907
2021-03-12 01:56:32,218 [main:61] - GENERATED IS CALL =false
2021-03-12 01:56:32,226 [main:67] - randomType = Boolean
2021-03-12 01:56:32,379 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:56:32,391 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@19b05991]
2021-03-12 01:56:32,549 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:56:32,552 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1ffceeae]
2021-03-12 01:56:32,553 [main:78] - Generated call from random type = (true).compareTo(false).countTrailingZeroBits()
2021-03-12 01:56:32,554 [main:106] - GETTING Int from B
2021-03-12 01:56:32,560 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@446e19b3], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3ef045d8]]
2021-03-12 01:56:32,560 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3ef045d8]
2021-03-12 01:56:32,712 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:56:32,716 [main:117] - GENERATED CALL = (getB()).x.minus(114)
2021-03-12 01:56:32,716 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@446e19b3], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70b68745]]
2021-03-12 01:56:32,716 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70b68745]
2021-03-12 01:56:32,868 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:56:32,872 [main:117] - GENERATED CALL = (getB()).x.ushr(556653858)
2021-03-12 01:56:32,873 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@446e19b3], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7b59aa7b]]
2021-03-12 01:56:32,873 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7b59aa7b]
2021-03-12 01:56:32,873 [main:117] - GENERATED CALL = (getB()).x.countOneBits()
2021-03-12 01:56:32,873 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@446e19b3], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@28919d13]]
2021-03-12 01:56:32,873 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@28919d13]
2021-03-12 01:56:33,028 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:56:33,032 [main:117] - GENERATED CALL = (getB()).x.plus(-64)
2021-03-12 01:56:33,032 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@446e19b3], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@406267da]]
2021-03-12 01:56:33,032 [main:117] - GENERATED CALL = (getB()).x.sign
2021-03-12 01:56:33,032 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@446e19b3], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@15c2ea37]]
2021-03-12 01:56:33,032 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@15c2ea37]
2021-03-12 01:56:33,032 [main:117] - GENERATED CALL = (getB()).x.inv()
2021-03-12 01:56:33,032 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@446e19b3], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78080c68]]
2021-03-12 01:56:33,032 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78080c68]
2021-03-12 01:56:33,032 [main:117] - GENERATED CALL = (getB()).x.toInt()
2021-03-12 01:56:33,032 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@446e19b3], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ea6d3]]
2021-03-12 01:56:33,032 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ea6d3]
2021-03-12 01:56:33,032 [main:117] - GENERATED CALL = (getB()).x.rotateRight(A.x)
2021-03-12 01:56:33,032 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@446e19b3], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4f6b2741]]
2021-03-12 01:56:33,032 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4f6b2741]
2021-03-12 01:56:33,033 [main:117] - GENERATED CALL = (getB()).x.and(B.get())
2021-03-12 01:56:33,033 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@446e19b3], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b28a80]]
2021-03-12 01:56:33,033 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b28a80]
2021-03-12 01:56:33,186 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:56:33,190 [main:117] - GENERATED CALL = (getB()).x.rem(-8)
2021-03-12 01:56:33,190 [main:114] - replacement of prope5 of type Int is (getB()).x.inv()
2021-03-12 01:56:33,344 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:56:33,344 [main:66] - Compilation checking started
2021-03-12 01:56:33,998 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = "FAIL2"
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error((B.x).div(-88259072686648981).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if ((getB()).x.inv() != i) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((logged(1)).toShort().minus(126) != (getB()).x.dec())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:56:34,000 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 01:56:34,000 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 01:56:34,000 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 01:56:34,154 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 01:56:34,160 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 01:56:34,354 [main:67] - randomType = Kla5<Double>
2021-03-12 01:56:34,507 [main:302] - generating value of type = Kla5<Double> false depth = 0
2021-03-12 01:56:34,511 [main:112] - generating klass Kla5 text = abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 01:56:35,240 [main:302] - generating value of type = Kla8 false depth = 2
2021-03-12 01:56:35,244 [main:112] - generating klass Kla8 text = object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}
2021-03-12 01:56:35,258 [main:106] - GETTING EmptyCoroutineContext from B
2021-03-12 01:56:35,264 [main:106] - GETTING EmptyCoroutineContext from UInt
2021-03-12 01:56:35,285 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 01:56:35,314 [main:106] - GETTING EmptyCoroutineContext from A
2021-03-12 01:56:35,318 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 01:56:35,319 [main:106] - GETTING EmptyCoroutineContext from B
2021-03-12 01:56:35,320 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 01:56:35,320 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 01:56:35,321 [main:106] - GETTING EmptyCoroutineContext from A
2021-03-12 01:56:35,322 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 01:56:35,322 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 01:56:35,322 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 01:56:35,322 [main:107] - replacing ("Wrong state-machine generated: it is not finished yet", String)
2021-03-12 01:56:35,323 [main:50] - replacing "Wrong state-machine generated: it is not finished yet" String
2021-03-12 01:56:35,323 [main:54] - Getting value of type String
2021-03-12 01:56:35,475 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:56:35,478 [main:58] - GENERATED VALUE OF TYPE String = "elykr"
2021-03-12 01:56:35,479 [main:61] - GENERATED IS CALL =false
2021-03-12 01:56:36,230 [main:67] - randomType = LinkedHashMap<LinkedHashSet<Int?>, Pair<String, Double>>
2021-03-12 01:56:36,383 [main:302] - generating value of type = LinkedHashMap<LinkedHashSet<Int?>, Pair<String, Double>> false depth = 0
2021-03-12 01:56:36,544 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<LinkedHashSet<Int?>, Pair<String, Double>>): LkedHashMap<LkedHashSet<Int?>, Pair<Strg, Double>> = TODO()
2021-03-12 01:56:36,548 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<LinkedHashSet<Int?>, Pair<String, Double>>): LkedHashMap<LkedHashSet<Int?>, Pair<Strg, Double>> = TODO()
2021-03-12 01:56:36,708 [main:302] - generating value of type = Pair<LinkedHashSet<Int?>, Pair<String, Double>> false depth = 3
2021-03-12 01:56:36,870 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: LinkedHashSet<Int?>, second: Pair<String, Double>): Pair<LinkedHashSet<Int?>, Pair<String, Double>> = TODO()
2021-03-12 01:56:36,875 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: LinkedHashSet<Int?>, second: Pair<String, Double>): Pair<LinkedHashSet<Int?>, Pair<String, Double>> = TODO()
2021-03-12 01:56:37,034 [main:302] - generating value of type = LinkedHashSet<Int?> false depth = 6
2021-03-12 01:56:37,193 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<Int?> = TODO()
2021-03-12 01:56:37,198 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<Int?> = TODO()
2021-03-12 01:56:37,357 [main:95] - GENERATED = linkedSetOf<Int?>()
2021-03-12 01:56:37,357 [main:302] - generating value of type = Pair<String, Double> false depth = 6
2021-03-12 01:56:37,516 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: String, second: Double): Pair<String, Double> = TODO()
2021-03-12 01:56:37,521 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: String, second: Double): Pair<String, Double> = TODO()
2021-03-12 01:56:37,680 [main:302] - generating value of type = String true depth = 9
2021-03-12 01:56:37,683 [main:302] - generating value of type = Double true depth = 9
2021-03-12 01:56:37,687 [main:95] - GENERATED = Pair<String, Double>("uouzv", 0.25486388137614513)
2021-03-12 01:56:37,687 [main:95] - GENERATED = Pair<LinkedHashSet<Int?>, Pair<String, Double>>(linkedSetOf<Int?>(), Pair<String, Double>("uouzv", 0.25486388137614513))
2021-03-12 01:56:37,688 [main:95] - GENERATED = linkedMapOf<LinkedHashSet<Int?>, Pair<String, Double>>(Pair<LinkedHashSet<Int?>, Pair<String, Double>>(linkedSetOf<Int?>(), Pair<String, Double>("uouzv", 0.25486388137614513)))
2021-03-12 01:56:37,862 [main:149] - GENERATING call of type public open fun get(key: kotlin.collections.LinkedHashSet<kotlin.Int?>): kotlin.Pair<kotlin.String, kotlin.Double>? defined in kotlin.collections.LinkedHashMap[DeserializedSimpleFunctionDescriptor@33fb48b1]
2021-03-12 01:56:38,015 [main:302] - generating value of type = LinkedHashSet<Int?> false depth = 0
2021-03-12 01:56:38,175 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<Int?> = TODO()
2021-03-12 01:56:38,179 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<Int?> = TODO()
2021-03-12 01:56:38,339 [main:95] - GENERATED = linkedSetOf<Int?>()
2021-03-12 01:56:38,339 [main:78] - Generated call from random type = (linkedMapOf<LinkedHashSet<Int?>, Pair<String, Double>>(Pair<LinkedHashSet<Int?>, Pair<String, Double>>(linkedSetOf<Int?>(), Pair<String, Double>("uouzv", 0.25486388137614513)))).get(linkedSetOf<Int?>())?.first!!
2021-03-12 01:56:38,340 [main:106] - GETTING String from B
2021-03-12 01:56:38,346 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@446e19b3], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:56:38,346 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:56:38,346 [main:117] - GENERATED CALL = (getB()).x.toString(logged(3))
2021-03-12 01:56:38,346 [main:114] - replacement of "Wrong state-machine generated: it is not finished yet" of type String is "elykr"
2021-03-12 01:56:38,498 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 01:56:38,499 [main:66] - Compilation checking started
2021-03-12 01:56:39,164 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = "FAIL2"
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error((B.x).div(-88259072686648981).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if ((getB()).x.inv() != i) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((logged(1)).toShort().minus(126) != (getB()).x.dec())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:56:39,166 [main:107] - replacing ({
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }, Unit?)
2021-03-12 01:56:39,166 [main:50] - replacing {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    } Unit?
2021-03-12 01:56:39,166 [main:54] - Getting value of type Unit?
2021-03-12 01:56:39,319 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 01:56:39,507 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 01:56:39,512 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 01:56:39,846 [main:302] - generating value of type = Boolean true depth = 3
2021-03-12 01:56:39,850 [main:95] - GENERATED = check(false)
2021-03-12 01:56:39,850 [main:58] - GENERATED VALUE OF TYPE Unit? = check(false)
2021-03-12 01:56:39,850 [main:61] - GENERATED IS CALL =true
2021-03-12 01:56:40,039 [main:67] - randomType = ArrayDeque<Char>
2021-03-12 01:56:40,195 [main:302] - generating value of type = ArrayDeque<Char> false depth = 0
2021-03-12 01:56:40,355 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<Char>): ArrayDeque<Char> = TODO()
2021-03-12 01:56:40,360 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<Char>): ArrayDeque<Char> = TODO()
2021-03-12 01:56:40,705 [main:302] - generating value of type = Collection<Char> false depth = 3
2021-03-12 01:56:40,864 [main:43] - GENERATING CALL OF fun UByteArray(size: kotlin.Int): Collection<Char> = TODO()
2021-03-12 01:56:40,869 [main:61] - WITHOUT TYPE PARAMS = fun UByteArray(size: kotlin.Int): Collection<Char> = TODO()
2021-03-12 01:56:41,204 [main:302] - generating value of type = Int true depth = 6
2021-03-12 01:56:41,207 [main:95] - GENERATED = UByteArray(68242191)
2021-03-12 01:56:41,208 [main:95] - GENERATED = ArrayDeque<Char>(UByteArray(68242191))
2021-03-12 01:56:41,321 [main:149] - GENERATING call of type public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.Char> defined in kotlin.collections.ArrayDeque[DeserializedSimpleFunctionDescriptor@9024143]
2021-03-12 01:56:41,473 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:56:41,477 [main:149] - GENERATING call of type public fun <T> kotlin.collections.MutableList<T>.sortWith(comparator: kotlin.Comparator<in T>): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@174cac8c]
2021-03-12 01:56:41,629 [main:302] - generating value of type = Comparator<in T> false depth = 0
2021-03-12 01:56:41,788 [main:43] - GENERATING CALL OF fun <T> nullsLast(comparator: kotlin.Comparator<T>): Comparator<T> = TODO()
2021-03-12 01:56:41,793 [main:61] - WITHOUT TYPE PARAMS = fun <T> nullsLast(comparator: kotlin.Comparator<T>): Comparator<T> = TODO()
2021-03-12 01:56:42,139 [main:385] - Cant generate call of fun <T> nullsLast(comparator: kotlin.Comparator<T>): Comparator<T> = TODO()
2021-03-12 01:56:42,140 [main:158] - CANT GENERATE PARAMS FOR public fun <T> kotlin.collections.MutableList<T>.sortWith(comparator: kotlin.Comparator<in T>): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@174cac8c]
2021-03-12 01:56:42,140 [main:78] - Generated call from random type = (ArrayDeque<Char>(UByteArray(68242191))).null
2021-03-12 01:56:42,141 [main:106] - GETTING Unit? from Int
2021-03-12 01:56:42,171 [main:106] - GETTING Unit? from Int
2021-03-12 01:56:42,172 [main:106] - GETTING Unit? from Int
2021-03-12 01:56:42,173 [main:106] - GETTING Unit? from Int
2021-03-12 01:56:42,174 [main:106] - GETTING Unit? from A
2021-03-12 01:56:42,181 [main:106] - GETTING Unit? from B
2021-03-12 01:56:42,187 [main:113] - Case = [public final operator fun set(i1: kotlin.Int, i2: kotlin.Int, i3: kotlin.Int, value: kotlin.Int): kotlin.Unit defined in B[SimpleFunctionDescriptorImpl@442f9200]]
2021-03-12 01:56:42,187 [main:149] - GENERATING call of type public final operator fun set(i1: kotlin.Int, i2: kotlin.Int, i3: kotlin.Int, value: kotlin.Int): kotlin.Unit defined in B[SimpleFunctionDescriptorImpl@442f9200]
2021-03-12 01:56:42,344 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:56:42,348 [main:117] - GENERATED CALL = (getB())?.set(logged(2), logged(2), -1695065780, A.x)
2021-03-12 01:56:42,348 [main:114] - replacement of {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    } of type Unit? is check(false)
2021-03-12 01:56:42,501 [main:33] - Trying to replace BLOCK on Element(CALL_EXPRESSION)
2021-03-12 01:56:42,501 [main:66] - Compilation checking started
2021-03-12 01:56:42,508 [main:71] - Wrong syntax or breaks conditions
2021-03-12 01:56:42,508 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = "FAIL2"
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) check(false)
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error((B.x).div(-88259072686648981).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if ((getB()).x.inv() != i) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((logged(1)).toShort().minus(126) != (getB()).x.dec())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:56:42,511 [main:107] - replacing ((getB()).x.inv() != i, Boolean)
2021-03-12 01:56:42,511 [main:50] - replacing (getB()).x.inv() != i Boolean
2021-03-12 01:56:42,511 [main:54] - Getting value of type Boolean
2021-03-12 01:56:42,665 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:56:42,669 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 01:56:42,669 [main:61] - GENERATED IS CALL =false
2021-03-12 01:56:43,040 [main:67] - randomType = HashSet<UInt>
2021-03-12 01:56:43,192 [main:302] - generating value of type = HashSet<UInt> false depth = 0
2021-03-12 01:56:43,353 [main:43] - GENERATING CALL OF fun <T> hashSetOf(): HashSet<UInt> = TODO()
2021-03-12 01:56:43,357 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(): HashSet<UInt> = TODO()
2021-03-12 01:56:43,517 [main:95] - GENERATED = hashSetOf<UInt>()
2021-03-12 01:56:43,613 [main:149] - GENERATING call of type public open fun add(element: kotlin.UInt): kotlin.Boolean defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@2ce36d2c]
2021-03-12 01:56:43,614 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4cfdd607]
2021-03-12 01:56:43,767 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:56:43,767 [main:78] - Generated call from random type = (hashSetOf<UInt>()).add(logged<UInt>(1851723815.toUInt())).equals("lvdhr")
2021-03-12 01:56:43,768 [main:106] - GETTING Boolean from Int
2021-03-12 01:56:43,798 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64c51740]]
2021-03-12 01:56:43,798 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:56:43,799 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64c51740]
2021-03-12 01:56:43,799 [main:117] - GENERATED CALL = (A.x).toChar().isDigit()
2021-03-12 01:56:43,799 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@1ac3ca6f]]
2021-03-12 01:56:43,799 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e]
2021-03-12 01:56:43,799 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@1ac3ca6f]
2021-03-12 01:56:43,989 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:56:43,990 [main:117] - GENERATED CALL = (A.x).toLong().equals("jwfmy")
2021-03-12 01:56:43,990 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2dec1507], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@768a15ba]]
2021-03-12 01:56:43,990 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2dec1507]
2021-03-12 01:56:43,990 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@768a15ba]
2021-03-12 01:56:44,142 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:56:44,142 [main:117] - GENERATED CALL = (A.x).toDouble().equals("efwzg")
2021-03-12 01:56:44,142 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2dec1507], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@7db5d73b]]
2021-03-12 01:56:44,142 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2dec1507]
2021-03-12 01:56:44,142 [main:149] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@7db5d73b]
2021-03-12 01:56:44,142 [main:117] - GENERATED CALL = (A.x).toDouble().isNaN()
2021-03-12 01:56:44,143 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2fba18e9], public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3ff85b4d]]
2021-03-12 01:56:44,143 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2fba18e9]
2021-03-12 01:56:44,143 [main:149] - GENERATING call of type public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3ff85b4d]
2021-03-12 01:56:44,143 [main:117] - GENERATED CALL = (A.x).toFloat().isInfinite()
2021-03-12 01:56:44,143 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34179e9e]]
2021-03-12 01:56:44,143 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:56:44,143 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34179e9e]
2021-03-12 01:56:44,143 [main:117] - GENERATED CALL = (A.x).toChar().isWhitespace()
2021-03-12 01:56:44,143 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@147c729a], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6c23465f]]
2021-03-12 01:56:44,143 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@147c729a]
2021-03-12 01:56:44,295 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:56:44,296 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6c23465f]
2021-03-12 01:56:44,448 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:56:44,452 [main:117] - GENERATED CALL = (A.x).equals("scxpm").and(true)
2021-03-12 01:56:44,452 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2dec1507], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@7c78560c]]
2021-03-12 01:56:44,452 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2dec1507]
2021-03-12 01:56:44,452 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@7c78560c]
2021-03-12 01:56:44,453 [main:117] - GENERATED CALL = (A.x).toDouble().isInfinite()
2021-03-12 01:56:44,453 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f8f28c8]]
2021-03-12 01:56:44,453 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:56:44,453 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f8f28c8]
2021-03-12 01:56:44,453 [main:117] - GENERATED CALL = (A.x).toChar().isLowSurrogate()
2021-03-12 01:56:44,453 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@31b01837], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@768a15ba]]
2021-03-12 01:56:44,453 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@31b01837]
2021-03-12 01:56:44,607 [main:302] - generating value of type = Double true depth = 0
2021-03-12 01:56:44,610 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@768a15ba]
2021-03-12 01:56:44,765 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:56:44,765 [main:117] - GENERATED CALL = (A.x).div(0.049737638897672576).equals("pmger")
2021-03-12 01:56:44,765 [main:114] - replacement of (getB()).x.inv() != i of type Boolean is (A.x).toFloat().isInfinite()
2021-03-12 01:56:44,919 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:56:44,919 [main:66] - Compilation checking started
2021-03-12 01:56:45,580 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = "FAIL2"
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error((B.x).div(-88259072686648981).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((logged(1)).toShort().minus(126) != (getB()).x.dec())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:56:45,582 [main:107] - replacing (prope1, Continuation<*>)
2021-03-12 01:56:45,582 [main:50] - replacing prope1 Continuation<*>
2021-03-12 01:56:45,582 [main:54] - Getting value of type Continuation<*>
2021-03-12 01:56:45,736 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-12 01:56:45,896 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 01:56:45,901 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 01:56:46,426 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 01:56:46,587 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:56:46,592 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:56:46,941 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 01:56:47,108 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:56:47,112 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:56:47,644 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 9
2021-03-12 01:56:47,809 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 01:56:47,813 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 01:56:48,354 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 12
2021-03-12 01:56:48,517 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 01:56:48,522 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 01:56:49,139 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 15
2021-03-12 01:56:49,304 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 01:56:49,309 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 01:56:49,839 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 01:56:49,839 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 01:56:49,839 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 01:56:49,839 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:56:49,839 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:56:49,839 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 01:56:49,840 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-12 01:56:49,848 [main:67] - randomType = UInt
2021-03-12 01:56:50,003 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 01:56:50,033 [main:106] - GETTING Continuation<*> from A
2021-03-12 01:56:50,037 [main:106] - GETTING Continuation<*> from B
2021-03-12 01:56:50,044 [main:106] - GETTING Continuation<*> from Int
2021-03-12 01:56:50,073 [main:106] - GETTING Continuation<*> from Int
2021-03-12 01:56:50,074 [main:106] - GETTING Continuation<*> from Int
2021-03-12 01:56:50,075 [main:106] - GETTING Continuation<*> from Int
2021-03-12 01:56:50,076 [main:106] - GETTING Continuation<*> from A
2021-03-12 01:56:50,077 [main:106] - GETTING Continuation<*> from B
2021-03-12 01:56:50,077 [main:106] - GETTING Continuation<*> from Int
2021-03-12 01:56:50,078 [main:106] - GETTING Continuation<*> from Int
2021-03-12 01:56:50,079 [main:106] - GETTING Continuation<*> from UInt
2021-03-12 01:56:50,101 [main:111] - Cant find and generate replacement for prope1 type Continuation<*>
2021-03-12 01:56:50,101 [main:107] - replacing (prope7, Function0<Unit>)
2021-03-12 01:56:50,101 [main:50] - replacing prope7 Function0<Unit>
2021-03-12 01:56:50,102 [main:54] - Getting value of type Function0<Unit>
2021-03-12 01:56:50,254 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 01:56:50,258 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 01:56:50,418 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 01:56:50,423 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 01:56:50,935 [main:302] - generating value of type = Int true depth = 4
2021-03-12 01:56:50,939 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 01:56:50,943 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 01:56:51,101 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 01:56:51,105 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 01:56:51,614 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 01:56:51,618 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-12 01:56:51,622 [main:302] - generating value of type = Any false depth = 9
2021-03-12 01:56:51,622 [main:95] - GENERATED = require(false, { "vzwyk"})
2021-03-12 01:56:51,622 [main:95] - GENERATED = repeat(1752676780, {a: Int -> require(false, { "vzwyk"})})
2021-03-12 01:56:51,622 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(1752676780, {a: Int -> require(false, { "vzwyk"})})}
2021-03-12 01:56:51,622 [main:61] - GENERATED IS CALL =false
2021-03-12 01:56:51,822 [main:67] - randomType = LinkedHashSet<Boolean>
2021-03-12 01:56:51,980 [main:302] - generating value of type = LinkedHashSet<Boolean> false depth = 0
2021-03-12 01:56:52,140 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): LinkedHashSet<Boolean> = TODO()
2021-03-12 01:56:52,145 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): LinkedHashSet<Boolean> = TODO()
2021-03-12 01:56:52,652 [main:302] - generating value of type = Int true depth = 3
2021-03-12 01:56:52,656 [main:302] - generating value of type = Float true depth = 3
2021-03-12 01:56:52,660 [main:95] - GENERATED = LinkedHashSet<Boolean>(-547661070, 0.2970404f)
2021-03-12 01:56:52,772 [main:106] - GETTING Function0<Unit> from B
2021-03-12 01:56:52,778 [main:106] - GETTING Function0<Unit> from A
2021-03-12 01:56:52,782 [main:106] - GETTING Function0<Unit> from B
2021-03-12 01:56:52,783 [main:106] - GETTING Function0<Unit> from A
2021-03-12 01:56:52,784 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 01:56:52,815 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 01:56:52,816 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 01:56:52,817 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 01:56:52,818 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 01:56:52,819 [main:106] - GETTING Function0<Unit> from UInt
2021-03-12 01:56:52,841 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 01:56:52,841 [main:114] - replacement of prope7 of type Function0<Unit> is { repeat(1752676780, {a: Int -> require(false, { "vzwyk"})})}
2021-03-12 01:56:52,992 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 01:56:52,992 [main:66] - Compilation checking started
2021-03-12 01:56:53,455 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = "FAIL2"
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error((B.x).div(-88259072686648981).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((logged(1)).toShort().minus(126) != (getB()).x.dec())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        { repeat(1752676780, {a: Int -> require(false, { "vzwyk"})})}()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:56:53,458 [main:107] - replacing (prope6, Boolean)
2021-03-12 01:56:53,458 [main:50] - replacing prope6 Boolean
2021-03-12 01:56:53,458 [main:54] - Getting value of type Boolean
2021-03-12 01:56:53,652 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:56:53,655 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 01:56:53,655 [main:61] - GENERATED IS CALL =false
2021-03-12 01:56:53,663 [main:67] - randomType = Int
2021-03-12 01:56:53,817 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:56:53,850 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2dec1507]
2021-03-12 01:56:53,850 [main:149] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@7db5d73b]
2021-03-12 01:56:53,850 [main:78] - Generated call from random type = (-738197332).toDouble().isNaN()
2021-03-12 01:56:53,851 [main:106] - GETTING Boolean from A
2021-03-12 01:56:53,855 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@13c2842b], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b71fb8c]]
2021-03-12 01:56:53,855 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@13c2842b]
2021-03-12 01:56:54,006 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:56:54,006 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b71fb8c]
2021-03-12 01:56:54,006 [main:117] - GENERATED CALL = (getA()).equals("bjigb").not()
2021-03-12 01:56:54,006 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@533c3aca], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@147c729a]]
2021-03-12 01:56:54,006 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@147c729a]
2021-03-12 01:56:54,157 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:56:54,157 [main:117] - GENERATED CALL = (getA()).x.equals("hsfnz")
2021-03-12 01:56:54,157 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@13c2842b], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@40165da2]]
2021-03-12 01:56:54,157 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@13c2842b]
2021-03-12 01:56:54,308 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:56:54,308 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@40165da2]
2021-03-12 01:56:54,462 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:56:54,466 [main:117] - GENERATED CALL = (getA()).equals("kajka").or(false)
2021-03-12 01:56:54,466 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@13c2842b]]
2021-03-12 01:56:54,466 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@13c2842b]
2021-03-12 01:56:54,618 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:56:54,619 [main:117] - GENERATED CALL = (getA()).equals("oqios")
2021-03-12 01:56:54,619 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@13c2842b], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7d7e4be0]]
2021-03-12 01:56:54,619 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@13c2842b]
2021-03-12 01:56:54,777 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:56:54,778 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7d7e4be0]
2021-03-12 01:56:54,938 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:56:54,942 [main:117] - GENERATED CALL = (getA()).equals("hviyq").xor(false)
2021-03-12 01:56:54,942 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@13c2842b], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6c23465f]]
2021-03-12 01:56:54,942 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@13c2842b]
2021-03-12 01:56:55,096 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:56:55,096 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6c23465f]
2021-03-12 01:56:55,247 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:56:55,251 [main:117] - GENERATED CALL = (getA()).equals("oulsq").and(true)
2021-03-12 01:56:55,251 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@13c2842b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4cfdd607]]
2021-03-12 01:56:55,251 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@13c2842b]
2021-03-12 01:56:55,403 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:56:55,403 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4cfdd607]
2021-03-12 01:56:55,556 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:56:55,556 [main:117] - GENERATED CALL = (getA()).equals("adwbg").equals("rztdr")
2021-03-12 01:56:55,556 [main:114] - replacement of prope6 of type Boolean is (getA()).x.equals("hsfnz")
2021-03-12 01:56:55,707 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:56:55,707 [main:66] - Compilation checking started
2021-03-12 01:56:56,368 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = "FAIL2"
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error((B.x).div(-88259072686648981).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((logged(1)).toShort().minus(126) != (getB()).x.dec())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if ((getA()).x.equals("hsfnz")) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:56:56,371 [main:107] - replacing ("FAIL2", String)
2021-03-12 01:56:56,371 [main:50] - replacing "FAIL2" String
2021-03-12 01:56:56,371 [main:54] - Getting value of type String
2021-03-12 01:56:56,544 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:56:56,548 [main:58] - GENERATED VALUE OF TYPE String = "rgunj"
2021-03-12 01:56:56,548 [main:61] - GENERATED IS CALL =false
2021-03-12 01:56:56,740 [main:67] - randomType = Kla5<Boolean>
2021-03-12 01:56:56,892 [main:302] - generating value of type = Kla5<Boolean> false depth = 0
2021-03-12 01:56:56,896 [main:112] - generating klass Kla5 text = abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 01:56:57,418 [main:302] - generating value of type = Kla8 false depth = 2
2021-03-12 01:56:57,422 [main:112] - generating klass Kla8 text = object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}
2021-03-12 01:56:57,439 [main:106] - GETTING String from A
2021-03-12 01:56:57,444 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@2dfd7342], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:56:57,444 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:56:57,445 [main:117] - GENERATED CALL = (getA()).x.toString(logged(2))
2021-03-12 01:56:57,445 [main:114] - replacement of "FAIL2" of type String is (getA()).x.toString(logged(2))
2021-03-12 01:56:57,595 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:56:57,596 [main:66] - Compilation checking started
2021-03-12 01:56:58,281 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged(2))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
prope0.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error((B.x).div(-88259072686648981).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((logged(1)).toShort().minus(126) != (getB()).x.dec())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if ((getA()).x.equals("hsfnz")) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:56:58,284 [main:107] - replacing (prope0.getOrThrow(), Any?)
2021-03-12 01:56:58,284 [main:50] - replacing prope0.getOrThrow() Any?
2021-03-12 01:56:58,284 [main:54] - Getting value of type Any?
2021-03-12 01:56:58,439 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:56:58,440 [main:58] - GENERATED VALUE OF TYPE Any? = "kufre"
2021-03-12 01:56:58,440 [main:61] - GENERATED IS CALL =false
2021-03-12 01:56:58,455 [main:67] - randomType = Kla3
2021-03-12 01:56:58,609 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 01:56:58,612 [main:112] - generating klass Kla3 text = open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
prope0.getOrThrow()
    }
}
2021-03-12 01:56:58,797 [main:194] - Type params = []
2021-03-12 01:56:58,949 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 01:56:59,109 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:56:59,114 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:56:59,473 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 01:56:59,635 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:56:59,640 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:57:00,166 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:57:00,167 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:57:00,179 [main:106] - GETTING Any? from B
2021-03-12 01:57:00,185 [main:106] - GETTING Any? from A
2021-03-12 01:57:00,190 [main:106] - GETTING Any? from B
2021-03-12 01:57:00,191 [main:106] - GETTING Any? from Int
2021-03-12 01:57:00,221 [main:106] - GETTING Any? from Int
2021-03-12 01:57:00,222 [main:106] - GETTING Any? from A
2021-03-12 01:57:00,223 [main:106] - GETTING Any? from Int
2021-03-12 01:57:00,224 [main:106] - GETTING Any? from Int
2021-03-12 01:57:00,225 [main:106] - GETTING Any? from Int
2021-03-12 01:57:00,226 [main:106] - GETTING Any? from Int
2021-03-12 01:57:00,227 [main:106] - GETTING Any? from UInt
2021-03-12 01:57:00,248 [main:114] - replacement of prope0.getOrThrow() of type Any? is "kufre"
2021-03-12 01:57:00,401 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 01:57:00,401 [main:66] - Compilation checking started
2021-03-12 01:57:01,063 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged(2))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error((B.x).div(-88259072686648981).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((logged(1)).toShort().minus(126) != (getB()).x.dec())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if ((getA()).x.equals("hsfnz")) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:57:01,067 [main:107] - replacing ("OK", String)
2021-03-12 01:57:01,067 [main:50] - replacing "OK" String
2021-03-12 01:57:01,068 [main:54] - Getting value of type String
2021-03-12 01:57:01,226 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:57:01,230 [main:58] - GENERATED VALUE OF TYPE String = "qdvxv"
2021-03-12 01:57:01,230 [main:61] - GENERATED IS CALL =false
2021-03-12 01:57:01,237 [main:67] - randomType = Float
2021-03-12 01:57:01,392 [main:302] - generating value of type = Float true depth = 0
2021-03-12 01:57:01,448 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@75043e31]
2021-03-12 01:57:01,449 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]
2021-03-12 01:57:01,449 [main:78] - Generated call from random type = (0.06537163f).toChar().uppercase()
2021-03-12 01:57:01,450 [main:106] - GETTING String from Int
2021-03-12 01:57:01,502 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:57:01,502 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73]
2021-03-12 01:57:01,655 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:57:01,659 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:57:01,659 [main:117] - GENERATED CALL = (logged(3)).div(5877483696113169983).toString(logged(2))
2021-03-12 01:57:01,659 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:57:01,659 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e]
2021-03-12 01:57:01,659 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:57:01,660 [main:117] - GENERATED CALL = (logged(3)).toLong().toString(B.x)
2021-03-12 01:57:01,660 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]]
2021-03-12 01:57:01,660 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60]
2021-03-12 01:57:01,660 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]
2021-03-12 01:57:01,660 [main:117] - GENERATED CALL = (logged(3)).toShort().toString(logged(1))
2021-03-12 01:57:01,660 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a36c448]]
2021-03-12 01:57:01,660 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:57:01,660 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a36c448]
2021-03-12 01:57:01,660 [main:117] - GENERATED CALL = (logged(3)).toChar().lowercase()
2021-03-12 01:57:01,660 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]]
2021-03-12 01:57:01,660 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:57:01,660 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]
2021-03-12 01:57:01,661 [main:117] - GENERATED CALL = (logged(3)).toChar().uppercase()
2021-03-12 01:57:01,661 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:57:01,661 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:57:01,661 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:57:01,814 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:57:01,818 [main:117] - GENERATED CALL = (logged(3)).toInt().toString(215217765)
2021-03-12 01:57:01,818 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6122df5e]]
2021-03-12 01:57:01,818 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:57:01,818 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6122df5e]
2021-03-12 01:57:01,971 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:57:01,975 [main:117] - GENERATED CALL = (logged(3)).toChar().plus("nejux")
2021-03-12 01:57:01,975 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:57:01,975 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:57:01,975 [main:117] - GENERATED CALL = (logged(3)).toString(logged(3))
2021-03-12 01:57:01,975 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]]
2021-03-12 01:57:01,975 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:57:01,976 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]
2021-03-12 01:57:01,976 [main:117] - GENERATED CALL = (logged(3)).toChar().titlecase()
2021-03-12 01:57:01,976 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc0516]]
2021-03-12 01:57:01,976 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235]
2021-03-12 01:57:01,976 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc0516]
2021-03-12 01:57:01,976 [main:117] - GENERATED CALL = (logged(3)).toByte().toString(B.get())
2021-03-12 01:57:01,976 [main:114] - replacement of "OK" of type String is (logged(3)).toInt().toString(215217765)
2021-03-12 01:57:02,127 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:57:02,128 [main:66] - Compilation checking started
2021-03-12 01:57:02,802 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged(2))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged(3)).toInt().toString(215217765)))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error((B.x).div(-88259072686648981).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((logged(1)).toShort().minus(126) != (getB()).x.dec())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if ((getA()).x.equals("hsfnz")) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:57:02,805 [main:107] - replacing (prope5, Int)
2021-03-12 01:57:02,805 [main:50] - replacing prope5 Int
2021-03-12 01:57:02,805 [main:54] - Getting value of type Int
2021-03-12 01:57:02,957 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:57:02,961 [main:58] - GENERATED VALUE OF TYPE Int = 1488193052
2021-03-12 01:57:02,961 [main:61] - GENERATED IS CALL =false
2021-03-12 01:57:02,969 [main:67] - randomType = Byte
2021-03-12 01:57:03,134 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:57:03,167 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@2eff7c5]
2021-03-12 01:57:03,321 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:57:03,321 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@19b05991]
2021-03-12 01:57:03,474 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:57:03,478 [main:78] - Generated call from random type = (-124).equals("bygiq").compareTo(true)
2021-03-12 01:57:03,478 [main:106] - GETTING Int from Int
2021-03-12 01:57:03,508 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@7acce0d5]]
2021-03-12 01:57:03,508 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60]
2021-03-12 01:57:03,508 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@7acce0d5]
2021-03-12 01:57:03,508 [main:117] - GENERATED CALL = (logged(3)).toShort().unaryMinus()
2021-03-12 01:57:03,508 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@23b94d2e]]
2021-03-12 01:57:03,508 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235]
2021-03-12 01:57:03,508 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@23b94d2e]
2021-03-12 01:57:03,662 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:57:03,666 [main:117] - GENERATED CALL = (logged(3)).toByte().plus(-35)
2021-03-12 01:57:03,666 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3ef045d8]]
2021-03-12 01:57:03,666 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:57:03,666 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3ef045d8]
2021-03-12 01:57:03,819 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:57:03,823 [main:117] - GENERATED CALL = (logged(3)).compareTo(B.get()).minus(61)
2021-03-12 01:57:03,823 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5d605014]]
2021-03-12 01:57:03,823 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:57:03,824 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5d605014]
2021-03-12 01:57:03,824 [main:117] - GENERATED CALL = (logged(3)).toInt().countLeadingZeroBits()
2021-03-12 01:57:03,824 [main:113] - Case = [public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4fc424b]]
2021-03-12 01:57:03,824 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4fc424b]
2021-03-12 01:57:03,824 [main:117] - GENERATED CALL = (logged(3)).coerceIn(A.x, logged(1))
2021-03-12 01:57:03,824 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@472c0627]]
2021-03-12 01:57:03,824 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:57:03,824 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@472c0627]
2021-03-12 01:57:04,031 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:57:04,035 [main:117] - GENERATED CALL = (logged(3)).toInt().div(60)
2021-03-12 01:57:04,035 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@682e13cc]]
2021-03-12 01:57:04,035 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:57:04,035 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@682e13cc]
2021-03-12 01:57:04,188 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:57:04,192 [main:117] - GENERATED CALL = (logged(3)).toChar().compareTo('觗')
2021-03-12 01:57:04,192 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5958298b], public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@64c33b37]]
2021-03-12 01:57:04,192 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5958298b]
2021-03-12 01:57:04,348 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:57:04,352 [main:117] - GENERATED CALL = (logged(3)).rangeTo(-86).endInclusive
2021-03-12 01:57:04,352 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78080c68]]
2021-03-12 01:57:04,352 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:57:04,352 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78080c68]
2021-03-12 01:57:04,352 [main:117] - GENERATED CALL = (logged(3)).toInt().toInt()
2021-03-12 01:57:04,353 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@77efaf86]]
2021-03-12 01:57:04,353 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:57:04,353 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@77efaf86]
2021-03-12 01:57:04,507 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:57:04,511 [main:117] - GENERATED CALL = (logged(3)).toInt().compareTo(-16)
2021-03-12 01:57:04,511 [main:114] - replacement of prope5 of type Int is (logged(3)).toInt().div(60)
2021-03-12 01:57:04,666 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:57:04,666 [main:66] - Compilation checking started
2021-03-12 01:57:05,111 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = fu1()

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged(2))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged(3)).toInt().toString(215217765)))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error((B.x).div(-88259072686648981).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
(logged(3)).toInt().div(60) = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((logged(1)).toShort().minus(126) != (getB()).x.dec())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if ((getA()).x.equals("hsfnz")) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:57:05,114 [main:107] - replacing (fu1(), Kla0)
2021-03-12 01:57:05,114 [main:50] - replacing fu1() Kla0
2021-03-12 01:57:05,114 [main:54] - Getting value of type Kla0
2021-03-12 01:57:05,268 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 01:57:05,272 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)
2021-03-12 01:57:05,433 [main:194] - Type params = []
2021-03-12 01:57:05,588 [main:302] - generating value of type = String true depth = 2
2021-03-12 01:57:05,592 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0("pmiwp")
2021-03-12 01:57:05,592 [main:61] - GENERATED IS CALL =true
2021-03-12 01:57:06,316 [main:67] - randomType = Function2<Kla3, Kla8, UShort>
2021-03-12 01:57:06,317 [main:106] - GETTING Kla0 from Int
2021-03-12 01:57:06,348 [main:106] - GETTING Kla0 from UInt
2021-03-12 01:57:06,369 [main:106] - GETTING Kla0 from Int
2021-03-12 01:57:06,370 [main:106] - GETTING Kla0 from Int
2021-03-12 01:57:06,371 [main:106] - GETTING Kla0 from B
2021-03-12 01:57:06,376 [main:106] - GETTING Kla0 from Int
2021-03-12 01:57:06,377 [main:106] - GETTING Kla0 from Int
2021-03-12 01:57:06,377 [main:106] - GETTING Kla0 from Int
2021-03-12 01:57:06,378 [main:106] - GETTING Kla0 from A
2021-03-12 01:57:06,383 [main:106] - GETTING Kla0 from A
2021-03-12 01:57:06,383 [main:106] - GETTING Kla0 from B
2021-03-12 01:57:06,383 [main:114] - replacement of fu1() of type Kla0 is Kla0("pmiwp")
2021-03-12 01:57:06,537 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 01:57:06,537 [main:66] - Compilation checking started
2021-03-12 01:57:07,208 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged(2))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged(3)).toInt().toString(215217765)))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return "FAIL 2 $prope0"

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error((B.x).div(-88259072686648981).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((logged(1)).toShort().minus(126) != (getB()).x.dec())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if ((getA()).x.equals("hsfnz")) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:57:07,211 [main:107] - replacing ("FAIL 2 $prope0", String)
2021-03-12 01:57:07,211 [main:50] - replacing "FAIL 2 $prope0" String
2021-03-12 01:57:07,211 [main:54] - Getting value of type String
2021-03-12 01:57:07,377 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:57:07,381 [main:58] - GENERATED VALUE OF TYPE String = "rdnnh"
2021-03-12 01:57:07,381 [main:61] - GENERATED IS CALL =false
2021-03-12 01:57:07,397 [main:67] - randomType = Kla4
2021-03-12 01:57:07,552 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 01:57:07,556 [main:112] - generating klass Kla4 text = class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}
2021-03-12 01:57:07,570 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@2fc13bf6]
2021-03-12 01:57:07,570 [main:78] - Generated call from random type = (Kla4()).prope0?.toString()!!
2021-03-12 01:57:07,570 [main:114] - replacement of "FAIL 2 $prope0" of type String is (Kla4()).prope0?.toString()!!
2021-03-12 01:57:07,724 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(POSTFIX_EXPRESSION)
2021-03-12 01:57:07,724 [main:66] - Compilation checking started
2021-03-12 01:57:08,391 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged(2))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged(3)).toInt().toString(215217765)))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error((B.x).div(-88259072686648981).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((logged(1)).toShort().minus(126) != (getB()).x.dec())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if ((getA()).x.equals("hsfnz")) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:57:08,394 [main:107] - replacing (let(x), Unit?)
2021-03-12 01:57:08,394 [main:50] - replacing let(x) Unit?
2021-03-12 01:57:08,394 [main:54] - Getting value of type Unit?
2021-03-12 01:57:08,558 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 01:57:08,721 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 01:57:08,726 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 01:57:09,066 [main:302] - generating value of type = Boolean true depth = 3
2021-03-12 01:57:09,070 [main:95] - GENERATED = check(true)
2021-03-12 01:57:09,070 [main:58] - GENERATED VALUE OF TYPE Unit? = check(true)
2021-03-12 01:57:09,070 [main:61] - GENERATED IS CALL =true
2021-03-12 01:57:09,078 [main:67] - randomType = Short
2021-03-12 01:57:09,267 [main:302] - generating value of type = Short true depth = 0
2021-03-12 01:57:09,304 [main:106] - GETTING Unit? from Int
2021-03-12 01:57:09,334 [main:106] - GETTING Unit? from Int
2021-03-12 01:57:09,335 [main:106] - GETTING Unit? from UInt
2021-03-12 01:57:09,361 [main:106] - GETTING Unit? from Int
2021-03-12 01:57:09,361 [main:106] - GETTING Unit? from Int
2021-03-12 01:57:09,362 [main:106] - GETTING Unit? from B
2021-03-12 01:57:09,368 [main:113] - Case = [public final operator fun set(i1: kotlin.Int, i2: kotlin.Int, i3: kotlin.Int, value: kotlin.Int): kotlin.Unit defined in B[SimpleFunctionDescriptorImpl@49e4b8ca]]
2021-03-12 01:57:09,368 [main:149] - GENERATING call of type public final operator fun set(i1: kotlin.Int, i2: kotlin.Int, i3: kotlin.Int, value: kotlin.Int): kotlin.Unit defined in B[SimpleFunctionDescriptorImpl@49e4b8ca]
2021-03-12 01:57:09,528 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:57:09,532 [main:117] - GENERATED CALL = (getB())?.set(logged(3), logged(2), logged(2), -1008478212)
2021-03-12 01:57:09,532 [main:114] - replacement of let(x) of type Unit? is (getB())?.set(logged(3), logged(2), logged(2), -1008478212)
2021-03-12 01:57:09,686 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 01:57:09,687 [main:66] - Compilation checking started
2021-03-12 01:57:10,173 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged(2))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged(3)).toInt().toString(215217765)))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.(getB())?.set(logged(3), logged(2), logged(2), -1008478212)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error((B.x).div(-88259072686648981).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((logged(1)).toShort().minus(126) != (getB()).x.dec())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if ((getA()).x.equals("hsfnz")) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:57:10,176 [main:107] - replacing (it.message!!, String)
2021-03-12 01:57:10,176 [main:50] - replacing it.message!! String
2021-03-12 01:57:10,176 [main:54] - Getting value of type String
2021-03-12 01:57:10,349 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:57:10,353 [main:58] - GENERATED VALUE OF TYPE String = "xnykf"
2021-03-12 01:57:10,353 [main:61] - GENERATED IS CALL =false
2021-03-12 01:57:10,368 [main:67] - randomType = A
2021-03-12 01:57:10,521 [main:302] - generating value of type = A false depth = 0
2021-03-12 01:57:10,525 [main:112] - generating klass A text = object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}
2021-03-12 01:57:10,530 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:57:10,530 [main:78] - Generated call from random type = (A).x.toString(B.get())
2021-03-12 01:57:10,531 [main:106] - GETTING String from Int
2021-03-12 01:57:10,560 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:57:10,560 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e]
2021-03-12 01:57:10,560 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:57:10,560 [main:117] - GENERATED CALL = (logged(3)).toLong().toString(logged(2))
2021-03-12 01:57:10,560 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a36c448]]
2021-03-12 01:57:10,560 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:57:10,560 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a36c448]
2021-03-12 01:57:10,561 [main:117] - GENERATED CALL = (logged(3)).toChar().lowercase()
2021-03-12 01:57:10,561 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc0516]]
2021-03-12 01:57:10,561 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235]
2021-03-12 01:57:10,561 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc0516]
2021-03-12 01:57:10,715 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:57:10,719 [main:117] - GENERATED CALL = (logged(3)).toByte().toString(776716650)
2021-03-12 01:57:10,719 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:57:10,719 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:57:10,874 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:57:10,878 [main:117] - GENERATED CALL = (logged(3)).toString(-2064860670)
2021-03-12 01:57:10,878 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]]
2021-03-12 01:57:10,878 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:57:10,878 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]
2021-03-12 01:57:10,878 [main:117] - GENERATED CALL = (logged(3)).toChar().uppercase()
2021-03-12 01:57:10,878 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:57:10,878 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73]
2021-03-12 01:57:11,032 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:57:11,035 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:57:11,036 [main:117] - GENERATED CALL = (logged(3)).div(8337190529024916787).toString(logged(3))
2021-03-12 01:57:11,036 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]]
2021-03-12 01:57:11,036 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:57:11,036 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]
2021-03-12 01:57:11,036 [main:117] - GENERATED CALL = (logged(3)).toChar().titlecase()
2021-03-12 01:57:11,036 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:57:11,036 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:57:11,036 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:57:11,190 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:57:11,194 [main:117] - GENERATED CALL = (logged(3)).toInt().toString(952125290)
2021-03-12 01:57:11,195 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:57:11,195 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:57:11,195 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:57:11,349 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:57:11,353 [main:117] - GENERATED CALL = (logged(3)).compareTo(logged(1)).toString(-1170193640)
2021-03-12 01:57:11,353 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6122df5e]]
2021-03-12 01:57:11,353 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:57:11,353 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6122df5e]
2021-03-12 01:57:11,353 [main:117] - GENERATED CALL = (logged(3)).toChar().plus(var log =
2021-03-12 01:57:11,353 [main:114] - replacement of it.message!! of type String is (logged(3)).toLong().toString(logged(2))
2021-03-12 01:57:11,507 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:57:11,508 [main:66] - Compilation checking started
2021-03-12 01:57:12,165 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(3)).toLong().toString(logged(2))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged(2))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged(3)).toInt().toString(215217765)))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error((B.x).div(-88259072686648981).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((logged(1)).toShort().minus(126) != (getB()).x.dec())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if ((getA()).x.equals("hsfnz")) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:57:12,169 [main:107] - replacing ((logged(1)).toShort().minus(126) != (getB()).x.dec(), Boolean)
2021-03-12 01:57:12,169 [main:50] - replacing (logged(1)).toShort().minus(126) != (getB()).x.dec() Boolean
2021-03-12 01:57:12,169 [main:54] - Getting value of type Boolean
2021-03-12 01:57:12,332 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:57:12,335 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 01:57:12,336 [main:61] - GENERATED IS CALL =false
2021-03-12 01:57:12,539 [main:67] - randomType = Pair<Double, Byte>
2021-03-12 01:57:12,693 [main:302] - generating value of type = Pair<Double, Byte> false depth = 0
2021-03-12 01:57:12,856 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Double, second: Byte): Pair<Double, Byte> = TODO()
2021-03-12 01:57:12,861 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Double, second: Byte): Pair<Double, Byte> = TODO()
2021-03-12 01:57:13,023 [main:302] - generating value of type = Double true depth = 3
2021-03-12 01:57:13,027 [main:302] - generating value of type = Byte true depth = 3
2021-03-12 01:57:13,031 [main:95] - GENERATED = Pair<Double, Byte>(0.3250307426530171, 43)
2021-03-12 01:57:13,041 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Pair[DeserializedSimpleFunctionDescriptor@477a2b2]
2021-03-12 01:57:13,196 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:57:13,196 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@40165da2]
2021-03-12 01:57:13,354 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:57:13,358 [main:78] - Generated call from random type = (Pair<Double, Byte>(0.3250307426530171, 43)).equals("rycla").or(false)
2021-03-12 01:57:13,359 [main:106] - GETTING Boolean from B
2021-03-12 01:57:13,365 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@6529eb04], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6c23465f]]
2021-03-12 01:57:13,365 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@6529eb04]
2021-03-12 01:57:13,521 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:57:13,521 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6c23465f]
2021-03-12 01:57:13,680 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:57:13,686 [main:117] - GENERATED CALL = (getB()).equals("lqgtu").and(true)
2021-03-12 01:57:13,686 [main:113] - Case = [public final operator fun set(i1: kotlin.Int, i2: kotlin.Int, i3: kotlin.Int, value: kotlin.Int): kotlin.Unit defined in B[SimpleFunctionDescriptorImpl@49e4b8ca], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@7a6c3e3d]]
2021-03-12 01:57:13,686 [main:149] - GENERATING call of type public final operator fun set(i1: kotlin.Int, i2: kotlin.Int, i3: kotlin.Int, value: kotlin.Int): kotlin.Unit defined in B[SimpleFunctionDescriptorImpl@49e4b8ca]
2021-03-12 01:57:13,845 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:57:13,849 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@7a6c3e3d]
2021-03-12 01:57:14,003 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:57:14,003 [main:117] - GENERATED CALL = (getB()).set(-2132125901, logged(1), B.x, logged(3)).equals("uqsuj")
2021-03-12 01:57:14,003 [main:113] - Case = [public final var x: kotlin.Int defined in B[PropertyDescriptorImpl@446e19b3], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@147c729a]]
2021-03-12 01:57:14,003 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@147c729a]
2021-03-12 01:57:14,158 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:57:14,158 [main:117] - GENERATED CALL = (getB()).x.equals("bokkn")
2021-03-12 01:57:14,158 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@6529eb04], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4cfdd607]]
2021-03-12 01:57:14,158 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@6529eb04]
2021-03-12 01:57:14,344 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:57:14,344 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4cfdd607]
2021-03-12 01:57:14,500 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:57:14,500 [main:117] - GENERATED CALL = (getB()).equals("pkyqr").equals("xuxbw")
2021-03-12 01:57:14,500 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@6529eb04], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7d7e4be0]]
2021-03-12 01:57:14,500 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@6529eb04]
2021-03-12 01:57:14,658 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:57:14,659 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7d7e4be0]
2021-03-12 01:57:14,816 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:57:14,820 [main:117] - GENERATED CALL = (getB()).equals("lmvmz").xor(true)
2021-03-12 01:57:14,820 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@6529eb04], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b71fb8c]]
2021-03-12 01:57:14,820 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@6529eb04]
2021-03-12 01:57:14,977 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:57:14,977 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5b71fb8c]
2021-03-12 01:57:14,977 [main:117] - GENERATED CALL = (getB()).equals("mlvrc").not()
2021-03-12 01:57:14,977 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@6529eb04]]
2021-03-12 01:57:14,977 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@6529eb04]
2021-03-12 01:57:15,131 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:57:15,132 [main:117] - GENERATED CALL = (getB()).equals("ujnzw")
2021-03-12 01:57:15,132 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@6529eb04], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@40165da2]]
2021-03-12 01:57:15,132 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in B[DeserializedSimpleFunctionDescriptor@6529eb04]
2021-03-12 01:57:15,287 [main:302] - generating value of type = Any false depth = 0
2021-03-12 01:57:15,287 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@40165da2]
2021-03-12 01:57:15,442 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:57:15,445 [main:117] - GENERATED CALL = (getB()).equals("deren").or(false)
2021-03-12 01:57:15,446 [main:114] - replacement of (logged(1)).toShort().minus(126) != (getB()).x.dec() of type Boolean is (getB()).x.equals("bokkn")
2021-03-12 01:57:15,601 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:57:15,602 [main:66] - Compilation checking started
2021-03-12 01:57:16,287 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(3)).toLong().toString(logged(2))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged(2))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged(3)).toInt().toString(215217765)))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error((B.x).div(-88259072686648981).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if ((getA()).x.equals("hsfnz")) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:57:16,289 [main:107] - replacing (prope1, Continuation<*>)
2021-03-12 01:57:16,289 [main:50] - replacing prope1 Continuation<*>
2021-03-12 01:57:16,289 [main:54] - Getting value of type Continuation<*>
2021-03-12 01:57:16,461 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-12 01:57:16,625 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 01:57:16,629 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 01:57:17,161 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 01:57:17,323 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:57:17,328 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:57:17,682 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 01:57:17,845 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:57:17,850 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:57:18,383 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:57:18,383 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:57:18,383 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 01:57:18,383 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-12 01:57:19,839 [main:67] - randomType = ArrayList<Function1<Kla1, LinkedHashMap<Map<ULong, MutableMap<Kla2, Float>>?, UInt>>>
2021-03-12 01:57:19,994 [main:302] - generating value of type = ArrayList<Function1<Kla1, LinkedHashMap<Map<ULong, MutableMap<Kla2, Float>>?, UInt>>> false depth = 0
2021-03-12 01:57:20,160 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Function1<Kla1, LinkedHashMap<Map<ULong, MutableMap<Kla2, Float>>?, UInt>>): ArrayList<Function1<Kla1, LkedHashMap<Map<ULong, MutableMap<Kla2, Float>>?, UInt>>> = TODO()
2021-03-12 01:57:20,165 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Function1<Kla1, LinkedHashMap<Map<ULong, MutableMap<Kla2, Float>>?, UInt>>): ArrayList<Function1<Kla1, LkedHashMap<Map<ULong, MutableMap<Kla2, Float>>?, UInt>>> = TODO()
2021-03-12 01:57:20,327 [main:302] - generating value of type = Function1<Kla1, LinkedHashMap<Map<ULong, MutableMap<Kla2, Float>>?, UInt>> false depth = 3
2021-03-12 01:57:20,331 [main:302] - generating value of type = LinkedHashMap<Map<ULong, MutableMap<Kla2, Float>>?, UInt> false depth = 4
2021-03-12 01:57:20,502 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): LinkedHashMap<Map<ULong, MutableMap<Kla2, Float>>?, UInt> = TODO()
2021-03-12 01:57:20,507 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): LinkedHashMap<Map<ULong, MutableMap<Kla2, Float>>?, UInt> = TODO()
2021-03-12 01:57:21,023 [main:302] - generating value of type = Int true depth = 7
2021-03-12 01:57:21,027 [main:302] - generating value of type = Float true depth = 7
2021-03-12 01:57:21,031 [main:95] - GENERATED = LinkedHashMap<Map<ULong, MutableMap<Kla2, Float>>?, UInt>(1687847373, 0.04507947f)
2021-03-12 01:57:21,031 [main:95] - GENERATED = arrayListOf<Function1<Kla1, LinkedHashMap<Map<ULong, MutableMap<Kla2, Float>>?, UInt>>>({a: Kla1 -> LinkedHashMap<Map<ULong, MutableMap<Kla2, Float>>?, UInt>(1687847373, 0.04507947f)})
2021-03-12 01:57:21,351 [main:106] - GETTING Continuation<*> from Int
2021-03-12 01:57:21,384 [main:106] - GETTING Continuation<*> from A
2021-03-12 01:57:21,388 [main:106] - GETTING Continuation<*> from Int
2021-03-12 01:57:21,389 [main:106] - GETTING Continuation<*> from Int
2021-03-12 01:57:21,390 [main:106] - GETTING Continuation<*> from Int
2021-03-12 01:57:21,391 [main:106] - GETTING Continuation<*> from A
2021-03-12 01:57:21,391 [main:106] - GETTING Continuation<*> from UInt
2021-03-12 01:57:21,414 [main:106] - GETTING Continuation<*> from B
2021-03-12 01:57:21,419 [main:106] - GETTING Continuation<*> from Int
2021-03-12 01:57:21,420 [main:106] - GETTING Continuation<*> from Int
2021-03-12 01:57:21,421 [main:106] - GETTING Continuation<*> from B
2021-03-12 01:57:21,421 [main:111] - Cant find and generate replacement for prope1 type Continuation<*>
2021-03-12 01:57:21,421 [main:107] - replacing (prope3.prope7, Function0<Unit>)
2021-03-12 01:57:21,421 [main:50] - replacing prope3.prope7 Function0<Unit>
2021-03-12 01:57:21,421 [main:54] - Getting value of type Function0<Unit>
2021-03-12 01:57:21,577 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 01:57:21,580 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 01:57:21,739 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 01:57:21,744 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 01:57:22,081 [main:302] - generating value of type = Any false depth = 4
2021-03-12 01:57:22,082 [main:95] - GENERATED = print("twksx")
2021-03-12 01:57:22,082 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { print("twksx")}
2021-03-12 01:57:22,082 [main:61] - GENERATED IS CALL =false
2021-03-12 01:57:22,098 [main:67] - randomType = Kla1
2021-03-12 01:57:22,099 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 01:57:22,129 [main:106] - GETTING Function0<Unit> from B
2021-03-12 01:57:22,136 [main:106] - GETTING Function0<Unit> from UInt
2021-03-12 01:57:22,158 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 01:57:22,159 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 01:57:22,160 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 01:57:22,161 [main:106] - GETTING Function0<Unit> from A
2021-03-12 01:57:22,167 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 01:57:22,168 [main:106] - GETTING Function0<Unit> from B
2021-03-12 01:57:22,169 [main:106] - GETTING Function0<Unit> from A
2021-03-12 01:57:22,169 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 01:57:22,169 [main:114] - replacement of prope3.prope7 of type Function0<Unit> is { print("twksx")}
2021-03-12 01:57:22,325 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 01:57:22,325 [main:66] - Compilation checking started
2021-03-12 01:57:22,775 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(3)).toLong().toString(logged(2))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if (prope0 != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged(2))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged(3)).toInt().toString(215217765)))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error((B.x).div(-88259072686648981).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if ((getA()).x.equals("hsfnz")) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
{ print("twksx")} = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:57:22,778 [main:107] - replacing (prope0, String)
2021-03-12 01:57:22,778 [main:50] - replacing prope0 String
2021-03-12 01:57:22,778 [main:54] - Getting value of type String
2021-03-12 01:57:22,934 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:57:22,938 [main:58] - GENERATED VALUE OF TYPE String = "nblbb"
2021-03-12 01:57:22,938 [main:61] - GENERATED IS CALL =false
2021-03-12 01:57:22,945 [main:67] - randomType = Int
2021-03-12 01:57:23,099 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:57:23,132 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:57:23,133 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]
2021-03-12 01:57:23,133 [main:78] - Generated call from random type = (-966324777).toChar().uppercase()
2021-03-12 01:57:23,133 [main:114] - replacement of prope0 of type String is (-966324777).toChar().uppercase()
2021-03-12 01:57:23,287 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:57:23,287 [main:66] - Compilation checking started
2021-03-12 01:57:23,938 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(3)).toLong().toString(logged(2))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((-966324777).toChar().uppercase() != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged(2))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged(3)).toInt().toString(215217765)))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error((B.x).div(-88259072686648981).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if ((getA()).x.equals("hsfnz")) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:57:23,942 [main:107] - replacing (prope3.prope7, Function0<Unit>)
2021-03-12 01:57:23,942 [main:50] - replacing prope3.prope7 Function0<Unit>
2021-03-12 01:57:23,942 [main:54] - Getting value of type Function0<Unit>
2021-03-12 01:57:24,108 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 01:57:24,111 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 01:57:24,304 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 01:57:24,309 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 01:57:24,826 [main:302] - generating value of type = Int true depth = 4
2021-03-12 01:57:24,830 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 01:57:24,834 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 01:57:24,994 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 01:57:24,999 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 01:57:25,335 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 01:57:25,339 [main:95] - GENERATED = require(false)
2021-03-12 01:57:25,339 [main:95] - GENERATED = repeat(1327788170, {a: Int -> require(false)})
2021-03-12 01:57:25,339 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(1327788170, {a: Int -> require(false)})}
2021-03-12 01:57:25,339 [main:61] - GENERATED IS CALL =false
2021-03-12 01:57:25,699 [main:67] - randomType = Kla8?
2021-03-12 01:57:25,852 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-12 01:57:25,856 [main:112] - generating klass Kla8 text = object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}
2021-03-12 01:57:25,874 [main:106] - GETTING Function0<Unit> from B
2021-03-12 01:57:25,880 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 01:57:25,917 [main:106] - GETTING Function0<Unit> from UInt
2021-03-12 01:57:25,948 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 01:57:25,949 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 01:57:25,950 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 01:57:25,951 [main:106] - GETTING Function0<Unit> from B
2021-03-12 01:57:25,952 [main:106] - GETTING Function0<Unit> from A
2021-03-12 01:57:25,958 [main:106] - GETTING Function0<Unit> from A
2021-03-12 01:57:25,959 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 01:57:25,960 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 01:57:25,960 [main:114] - replacement of prope3.prope7 of type Function0<Unit> is { repeat(1327788170, {a: Int -> require(false)})}
2021-03-12 01:57:26,114 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 01:57:26,114 [main:66] - Compilation checking started
2021-03-12 01:57:26,567 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(3)).toLong().toString(logged(2))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((-966324777).toChar().uppercase() != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged(2))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged(3)).toInt().toString(215217765)))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error((B.x).div(-88259072686648981).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if ((getA()).x.equals("hsfnz")) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
{ repeat(1327788170, {a: Int -> require(false)})} = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:57:26,570 [main:107] - replacing ("Wrong state-machine generated: it is finished early", String)
2021-03-12 01:57:26,570 [main:50] - replacing "Wrong state-machine generated: it is finished early" String
2021-03-12 01:57:26,570 [main:54] - Getting value of type String
2021-03-12 01:57:26,725 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:57:26,728 [main:58] - GENERATED VALUE OF TYPE String = "iqprx"
2021-03-12 01:57:26,728 [main:61] - GENERATED IS CALL =false
2021-03-12 01:57:26,744 [main:67] - randomType = Kla3
2021-03-12 01:57:26,899 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 01:57:26,902 [main:112] - generating klass Kla3 text = open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}
2021-03-12 01:57:27,058 [main:194] - Type params = []
2021-03-12 01:57:27,212 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 01:57:27,374 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:57:27,379 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:57:27,727 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 01:57:27,895 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:57:27,899 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:57:28,433 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 8
2021-03-12 01:57:28,599 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 01:57:28,604 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 01:57:29,137 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 01:57:29,138 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:57:29,138 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:57:29,150 [main:106] - GETTING String from Int
2021-03-12 01:57:29,179 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:57:29,179 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:57:29,179 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:57:29,179 [main:117] - GENERATED CALL = (logged(2)).toInt().toString(B.get())
2021-03-12 01:57:29,179 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]]
2021-03-12 01:57:29,179 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:57:29,179 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]
2021-03-12 01:57:29,179 [main:117] - GENERATED CALL = (logged(2)).toChar().titlecase()
2021-03-12 01:57:29,179 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc0516]]
2021-03-12 01:57:29,180 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235]
2021-03-12 01:57:29,180 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc0516]
2021-03-12 01:57:29,180 [main:117] - GENERATED CALL = (logged(2)).toByte().toString(logged(1))
2021-03-12 01:57:29,180 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:57:29,180 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e]
2021-03-12 01:57:29,180 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:57:29,180 [main:117] - GENERATED CALL = (logged(2)).toLong().toString(B.get())
2021-03-12 01:57:29,180 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]]
2021-03-12 01:57:29,180 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60]
2021-03-12 01:57:29,180 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]
2021-03-12 01:57:29,180 [main:117] - GENERATED CALL = (logged(2)).toShort().toString(B.get())
2021-03-12 01:57:29,180 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:57:29,180 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:57:29,180 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:57:29,378 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:57:29,382 [main:117] - GENERATED CALL = (logged(2)).compareTo(A.x).toString(-1448027462)
2021-03-12 01:57:29,382 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a36c448]]
2021-03-12 01:57:29,382 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:57:29,382 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a36c448]
2021-03-12 01:57:29,382 [main:117] - GENERATED CALL = (logged(2)).toChar().lowercase()
2021-03-12 01:57:29,383 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]]
2021-03-12 01:57:29,383 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:57:29,383 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]
2021-03-12 01:57:29,383 [main:117] - GENERATED CALL = (logged(2)).toChar().uppercase()
2021-03-12 01:57:29,383 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6122df5e]]
2021-03-12 01:57:29,383 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:57:29,383 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6122df5e]
2021-03-12 01:57:29,383 [main:117] - GENERATED CALL = (logged(2)).toChar().plus(var log =
2021-03-12 01:57:29,383 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:57:29,383 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:57:29,535 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:57:29,539 [main:117] - GENERATED CALL = (logged(2)).toString(-771081658)
2021-03-12 01:57:29,539 [main:114] - replacement of "Wrong state-machine generated: it is finished early" of type String is (logged(2)).toString(-771081658)
2021-03-12 01:57:29,693 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:57:29,693 [main:66] - Compilation checking started
2021-03-12 01:57:30,371 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(3)).toLong().toString(logged(2))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((-966324777).toChar().uppercase() != "OK") return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged(2))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged(3)).toInt().toString(215217765)))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error((B.x).div(-88259072686648981).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if ((getA()).x.equals("hsfnz")) error((logged(2)).toString(-771081658))
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:57:30,375 [main:107] - replacing ("OK", String)
2021-03-12 01:57:30,375 [main:50] - replacing "OK" String
2021-03-12 01:57:30,375 [main:54] - Getting value of type String
2021-03-12 01:57:30,546 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:57:30,550 [main:58] - GENERATED VALUE OF TYPE String = "hpzdq"
2021-03-12 01:57:30,550 [main:61] - GENERATED IS CALL =false
2021-03-12 01:57:31,153 [main:67] - randomType = Pair<LinkedHashMap<ULong, B>, Kla0>
2021-03-12 01:57:31,307 [main:302] - generating value of type = Pair<LinkedHashMap<ULong, B>, Kla0> false depth = 0
2021-03-12 01:57:31,470 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: LinkedHashMap<ULong, B>, second: Kla0): Pair<LinkedHashMap<ULong, B>, Kla0> = TODO()
2021-03-12 01:57:31,475 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: LinkedHashMap<ULong, B>, second: Kla0): Pair<LinkedHashMap<ULong, B>, Kla0> = TODO()
2021-03-12 01:57:31,636 [main:302] - generating value of type = LinkedHashMap<ULong, B> false depth = 3
2021-03-12 01:57:31,798 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<ULong, B> = TODO()
2021-03-12 01:57:31,803 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<ULong, B> = TODO()
2021-03-12 01:57:31,966 [main:95] - GENERATED = linkedMapOf<ULong, B>()
2021-03-12 01:57:31,966 [main:302] - generating value of type = Kla0 false depth = 3
2021-03-12 01:57:31,970 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)
2021-03-12 01:57:32,125 [main:194] - Type params = []
2021-03-12 01:57:32,280 [main:302] - generating value of type = String true depth = 5
2021-03-12 01:57:32,284 [main:95] - GENERATED = Pair<LinkedHashMap<ULong, B>, Kla0>(linkedMapOf<ULong, B>(), Kla0("kfuct"))
2021-03-12 01:57:32,304 [main:78] - Generated call from random type = (Pair<LinkedHashMap<ULong, B>, Kla0>(linkedMapOf<ULong, B>(), Kla0("kfuct"))).second.s
2021-03-12 01:57:32,304 [main:106] - GETTING String from Int
2021-03-12 01:57:32,335 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6122df5e]]
2021-03-12 01:57:32,335 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:57:32,335 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6122df5e]
2021-03-12 01:57:32,335 [main:117] - GENERATED CALL = (B.x).toChar().plus(var log =
2021-03-12 01:57:32,335 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:57:32,335 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73]
2021-03-12 01:57:32,491 [main:302] - generating value of type = Long true depth = 0
2021-03-12 01:57:32,494 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:57:32,495 [main:117] - GENERATED CALL = (B.x).div(2436672904141685254).toString(logged(3))
2021-03-12 01:57:32,495 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]]
2021-03-12 01:57:32,495 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:57:32,495 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]
2021-03-12 01:57:32,495 [main:117] - GENERATED CALL = (B.x).toChar().titlecase()
2021-03-12 01:57:32,495 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:57:32,495 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e]
2021-03-12 01:57:32,495 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:57:32,495 [main:117] - GENERATED CALL = (B.x).toLong().toString(B.get())
2021-03-12 01:57:32,495 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]]
2021-03-12 01:57:32,495 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:57:32,495 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]
2021-03-12 01:57:32,495 [main:117] - GENERATED CALL = (B.x).toChar().uppercase()
2021-03-12 01:57:32,495 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a36c448]]
2021-03-12 01:57:32,495 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:57:32,496 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a36c448]
2021-03-12 01:57:32,496 [main:117] - GENERATED CALL = (B.x).toChar().lowercase()
2021-03-12 01:57:32,496 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:57:32,496 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:57:32,496 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:57:32,496 [main:117] - GENERATED CALL = (B.x).compareTo(logged(1)).toString(B.get())
2021-03-12 01:57:32,496 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:57:32,496 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:57:32,496 [main:117] - GENERATED CALL = (B.x).toString(B.x)
2021-03-12 01:57:32,496 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]]
2021-03-12 01:57:32,496 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60]
2021-03-12 01:57:32,496 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73f26488]
2021-03-12 01:57:32,656 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:57:32,660 [main:117] - GENERATED CALL = (B.x).toShort().toString(640137123)
2021-03-12 01:57:32,660 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:57:32,660 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:57:32,660 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:57:32,661 [main:117] - GENERATED CALL = (B.x).toInt().toString(logged(3))
2021-03-12 01:57:32,661 [main:114] - replacement of "OK" of type String is (B.x).toString(B.x)
2021-03-12 01:57:32,815 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:57:32,815 [main:66] - Compilation checking started
2021-03-12 01:57:33,472 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(3)).toLong().toString(logged(2))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((-966324777).toChar().uppercase() != (B.x).toString(B.x)) return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged(2))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged(3)).toInt().toString(215217765)))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } ?: error((B.x).div(-88259072686648981).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if ((getA()).x.equals("hsfnz")) error((logged(2)).toString(-771081658))
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:57:33,474 [main:107] - replacing (prope1, Continuation<Any>?)
2021-03-12 01:57:33,474 [main:50] - replacing prope1 Continuation<Any>?
2021-03-12 01:57:33,474 [main:54] - Getting value of type Continuation<Any>?
2021-03-12 01:57:33,630 [main:302] - generating value of type = Continuation<Any> false depth = 0
2021-03-12 01:57:33,793 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any>)->kotlin.Unit): Contuation<Any> = TODO()
2021-03-12 01:57:33,797 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any>)->kotlin.Unit): Contuation<Any> = TODO()
2021-03-12 01:57:34,337 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 01:57:34,499 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:57:34,504 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:57:34,905 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 01:57:35,071 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:57:35,076 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:57:35,616 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:57:35,616 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:57:35,616 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any>)->kotlin.Unit): Contuation<Any> = TODO()
2021-03-12 01:57:35,616 [main:58] - GENERATED VALUE OF TYPE Continuation<Any>? = 
2021-03-12 01:57:35,624 [main:67] - randomType = Byte
2021-03-12 01:57:35,781 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:57:35,815 [main:106] - GETTING Continuation<Any>? from UInt
2021-03-12 01:57:35,837 [main:106] - GETTING Continuation<Any>? from Int
2021-03-12 01:57:35,867 [main:106] - GETTING Continuation<Any>? from A
2021-03-12 01:57:35,872 [main:106] - GETTING Continuation<Any>? from B
2021-03-12 01:57:35,878 [main:106] - GETTING Continuation<Any>? from Int
2021-03-12 01:57:35,879 [main:106] - GETTING Continuation<Any>? from Int
2021-03-12 01:57:35,879 [main:106] - GETTING Continuation<Any>? from Int
2021-03-12 01:57:35,880 [main:106] - GETTING Continuation<Any>? from A
2021-03-12 01:57:35,881 [main:106] - GETTING Continuation<Any>? from B
2021-03-12 01:57:35,882 [main:106] - GETTING Continuation<Any>? from Int
2021-03-12 01:57:35,883 [main:106] - GETTING Continuation<Any>? from Int
2021-03-12 01:57:35,883 [main:111] - Cant find and generate replacement for prope1 type Continuation<Any>?
2021-03-12 01:57:35,883 [main:107] - replacing ({ it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true }, Function0<Boolean>)
2021-03-12 01:57:35,883 [main:50] - replacing { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } Function0<Boolean>
2021-03-12 01:57:35,883 [main:54] - Getting value of type Function0<Boolean>
2021-03-12 01:57:36,040 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-12 01:57:36,044 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 01:57:36,047 [main:58] - GENERATED VALUE OF TYPE Function0<Boolean> = { false}
2021-03-12 01:57:36,047 [main:61] - GENERATED IS CALL =false
2021-03-12 01:57:36,055 [main:67] - randomType = Float
2021-03-12 01:57:36,211 [main:302] - generating value of type = Float true depth = 0
2021-03-12 01:57:36,243 [main:106] - GETTING Function0<Boolean> from Int
2021-03-12 01:57:36,272 [main:106] - GETTING Function0<Boolean> from UInt
2021-03-12 01:57:36,294 [main:106] - GETTING Function0<Boolean> from Int
2021-03-12 01:57:36,295 [main:106] - GETTING Function0<Boolean> from Int
2021-03-12 01:57:36,296 [main:106] - GETTING Function0<Boolean> from B
2021-03-12 01:57:36,303 [main:106] - GETTING Function0<Boolean> from A
2021-03-12 01:57:36,307 [main:106] - GETTING Function0<Boolean> from Int
2021-03-12 01:57:36,308 [main:106] - GETTING Function0<Boolean> from Int
2021-03-12 01:57:36,309 [main:106] - GETTING Function0<Boolean> from B
2021-03-12 01:57:36,310 [main:106] - GETTING Function0<Boolean> from Int
2021-03-12 01:57:36,311 [main:106] - GETTING Function0<Boolean> from A
2021-03-12 01:57:36,311 [main:114] - replacement of { it?.methodName?.startsWith((logged<UInt>(1851723815.toUInt())).toUByte().toString(B.x)) == true } of type Function0<Boolean> is { false}
2021-03-12 01:57:36,467 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 01:57:36,467 [main:66] - Compilation checking started
2021-03-12 01:57:37,110 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(3)).toLong().toString(logged(2))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return fu4().s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((-966324777).toChar().uppercase() != (B.x).toString(B.x)) return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged(2))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged(3)).toInt().toString(215217765)))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { false} ?: error((B.x).div(-88259072686648981).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if ((getA()).x.equals("hsfnz")) error((logged(2)).toString(-771081658))
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:57:37,112 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 01:57:37,112 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 01:57:37,112 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 01:57:37,267 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 01:57:37,273 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 01:57:37,457 [main:67] - randomType = Kla8
2021-03-12 01:57:37,612 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-12 01:57:37,615 [main:112] - generating klass Kla8 text = object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}
2021-03-12 01:57:37,633 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 01:57:37,662 [main:106] - GETTING EmptyCoroutineContext from B
2021-03-12 01:57:37,668 [main:106] - GETTING EmptyCoroutineContext from UInt
2021-03-12 01:57:37,689 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 01:57:37,689 [main:106] - GETTING EmptyCoroutineContext from A
2021-03-12 01:57:37,694 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 01:57:37,694 [main:106] - GETTING EmptyCoroutineContext from B
2021-03-12 01:57:37,695 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 01:57:37,696 [main:106] - GETTING EmptyCoroutineContext from A
2021-03-12 01:57:37,696 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 01:57:37,697 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 01:57:37,697 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 01:57:37,697 [main:107] - replacing (it, Continuation<Ty0>)
2021-03-12 01:57:37,697 [main:50] - replacing it Continuation<Ty0>
2021-03-12 01:57:37,697 [main:54] - Getting value of type Continuation<Ty0>
2021-03-12 01:57:37,851 [main:302] - generating value of type = Continuation<Ty0> false depth = 0
2021-03-12 01:57:38,011 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Ty0>)->kotlin.Unit): Contuation<Ty0> = TODO()
2021-03-12 01:57:38,016 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Ty0>)->kotlin.Unit): Contuation<Ty0> = TODO()
2021-03-12 01:57:38,548 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 01:57:38,710 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:57:38,714 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:57:39,062 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 01:57:39,226 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:57:39,230 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:57:39,814 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:57:39,814 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:57:39,814 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Ty0>)->kotlin.Unit): Contuation<Ty0> = TODO()
2021-03-12 01:57:39,814 [main:58] - GENERATED VALUE OF TYPE Continuation<Ty0> = 
2021-03-12 01:57:39,821 [main:67] - randomType = Boolean
2021-03-12 01:57:39,977 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:57:39,990 [main:106] - GETTING Continuation<Ty0> from Int
2021-03-12 01:57:40,019 [main:106] - GETTING Continuation<Ty0> from Int
2021-03-12 01:57:40,020 [main:106] - GETTING Continuation<Ty0> from B
2021-03-12 01:57:40,027 [main:106] - GETTING Continuation<Ty0> from A
2021-03-12 01:57:40,032 [main:106] - GETTING Continuation<Ty0> from Int
2021-03-12 01:57:40,032 [main:106] - GETTING Continuation<Ty0> from Int
2021-03-12 01:57:40,033 [main:106] - GETTING Continuation<Ty0> from A
2021-03-12 01:57:40,034 [main:106] - GETTING Continuation<Ty0> from B
2021-03-12 01:57:40,035 [main:106] - GETTING Continuation<Ty0> from UInt
2021-03-12 01:57:40,058 [main:106] - GETTING Continuation<Ty0> from Int
2021-03-12 01:57:40,059 [main:106] - GETTING Continuation<Ty0> from Int
2021-03-12 01:57:40,059 [main:111] - Cant find and generate replacement for it type Continuation<Ty0>
2021-03-12 01:57:40,059 [main:107] - replacing (fu4(), Kla0)
2021-03-12 01:57:40,059 [main:50] - replacing fu4() Kla0
2021-03-12 01:57:40,059 [main:54] - Getting value of type Kla0
2021-03-12 01:57:40,213 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 01:57:40,217 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)
2021-03-12 01:57:40,373 [main:194] - Type params = []
2021-03-12 01:57:40,528 [main:302] - generating value of type = String true depth = 2
2021-03-12 01:57:40,531 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0("gizqi")
2021-03-12 01:57:40,531 [main:61] - GENERATED IS CALL =true
2021-03-12 01:57:40,546 [main:67] - randomType = Kla4
2021-03-12 01:57:40,701 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 01:57:40,704 [main:112] - generating klass Kla4 text = class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}
2021-03-12 01:57:40,719 [main:106] - GETTING Kla0 from UInt
2021-03-12 01:57:40,744 [main:106] - GETTING Kla0 from B
2021-03-12 01:57:40,750 [main:106] - GETTING Kla0 from A
2021-03-12 01:57:40,754 [main:106] - GETTING Kla0 from Int
2021-03-12 01:57:40,784 [main:106] - GETTING Kla0 from B
2021-03-12 01:57:40,785 [main:106] - GETTING Kla0 from Int
2021-03-12 01:57:40,785 [main:106] - GETTING Kla0 from Int
2021-03-12 01:57:40,786 [main:106] - GETTING Kla0 from Int
2021-03-12 01:57:40,786 [main:106] - GETTING Kla0 from Int
2021-03-12 01:57:40,787 [main:106] - GETTING Kla0 from A
2021-03-12 01:57:40,787 [main:106] - GETTING Kla0 from Int
2021-03-12 01:57:40,787 [main:114] - replacement of fu4() of type Kla0 is Kla0("gizqi")
2021-03-12 01:57:40,941 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 01:57:40,941 [main:66] - Compilation checking started
2021-03-12 01:57:41,635 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(3)).toLong().toString(logged(2))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return Kla0("gizqi").s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((-966324777).toChar().uppercase() != (B.x).toString(B.x)) return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged(2))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged(3)).toInt().toString(215217765)))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { false} ?: error((B.x).div(-88259072686648981).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if ((getA()).x.equals("hsfnz")) error((logged(2)).toString(-771081658))
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:57:41,804 [main:141] - TRYING TO REPLACE CONSTANT 3610657577449778905
2021-03-12 01:57:41,961 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 01:57:41,961 [main:66] - Compilation checking started
2021-03-12 01:57:42,402 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(3)).toLong().toString(logged(2))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return Kla0("gizqi").s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((-966324777).toChar().uppercase() != (B.x).toString(B.x)) return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged(2))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged(3)).toInt().toString(215217765)))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (toLong().toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { false} ?: error((B.x).div(-88259072686648981).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if ((getA()).x.equals("hsfnz")) error((logged(2)).toString(-771081658))
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:57:42,402 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-12 01:57:42,556 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BINARY_EXPRESSION)
2021-03-12 01:57:42,557 [main:66] - Compilation checking started
2021-03-12 01:57:43,007 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(3)).toLong().toString(logged(2))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return Kla0("gizqi").s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((-966324777).toChar().uppercase() != (B.x).toString(B.x)) return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged(2))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged(3)).toInt().toString(215217765)))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(prope9 != null) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { false} ?: error((B.x).div(-88259072686648981).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if ((getA()).x.equals("hsfnz")) error((logged(2)).toString(-771081658))
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:57:43,008 [main:141] - TRYING TO REPLACE CONSTANT 1
2021-03-12 01:57:43,160 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-12 01:57:43,161 [main:66] - Compilation checking started
2021-03-12 01:57:43,609 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(3)).toLong().toString(logged(2))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return Kla0("gizqi").s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(x)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((-966324777).toChar().uppercase() != (B.x).toString(B.x)) return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged(2))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged(3)).toInt().toString(215217765)))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { false} ?: error((B.x).div(-88259072686648981).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if ((getA()).x.equals("hsfnz")) error((logged(2)).toString(-771081658))
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:57:43,610 [main:141] - TRYING TO REPLACE CONSTANT 4534054416181813181
2021-03-12 01:57:43,765 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 01:57:43,765 [main:66] - Compilation checking started
2021-03-12 01:57:44,210 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(3)).toLong().toString(logged(2))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return Kla0("gizqi").s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(div(-88259072686648981)).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((-966324777).toChar().uppercase() != (B.x).toString(B.x)) return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged(2))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged(3)).toInt().toString(215217765)))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(3))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { false} ?: error((B.x).div(-88259072686648981).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if ((getA()).x.equals("hsfnz")) error((logged(2)).toString(-771081658))
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:57:44,211 [main:141] - TRYING TO REPLACE CONSTANT 3
2021-03-12 01:57:44,366 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 01:57:44,367 [main:66] - Compilation checking started
2021-03-12 01:57:45,063 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(3)).toLong().toString(logged(2))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return Kla0("gizqi").s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((-966324777).toChar().uppercase() != (B.x).toString(B.x)) return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged(2))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged(3)).toInt().toString(215217765)))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(logged(3)))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(847668034))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { false} ?: error((B.x).div(-88259072686648981).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if ((getA()).x.equals("hsfnz")) error((logged(2)).toString(-771081658))
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:57:45,063 [main:141] - TRYING TO REPLACE CONSTANT 847668034
2021-03-12 01:57:45,227 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 01:57:45,228 [main:66] - Compilation checking started
2021-03-12 01:57:45,868 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(3)).toLong().toString(logged(2))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return Kla0("gizqi").s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((-966324777).toChar().uppercase() != (B.x).toString(B.x)) return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged(2))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged(3)).toInt().toString(215217765)))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString(-113669981)) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(logged(3)))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(42))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { false} ?: error((B.x).div(-88259072686648981).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if ((getA()).x.equals("hsfnz")) error((logged(2)).toString(-771081658))
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:57:45,868 [main:141] - TRYING TO REPLACE CONSTANT 113669981
2021-03-12 01:57:46,031 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:57:46,031 [main:66] - Compilation checking started
2021-03-12 01:57:46,681 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(3)).toLong().toString(logged(2))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return Kla0("gizqi").s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((-966324777).toChar().uppercase() != (B.x).toString(B.x)) return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged(2))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged(3)).toInt().toString(215217765)))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString((logged(2)).toByte().div(42))) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(logged(3)))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(42))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { false} ?: error((B.x).div(-88259072686648981).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if ((getA()).x.equals("hsfnz")) error((logged(2)).toString(-771081658))
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:57:46,681 [main:141] - TRYING TO REPLACE CONSTANT 1
2021-03-12 01:57:46,840 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-12 01:57:46,840 [main:66] - Compilation checking started
2021-03-12 01:57:47,285 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(3)).toLong().toString(logged(2))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return Kla0("gizqi").s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((-966324777).toChar().uppercase() != (B.x).toString(B.x)) return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged(2))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged(3)).toInt().toString(215217765)))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(actual)).div(-4931299584051357143).toString((logged(2)).toByte().div(42))) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(logged(3)))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(42))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { false} ?: error((B.x).div(-88259072686648981).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if ((getA()).x.equals("hsfnz")) error((logged(2)).toString(-771081658))
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:57:47,286 [main:141] - TRYING TO REPLACE CONSTANT 4931299584051357143
2021-03-12 01:57:47,438 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 01:57:47,439 [main:66] - Compilation checking started
2021-03-12 01:57:47,892 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(3)).toLong().toString(logged(2))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return Kla0("gizqi").s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((-966324777).toChar().uppercase() != (B.x).toString(B.x)) return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged(2))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged(3)).toInt().toString(215217765)))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(toLong()).toString((logged(2)).toByte().div(42))) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(logged(3)))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(42))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { false} ?: error((B.x).div(-88259072686648981).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus('')..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if ((getA()).x.equals("hsfnz")) error((logged(2)).toString(-771081658))
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:57:47,893 [main:141] - TRYING TO REPLACE CONSTANT ''
2021-03-12 01:57:48,049 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:57:48,050 [main:66] - Compilation checking started
2021-03-12 01:57:48,695 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(3)).toLong().toString(logged(2))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return Kla0("gizqi").s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((-966324777).toChar().uppercase() != (B.x).toString(B.x)) return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged(2))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged(3)).toInt().toString(215217765)))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString((logged(2)).toByte().div(42))) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(logged(3)))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(42))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { false} ?: error((B.x).div(-88259072686648981).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged(2)).toChar().minus((logged(2)).toChar())..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if ((getA()).x.equals("hsfnz")) error((logged(2)).toString(-771081658))
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:57:48,696 [main:141] - TRYING TO REPLACE CONSTANT 2
2021-03-12 01:57:48,852 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:57:48,852 [main:66] - Compilation checking started
2021-03-12 01:57:49,507 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(3)).toLong().toString(logged(2))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return Kla0("gizqi").s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((-966324777).toChar().uppercase() != (B.x).toString(B.x)) return "FAIL 1 $(logged(2)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged(2))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged(3)).toInt().toString(215217765)))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString((logged(2)).toByte().div(42))) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(logged(3)))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(42))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { false} ?: error((B.x).div(-88259072686648981).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged((logged(2)).toByte().div(42))).toChar().minus((logged(2)).toChar())..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if ((getA()).x.equals("hsfnz")) error((logged(2)).toString(-771081658))
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:57:49,507 [main:141] - TRYING TO REPLACE CONSTANT 2
2021-03-12 01:57:49,666 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-12 01:57:49,666 [main:66] - Compilation checking started
2021-03-12 01:57:50,351 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(3)).toLong().toString(logged(2))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return Kla0("gizqi").s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((-966324777).toChar().uppercase() != (B.x).toString(B.x)) return "FAIL 1 $(logged(expected)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged(2))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged(3)).toInt().toString(215217765)))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString((logged(2)).toByte().div(42))) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(logged(3)))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(42))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { false} ?: error((B.x).div(-88259072686648981).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(42)
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged((logged(2)).toByte().div(42))).toChar().minus((logged(2)).toChar())..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if ((getA()).x.equals("hsfnz")) error((logged(2)).toString(-771081658))
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:57:50,352 [main:141] - TRYING TO REPLACE CONSTANT 42
2021-03-12 01:57:50,515 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 01:57:50,515 [main:66] - Compilation checking started
2021-03-12 01:57:51,158 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(3)).toLong().toString(logged(2))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return Kla0("gizqi").s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((-966324777).toChar().uppercase() != (B.x).toString(B.x)) return "FAIL 1 $(logged(expected)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged(2))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged(3)).toInt().toString(215217765)))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString((logged(2)).toByte().div(42))) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(logged(3)))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(42))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { false} ?: error((B.x).div(-88259072686648981).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(2)).toByte().div(logged(1))
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged((logged(2)).toByte().div(42))).toChar().minus((logged(2)).toChar())..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if ((getA()).x.equals("hsfnz")) error((logged(2)).toString(-771081658))
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:57:51,159 [main:141] - TRYING TO REPLACE CONSTANT 2
2021-03-12 01:57:51,315 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 01:57:51,315 [main:66] - Compilation checking started
2021-03-12 01:57:51,965 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(3)).toLong().toString(logged(2))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return Kla0("gizqi").s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((-966324777).toChar().uppercase() != (B.x).toString(B.x)) return "FAIL 1 $(logged(expected)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged(2))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged(3)).toInt().toString(215217765)))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString((logged(2)).toByte().div(42))) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(logged(3)))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(42))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { false} ?: error((B.x).div(-88259072686648981).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(logged(1))).toByte().div(logged(1))
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged((logged(2)).toByte().div(42))).toChar().minus((logged(2)).toChar())..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if ((getA()).x.equals("hsfnz")) error((logged(2)).toString(-771081658))
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:57:51,965 [main:141] - TRYING TO REPLACE CONSTANT 1431951966
2021-03-12 01:57:52,126 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:57:52,126 [main:66] - Compilation checking started
2021-03-12 01:57:52,591 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(3)).toLong().toString(logged(2))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged(2)).div(-9046869770485497896).toString(field.also { log += "get-A.x;" })
    }

    suspend fun fu6(): String {
        var log = ""
return Kla0("gizqi").s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((-966324777).toChar().uppercase() != (B.x).toString(B.x)) return "FAIL 1 $(logged(expected)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged(2))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged(3)).toInt().toString(215217765)))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString((logged(2)).toByte().div(42))) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(logged(3)))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(42))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { false} ?: error((B.x).div(-88259072686648981).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(logged(1))).toByte().div(logged(1))
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged((logged(2)).toByte().div(42))).toChar().minus((logged(2)).toChar())..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if ((getA()).x.equals("hsfnz")) error((logged(2)).toString(-771081658))
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:57:52,591 [main:141] - TRYING TO REPLACE CONSTANT 2
2021-03-12 01:57:52,748 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:57:52,749 [main:66] - Compilation checking started
2021-03-12 01:57:53,401 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(3)).toLong().toString(logged(2))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged((ArrayDeque<UInt>(UIntArray(1513099087))).size)).div(-9046869770485497896).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return Kla0("gizqi").s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((-966324777).toChar().uppercase() != (B.x).toString(B.x)) return "FAIL 1 $(logged(expected)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged(2))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged(3)).toInt().toString(215217765)))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString((logged(2)).toByte().div(42))) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(logged(3)))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(42))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { false} ?: error((B.x).div(-88259072686648981).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(logged(1))).toByte().div(logged(1))
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged((logged(2)).toByte().div(42))).toChar().minus((logged(2)).toChar())..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if ((getA()).x.equals("hsfnz")) error((logged(2)).toString(-771081658))
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:57:53,401 [main:141] - TRYING TO REPLACE CONSTANT 9046869770485497896
2021-03-12 01:57:53,568 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 01:57:53,569 [main:66] - Compilation checking started
2021-03-12 01:57:54,219 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(3)).toLong().toString(logged(2))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged((ArrayDeque<UInt>(UIntArray(1513099087))).size)).div(-4534054416181813181).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return Kla0("gizqi").s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((-966324777).toChar().uppercase() != (B.x).toString(B.x)) return "FAIL 1 $(logged(expected)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged(2))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged(3)).toInt().toString(215217765)))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(2)) != (logged(1)).div(-4931299584051357143).toString((logged(2)).toByte().div(42))) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(logged(3)))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(42))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { false} ?: error((B.x).div(-88259072686648981).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(logged(1))).toByte().div(logged(1))
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged((logged(2)).toByte().div(42))).toChar().minus((logged(2)).toChar())..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if ((getA()).x.equals("hsfnz")) error((logged(2)).toString(-771081658))
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:57:54,220 [main:141] - TRYING TO REPLACE CONSTANT 2
2021-03-12 01:57:54,378 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 01:57:54,378 [main:66] - Compilation checking started
2021-03-12 01:57:55,040 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(3)).toLong().toString(logged(2))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged((ArrayDeque<UInt>(UIntArray(1513099087))).size)).div(-4534054416181813181).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return Kla0("gizqi").s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((-966324777).toChar().uppercase() != (B.x).toString(B.x)) return "FAIL 1 $(logged(expected)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged(2))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged(3)).toInt().toString(215217765)))
    if ((ArrayDeque<UInt>(UIntArray(1513099087))).size.toString(logged(logged(2))) != (logged(1)).div(-4931299584051357143).toString((logged(2)).toByte().div(42))) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(logged(3)))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(42))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { false} ?: error((B.x).div(-88259072686648981).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(logged(1))).toByte().div(logged(1))
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged((logged(2)).toByte().div(42))).toChar().minus((logged(2)).toChar())..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if ((getA()).x.equals("hsfnz")) error((logged(2)).toString(-771081658))
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:57:55,041 [main:141] - TRYING TO REPLACE CONSTANT 1513099087
2021-03-12 01:57:55,199 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 01:57:55,200 [main:66] - Compilation checking started
2021-03-12 01:57:55,883 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(3)).toLong().toString(logged(2))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged((ArrayDeque<UInt>(UIntArray(1513099087))).size)).div(-4534054416181813181).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return Kla0("gizqi").s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((-966324777).toChar().uppercase() != (B.x).toString(B.x)) return "FAIL 1 $(logged(expected)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged(2))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged(3)).toInt().toString(215217765)))
    if ((ArrayDeque<UInt>(UIntArray(logged(3)))).size.toString(logged(logged(2))) != (logged(1)).div(-4931299584051357143).toString((logged(2)).toByte().div(42))) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(logged(3)))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(42))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { false} ?: error((B.x).div(-88259072686648981).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(logged(1))).toByte().div(logged(1))
        prope6 = (getB()).equals(null).and(true)
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged((logged(2)).toByte().div(42))).toChar().minus((logged(2)).toChar())..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if ((getA()).x.equals("hsfnz")) error((logged(2)).toString(-771081658))
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:57:55,883 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-12 01:57:56,042 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:57:56,042 [main:66] - Compilation checking started
2021-03-12 01:57:56,698 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(3)).toLong().toString(logged(2))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged((ArrayDeque<UInt>(UIntArray(1513099087))).size)).div(-4534054416181813181).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return Kla0("gizqi").s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((-966324777).toChar().uppercase() != (B.x).toString(B.x)) return "FAIL 1 $(logged(expected)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged(2))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged(3)).toInt().toString(215217765)))
    if ((ArrayDeque<UInt>(UIntArray(logged(3)))).size.toString(logged(logged(2))) != (logged(1)).div(-4931299584051357143).toString((logged(2)).toByte().div(42))) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(logged(3)))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged(1)) + prope1 + (getB()).x.toString(42))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { false} ?: error((B.x).div(-88259072686648981).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(logged(1))).toByte().div(logged(1))
        prope6 = (getB()).equals(null).and((getA()).x.equals("hsfnz"))
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged((logged(2)).toByte().div(42))).toChar().minus((logged(2)).toChar())..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if ((getA()).x.equals("hsfnz")) error((logged(2)).toString(-771081658))
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:57:56,698 [main:141] - TRYING TO REPLACE CONSTANT null
2021-03-12 01:57:56,858 [main:33] - Trying to replace Element(NULL) on Element(NULL)
2021-03-12 01:57:56,858 [main:141] - TRYING TO REPLACE CONSTANT 1
2021-03-12 01:57:57,017 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PARENTHESIZED)
2021-03-12 01:57:57,017 [main:66] - Compilation checking started
2021-03-12 01:57:57,687 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(3)).toLong().toString(logged(2))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged((ArrayDeque<UInt>(UIntArray(1513099087))).size)).div(-4534054416181813181).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return Kla0("gizqi").s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((-966324777).toChar().uppercase() != (B.x).toString(B.x)) return "FAIL 1 $(logged(expected)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged(2))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged(3)).toInt().toString(215217765)))
    if ((ArrayDeque<UInt>(UIntArray(logged(3)))).size.toString(logged(logged(2))) != (logged(1)).div(-4931299584051357143).toString((logged(2)).toByte().div(42))) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(logged(3)))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged((A.x))) + prope1 + (getB()).x.toString(42))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { false} ?: error((B.x).div(-88259072686648981).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(logged(1))).toByte().div(logged(1))
        prope6 = (getB()).equals(null).and((getA()).x.equals("hsfnz"))
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged((logged(2)).toByte().div(42))).toChar().minus((logged(2)).toChar())..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(1)) + prope5)
        if ((getA()).x.equals("hsfnz")) error((logged(2)).toString(-771081658))
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:57:57,687 [main:141] - TRYING TO REPLACE CONSTANT 1
2021-03-12 01:57:57,848 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-12 01:57:57,849 [main:66] - Compilation checking started
2021-03-12 01:57:58,494 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(3)).toLong().toString(logged(2))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged((ArrayDeque<UInt>(UIntArray(1513099087))).size)).div(-4534054416181813181).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return Kla0("gizqi").s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((-966324777).toChar().uppercase() != (B.x).toString(B.x)) return "FAIL 1 $(logged(expected)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged(2))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged(3)).toInt().toString(215217765)))
    if ((ArrayDeque<UInt>(UIntArray(logged(3)))).size.toString(logged(logged(2))) != (logged(1)).div(-4931299584051357143).toString((logged(2)).toByte().div(42))) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(logged(3)))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged((A.x))) + prope1 + (getB()).x.toString(42))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { false} ?: error((B.x).div(-88259072686648981).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(logged(1))).toByte().div(logged(1))
        prope6 = (getB()).equals(null).and((getA()).x.equals("hsfnz"))
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged((logged(2)).toByte().div(42))).toChar().minus((logged(2)).toChar())..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(-113669981)) + prope5)
        if ((getA()).x.equals("hsfnz")) error((logged(2)).toString(-771081658))
        prope7()
        if (checkFinished && (logged<UInt>(1851723815.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:57:58,495 [main:141] - TRYING TO REPLACE CONSTANT 1851723815
2021-03-12 01:57:58,654 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 01:57:58,654 [main:66] - Compilation checking started
2021-03-12 01:57:59,298 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(3)).toLong().toString(logged(2))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged((ArrayDeque<UInt>(UIntArray(1513099087))).size)).div(-4534054416181813181).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return Kla0("gizqi").s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((-966324777).toChar().uppercase() != (B.x).toString(B.x)) return "FAIL 1 $(logged(expected)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged(2))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged(3)).toInt().toString(215217765)))
    if ((ArrayDeque<UInt>(UIntArray(logged(3)))).size.toString(logged(logged(2))) != (logged(1)).div(-4931299584051357143).toString((logged(2)).toByte().div(42))) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(logged(3)))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged((A.x))) + prope1 + (getB()).x.toString(42))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { false} ?: error((B.x).div(-88259072686648981).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(logged(1))).toByte().div(logged(1))
        prope6 = (getB()).equals(null).and((getA()).x.equals("hsfnz"))
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged((logged(2)).toByte().div(42))).toChar().minus((logged(2)).toChar())..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(-113669981)) + prope5)
        if ((getA()).x.equals("hsfnz")) error((logged(2)).toString(-771081658))
        prope7()
        if (checkFinished && (logged<UInt>(3.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:57:59,299 [main:141] - TRYING TO REPLACE CONSTANT 88259072686648981
2021-03-12 01:57:59,460 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:57:59,461 [main:66] - Compilation checking started
2021-03-12 01:58:00,126 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(3)).toLong().toString(logged(2))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged((ArrayDeque<UInt>(UIntArray(1513099087))).size)).div(-4534054416181813181).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return Kla0("gizqi").s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((-966324777).toChar().uppercase() != (B.x).toString(B.x)) return "FAIL 1 $(logged(expected)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged(2))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged(3)).toInt().toString(215217765)))
    if ((ArrayDeque<UInt>(UIntArray(logged(3)))).size.toString(logged(logged(2))) != (logged(1)).div(-4931299584051357143).toString((logged(2)).toByte().div(42))) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(logged(3)))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged((A.x))) + prope1 + (getB()).x.toString(42))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { false} ?: error((B.x).div((logged(1)).div(-4534054416181813181)).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(logged(1))).toByte().div(logged(1))
        prope6 = (getB()).equals(null).and((getA()).x.equals("hsfnz"))
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged((logged(2)).toByte().div(42))).toChar().minus((logged(2)).toChar())..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(-113669981)) + prope5)
        if ((getA()).x.equals("hsfnz")) error((logged(2)).toString(-771081658))
        prope7()
        if (checkFinished && (logged<UInt>(3.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:58:00,127 [main:141] - TRYING TO REPLACE CONSTANT 2
2021-03-12 01:58:00,288 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PARENTHESIZED)
2021-03-12 01:58:00,288 [main:66] - Compilation checking started
2021-03-12 01:58:00,949 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(3)).toLong().toString(logged(2))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged((ArrayDeque<UInt>(UIntArray(1513099087))).size)).div(-4534054416181813181).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return Kla0("gizqi").s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((-966324777).toChar().uppercase() != (B.x).toString(B.x)) return "FAIL 1 $(logged(expected)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged((A.x)))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged(3)).toInt().toString(215217765)))
    if ((ArrayDeque<UInt>(UIntArray(logged(3)))).size.toString(logged(logged(2))) != (logged(1)).div(-4931299584051357143).toString((logged(2)).toByte().div(42))) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(logged(3)))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged((A.x))) + prope1 + (getB()).x.toString(42))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { false} ?: error((B.x).div((logged(1)).div(-4534054416181813181)).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(logged(1))).toByte().div(logged(1))
        prope6 = (getB()).equals(null).and((getA()).x.equals("hsfnz"))
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged((logged(2)).toByte().div(42))).toChar().minus((logged(2)).toChar())..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(-113669981)) + prope5)
        if ((getA()).x.equals("hsfnz")) error((logged(2)).toString(-771081658))
        prope7()
        if (checkFinished && (logged<UInt>(3.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:58:00,949 [main:141] - TRYING TO REPLACE CONSTANT 215217765
2021-03-12 01:58:01,113 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 01:58:01,114 [main:66] - Compilation checking started
2021-03-12 01:58:01,800 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(3)).toLong().toString(logged(2))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged((ArrayDeque<UInt>(UIntArray(1513099087))).size)).div(-4534054416181813181).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return Kla0("gizqi").s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((-966324777).toChar().uppercase() != (B.x).toString(B.x)) return "FAIL 1 $(logged(expected)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged((A.x)))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged(3)).toInt().toString(1)))
    if ((ArrayDeque<UInt>(UIntArray(logged(3)))).size.toString(logged(logged(2))) != (logged(1)).div(-4931299584051357143).toString((logged(2)).toByte().div(42))) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(logged(3)))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged((A.x))) + prope1 + (getB()).x.toString(42))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { false} ?: error((B.x).div((logged(1)).div(-4534054416181813181)).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(logged(1))).toByte().div(logged(1))
        prope6 = (getB()).equals(null).and((getA()).x.equals("hsfnz"))
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged((logged(2)).toByte().div(42))).toChar().minus((logged(2)).toChar())..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(-113669981)) + prope5)
        if ((getA()).x.equals("hsfnz")) error((logged(2)).toString(-771081658))
        prope7()
        if (checkFinished && (logged<UInt>(3.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:58:01,800 [main:141] - TRYING TO REPLACE CONSTANT 3
2021-03-12 01:58:01,970 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:58:01,970 [main:66] - Compilation checking started
2021-03-12 01:58:02,610 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(3)).toLong().toString(logged(2))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged((ArrayDeque<UInt>(UIntArray(1513099087))).size)).div(-4534054416181813181).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return Kla0("gizqi").s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((-966324777).toChar().uppercase() != (B.x).toString(B.x)) return "FAIL 1 $(logged(expected)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged((A.x)))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged((getA()).x)).toInt().toString(1)))
    if ((ArrayDeque<UInt>(UIntArray(logged(3)))).size.toString(logged(logged(2))) != (logged(1)).div(-4931299584051357143).toString((logged(2)).toByte().div(42))) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(logged(3)))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged((A.x))) + prope1 + (getB()).x.toString(42))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { false} ?: error((B.x).div((logged(1)).div(-4534054416181813181)).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(logged(1))).toByte().div(logged(1))
        prope6 = (getB()).equals(null).and((getA()).x.equals("hsfnz"))
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged((logged(2)).toByte().div(42))).toChar().minus((logged(2)).toChar())..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(-113669981)) + prope5)
        if ((getA()).x.equals("hsfnz")) error((logged(2)).toString(-771081658))
        prope7()
        if (checkFinished && (logged<UInt>(3.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:58:02,610 [main:141] - TRYING TO REPLACE CONSTANT 3
2021-03-12 01:58:02,771 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:58:02,772 [main:66] - Compilation checking started
2021-03-12 01:58:03,442 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(B.x)).toLong().toString(logged(2))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged((ArrayDeque<UInt>(UIntArray(1513099087))).size)).div(-4534054416181813181).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return Kla0("gizqi").s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((-966324777).toChar().uppercase() != (B.x).toString(B.x)) return "FAIL 1 $(logged(expected)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged((A.x)))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged((getA()).x)).toInt().toString(1)))
    if ((ArrayDeque<UInt>(UIntArray(logged(3)))).size.toString(logged(logged(2))) != (logged(1)).div(-4931299584051357143).toString((logged(2)).toByte().div(42))) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(logged(3)))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged((A.x))) + prope1 + (getB()).x.toString(42))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { false} ?: error((B.x).div((logged(1)).div(-4534054416181813181)).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(logged(1))).toByte().div(logged(1))
        prope6 = (getB()).equals(null).and((getA()).x.equals("hsfnz"))
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged((logged(2)).toByte().div(42))).toChar().minus((logged(2)).toChar())..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(-113669981)) + prope5)
        if ((getA()).x.equals("hsfnz")) error((logged(2)).toString(-771081658))
        prope7()
        if (checkFinished && (logged<UInt>(3.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:58:03,443 [main:141] - TRYING TO REPLACE CONSTANT 2
2021-03-12 01:58:03,601 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PARENTHESIZED)
2021-03-12 01:58:03,602 [main:66] - Compilation checking started
2021-03-12 01:58:04,257 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(B.x)).toLong().toString(logged((logged(1))))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged((ArrayDeque<UInt>(UIntArray(1513099087))).size)).div(-4534054416181813181).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return Kla0("gizqi").s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((-966324777).toChar().uppercase() != (B.x).toString(B.x)) return "FAIL 1 $(logged(expected)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged((A.x)))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged((getA()).x)).toInt().toString(1)))
    if ((ArrayDeque<UInt>(UIntArray(logged(3)))).size.toString(logged(logged(2))) != (logged(1)).div(-4931299584051357143).toString((logged(2)).toByte().div(42))) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(logged(3)))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged((A.x))) + prope1 + (getB()).x.toString(42))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { false} ?: error((B.x).div((logged(1)).div(-4534054416181813181)).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(logged(1))).toByte().div(logged(1))
        prope6 = (getB()).equals(null).and((getA()).x.equals("hsfnz"))
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged((logged(2)).toByte().div(42))).toChar().minus((logged(2)).toChar())..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(-113669981)) + prope5)
        if ((getA()).x.equals("hsfnz")) error((logged(2)).toString(-771081658))
        prope7()
        if (checkFinished && (logged<UInt>(3.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:58:04,258 [main:141] - TRYING TO REPLACE CONSTANT 966324777
2021-03-12 01:58:04,418 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 01:58:04,418 [main:66] - Compilation checking started
2021-03-12 01:58:05,099 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(B.x)).toLong().toString(logged((logged(1))))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged((ArrayDeque<UInt>(UIntArray(1513099087))).size)).div(-4534054416181813181).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return Kla0("gizqi").s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((logged((logged(2)).toByte().div(42))).toChar().uppercase() != (B.x).toString(B.x)) return "FAIL 1 $(logged(expected)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged((A.x)))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged((getA()).x)).toInt().toString(1)))
    if ((ArrayDeque<UInt>(UIntArray(logged(3)))).size.toString(logged(logged(2))) != (logged(1)).div(-4931299584051357143).toString((logged(2)).toByte().div(42))) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(logged(3)))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged((A.x))) + prope1 + (getB()).x.toString(42))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { false} ?: error((B.x).div((logged(1)).div(-4534054416181813181)).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(logged(1))).toByte().div(logged(1))
        prope6 = (getB()).equals(null).and((getA()).x.equals("hsfnz"))
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged((logged(2)).toByte().div(42))).toChar().minus((logged(2)).toChar())..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(-113669981)) + prope5)
        if ((getA()).x.equals("hsfnz")) error((logged(2)).toString(-771081658))
        prope7()
        if (checkFinished && (logged<UInt>(3.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:58:05,099 [main:141] - TRYING TO REPLACE CONSTANT 2
2021-03-12 01:58:05,267 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:58:05,267 [main:66] - Compilation checking started
2021-03-12 01:58:05,925 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(B.x)).toLong().toString(logged((logged(1))))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged((ArrayDeque<UInt>(UIntArray(1513099087))).size)).div(-4534054416181813181).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return Kla0("gizqi").s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((logged((logged(2)).toByte().div(42))).toChar().uppercase() != (B.x).toString(B.x)) return "FAIL 1 $(logged(expected)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged((A.x)))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged((getA()).x)).toInt().toString(1)))
    if ((ArrayDeque<UInt>(UIntArray(logged(3)))).size.toString(logged(logged(2))) != (logged(1)).div(-4931299584051357143).toString((logged(2)).toByte().div(42))) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(logged(3)))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged((A.x))) + prope1 + (getB()).x.toString(42))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { false} ?: error((B.x).div((logged(1)).div(-4534054416181813181)).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(logged(1))).toByte().div(logged(1))
        prope6 = (getB()).equals(null).and((getA()).x.equals("hsfnz"))
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged((logged(2)).toByte().div(42))).toChar().minus((logged(2)).toChar())..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(-113669981)) + prope5)
        if ((getA()).x.equals("hsfnz")) error((logged((getA()).x)).toString(-771081658))
        prope7()
        if (checkFinished && (logged<UInt>(3.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:58:05,925 [main:141] - TRYING TO REPLACE CONSTANT 771081658
2021-03-12 01:58:06,087 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 01:58:06,087 [main:66] - Compilation checking started
2021-03-12 01:58:06,797 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(B.x)).toLong().toString(logged((logged(1))))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged((ArrayDeque<UInt>(UIntArray(1513099087))).size)).div(-4534054416181813181).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return Kla0("gizqi").s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((logged((logged(2)).toByte().div(42))).toChar().uppercase() != (B.x).toString(B.x)) return "FAIL 1 $(logged(expected)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged((A.x)))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged((getA()).x)).toInt().toString(1)))
    if ((ArrayDeque<UInt>(UIntArray(logged(3)))).size.toString(logged(logged(2))) != (logged(1)).div(-4931299584051357143).toString((logged(2)).toByte().div(42))) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(logged(3)))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged((A.x))) + prope1 + (getB()).x.toString(42))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { false} ?: error((B.x).div((logged(1)).div(-4534054416181813181)).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(logged(1))).toByte().div(logged(1))
        prope6 = (getB()).equals(null).and((getA()).x.equals("hsfnz"))
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged((logged(2)).toByte().div(42))).toChar().minus((logged(2)).toChar())..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(-113669981)) + prope5)
        if ((getA()).x.equals("hsfnz")) error((logged((getA()).x)).toString(logged((logged(1)))))
        prope7()
        if (checkFinished && (logged<UInt>(3.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:58:06,798 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-12 01:58:06,958 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BINARY_EXPRESSION)
2021-03-12 01:58:06,958 [main:66] - Compilation checking started
2021-03-12 01:58:07,642 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(B.x)).toLong().toString(logged((logged(1))))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged((ArrayDeque<UInt>(UIntArray(1513099087))).size)).div(-4534054416181813181).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return Kla0("gizqi").s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((logged((logged(2)).toByte().div(42))).toChar().uppercase() != (B.x).toString(B.x)) return "FAIL 1 $(logged(expected)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged((A.x)))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged((getA()).x)).toInt().toString(1)))
    if ((ArrayDeque<UInt>(UIntArray(logged(3)))).size.toString(logged(logged(2))) != (logged(1)).div(-4931299584051357143).toString((logged(2)).toByte().div(42))) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(logged(3)))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged((A.x))) + prope1 + (getB()).x.toString(42))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { (ArrayDeque<UInt>(UIntArray(logged(3)))).size.toString(logged(logged(2))) != (logged(1)).div(-4931299584051357143).toString((logged(2)).toByte().div(42))} ?: error((B.x).div((logged(1)).div(-4534054416181813181)).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(logged(1))).toByte().div(logged(1))
        prope6 = (getB()).equals(null).and((getA()).x.equals("hsfnz"))
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged((logged(2)).toByte().div(42))).toChar().minus((logged(2)).toChar())..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(-113669981)) + prope5)
        if ((getA()).x.equals("hsfnz")) error((logged((getA()).x)).toString(logged((logged(1)))))
        prope7()
        if (checkFinished && (logged<UInt>(3.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:58:07,643 [main:41] - AFTER TRY 1 res = 
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(B.x)).toLong().toString(logged((logged(1))))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged((ArrayDeque<UInt>(UIntArray(1513099087))).size)).div(-4534054416181813181).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return Kla0("gizqi").s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((logged((logged(2)).toByte().div(42))).toChar().uppercase() != (B.x).toString(B.x)) return "FAIL 1 $(logged(expected)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged((A.x)))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged((getA()).x)).toInt().toString(1)))
    if ((ArrayDeque<UInt>(UIntArray(logged(3)))).size.toString(logged(logged(2))) != (logged(1)).div(-4931299584051357143).toString((logged(2)).toByte().div(42))) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(logged(3)))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged((A.x))) + prope1 + (getB()).x.toString(42))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { (ArrayDeque<UInt>(UIntArray(logged(3)))).size.toString(logged(logged(2))) != (logged(1)).div(-4931299584051357143).toString((logged(2)).toByte().div(42))} ?: error((B.x).div((logged(1)).div(-4534054416181813181)).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(logged(1))).toByte().div(logged(1))
        prope6 = (getB()).equals(null).and((getA()).x.equals("hsfnz"))
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged((logged(2)).toByte().div(42))).toChar().minus((logged(2)).toChar())..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(-113669981)) + prope5)
        if ((getA()).x.equals("hsfnz")) error((logged((getA()).x)).toString(logged((logged(1)))))
        prope7()
        if (checkFinished && (logged<UInt>(3.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}


2021-03-12 01:58:07,978 [main:112] - generating klass A text = object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}
2021-03-12 01:58:07,979 [main:112] - generating klass B text = object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}
2021-03-12 01:58:07,979 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)
2021-03-12 01:58:08,144 [main:194] - Type params = []
2021-03-12 01:58:08,309 [main:302] - generating value of type = String true depth = 1
2021-03-12 01:58:08,313 [main:112] - generating klass Kla1 text = interface Kla1 {
    suspend fun fu4(): Kla0?
}
2021-03-12 01:58:08,659 [main:302] - generating value of type = Kla2 false depth = 1
2021-03-12 01:58:08,663 [main:112] - generating klass Kla2 text = class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged((ArrayDeque<UInt>(UIntArray(1513099087))).size)).div(-4534054416181813181).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return Kla0("gizqi").s
    }
}
2021-03-12 01:58:08,830 [main:194] - Type params = []
2021-03-12 01:58:08,996 [main:112] - generating klass Kla2 text = class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged((ArrayDeque<UInt>(UIntArray(1513099087))).size)).div(-4534054416181813181).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return Kla0("gizqi").s
    }
}
2021-03-12 01:58:09,162 [main:194] - Type params = []
2021-03-12 01:58:09,329 [main:112] - generating klass Kla3 text = open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}
2021-03-12 01:58:09,494 [main:194] - Type params = []
2021-03-12 01:58:09,660 [main:302] - generating value of type = CoroutineContext false depth = 1
2021-03-12 01:58:09,835 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:58:09,840 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:58:10,213 [main:302] - generating value of type = Key<*> false depth = 4
2021-03-12 01:58:10,391 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:58:10,396 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:58:10,971 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 7
2021-03-12 01:58:11,149 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 01:58:11,155 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 01:58:11,733 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 10
2021-03-12 01:58:11,914 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 01:58:11,920 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 01:58:12,577 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 13
2021-03-12 01:58:12,752 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 01:58:12,757 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 01:58:13,327 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 01:58:13,327 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 01:58:13,327 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 01:58:13,327 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:58:13,327 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:58:13,327 [main:112] - generating klass Kla4 text = class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}
2021-03-12 01:58:13,328 [main:112] - generating klass Kla5 text = abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 01:58:13,889 [main:302] - generating value of type = Kla8 false depth = 1
2021-03-12 01:58:13,893 [main:112] - generating klass Kla8 text = object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}
2021-03-12 01:58:13,893 [main:112] - generating klass Kla6 text = class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged((A.x))) + prope1 + (getB()).x.toString(42))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { (ArrayDeque<UInt>(UIntArray(logged(3)))).size.toString(logged(logged(2))) != (logged(1)).div(-4931299584051357143).toString((logged(2)).toByte().div(42))} ?: error((B.x).div((logged(1)).div(-4534054416181813181)).toString(A.x))
    }
}
2021-03-12 01:58:13,893 [main:112] - generating klass Kla7 text = class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(logged(1))).toByte().div(logged(1))
        prope6 = (getB()).equals(null).and((getA()).x.equals("hsfnz"))
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged((logged(2)).toByte().div(42))).toChar().minus((logged(2)).toChar())..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(-113669981)) + prope5)
        if ((getA()).x.equals("hsfnz")) error((logged((getA()).x)).toString(logged((logged(1)))))
        prope7()
        if (checkFinished && (logged<UInt>(3.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}
2021-03-12 01:58:13,894 [main:112] - generating klass Kla8 text = object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}
2021-03-12 01:58:13,894 [main:112] - generating klass null text = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}
2021-03-12 01:58:13,894 [main:112] - generating klass null text = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}
2021-03-12 01:58:13,894 [main:112] - generating klass Kla9 text = companion object Kla9 : Kla3()
2021-03-12 01:58:14,243 [main:43] - GENERATING CALL OF fun <T> logged(value: T): T =
    value.also { log += "$value;" }
2021-03-12 01:58:15,043 [main:61] - WITHOUT TYPE PARAMS = fun <T> logged(value: MutableMap<UByte, Byte?>?): MutableMap<UByte, Byte?>? =
    value.also { log += "$value;" }
2021-03-12 01:58:15,227 [main:302] - generating value of type = MutableMap<UByte, Byte?> false depth = 1
2021-03-12 01:58:15,418 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(pairs: Pair<UByte, Byte?>): MutableMap<UByte, Byte?> = TODO()
2021-03-12 01:58:15,423 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(pairs: Pair<UByte, Byte?>): MutableMap<UByte, Byte?> = TODO()
2021-03-12 01:58:15,597 [main:302] - generating value of type = Pair<UByte, Byte?> false depth = 4
2021-03-12 01:58:15,770 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: UByte, second: Byte?): Pair<UByte, Byte?> = TODO()
2021-03-12 01:58:15,775 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: UByte, second: Byte?): Pair<UByte, Byte?> = TODO()
2021-03-12 01:58:15,948 [main:302] - generating value of type = UByte true depth = 7
2021-03-12 01:58:15,952 [main:95] - GENERATED = Pair<UByte, Byte?>(100.toUByte(), null)
2021-03-12 01:58:15,952 [main:95] - GENERATED = hashMapOf<UByte, Byte?>(Pair<UByte, Byte?>(100.toUByte(), null))
2021-03-12 01:58:15,952 [main:95] - GENERATED = logged<MutableMap<UByte, Byte?>?>(hashMapOf<UByte, Byte?>(Pair<UByte, Byte?>(100.toUByte(), null)))
2021-03-12 01:58:16,118 [main:43] - GENERATING CALL OF fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}
2021-03-12 01:58:16,122 [main:61] - WITHOUT TYPE PARAMS = fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}
2021-03-12 01:58:16,491 [main:302] - generating value of type = String true depth = 1
2021-03-12 01:58:16,495 [main:302] - generating value of type = Int true depth = 1
2021-03-12 01:58:16,499 [main:302] - generating value of type = String true depth = 1
2021-03-12 01:58:16,503 [main:302] - generating value of type = Function0<Int> false depth = 1
2021-03-12 01:58:16,507 [main:302] - generating value of type = Int true depth = 2
2021-03-12 01:58:16,511 [main:95] - GENERATED = doTest("hzxkx", 1497463962, "bfzca", { -1066485136})
2021-03-12 01:58:16,676 [main:43] - GENERATING CALL OF fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(B.x)).toLong().toString(logged((logged(1))))
    })
}
2021-03-12 01:58:16,679 [main:61] - WITHOUT TYPE PARAMS = fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(B.x)).toLong().toString(logged((logged(1))))
    })
}
2021-03-12 01:58:17,045 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 1
2021-03-12 01:58:17,049 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 01:58:17,224 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 01:58:17,229 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 01:58:17,592 [main:302] - generating value of type = Any false depth = 5
2021-03-12 01:58:17,592 [main:95] - GENERATED = println("iinqc")
2021-03-12 01:58:17,592 [main:95] - GENERATED = fu0({ println("iinqc")})
2021-03-12 01:58:17,806 [main:43] - GENERATING CALL OF suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}
2021-03-12 01:58:18,211 [main:61] - WITHOUT TYPE PARAMS = suspend fun <Ty0> fu1(): LinkedHashSet<Char> = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}
2021-03-12 01:58:18,387 [main:95] - GENERATED = fu1<LinkedHashSet<Char>>()
2021-03-12 01:58:18,550 [main:43] - GENERATING CALL OF fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}
2021-03-12 01:58:18,743 [main:61] - WITHOUT TYPE PARAMS = fun <Ty0> fu2(x: (UByte) -> Unit): Continuation<UByte> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}
2021-03-12 01:58:19,108 [main:302] - generating value of type = Function1<UByte, Unit> false depth = 1
2021-03-12 01:58:19,112 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 01:58:19,285 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 01:58:19,291 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 01:58:19,658 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 5
2021-03-12 01:58:19,662 [main:302] - generating value of type = Unit false depth = 6
2021-03-12 01:58:19,837 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 01:58:19,842 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 01:58:20,201 [main:302] - generating value of type = Any false depth = 9
2021-03-12 01:58:20,201 [main:95] - GENERATED = print("hpuhx")
2021-03-12 01:58:20,202 [main:95] - GENERATED = contract({ print("hpuhx")})
2021-03-12 01:58:20,202 [main:95] - GENERATED = fu2<UByte>({a: UByte -> contract({ print("hpuhx")})})
2021-03-12 01:58:20,367 [main:43] - GENERATING CALL OF fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}
2021-03-12 01:58:20,371 [main:61] - WITHOUT TYPE PARAMS = fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}
2021-03-12 01:58:20,734 [main:302] - generating value of type = Function1<Throwable, Unit> false depth = 1
2021-03-12 01:58:20,738 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 01:58:20,908 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 01:58:20,913 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 01:58:21,466 [main:302] - generating value of type = Boolean true depth = 5
2021-03-12 01:58:21,471 [main:302] - generating value of type = Function0<Any> false depth = 5
2021-03-12 01:58:21,475 [main:302] - generating value of type = Any false depth = 6
2021-03-12 01:58:21,475 [main:95] - GENERATED = require(false, { "imhct"})
2021-03-12 01:58:21,475 [main:95] - GENERATED = fu3({a: Throwable -> require(false, { "imhct"})})
2021-03-12 01:58:21,676 [main:43] - Try №1
2021-03-12 01:58:22,425 [main:69] - Trying to insert fun <Ty1> Kla10<Ty1>.fu15(f: (Ty1)-> Ty1): Kla10<Ty1> = Kla10<Ty1>(f(head), null)
2021-03-12 01:58:22,604 [main:66] - Compilation checking started
2021-03-12 01:58:23,751 [main:103] - Trying to change 16 nodes
2021-03-12 01:58:23,751 [main:107] - replacing (Kla10<Int>(1), Kla10<Int>)
2021-03-12 01:58:23,752 [main:50] - replacing Kla10<Int>(1) Kla10<Int>
2021-03-12 01:58:23,753 [main:54] - Getting value of type Kla10<Int>
2021-03-12 01:58:23,923 [main:302] - generating value of type = Kla10<Int> false depth = 0
2021-03-12 01:58:23,927 [main:112] - generating klass Kla10 text = class Kla10<Ty1>(val head: Ty1, val tail: Kla10<Ty1>? = null)
2021-03-12 01:58:24,501 [main:194] - Type params = [Int]
2021-03-12 01:58:24,869 [main:302] - generating value of type = Int true depth = 2
2021-03-12 01:58:25,072 [main:58] - GENERATED VALUE OF TYPE Kla10<Int> = 
2021-03-12 01:58:25,700 [main:67] - randomType = Kla5<UShort>
2021-03-12 01:58:25,869 [main:302] - generating value of type = Kla5<UShort> false depth = 0
2021-03-12 01:58:25,873 [main:112] - generating klass Kla5 text = abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 01:58:26,857 [main:302] - generating value of type = Kla8 false depth = 2
2021-03-12 01:58:26,862 [main:112] - generating klass Kla8 text = object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}
2021-03-12 01:58:26,876 [main:106] - GETTING Kla10<Int> from Int
2021-03-12 01:58:26,906 [main:106] - GETTING Kla10<Int> from MutableMap<UByte, Byte?>?
2021-03-12 01:58:26,943 [main:106] - GETTING Kla10<Int> from Byte
2021-03-12 01:58:26,972 [main:106] - GETTING Kla10<Int> from String
2021-03-12 01:58:26,989 [main:106] - GETTING Kla10<Int> from CoroutineContext
2021-03-12 01:58:26,995 [main:106] - GETTING Kla10<Int> from Unit?
2021-03-12 01:58:26,998 [main:106] - GETTING Kla10<Int> from B
2021-03-12 01:58:27,004 [main:106] - GETTING Kla10<Int> from String
2021-03-12 01:58:27,005 [main:106] - GETTING Kla10<Int> from LinkedHashSet<Char>
2021-03-12 01:58:27,113 [main:106] - GETTING Kla10<Int> from Char
2021-03-12 01:58:27,130 [main:106] - GETTING Kla10<Int> from String
2021-03-12 01:58:27,131 [main:106] - GETTING Kla10<Int> from Int
2021-03-12 01:58:27,132 [main:106] - GETTING Kla10<Int> from Int
2021-03-12 01:58:27,133 [main:106] - GETTING Kla10<Int> from String?
2021-03-12 01:58:27,153 [main:106] - GETTING Kla10<Int> from Kla4
2021-03-12 01:58:27,167 [main:106] - GETTING Kla10<Int> from B
2021-03-12 01:58:27,168 [main:106] - GETTING Kla10<Int> from B
2021-03-12 01:58:27,169 [main:106] - GETTING Kla10<Int> from Int
2021-03-12 01:58:27,170 [main:106] - GETTING Kla10<Int> from Int
2021-03-12 01:58:27,171 [main:106] - GETTING Kla10<Int> from Continuation<Any>?
2021-03-12 01:58:27,181 [main:106] - GETTING Kla10<Int> from Char
2021-03-12 01:58:27,182 [main:106] - GETTING Kla10<Int> from Int
2021-03-12 01:58:27,183 [main:106] - GETTING Kla10<Int> from Kla4
2021-03-12 01:58:27,184 [main:106] - GETTING Kla10<Int> from Long
2021-03-12 01:58:27,229 [main:106] - GETTING Kla10<Int> from A
2021-03-12 01:58:27,237 [main:106] - GETTING Kla10<Int> from Continuation<Any?>
2021-03-12 01:58:27,248 [main:106] - GETTING Kla10<Int> from String
2021-03-12 01:58:27,249 [main:106] - GETTING Kla10<Int> from ArrayDeque<UInt>
2021-03-12 01:58:27,407 [main:106] - GETTING Kla10<Int> from A
2021-03-12 01:58:27,408 [main:106] - GETTING Kla10<Int> from Kla0
2021-03-12 01:58:27,413 [main:106] - GETTING Kla10<Int> from B
2021-03-12 01:58:27,414 [main:106] - GETTING Kla10<Int> from Long
2021-03-12 01:58:27,415 [main:106] - GETTING Kla10<Int> from EmptyCoroutineContext
2021-03-12 01:58:27,429 [main:106] - GETTING Kla10<Int> from Int
2021-03-12 01:58:27,430 [main:106] - GETTING Kla10<Int> from Int
2021-03-12 01:58:27,431 [main:106] - GETTING Kla10<Int> from String
2021-03-12 01:58:27,432 [main:106] - GETTING Kla10<Int> from Int
2021-03-12 01:58:27,433 [main:106] - GETTING Kla10<Int> from Int
2021-03-12 01:58:27,433 [main:106] - GETTING Kla10<Int> from CoroutineContext
2021-03-12 01:58:27,434 [main:106] - GETTING Kla10<Int> from Int
2021-03-12 01:58:27,435 [main:106] - GETTING Kla10<Int> from Unit?
2021-03-12 01:58:27,436 [main:106] - GETTING Kla10<Int> from Boolean
2021-03-12 01:58:27,445 [main:106] - GETTING Kla10<Int> from Continuation<UByte>
2021-03-12 01:58:27,452 [main:106] - GETTING Kla10<Int> from Any?
2021-03-12 01:58:27,456 [main:106] - GETTING Kla10<Int> from Int
2021-03-12 01:58:27,457 [main:106] - GETTING Kla10<Int> from Int
2021-03-12 01:58:27,458 [main:106] - GETTING Kla10<Int> from A
2021-03-12 01:58:27,459 [main:106] - GETTING Kla10<Int> from Kla0
2021-03-12 01:58:27,460 [main:106] - GETTING Kla10<Int> from Int
2021-03-12 01:58:27,461 [main:106] - GETTING Kla10<Int> from A
2021-03-12 01:58:27,461 [main:106] - GETTING Kla10<Int> from Int
2021-03-12 01:58:27,462 [main:106] - GETTING Kla10<Int> from CoroutineContext
2021-03-12 01:58:27,463 [main:106] - GETTING Kla10<Int> from String
2021-03-12 01:58:27,464 [main:106] - GETTING Kla10<Int> from Int
2021-03-12 01:58:27,465 [main:106] - GETTING Kla10<Int> from Any?
2021-03-12 01:58:27,466 [main:106] - GETTING Kla10<Int> from ArrayDeque<UInt>
2021-03-12 01:58:27,467 [main:106] - GETTING Kla10<Int> from Int
2021-03-12 01:58:27,467 [main:106] - GETTING Kla10<Int> from Int
2021-03-12 01:58:27,468 [main:106] - GETTING Kla10<Int> from Int
2021-03-12 01:58:27,469 [main:106] - GETTING Kla10<Int> from Function0<Unit>
2021-03-12 01:58:27,479 [main:111] - Cant find and generate replacement for Kla10<Int>(1) type Kla10<Int>
2021-03-12 01:58:27,479 [main:107] - replacing (Kla10<Int>(1).fu15{it * 2}.head, Int)
2021-03-12 01:58:27,479 [main:50] - replacing Kla10<Int>(1).fu15{it * 2}.head Int
2021-03-12 01:58:27,479 [main:54] - Getting value of type Int
2021-03-12 01:58:27,648 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:58:27,652 [main:58] - GENERATED VALUE OF TYPE Int = -1152062862
2021-03-12 01:58:27,652 [main:61] - GENERATED IS CALL =false
2021-03-12 01:58:27,661 [main:67] - randomType = ULong
2021-03-12 01:58:27,836 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 01:58:27,865 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@5155ba4f]
2021-03-12 01:58:27,866 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@188a4e82]
2021-03-12 01:58:27,866 [main:78] - Generated call from random type = (7292300584295656218.toULong()).toByte().countTrailingZeroBits()
2021-03-12 01:58:27,866 [main:106] - GETTING Int from Int
2021-03-12 01:58:27,895 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7107ffd9]]
2021-03-12 01:58:27,895 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:58:27,895 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7107ffd9]
2021-03-12 01:58:27,896 [main:117] - GENERATED CALL = ((getA()).x).compareTo((logged((getA()).x)).toInt()).takeLowestOneBit()
2021-03-12 01:58:27,896 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3f32c47a]]
2021-03-12 01:58:27,896 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73]
2021-03-12 01:58:27,896 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3f32c47a]
2021-03-12 01:58:27,896 [main:117] - GENERATED CALL = ((getA()).x).div((logged(1)).div(-4931299584051357143)).countOneBits()
2021-03-12 01:58:27,896 [main:113] - Case = [public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5305e1c], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@47e67f87]]
2021-03-12 01:58:27,896 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5305e1c]
2021-03-12 01:58:28,068 [main:302] - generating value of type = Float true depth = 0
2021-03-12 01:58:28,072 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@47e67f87]
2021-03-12 01:58:28,072 [main:117] - GENERATED CALL = ((getA()).x).div(0.39200383f).toBits()
2021-03-12 01:58:28,072 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@406267da]]
2021-03-12 01:58:28,072 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:58:28,072 [main:117] - GENERATED CALL = ((getA()).x).toInt().sign
2021-03-12 01:58:28,072 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@41d04a80]]
2021-03-12 01:58:28,072 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:58:28,072 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@41d04a80]
2021-03-12 01:58:28,073 [main:117] - GENERATED CALL = ((getA()).x).compareTo(logged(3)).rotateLeft(logged(1))
2021-03-12 01:58:28,073 [main:113] - Case = [public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d8dcc4]]
2021-03-12 01:58:28,073 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d8dcc4]
2021-03-12 01:58:28,073 [main:117] - GENERATED CALL = ((getA()).x).shl((getA()).x)
2021-03-12 01:58:28,073 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@75e04100]]
2021-03-12 01:58:28,073 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@561d0f60]
2021-03-12 01:58:28,073 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@75e04100]
2021-03-12 01:58:28,073 [main:117] - GENERATED CALL = ((getA()).x).toShort().rem((logged(2)).toByte())
2021-03-12 01:58:28,073 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7b59aa7b]]
2021-03-12 01:58:28,073 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7b59aa7b]
2021-03-12 01:58:28,073 [main:117] - GENERATED CALL = ((getA()).x).countOneBits()
2021-03-12 01:58:28,074 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@153454d9]]
2021-03-12 01:58:28,074 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:58:28,074 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@153454d9]
2021-03-12 01:58:28,074 [main:117] - GENERATED CALL = ((getA()).x).toInt().coerceAtMost(B.x)
2021-03-12 01:58:28,074 [main:113] - Case = [public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6344afcd]]
2021-03-12 01:58:28,074 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6344afcd]
2021-03-12 01:58:28,074 [main:117] - GENERATED CALL = ((getA()).x).shr((ArrayDeque<UInt>(UIntArray(logged(3)))).size)
2021-03-12 01:58:28,074 [main:114] - replacement of Kla10<Int>(1).fu15{it * 2}.head of type Int is ((getA()).x).shl((getA()).x)
2021-03-12 01:58:28,247 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:58:28,247 [main:66] - Compilation checking started
2021-03-12 01:58:28,794 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(B.x)).toLong().toString(logged((logged(1))))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged((ArrayDeque<UInt>(UIntArray(1513099087))).size)).div(-4534054416181813181).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return Kla0("gizqi").s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((logged((logged(2)).toByte().div(42))).toChar().uppercase() != (B.x).toString(B.x)) return "FAIL 1 $(logged(expected)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged((A.x)))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged((getA()).x)).toInt().toString(1)))
    if ((ArrayDeque<UInt>(UIntArray(logged(3)))).size.toString(logged(logged(2))) != (logged(1)).div(-4931299584051357143).toString((logged(2)).toByte().div(42))) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(logged(3)))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged((A.x))) + prope1 + (getB()).x.toString(42))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { (ArrayDeque<UInt>(UIntArray(logged(3)))).size.toString(logged(logged(2))) != (logged(1)).div(-4931299584051357143).toString((logged(2)).toByte().div(42))} ?: error((B.x).div((logged(1)).div(-4534054416181813181)).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(logged(1))).toByte().div(logged(1))
        prope6 = (getB()).equals(null).and((getA()).x.equals("hsfnz"))
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged((logged(2)).toByte().div(42))).toChar().minus((logged(2)).toChar())..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(-113669981)) + prope5)
        if ((getA()).x.equals("hsfnz")) error((logged((getA()).x)).toString(logged((logged(1)))))
        prope7()
        if (checkFinished && (logged<UInt>(3.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}

class Kla10<Ty1>(val head: Int, val tail: Kla10<Int>? = null)

fun <Ty1> Kla10<Ty1>.fu15(f: (Ty1)-> Ty1): Kla10<Ty1> = Kla10<Ty1>(f(head), null)

fun box158() : String {
  var log = ""
var prope0 = "FAIL"
var prope1: Continuation<Any>? = null
val prope2 = Kla6()
val prope3 = Kla7()
val prope10: Int = ((getA()).x).shl((getA()).x)
  System.out?.println(prope10)
  return "OK"
}


2021-03-12 01:58:28,795 [main:107] - replacing (1, Int)
2021-03-12 01:58:28,795 [main:50] - replacing 1 Int
2021-03-12 01:58:28,795 [main:54] - Getting value of type Int
2021-03-12 01:58:28,964 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:58:28,968 [main:58] - GENERATED VALUE OF TYPE Int = 1438076502
2021-03-12 01:58:28,968 [main:61] - GENERATED IS CALL =false
2021-03-12 01:58:28,985 [main:67] - randomType = Kla2
2021-03-12 01:58:29,152 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 01:58:29,156 [main:112] - generating klass Kla2 text = class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged((ArrayDeque<UInt>(UIntArray(1513099087))).size)).div(-4534054416181813181).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return Kla0("gizqi").s
    }
}
2021-03-12 01:58:29,324 [main:194] - Type params = []
2021-03-12 01:58:29,510 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla2[DeserializedSimpleFunctionDescriptor@1faf1d0c]
2021-03-12 01:58:29,510 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@19b05991]
2021-03-12 01:58:29,510 [main:78] - Generated call from random type = (Kla2()).equals(Kla4().prope0).compareTo(Kla7().prope6)
2021-03-12 01:58:29,511 [main:106] - GETTING Int from Char
2021-03-12 01:58:29,528 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@682e13cc], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7b59aa7b]]
2021-03-12 01:58:29,528 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@682e13cc]
2021-03-12 01:58:29,528 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7b59aa7b]
2021-03-12 01:58:29,528 [main:117] - GENERATED CALL = ((logged((logged(2)).toByte().div(42))).toChar()).compareTo((A.x).toChar()).countOneBits()
2021-03-12 01:58:29,528 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@682e13cc], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78080c68]]
2021-03-12 01:58:29,528 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@682e13cc]
2021-03-12 01:58:29,528 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78080c68]
2021-03-12 01:58:29,528 [main:117] - GENERATED CALL = ((logged((logged(2)).toByte().div(42))).toChar()).compareTo((A.x).toChar()).toInt()
2021-03-12 01:58:29,528 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@682e13cc], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@35754437]]
2021-03-12 01:58:29,528 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@682e13cc]
2021-03-12 01:58:29,699 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:58:29,703 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@35754437]
2021-03-12 01:58:29,703 [main:117] - GENERATED CALL = ((logged((logged(2)).toByte().div(42))).toChar()).compareTo('ꛜ').coerceAtLeast(B.x)
2021-03-12 01:58:29,703 [main:113] - Case = [public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5df6d8b2], public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@294c229]]
2021-03-12 01:58:29,703 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5df6d8b2]
2021-03-12 01:58:29,704 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@294c229]
2021-03-12 01:58:29,704 [main:117] - GENERATED CALL = ((logged((logged(2)).toByte().div(42))).toChar()).toLong().toInt()
2021-03-12 01:58:29,704 [main:113] - Case = [public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@7394e2e0], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3100fc23]]
2021-03-12 01:58:29,704 [main:149] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@7394e2e0]
2021-03-12 01:58:29,704 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3100fc23]
2021-03-12 01:58:29,874 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:58:29,878 [main:117] - GENERATED CALL = ((logged((logged(2)).toByte().div(42))).toChar()).toByte().times(-38)
2021-03-12 01:58:29,878 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@682e13cc], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@48efa366]]
2021-03-12 01:58:29,878 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@682e13cc]
2021-03-12 01:58:30,047 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:58:30,052 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@48efa366]
2021-03-12 01:58:30,052 [main:117] - GENERATED CALL = ((logged((logged(2)).toByte().div(42))).toChar()).compareTo('').dec()
2021-03-12 01:58:30,052 [main:113] - Case = [public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@52fbba18], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36f2d9f6]]
2021-03-12 01:58:30,052 [main:149] - GENERATING call of type public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@52fbba18]
2021-03-12 01:58:30,052 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36f2d9f6]
2021-03-12 01:58:30,052 [main:117] - GENERATED CALL = ((logged((logged(2)).toByte().div(42))).toChar()).toShort().countTrailingZeroBits()
2021-03-12 01:58:30,052 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@682e13cc], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@77efaf86]]
2021-03-12 01:58:30,052 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@682e13cc]
2021-03-12 01:58:30,052 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@77efaf86]
2021-03-12 01:58:30,222 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 01:58:30,226 [main:117] - GENERATED CALL = ((logged((logged(2)).toByte().div(42))).toChar()).compareTo((A.x).toChar()).compareTo(-47)
2021-03-12 01:58:30,226 [main:113] - Case = [public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@52fbba18], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@35f28c0c]]
2021-03-12 01:58:30,226 [main:149] - GENERATING call of type public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@52fbba18]
2021-03-12 01:58:30,226 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@35f28c0c]
2021-03-12 01:58:30,227 [main:117] - GENERATED CALL = ((logged((logged(2)).toByte().div(42))).toChar()).toShort().plus((logged(2)).toByte())
2021-03-12 01:58:30,227 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@682e13cc], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2572ce0f]]
2021-03-12 01:58:30,227 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@682e13cc]
2021-03-12 01:58:30,394 [main:302] - generating value of type = Char true depth = 0
2021-03-12 01:58:30,399 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2572ce0f]
2021-03-12 01:58:30,399 [main:117] - GENERATED CALL = ((logged((logged(2)).toByte().div(42))).toChar()).compareTo('萜').times((logged(2)).toByte())
2021-03-12 01:58:30,399 [main:114] - replacement of 1 of type Int is ((logged((logged(2)).toByte().div(42))).toChar()).toShort().countTrailingZeroBits()
2021-03-12 01:58:30,566 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:58:30,567 [main:66] - Compilation checking started
2021-03-12 01:58:31,071 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(B.x)).toLong().toString(logged((logged(1))))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged((ArrayDeque<UInt>(UIntArray(1513099087))).size)).div(-4534054416181813181).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return Kla0("gizqi").s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((logged((logged(2)).toByte().div(42))).toChar().uppercase() != (B.x).toString(B.x)) return "FAIL 1 $(logged(expected)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged((A.x)))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged((getA()).x)).toInt().toString(1)))
    if ((ArrayDeque<UInt>(UIntArray(logged(3)))).size.toString(logged(logged(2))) != (logged(1)).div(-4931299584051357143).toString((logged(2)).toByte().div(42))) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(logged(3)))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged((A.x))) + prope1 + (getB()).x.toString(42))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { (ArrayDeque<UInt>(UIntArray(logged(3)))).size.toString(logged(logged(2))) != (logged(1)).div(-4931299584051357143).toString((logged(2)).toByte().div(42))} ?: error((B.x).div((logged(1)).div(-4534054416181813181)).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(logged(1))).toByte().div(logged(1))
        prope6 = (getB()).equals(null).and((getA()).x.equals("hsfnz"))
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged((logged(2)).toByte().div(42))).toChar().minus((logged(2)).toChar())..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(-113669981)) + prope5)
        if ((getA()).x.equals("hsfnz")) error((logged((getA()).x)).toString(logged((logged(1)))))
        prope7()
        if (checkFinished && (logged<UInt>(3.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}

class Kla10<Ty1>(val head: Int, val tail: Kla10<Int>? = null)

fun <Ty1> Kla10<Ty1>.fu15(f: (Ty1)-> Ty1): Kla10<Ty1> = Kla10<Ty1>(f(head), null)

fun box158() : String {
  var log = ""
var prope0 = "FAIL"
var prope1: Continuation<Any>? = null
val prope2 = Kla6()
val prope3 = Kla7()
val prope10: Int = Kla10<Int>(((logged((logged(2)).toByte().div(42))).toChar()).toShort().countTrailingZeroBits()).fu15{it * 2}.head
  System.out?.println(prope10)
  return "OK"
}


2021-03-12 01:58:31,071 [main:107] - replacing ("OK", String)
2021-03-12 01:58:31,072 [main:50] - replacing "OK" String
2021-03-12 01:58:31,072 [main:54] - Getting value of type String
2021-03-12 01:58:31,240 [main:302] - generating value of type = String true depth = 0
2021-03-12 01:58:31,244 [main:58] - GENERATED VALUE OF TYPE String = "vowcg"
2021-03-12 01:58:31,244 [main:61] - GENERATED IS CALL =false
2021-03-12 01:58:32,266 [main:67] - randomType = List<Function1<ArrayDeque<UShort>, Kla3>>
2021-03-12 01:58:32,267 [main:106] - GETTING String from Int
2021-03-12 01:58:32,298 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:58:32,298 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@56c5d5]
2021-03-12 01:58:32,298 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:58:32,467 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:58:32,471 [main:117] - GENERATED CALL = ((getA()).x).toInt().toString(-512137001)
2021-03-12 01:58:32,471 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:58:32,471 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:58:32,471 [main:117] - GENERATED CALL = ((getA()).x).toString((logged(2)))
2021-03-12 01:58:32,471 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc0516]]
2021-03-12 01:58:32,471 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@389c9235]
2021-03-12 01:58:32,471 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc0516]
2021-03-12 01:58:32,472 [main:117] - GENERATED CALL = ((getA()).x).toByte().toString(logged((getA()).x))
2021-03-12 01:58:32,472 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]]
2021-03-12 01:58:32,472 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:58:32,472 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ca70682]
2021-03-12 01:58:32,472 [main:117] - GENERATED CALL = ((getA()).x).toChar().titlecase()
2021-03-12 01:58:32,472 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a36c448]]
2021-03-12 01:58:32,472 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:58:32,472 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a36c448]
2021-03-12 01:58:32,472 [main:117] - GENERATED CALL = ((getA()).x).toChar().lowercase()
2021-03-12 01:58:32,472 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:58:32,472 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7599720e]
2021-03-12 01:58:32,472 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:58:32,640 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:58:32,644 [main:117] - GENERATED CALL = ((getA()).x).toLong().toString(-1010270513)
2021-03-12 01:58:32,644 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]]
2021-03-12 01:58:32,645 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@370349f]
2021-03-12 01:58:32,645 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74c052d3]
2021-03-12 01:58:32,811 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:58:32,816 [main:117] - GENERATED CALL = ((getA()).x).compareTo(A.x).toString(176877073)
2021-03-12 01:58:32,816 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]]
2021-03-12 01:58:32,816 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:58:32,816 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30a415e7]
2021-03-12 01:58:32,816 [main:117] - GENERATED CALL = ((getA()).x).toChar().uppercase()
2021-03-12 01:58:32,816 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]]
2021-03-12 01:58:32,816 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7e7abc73]
2021-03-12 01:58:32,816 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d3e8aab]
2021-03-12 01:58:32,816 [main:117] - GENERATED CALL = ((getA()).x).div((logged(1)).div(-4534054416181813181)).toString((A.x))
2021-03-12 01:58:32,817 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6122df5e]]
2021-03-12 01:58:32,817 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c819623]
2021-03-12 01:58:32,817 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6122df5e]
2021-03-12 01:58:32,817 [main:117] - GENERATED CALL = ((getA()).x).toChar().plus(var log =
2021-03-12 01:58:32,817 [main:114] - replacement of "OK" of type String is ((getA()).x).compareTo(A.x).toString(176877073)
2021-03-12 01:58:32,985 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:58:32,985 [main:66] - Compilation checking started
2021-03-12 01:58:33,486 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(B.x)).toLong().toString(logged((logged(1))))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged((ArrayDeque<UInt>(UIntArray(1513099087))).size)).div(-4534054416181813181).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return Kla0("gizqi").s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((logged((logged(2)).toByte().div(42))).toChar().uppercase() != (B.x).toString(B.x)) return "FAIL 1 $(logged(expected)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged((A.x)))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged((getA()).x)).toInt().toString(1)))
    if ((ArrayDeque<UInt>(UIntArray(logged(3)))).size.toString(logged(logged(2))) != (logged(1)).div(-4931299584051357143).toString((logged(2)).toByte().div(42))) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(logged(3)))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged((A.x))) + prope1 + (getB()).x.toString(42))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { (ArrayDeque<UInt>(UIntArray(logged(3)))).size.toString(logged(logged(2))) != (logged(1)).div(-4931299584051357143).toString((logged(2)).toByte().div(42))} ?: error((B.x).div((logged(1)).div(-4534054416181813181)).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(logged(1))).toByte().div(logged(1))
        prope6 = (getB()).equals(null).and((getA()).x.equals("hsfnz"))
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged((logged(2)).toByte().div(42))).toChar().minus((logged(2)).toChar())..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(-113669981)) + prope5)
        if ((getA()).x.equals("hsfnz")) error((logged((getA()).x)).toString(logged((logged(1)))))
        prope7()
        if (checkFinished && (logged<UInt>(3.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}

class Kla10<Ty1>(val head: Int, val tail: Kla10<Int>? = null)

fun <Ty1> Kla10<Ty1>.fu15(f: (Ty1)-> Ty1): Kla10<Ty1> = Kla10<Ty1>(f(head), null)

fun box158() : String {
  var log = ""
var prope0 = "FAIL"
var prope1: Continuation<Any>? = null
val prope2 = Kla6()
val prope3 = Kla7()
val prope10: Int = Kla10<Int>(1).fu15{it * 2}.head
  System.out?.println(prope10)
  return ((getA()).x).compareTo(A.x).toString(176877073)
}


2021-03-12 01:58:33,486 [main:107] - replacing (prope10, Int)
2021-03-12 01:58:33,487 [main:50] - replacing prope10 Int
2021-03-12 01:58:33,487 [main:54] - Getting value of type Int
2021-03-12 01:58:33,657 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:58:33,661 [main:58] - GENERATED VALUE OF TYPE Int = -923059758
2021-03-12 01:58:33,661 [main:61] - GENERATED IS CALL =false
2021-03-12 01:58:33,678 [main:67] - randomType = Kla2
2021-03-12 01:58:33,846 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 01:58:33,850 [main:112] - generating klass Kla2 text = class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged((ArrayDeque<UInt>(UIntArray(1513099087))).size)).div(-4534054416181813181).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return Kla0("gizqi").s
    }
}
2021-03-12 01:58:34,019 [main:194] - Type params = []
2021-03-12 01:58:34,196 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla2[DeserializedSimpleFunctionDescriptor@1faf1d0c]
2021-03-12 01:58:34,196 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@19b05991]
2021-03-12 01:58:34,197 [main:78] - Generated call from random type = (Kla2()).equals((Kla4()).prope0).compareTo(Kla7().prope6)
2021-03-12 01:58:34,197 [main:106] - GETTING Int from A
2021-03-12 01:58:34,202 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@44458a2d], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@19b05991]]
2021-03-12 01:58:34,202 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@44458a2d]
2021-03-12 01:58:34,202 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@19b05991]
2021-03-12 01:58:34,202 [main:117] - GENERATED CALL = ((getA())).equals((Kla4()).prope0).compareTo(Kla7().prope6)
2021-03-12 01:58:34,203 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@34248cb2], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@48efa366]]
2021-03-12 01:58:34,203 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@48efa366]
2021-03-12 01:58:34,203 [main:117] - GENERATED CALL = ((getA())).x.dec()
2021-03-12 01:58:34,203 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@34248cb2], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6344afcd]]
2021-03-12 01:58:34,203 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6344afcd]
2021-03-12 01:58:34,203 [main:117] - GENERATED CALL = ((getA())).x.shr(B.x)
2021-03-12 01:58:34,203 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@34248cb2], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@788cd72f]]
2021-03-12 01:58:34,203 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@788cd72f]
2021-03-12 01:58:34,203 [main:117] - GENERATED CALL = ((getA())).x.xor(B.x)
2021-03-12 01:58:34,203 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@34248cb2], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@77efaf86]]
2021-03-12 01:58:34,203 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@77efaf86]
2021-03-12 01:58:34,203 [main:117] - GENERATED CALL = ((getA())).x.compareTo((logged(2)).toByte())
2021-03-12 01:58:34,203 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@34248cb2], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7107ffd9]]
2021-03-12 01:58:34,204 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7107ffd9]
2021-03-12 01:58:34,204 [main:117] - GENERATED CALL = ((getA())).x.takeLowestOneBit()
2021-03-12 01:58:34,204 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@34248cb2], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3ef045d8]]
2021-03-12 01:58:34,204 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3ef045d8]
2021-03-12 01:58:34,204 [main:117] - GENERATED CALL = ((getA())).x.minus((logged(2)).toByte())
2021-03-12 01:58:34,204 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@34248cb2], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2d1f1e5a]]
2021-03-12 01:58:34,204 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2d1f1e5a]
2021-03-12 01:58:34,418 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:58:34,422 [main:117] - GENERATED CALL = ((getA())).x.or(820312560)
2021-03-12 01:58:34,422 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@34248cb2], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@647e2e5d]]
2021-03-12 01:58:34,422 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@647e2e5d]
2021-03-12 01:58:34,422 [main:117] - GENERATED CALL = ((getA())).x.takeHighestOneBit()
2021-03-12 01:58:34,422 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@34248cb2], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2572ce0f]]
2021-03-12 01:58:34,422 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2572ce0f]
2021-03-12 01:58:34,423 [main:117] - GENERATED CALL = ((getA())).x.times((logged(2)).toByte())
2021-03-12 01:58:34,423 [main:114] - replacement of prope10 of type Int is (Kla2()).equals((Kla4()).prope0).compareTo(Kla7().prope6)
2021-03-12 01:58:34,593 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:58:34,593 [main:66] - Compilation checking started
2021-03-12 01:58:35,098 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(B.x)).toLong().toString(logged((logged(1))))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged((ArrayDeque<UInt>(UIntArray(1513099087))).size)).div(-4534054416181813181).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return Kla0("gizqi").s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((logged((logged(2)).toByte().div(42))).toChar().uppercase() != (B.x).toString(B.x)) return "FAIL 1 $(logged(expected)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged((A.x)))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged((getA()).x)).toInt().toString(1)))
    if ((ArrayDeque<UInt>(UIntArray(logged(3)))).size.toString(logged(logged(2))) != (logged(1)).div(-4931299584051357143).toString((logged(2)).toByte().div(42))) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(logged(3)))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged((A.x))) + prope1 + (getB()).x.toString(42))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { (ArrayDeque<UInt>(UIntArray(logged(3)))).size.toString(logged(logged(2))) != (logged(1)).div(-4931299584051357143).toString((logged(2)).toByte().div(42))} ?: error((B.x).div((logged(1)).div(-4534054416181813181)).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(logged(1))).toByte().div(logged(1))
        prope6 = (getB()).equals(null).and((getA()).x.equals("hsfnz"))
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged((logged(2)).toByte().div(42))).toChar().minus((logged(2)).toChar())..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(-113669981)) + prope5)
        if ((getA()).x.equals("hsfnz")) error((logged((getA()).x)).toString(logged((logged(1)))))
        prope7()
        if (checkFinished && (logged<UInt>(3.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}

class Kla10<Ty1>(val head: Int, val tail: Kla10<Int>? = null)

fun <Ty1> Kla10<Ty1>.fu15(f: (Ty1)-> Ty1): Kla10<Ty1> = Kla10<Ty1>(f(head), null)

fun box158() : String {
  var log = ""
var prope0 = "FAIL"
var prope1: Continuation<Any>? = null
val prope2 = Kla6()
val prope3 = Kla7()
val prope10: Int = Kla10<Int>(1).fu15{it * 2}.head
  System.out?.println((Kla2()).equals((Kla4()).prope0).compareTo(Kla7().prope6))
  return "OK"
}


2021-03-12 01:58:35,098 [main:107] - replacing (it * 2, Int)
2021-03-12 01:58:35,098 [main:50] - replacing it * 2 Int
2021-03-12 01:58:35,098 [main:54] - Getting value of type Int
2021-03-12 01:58:35,277 [main:302] - generating value of type = Int true depth = 0
2021-03-12 01:58:35,282 [main:58] - GENERATED VALUE OF TYPE Int = 1252377981
2021-03-12 01:58:35,282 [main:61] - GENERATED IS CALL =false
2021-03-12 01:58:36,122 [main:67] - randomType = LinkedHashMap<Kla8?, Float>?
2021-03-12 01:58:36,289 [main:302] - generating value of type = LinkedHashMap<Kla8?, Float> false depth = 0
2021-03-12 01:58:36,463 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Kla8?, Float> = TODO()
2021-03-12 01:58:36,468 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Kla8?, Float> = TODO()
2021-03-12 01:58:36,646 [main:95] - GENERATED = linkedMapOf<Kla8?, Float>()
2021-03-12 01:58:36,755 [main:149] - GENERATING call of type public open fun containsKey(key: Kla8?): kotlin.Boolean defined in kotlin.collections.LinkedHashMap[DeserializedSimpleFunctionDescriptor@5bf74a8e]
2021-03-12 01:58:36,923 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-12 01:58:36,928 [main:112] - generating klass Kla8 text = object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}
2021-03-12 01:58:36,928 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@19b05991]
2021-03-12 01:58:37,096 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 01:58:37,100 [main:78] - Generated call from random type = (linkedMapOf<Kla8?, Float>())?.containsKey(Kla8).compareTo(false)
2021-03-12 01:58:37,101 [main:106] - GETTING Int from CoroutineContext
2021-03-12 01:58:37,107 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@6f31b61e], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@19b05991]]
2021-03-12 01:58:37,107 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@6f31b61e]
2021-03-12 01:58:37,107 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@19b05991]
2021-03-12 01:58:37,107 [main:117] - GENERATED CALL = (Kla8.context).equals((Kla4()).prope0).compareTo(Kla7().prope6)
2021-03-12 01:58:37,107 [main:114] - replacement of it * 2 of type Int is (linkedMapOf<Kla8?, Float>())?.containsKey(Kla8).compareTo(false)
2021-03-12 01:58:37,274 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 01:58:37,274 [main:66] - Compilation checking started
2021-03-12 01:58:37,776 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(B.x)).toLong().toString(logged((logged(1))))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged((ArrayDeque<UInt>(UIntArray(1513099087))).size)).div(-4534054416181813181).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return Kla0("gizqi").s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((logged((logged(2)).toByte().div(42))).toChar().uppercase() != (B.x).toString(B.x)) return "FAIL 1 $(logged(expected)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged((A.x)))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged((getA()).x)).toInt().toString(1)))
    if ((ArrayDeque<UInt>(UIntArray(logged(3)))).size.toString(logged(logged(2))) != (logged(1)).div(-4931299584051357143).toString((logged(2)).toByte().div(42))) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(logged(3)))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged((A.x))) + prope1 + (getB()).x.toString(42))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { (ArrayDeque<UInt>(UIntArray(logged(3)))).size.toString(logged(logged(2))) != (logged(1)).div(-4931299584051357143).toString((logged(2)).toByte().div(42))} ?: error((B.x).div((logged(1)).div(-4534054416181813181)).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(logged(1))).toByte().div(logged(1))
        prope6 = (getB()).equals(null).and((getA()).x.equals("hsfnz"))
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged((logged(2)).toByte().div(42))).toChar().minus((logged(2)).toChar())..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(-113669981)) + prope5)
        if ((getA()).x.equals("hsfnz")) error((logged((getA()).x)).toString(logged((logged(1)))))
        prope7()
        if (checkFinished && (logged<UInt>(3.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}

class Kla10<Ty1>(val head: Int, val tail: Kla10<Int>? = null)

fun <Ty1> Kla10<Ty1>.fu15(f: (Ty1)-> Ty1): Kla10<Ty1> = Kla10<Ty1>(f(head), null)

fun box158() : String {
  var log = ""
var prope0 = "FAIL"
var prope1: Continuation<Any>? = null
val prope2 = Kla6()
val prope3 = Kla7()
val prope10: Int = Kla10<Int>(1).fu15{(linkedMapOf<Kla8?, Float>())?.containsKey(Kla8).compareTo(false)}.head
  System.out?.println(prope10)
  return "OK"
}


2021-03-12 01:58:37,777 [main:107] - replacing (head, Ty1)
2021-03-12 01:58:37,777 [main:50] - replacing head Ty1
2021-03-12 01:58:37,777 [main:54] - Getting value of type Ty1
2021-03-12 01:58:37,953 [main:302] - generating value of type = Ty1 false depth = 0
2021-03-12 01:58:37,959 [main:58] - GENERATED VALUE OF TYPE Ty1 = 
2021-03-12 01:58:38,399 [main:67] - randomType = HashMap<Double, Int>
2021-03-12 01:58:38,569 [main:302] - generating value of type = HashMap<Double, Int> false depth = 0
2021-03-12 01:58:38,750 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): HashMap<Double, Int> = TODO()
2021-03-12 01:58:38,755 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): HashMap<Double, Int> = TODO()
2021-03-12 01:58:38,937 [main:95] - GENERATED = linkedMapOf<Double, Int>()
2021-03-12 01:58:39,031 [main:106] - GETTING Ty1 from Int
2021-03-12 01:58:39,060 [main:106] - GETTING Ty1 from Function0<Unit>
2021-03-12 01:58:39,070 [main:106] - GETTING Ty1 from String?
2021-03-12 01:58:39,088 [main:106] - GETTING Ty1 from Unit?
2021-03-12 01:58:39,091 [main:106] - GETTING Ty1 from Boolean
2021-03-12 01:58:39,099 [main:106] - GETTING Ty1 from Long
2021-03-12 01:58:39,127 [main:106] - GETTING Ty1 from A
2021-03-12 01:58:39,132 [main:106] - GETTING Ty1 from Int
2021-03-12 01:58:39,132 [main:106] - GETTING Ty1 from Int
2021-03-12 01:58:39,133 [main:106] - GETTING Ty1 from B
2021-03-12 01:58:39,138 [main:106] - GETTING Ty1 from String
2021-03-12 01:58:39,154 [main:106] - GETTING Ty1 from ArrayDeque<UInt>
2021-03-12 01:58:39,262 [main:106] - GETTING Ty1 from B
2021-03-12 01:58:39,262 [main:106] - GETTING Ty1 from String
2021-03-12 01:58:39,263 [main:106] - GETTING Ty1 from Int
2021-03-12 01:58:39,263 [main:106] - GETTING Ty1 from Int
2021-03-12 01:58:39,264 [main:106] - GETTING Ty1 from Any?
2021-03-12 01:58:39,268 [main:106] - GETTING Ty1 from Kla0
2021-03-12 01:58:39,272 [main:106] - GETTING Ty1 from Int
2021-03-12 01:58:39,272 [main:106] - GETTING Ty1 from Kla4
2021-03-12 01:58:39,285 [main:106] - GETTING Ty1 from Int
2021-03-12 01:58:39,285 [main:106] - GETTING Ty1 from A
2021-03-12 01:58:39,286 [main:106] - GETTING Ty1 from LinkedHashSet<Char>
2021-03-12 01:58:39,391 [main:106] - GETTING Ty1 from String
2021-03-12 01:58:39,391 [main:106] - GETTING Ty1 from Char
2021-03-12 01:58:39,409 [main:106] - GETTING Ty1 from Kla4
2021-03-12 01:58:39,409 [main:106] - GETTING Ty1 from Int
2021-03-12 01:58:39,410 [main:106] - GETTING Ty1 from Int
2021-03-12 01:58:39,410 [main:106] - GETTING Ty1 from String
2021-03-12 01:58:39,411 [main:106] - GETTING Ty1 from Unit?
2021-03-12 01:58:39,412 [main:106] - GETTING Ty1 from B
2021-03-12 01:58:39,412 [main:106] - GETTING Ty1 from Kla0
2021-03-12 01:58:39,413 [main:106] - GETTING Ty1 from Int
2021-03-12 01:58:39,413 [main:106] - GETTING Ty1 from Int
2021-03-12 01:58:39,414 [main:106] - GETTING Ty1 from Continuation<Any>?
2021-03-12 01:58:39,421 [main:106] - GETTING Ty1 from String
2021-03-12 01:58:39,422 [main:106] - GETTING Ty1 from Int
2021-03-12 01:58:39,423 [main:106] - GETTING Ty1 from Int
2021-03-12 01:58:39,423 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 01:58:39,429 [main:106] - GETTING Ty1 from Int
2021-03-12 01:58:39,430 [main:106] - GETTING Ty1 from ArrayDeque<UInt>
2021-03-12 01:58:39,430 [main:106] - GETTING Ty1 from Char
2021-03-12 01:58:39,431 [main:106] - GETTING Ty1 from String
2021-03-12 01:58:39,431 [main:106] - GETTING Ty1 from Any?
2021-03-12 01:58:39,432 [main:106] - GETTING Ty1 from B
2021-03-12 01:58:39,433 [main:106] - GETTING Ty1 from Int
2021-03-12 01:58:39,433 [main:106] - GETTING Ty1 from Int
2021-03-12 01:58:39,434 [main:106] - GETTING Ty1 from Int
2021-03-12 01:58:39,434 [main:106] - GETTING Ty1 from Continuation<UByte>
2021-03-12 01:58:39,442 [main:106] - GETTING Ty1 from A
2021-03-12 01:58:39,442 [main:106] - GETTING Ty1 from EmptyCoroutineContext
2021-03-12 01:58:39,456 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 01:58:39,456 [main:106] - GETTING Ty1 from A
2021-03-12 01:58:39,457 [main:106] - GETTING Ty1 from Byte
2021-03-12 01:58:39,487 [main:106] - GETTING Ty1 from Int
2021-03-12 01:58:39,487 [main:106] - GETTING Ty1 from MutableMap<UByte, Byte?>?
2021-03-12 01:58:39,566 [main:106] - GETTING Ty1 from Int
2021-03-12 01:58:39,566 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 01:58:39,567 [main:106] - GETTING Ty1 from Long
2021-03-12 01:58:39,568 [main:106] - GETTING Ty1 from Continuation<Any?>
2021-03-12 01:58:39,574 [main:111] - Cant find and generate replacement for head type Ty1
2021-03-12 01:58:39,746 [main:41] - AFTER TRY 2 res = 
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}

var prope0 = "FAIL"

fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(B.x)).toLong().toString(logged((logged(1))))
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)

var prope1: Continuation<Any>? = null

suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}

interface Kla1 {
    suspend fun fu4(): Kla0?
}

class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged((ArrayDeque<UInt>(UIntArray(1513099087))).size)).div(-4534054416181813181).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return Kla0("gizqi").s
    }
}

fun box233(): String {
    var log = ""
fu0 {
        (logged(1)).div(-4534054416181813181).toString(B.x)
    }
    prope1?.resumeWithException(IllegalStateException("OK"))
    if ((logged((logged(2)).toByte().div(42))).toChar().uppercase() != (B.x).toString(B.x)) return "FAIL 1 $(logged(expected)).toChar().plus(var log ="

    prope0 = (getA()).x.toString(logged((A.x)))
    fu0 {
        (A.x).toChar().titlecase()
    }
    prope1?.resumeWithException(IllegalStateException((logged((getA()).x)).toInt().toString(1)))
    if ((ArrayDeque<UInt>(UIntArray(logged(3)))).size.toString(logged(logged(2))) != (logged(1)).div(-4931299584051357143).toString((logged(2)).toByte().div(42))) return (Kla4()).prope0?.toString()!!

    return (getB()).x.toString(logged(logged(3)))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged((A.x))) + prope1 + (getB()).x.toString(42))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { (ArrayDeque<UInt>(UIntArray(logged(3)))).size.toString(logged(logged(2))) != (logged(1)).div(-4931299584051357143).toString((logged(2)).toByte().div(42))} ?: error((B.x).div((logged(1)).div(-4534054416181813181)).toString(A.x))
    }
}

val prope2 = Kla6()

class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(logged(1))).toByte().div(logged(1))
        prope6 = (getB()).equals(null).and((getA()).x.equals("hsfnz"))
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged((logged(2)).toByte().div(42))).toChar().minus((logged(2)).toChar())..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(-113669981)) + prope5)
        if ((getA()).x.equals("hsfnz")) error((logged((getA()).x)).toString(logged((logged(1)))))
        prope7()
        if (checkFinished && (logged<UInt>(3.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}

val prope3 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}

class Kla10<Ty1>(val head: Int, val tail: Kla10<Int>? = null)

fun <Ty1> Kla10<Ty1>.fu15(f: (Ty1)-> Ty1): Kla10<Ty1> = Kla10<Ty1>(f(head), null)

fun box158() : String {
  var log = ""
var prope0 = "FAIL"
var prope1: Continuation<Any>? = null
val prope2 = Kla6()
val prope3 = Kla7()
val prope10: Int = Kla10<Int>(1).fu15{it * 2}.head
  System.out?.println(prope10)
  return "OK"
}


2021-03-12 01:58:40,084 [main:112] - generating klass A text = object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}
2021-03-12 01:58:40,085 [main:112] - generating klass B text = object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}
2021-03-12 01:58:40,085 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: String)
2021-03-12 01:58:40,251 [main:194] - Type params = []
2021-03-12 01:58:40,420 [main:302] - generating value of type = String true depth = 1
2021-03-12 01:58:40,424 [main:112] - generating klass Kla1 text = interface Kla1 {
    suspend fun fu4(): Kla0?
}
2021-03-12 01:58:40,778 [main:302] - generating value of type = Kla2 false depth = 1
2021-03-12 01:58:40,782 [main:112] - generating klass Kla2 text = class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged((ArrayDeque<UInt>(UIntArray(1513099087))).size)).div(-4534054416181813181).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return Kla0("gizqi").s
    }
}
2021-03-12 01:58:40,950 [main:194] - Type params = []
2021-03-12 01:58:41,123 [main:112] - generating klass Kla2 text = class Kla2() : Kla1 {

    override suspend fun fu4(): Kla0 = Kla0("pmiwp")

    suspend fun fu5(): String {
        var log = ""
val prope8: Kla1 = Kla2()
        return (logged((ArrayDeque<UInt>(UIntArray(1513099087))).size)).div(-4534054416181813181).toString(1431951966)
    }

    suspend fun fu6(): String {
        var log = ""
return Kla0("gizqi").s
    }
}
2021-03-12 01:58:41,308 [main:194] - Type params = []
2021-03-12 01:58:41,479 [main:112] - generating klass Kla3 text = open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
"kufre"
    }
}
2021-03-12 01:58:41,648 [main:194] - Type params = []
2021-03-12 01:58:41,818 [main:302] - generating value of type = CoroutineContext false depth = 1
2021-03-12 01:58:41,995 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:58:42,001 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:58:42,395 [main:302] - generating value of type = Key<*> false depth = 4
2021-03-12 01:58:42,580 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:58:42,586 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:58:43,189 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 7
2021-03-12 01:58:43,376 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 01:58:43,381 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 01:58:43,984 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 01:58:43,984 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 01:58:43,984 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 01:58:43,984 [main:112] - generating klass Kla4 text = class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
Kla4().prope0 = runCatching<Any?>({ "djsif"}).getOrThrow()
    }

    var prope0: Any? = null
}
2021-03-12 01:58:43,984 [main:112] - generating klass Kla5 text = abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
if ((logged(3)).div(0.744562806984837).isInfinite()) {
            resume(prope0.getOrThrow())
        } else {
            resumeWithException(Throwable())
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 01:58:44,746 [main:302] - generating value of type = Kla8 false depth = 1
2021-03-12 01:58:44,751 [main:112] - generating klass Kla8 text = object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}
2021-03-12 01:58:44,751 [main:112] - generating klass Kla6 text = class Kla6 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("odegf")}

    fun fu9(prope1: Continuation<*>) {
        var log = ""
if (prope1 !is CoroutineStackFrame) error((A.x).toInt().toString(logged((A.x))) + prope1 + (getB()).x.toString(42))
        prope4.clear()
        var prope9: CoroutineStackFrame? = prope1
        while (prope9 != null) {
            prope4.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu10(method: String) {
        var log = ""
prope4.find { (3610657577449778905.toULong()).equals("sxaaa").or(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var log = ""
prope4.find { (ArrayDeque<UInt>(UIntArray(logged(3)))).size.toString(logged(logged(2))) != (logged(1)).div(-4931299584051357143).toString((logged(2)).toByte().div(42))} ?: error((B.x).div((logged(1)).div(-4534054416181813181)).toString(A.x))
    }
}
2021-03-12 01:58:44,751 [main:112] - generating klass Kla7 text = class Kla7 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu12() {
        var log = ""
prope5 = (logged(logged(1))).toByte().div(logged(1))
        prope6 = (getB()).equals(null).and((getA()).x.equals("hsfnz"))
        prope7 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope1 ->
        prope5++
        prope7 = { prope1.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var log = ""
for (i in (logged((logged(2)).toByte().div(42))).toChar().minus((logged(2)).toChar())..numberOfSuspensions) {
            if ((A.x).toFloat().isInfinite()) error((ArrayList<Double>(mutableSetOf<Double>())).toArray().contentToString())
            prope7()
        }
        if ((getB()).x.equals("bokkn"))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (getA()).x.toString(logged(-113669981)) + prope5)
        if ((getA()).x.equals("hsfnz")) error((logged((getA()).x)).toString(logged((logged(1)))))
        prope7()
        if (checkFinished && (logged<UInt>(3.toUInt())).toLong().equals("cwoou")) error("elykr")
    }
}
2021-03-12 01:58:44,751 [main:112] - generating klass Kla8 text = object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var log = ""
prope3.prope7 = {
            Kla7().prope6 = (getA()).equals("chaza").equals("sqnko")
        }
    }

    override fun resumeWithException(exception: Throwable) {
        var log = ""
throw Error("jrxcm")
    }
}
2021-03-12 01:58:44,752 [main:112] - generating klass Kla10 text = class Kla10<Ty1>(val head: Int, val tail: Kla10<Int>? = null)
2021-03-12 01:58:45,829 [main:194] - Type params = [Kla5<Pair<Byte, Int>>]
2021-03-12 01:58:46,183 [main:302] - generating value of type = Int true depth = 1
2021-03-12 01:58:46,377 [main:112] - generating klass null text = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}
2021-03-12 01:58:46,377 [main:112] - generating klass null text = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}
2021-03-12 01:58:46,377 [main:112] - generating klass Kla9 text = companion object Kla9 : Kla3()
2021-03-12 01:58:46,735 [main:43] - GENERATING CALL OF fun <T> logged(value: T): T =
    value.also { log += "$value;" }
2021-03-12 01:58:46,749 [main:61] - WITHOUT TYPE PARAMS = fun <T> logged(value: Double): Double =
    value.also { log += "$value;" }
2021-03-12 01:58:46,934 [main:302] - generating value of type = Double true depth = 1
2021-03-12 01:58:46,939 [main:95] - GENERATED = logged<Double>(0.48321954515115095)
2021-03-12 01:58:47,117 [main:43] - GENERATING CALL OF fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}
2021-03-12 01:58:47,121 [main:61] - WITHOUT TYPE PARAMS = fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}
2021-03-12 01:58:47,505 [main:302] - generating value of type = String true depth = 1
2021-03-12 01:58:47,510 [main:302] - generating value of type = Int true depth = 1
2021-03-12 01:58:47,514 [main:302] - generating value of type = String true depth = 1
2021-03-12 01:58:47,518 [main:302] - generating value of type = Function0<Int> false depth = 1
2021-03-12 01:58:47,522 [main:302] - generating value of type = Int true depth = 2
2021-03-12 01:58:47,527 [main:95] - GENERATED = doTest("zlflx", 1066978651, "jtkpr", { 1882453638})
2021-03-12 01:58:47,694 [main:43] - GENERATING CALL OF fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(B.x)).toLong().toString(logged((logged(1))))
    })
}
2021-03-12 01:58:47,698 [main:61] - WITHOUT TYPE PARAMS = fun fu0(prope1: suspend () -> Unit) {
    var log = ""
prope1.startCoroutine(fu3 {
        prope0 = (logged(B.x)).toLong().toString(logged((logged(1))))
    })
}
2021-03-12 01:58:48,073 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 1
2021-03-12 01:58:48,078 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 01:58:48,254 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 01:58:48,259 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 01:58:48,831 [main:302] - generating value of type = Boolean true depth = 5
2021-03-12 01:58:48,835 [main:302] - generating value of type = Function0<Any> false depth = 5
2021-03-12 01:58:48,840 [main:302] - generating value of type = Any false depth = 6
2021-03-12 01:58:48,840 [main:95] - GENERATED = require(true, { "wqimi"})
2021-03-12 01:58:48,840 [main:95] - GENERATED = fu0({ require(true, { "wqimi"})})
2021-03-12 01:58:49,014 [main:43] - GENERATING CALL OF suspend fun <Ty0> fu1(): Ty0 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}
2021-03-12 01:58:49,037 [main:61] - WITHOUT TYPE PARAMS = suspend fun <Ty0> fu1(): B = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope1 = it as Continuation<Any>
}
2021-03-12 01:58:49,217 [main:95] - GENERATED = fu1<B>()
2021-03-12 01:58:49,388 [main:43] - GENERATING CALL OF fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}
2021-03-12 01:58:49,401 [main:61] - WITHOUT TYPE PARAMS = fun <Ty0> fu2(x: (Long) -> Unit): Continuation<Long> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Ty0>) {
        var log = ""
x(prope0.getOrThrow())
    }
}
2021-03-12 01:58:49,778 [main:302] - generating value of type = Function1<Long, Unit> false depth = 1
2021-03-12 01:58:49,782 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 01:58:49,960 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 01:58:49,966 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 01:58:50,347 [main:302] - generating value of type = Boolean true depth = 5
2021-03-12 01:58:50,352 [main:95] - GENERATED = require(true)
2021-03-12 01:58:50,352 [main:95] - GENERATED = fu2<Long>({a: Long -> require(true)})
2021-03-12 01:58:50,525 [main:43] - GENERATING CALL OF fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}
2021-03-12 01:58:50,529 [main:61] - WITHOUT TYPE PARAMS = fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope0: Result<Any?>) {
        var log = ""
UninitializedPropertyAccessException()?.let(x)
    }
}
2021-03-12 01:58:50,911 [main:302] - generating value of type = Function1<Throwable, Unit> false depth = 1
2021-03-12 01:58:50,915 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 01:58:51,099 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 01:58:51,105 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 01:58:51,546 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 5
2021-03-12 01:58:51,550 [main:302] - generating value of type = Unit false depth = 6
2021-03-12 01:58:51,557 [main:95] - GENERATED = contract({ println()})
2021-03-12 01:58:51,557 [main:95] - GENERATED = fu3({a: Throwable -> contract({ println()})})
2021-03-12 01:58:51,724 [main:43] - GENERATING CALL OF fun <Ty1> Kla10<Ty1>.fu15(f: (Ty1)-> Ty1): Kla10<Ty1> = Kla10<Ty1>(f(head), null)
2021-03-12 01:58:51,737 [main:61] - WITHOUT TYPE PARAMS = fun <Ty1> Kla10<Float>.fu15(f: (Float)-> Float): Kla10<Float> = Kla10<Ty1>(f(head), null)
2021-03-12 01:58:52,114 [main:302] - generating value of type = Function1<Float, Float> false depth = 1
2021-03-12 01:58:52,118 [main:302] - generating value of type = Float true depth = 2
2021-03-12 01:58:52,122 [main:302] - generating value of type = Kla10<Float> false depth = 1
2021-03-12 01:58:52,126 [main:112] - generating klass Kla10 text = class Kla10<Ty1>(val head: Int, val tail: Kla10<Int>? = null)
2021-03-12 01:58:53,143 [main:194] - Type params = [Float]
2021-03-12 01:58:53,497 [main:302] - generating value of type = Int true depth = 3
