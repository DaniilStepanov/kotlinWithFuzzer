2021-03-12 01:48:38,019 [main:24] - Name = /home/stepanov/Kotlin/bbfgradle/tmp/arrays/argumentWithSideEffects.kt
2021-03-12 01:48:43,061 [main:53] - Start to mutate
2021-03-12 01:48:43,061 [main:54] - BEFORE = var log = ""

fun <T> logged(value: T): T =
    value.also { log += "$value;" }

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != expected) throw AssertionError("$id expected: $expected, actual: $actual")
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $log")
}

object A {
    var x = 0
        get() = field.also { log += "get-A.x;" }
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += "getA();" }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also { log += "get-B($i1, $i2, $i3);" }

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $i2, $i3, $value);"
        x = value
    }
}

fun getB() = B.also { log += "getB();" }

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", 1, "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { getA().x-- }

    doTest("++getB()[1, 2, 3]", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 1);get-B(1, 2, 3);") {
        ++getB()[logged(1), logged(2), logged(3)]
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { getB()[logged(1), logged(2), logged(3)]-- }

    return "OK"
}
2021-03-12 01:48:44,245 [main:40] - Mutation of tmp/tmp0.kt started
2021-03-12 01:48:44,844 [main:19] - Cur transformation AddDefaultValueToArg
2021-03-12 01:49:04,705 [main:19] - Cur transformation LocalTCE
2021-03-12 01:49:42,983 [main:128] - Start to reduce tmp/tmp.kt
var log = ""

fun <T> logged(value: T): T =
    value.also {a: T -> print("kaczm")}

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != ('㣝').toFloat().compareTo(-117)) throw AssertionError((actual).toInt().toString(A.x))
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $(A.x).toString(actual)")
}

object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += (getA()).x.toString(B.x) }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also {a: Int -> repeat(-445802008, {a: Int -> println("nebdx")})}

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $(value).compareTo(x).sign, $i3, $value);"
        x = value
    }
}

fun getB() = B.also {a: B -> require(false, { "nyaed"})}

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", (linkedSetOf<A>(A)).size.shl(B.x), "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { 1997282016}

    doTest("++getB()[1, 2, 3]", 1, (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).contentToString()) {
        (B.x).div(-25)
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { (9107430422333898917.toULong()).compareTo(12.toUByte()).takeLowestOneBit() }

    return "OK"
}


2021-03-12 01:50:08,653 [main:131] - Reduced: tmp/tmp.kt
var log = ""
object A
fun getA() = A.also { log += getA().toString }

2021-03-12 01:51:33,347 [main:128] - Start to reduce tmp/tmp.kt
var log = ""

fun <T> logged(value: T): T =
    value.also {a: T -> print("kaczm")}

fun doTest(id: String, expected: Int, expectedLog: String, test: () -> Int) {
    log = ""
    val actual = test()
    if (actual != ('㣝').toFloat().compareTo(-117)) throw AssertionError((actual).toInt().toString(A.x))
    if (log != expectedLog) throw AssertionError("$id expectedLog: $expectedLog, actual: $(A.x).toString(actual)")
}

object A {
    var x = 0
        get() = (getA()).x.toInt()
        set(value: Int) {
            log += "set-A.x;"
            field = value
        }

}

fun getA() = A.also { log += (getA()).x.toString(B.x) }

object B {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x.also {a: Int -> repeat(-445802008, {a: Int -> println("nebdx")})}

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        log += "set-B($i1, $(value).compareTo(x).sign, $i3, $value);"
        x = value
    }
}

fun getB() = B.also {a: B -> require(false, { "nyaed"})}

fun box(): String {
    // NOTE: Getter is currently called twice for prefix increment; 1st for initial value, 2nd for return value. See KT-42077.
    doTest("++getA().x", (linkedSetOf<A>(A)).size.shl(B.x), "getA();get-A.x;set-A.x;get-A.x;") { ++getA().x }
    doTest("getA().x--", 1, "getA();get-A.x;set-A.x;") { 1997282016}

    doTest("++getB()[1, 2, 3]", 1, (logged<Array<Float>>(Array<Float>(1513132776, {a: Int -> 0.6006693f}))).contentToString()) {
        (B.x).div(-25)
    }
    doTest("getB()[1, 2, 3].x--", 1, "getB();1;2;3;get-B(1, 2, 3);set-B(1, 2, 3, 0);") { (9107430422333898917.toULong()).compareTo(12.toUByte()).takeLowestOneBit() }

    return "OK"
}


2021-03-12 01:51:58,775 [main:131] - Reduced: tmp/tmp.kt
var log = ""
object A
fun getA() = A.also { log += getA().toString }

2021-03-12 01:54:12,499 [main:19] - Cur transformation AddReificationToTypeParam
2021-03-12 01:54:12,834 [main:19] - Cur transformation TCETransformation
