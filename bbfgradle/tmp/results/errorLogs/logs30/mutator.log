2021-03-11 20:20:59,290 [main:66] - Compilation checking started
2021-03-11 20:21:00,358 [main:302] - generating value of type = Function0<T> false depth = 0
2021-03-11 20:21:00,361 [main:302] - generating value of type = T false depth = 1
2021-03-11 20:21:00,622 [main:43] - GENERATING CALL OF fun <T> minOf(a: UByte, b: UByte, c: UByte): T = TODO()
2021-03-11 20:21:00,626 [main:61] - WITHOUT TYPE PARAMS = fun <T> minOf(a: UByte, b: UByte, c: UByte): T = TODO()
2021-03-11 20:21:00,791 [main:302] - generating value of type = UByte true depth = 4
2021-03-11 20:21:00,792 [main:302] - generating value of type = UByte true depth = 4
2021-03-11 20:21:00,793 [main:302] - generating value of type = UByte true depth = 4
2021-03-11 20:21:00,795 [main:95] - GENERATED = minOf<UByte>(106.toUByte(), 93.toUByte(), 41.toUByte())
2021-03-11 20:21:00,796 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:21:00,797 [main:66] - Compilation checking started
2021-03-11 20:21:00,804 [main:71] - Wrong syntax or breaks conditions
2021-03-11 20:21:00,805 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T = { minOf(106.toUByte(), 93.toUByte(), 41.toUByte())}): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}


2021-03-11 20:21:00,806 [main:302] - generating value of type = Function0<InlinedInt> false depth = 0
2021-03-11 20:21:00,806 [main:302] - generating value of type = InlinedInt false depth = 1
2021-03-11 20:21:00,806 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:21:00,975 [main:194] - Type params = []
2021-03-11 20:21:01,117 [main:302] - generating value of type = Int true depth = 3
2021-03-11 20:21:01,120 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:21:01,121 [main:66] - Compilation checking started
2021-03-11 20:21:01,125 [main:71] - Wrong syntax or breaks conditions
2021-03-11 20:21:01,125 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt = { InlinedInt(-857452527)}): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}


2021-03-11 20:21:01,127 [main:50] - replacing callback: () -> InlinedString Function0<InlinedString>
2021-03-11 20:21:01,127 [main:54] - Getting value of type Function0<InlinedString>
2021-03-11 20:21:01,308 [main:302] - generating value of type = Function0<InlinedString> false depth = 0
2021-03-11 20:21:01,309 [main:302] - generating value of type = InlinedString false depth = 1
2021-03-11 20:21:01,310 [main:112] - generating klass InlinedString text = inline class InlinedString(val internal: String)
2021-03-11 20:21:01,423 [main:194] - Type params = []
2021-03-11 20:21:01,557 [main:302] - generating value of type = String true depth = 3
2021-03-11 20:21:01,562 [main:58] - GENERATED VALUE OF TYPE Function0<InlinedString> = { InlinedString("oedle")}
2021-03-11 20:21:01,563 [main:61] - GENERATED IS CALL =false
2021-03-11 20:21:01,703 [main:67] - randomType = InlinedString?
2021-03-11 20:21:01,811 [main:302] - generating value of type = InlinedString false depth = 0
2021-03-11 20:21:01,812 [main:112] - generating klass InlinedString text = inline class InlinedString(val internal: String)
2021-03-11 20:21:01,957 [main:194] - Type params = []
2021-03-11 20:21:02,060 [main:302] - generating value of type = String true depth = 2
2021-03-11 20:21:02,089 [main:106] - GETTING Function0<InlinedString> from Function0<InlinedInt>
2021-03-11 20:21:02,121 [main:106] - GETTING Function0<InlinedString> from Function0<T>
2021-03-11 20:21:02,148 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:21:02,149 [main:66] - Compilation checking started
2021-03-11 20:21:02,153 [main:71] - Wrong syntax or breaks conditions
2021-03-11 20:21:02,153 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString = { InlinedString("oedle")}): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}


2021-03-11 20:21:02,154 [main:50] - replacing i: InlinedInt InlinedInt
2021-03-11 20:21:02,154 [main:54] - Getting value of type InlinedInt
2021-03-11 20:21:02,263 [main:302] - generating value of type = InlinedInt false depth = 0
2021-03-11 20:21:02,264 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:21:02,358 [main:194] - Type params = []
2021-03-11 20:21:02,451 [main:302] - generating value of type = Int true depth = 2
2021-03-11 20:21:02,452 [main:58] - GENERATED VALUE OF TYPE InlinedInt = InlinedInt(-137954315)
2021-03-11 20:21:02,452 [main:61] - GENERATED IS CALL =true
2021-03-11 20:21:02,718 [main:67] - randomType = Boolean?
2021-03-11 20:21:02,828 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:21:02,885 [main:106] - GETTING InlinedInt from Function0<T>
2021-03-11 20:21:02,914 [main:106] - GETTING InlinedInt from Function0<InlinedInt>
2021-03-11 20:21:02,936 [main:113] - Case = [public abstract operator fun invoke(): InlinedInt defined in kotlin.Function0[FunctionInvokeDescriptor@40a21fe9]]
2021-03-11 20:21:02,936 [main:149] - GENERATING call of type public abstract operator fun invoke(): InlinedInt defined in kotlin.Function0[FunctionInvokeDescriptor@40a21fe9]
2021-03-11 20:21:02,937 [main:117] - GENERATED CALL = (callback).invoke()
2021-03-11 20:21:02,938 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:21:02,938 [main:66] - Compilation checking started
2021-03-11 20:21:02,940 [main:71] - Wrong syntax or breaks conditions
2021-03-11 20:21:02,940 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt = (callback).invoke(), s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}


2021-03-11 20:21:02,941 [main:50] - replacing s: InlinedString InlinedString
2021-03-11 20:21:02,941 [main:54] - Getting value of type InlinedString
2021-03-11 20:21:03,028 [main:302] - generating value of type = InlinedString false depth = 0
2021-03-11 20:21:03,028 [main:112] - generating klass InlinedString text = inline class InlinedString(val internal: String)
2021-03-11 20:21:03,117 [main:194] - Type params = []
2021-03-11 20:21:03,220 [main:302] - generating value of type = String true depth = 2
2021-03-11 20:21:03,221 [main:58] - GENERATED VALUE OF TYPE InlinedString = InlinedString("ciwpt")
2021-03-11 20:21:03,225 [main:61] - GENERATED IS CALL =true
2021-03-11 20:21:03,675 [main:67] - randomType = HashMap<Function1<InlinedString, InlinedInt?>, Double>
2021-03-11 20:21:03,783 [main:302] - generating value of type = HashMap<Function1<InlinedString, InlinedInt?>, Double> false depth = 0
2021-03-11 20:21:03,891 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(pairs: Pair<Function1<InlinedString, InlinedInt?>, Double>): HashMap<Function1<InledStrg, InledInt?>, Double> = TODO()
2021-03-11 20:21:03,893 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(pairs: Pair<Function1<InlinedString, InlinedInt?>, Double>): HashMap<Function1<InledStrg, InledInt?>, Double> = TODO()
2021-03-11 20:21:04,033 [main:302] - generating value of type = Pair<Function1<InlinedString, InlinedInt?>, Double> false depth = 3
2021-03-11 20:21:04,148 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Function1<InlinedString, InlinedInt?>, second: Double): Pair<Function1<InlinedString, InlinedInt?>, Double> = TODO()
2021-03-11 20:21:04,150 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Function1<InlinedString, InlinedInt?>, second: Double): Pair<Function1<InlinedString, InlinedInt?>, Double> = TODO()
2021-03-11 20:21:04,248 [main:302] - generating value of type = Function1<InlinedString, InlinedInt?> false depth = 6
2021-03-11 20:21:04,249 [main:302] - generating value of type = InlinedInt false depth = 7
2021-03-11 20:21:04,249 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:21:04,348 [main:194] - Type params = []
2021-03-11 20:21:04,477 [main:302] - generating value of type = Int true depth = 9
2021-03-11 20:21:04,478 [main:302] - generating value of type = Double true depth = 6
2021-03-11 20:21:04,480 [main:95] - GENERATED = Pair<Function1<InlinedString, InlinedInt?>, Double>({a: InlinedString -> InlinedInt(-1643691947)}, 0.09927354481411177)
2021-03-11 20:21:04,481 [main:95] - GENERATED = hashMapOf<Function1<InlinedString, InlinedInt?>, Double>(Pair<Function1<InlinedString, InlinedInt?>, Double>({a: InlinedString -> InlinedInt(-1643691947)}, 0.09927354481411177))
2021-03-11 20:21:04,724 [main:106] - GETTING InlinedString from Function0<T>
2021-03-11 20:21:04,737 [main:106] - GETTING InlinedString from Function0<InlinedInt>
2021-03-11 20:21:04,751 [main:106] - GETTING InlinedString from Function0<InlinedString>
2021-03-11 20:21:04,765 [main:113] - Case = [public abstract operator fun invoke(): InlinedString defined in kotlin.Function0[FunctionInvokeDescriptor@5f506203]]
2021-03-11 20:21:04,765 [main:149] - GENERATING call of type public abstract operator fun invoke(): InlinedString defined in kotlin.Function0[FunctionInvokeDescriptor@5f506203]
2021-03-11 20:21:04,766 [main:117] - GENERATED CALL = (callback).invoke()
2021-03-11 20:21:04,766 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:21:04,767 [main:66] - Compilation checking started
2021-03-11 20:21:04,769 [main:71] - Wrong syntax or breaks conditions
2021-03-11 20:21:04,769 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString = (callback).invoke()) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}


2021-03-11 20:21:04,770 [main:50] - replacing val internal: Int Int
2021-03-11 20:21:04,770 [main:54] - Getting value of type Int
2021-03-11 20:21:04,858 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:21:04,859 [main:58] - GENERATED VALUE OF TYPE Int = 350649276
2021-03-11 20:21:04,859 [main:61] - GENERATED IS CALL =false
2021-03-11 20:21:04,860 [main:67] - randomType = InlinedInt
2021-03-11 20:21:04,952 [main:302] - generating value of type = InlinedInt false depth = 0
2021-03-11 20:21:04,953 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:21:05,040 [main:194] - Type params = []
2021-03-11 20:21:05,125 [main:302] - generating value of type = Int true depth = 2
2021-03-11 20:21:05,134 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@401f8e24]
2021-03-11 20:21:05,222 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:21:05,224 [main:78] - Generated call from random type = (InlinedInt(-1777093424)).internal.ushr(-1068171586)
2021-03-11 20:21:05,225 [main:106] - GETTING Int from InlinedInt
2021-03-11 20:21:05,233 [main:113] - Case = [public final val internal: kotlin.Int defined in InlinedInt[PropertyDescriptorImpl@675fd2a9], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@d4c88aa]]
2021-03-11 20:21:05,233 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@d4c88aa]
2021-03-11 20:21:05,341 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:21:05,346 [main:117] - GENERATED CALL = (i).internal.rem(-101)
2021-03-11 20:21:05,346 [main:113] - Case = [public final val internal: kotlin.Int defined in InlinedInt[PropertyDescriptorImpl@675fd2a9], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7f3234f6]]
2021-03-11 20:21:05,346 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7f3234f6]
2021-03-11 20:21:05,347 [main:117] - GENERATED CALL = (i).internal.unaryPlus()
2021-03-11 20:21:05,348 [main:113] - Case = [public final val internal: kotlin.Int defined in InlinedInt[PropertyDescriptorImpl@675fd2a9], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@34984413]]
2021-03-11 20:21:05,348 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@34984413]
2021-03-11 20:21:05,350 [main:117] - GENERATED CALL = (i).internal.inc()
2021-03-11 20:21:05,350 [main:113] - Case = [public final val internal: kotlin.Int defined in InlinedInt[PropertyDescriptorImpl@675fd2a9], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@41cd00cd]]
2021-03-11 20:21:05,350 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@41cd00cd]
2021-03-11 20:21:05,458 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:21:05,459 [main:117] - GENERATED CALL = (i).internal.or(589355685)
2021-03-11 20:21:05,460 [main:113] - Case = [public final val internal: kotlin.Int defined in InlinedInt[PropertyDescriptorImpl@675fd2a9], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4feb580]]
2021-03-11 20:21:05,460 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4feb580]
2021-03-11 20:21:05,461 [main:117] - GENERATED CALL = (i).internal.toInt()
2021-03-11 20:21:05,461 [main:113] - Case = [public final val internal: kotlin.Int defined in InlinedInt[PropertyDescriptorImpl@675fd2a9], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1c6dfdb1]]
2021-03-11 20:21:05,461 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1c6dfdb1]
2021-03-11 20:21:05,561 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:21:05,562 [main:117] - GENERATED CALL = (i).internal.coerceAtMost(-314625659)
2021-03-11 20:21:05,563 [main:113] - Case = [public final val internal: kotlin.Int defined in InlinedInt[PropertyDescriptorImpl@675fd2a9], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@219912ec]]
2021-03-11 20:21:05,563 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@219912ec]
2021-03-11 20:21:05,653 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:21:05,654 [main:117] - GENERATED CALL = (i).internal.coerceAtLeast(-237658962)
2021-03-11 20:21:05,655 [main:113] - Case = [public final val internal: kotlin.Int defined in InlinedInt[PropertyDescriptorImpl@675fd2a9], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1f57dbd0]]
2021-03-11 20:21:05,655 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-11 20:21:05,767 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:21:05,768 [main:117] - GENERATED CALL = (i).internal.minus(-102)
2021-03-11 20:21:05,770 [main:113] - Case = [public final val internal: kotlin.Int defined in InlinedInt[PropertyDescriptorImpl@675fd2a9], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3aaede52]]
2021-03-11 20:21:05,771 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3aaede52]
2021-03-11 20:21:05,772 [main:117] - GENERATED CALL = (i).internal.countOneBits()
2021-03-11 20:21:05,772 [main:113] - Case = [public final val internal: kotlin.Int defined in InlinedInt[PropertyDescriptorImpl@675fd2a9], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@76657463]]
2021-03-11 20:21:05,772 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@76657463]
2021-03-11 20:21:05,879 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:21:05,880 [main:117] - GENERATED CALL = (i).internal.xor(-440160430)
2021-03-11 20:21:05,880 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:21:05,881 [main:66] - Compilation checking started
2021-03-11 20:21:05,883 [main:71] - Wrong syntax or breaks conditions
2021-03-11 20:21:05,883 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int = 350649276)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}


2021-03-11 20:21:05,884 [main:50] - replacing val internal: String String
2021-03-11 20:21:05,884 [main:54] - Getting value of type String
2021-03-11 20:21:05,974 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:21:05,974 [main:58] - GENERATED VALUE OF TYPE String = "csydj"
2021-03-11 20:21:05,975 [main:61] - GENERATED IS CALL =false
2021-03-11 20:21:05,975 [main:67] - randomType = String
2021-03-11 20:21:06,084 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:21:06,132 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e848fd1]
2021-03-11 20:21:06,227 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 20:21:06,322 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 20:21:06,324 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 20:21:06,529 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 20:21:06,533 [main:95] - GENERATED = StringBuilder("sqwqk")
2021-03-11 20:21:06,534 [main:78] - Generated call from random type = ("odimt").removePrefix(StringBuilder("sqwqk"))
2021-03-11 20:21:06,535 [main:106] - GETTING String from InlinedString
2021-03-11 20:21:06,543 [main:113] - Case = [public final val internal: kotlin.String defined in InlinedString[PropertyDescriptorImpl@38019e], public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19ceab91]]
2021-03-11 20:21:06,543 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19ceab91]
2021-03-11 20:21:06,638 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:21:06,720 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:21:06,824 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:21:06,826 [main:117] - GENERATED CALL = (s).internal.replaceAfterLast('畣', "neiat", "qddin")
2021-03-11 20:21:06,826 [main:113] - Case = [public final val internal: kotlin.String defined in InlinedString[PropertyDescriptorImpl@38019e], @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b2162ab]]
2021-03-11 20:21:06,826 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b2162ab]
2021-03-11 20:21:06,950 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 20:21:07,051 [main:43] - GENERATING CALL OF fun UByteArray(size: kotlin.Int): Iterable<Int> = TODO()
2021-03-11 20:21:07,054 [main:61] - WITHOUT TYPE PARAMS = fun UByteArray(size: kotlin.Int): Iterable<Int> = TODO()
2021-03-11 20:21:07,253 [main:302] - generating value of type = Int true depth = 3
2021-03-11 20:21:07,253 [main:95] - GENERATED = UByteArray(-922908088)
2021-03-11 20:21:07,254 [main:117] - GENERATED CALL = (s).internal.slice(UByteArray(-922908088))
2021-03-11 20:21:07,254 [main:113] - Case = [public final val internal: kotlin.String defined in InlinedString[PropertyDescriptorImpl@38019e], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f55020e]]
2021-03-11 20:21:07,255 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f55020e]
2021-03-11 20:21:07,255 [main:117] - GENERATED CALL = (s).internal.toLowerCase()
2021-03-11 20:21:07,256 [main:113] - Case = [public final val internal: kotlin.String defined in InlinedString[PropertyDescriptorImpl@38019e], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7306c6d8]]
2021-03-11 20:21:07,256 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7306c6d8]
2021-03-11 20:21:07,380 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 20:21:07,380 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 20:21:07,382 [main:117] - GENERATED CALL = (s).internal.filterNot({a: Char -> true})
2021-03-11 20:21:07,382 [main:113] - Case = [public final val internal: kotlin.String defined in InlinedString[PropertyDescriptorImpl@38019e], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5710e7a3]]
2021-03-11 20:21:07,382 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5710e7a3]
2021-03-11 20:21:07,469 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 20:21:07,470 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 20:21:07,471 [main:117] - GENERATED CALL = (s).internal.filter({a: Char -> false})
2021-03-11 20:21:07,471 [main:113] - Case = [public final val internal: kotlin.String defined in InlinedString[PropertyDescriptorImpl@38019e], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23ca4308]]
2021-03-11 20:21:07,471 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23ca4308]
2021-03-11 20:21:07,558 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:21:07,648 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:21:07,742 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:21:07,743 [main:117] - GENERATED CALL = (s).internal.replaceAfter('挄', "wafxa", "bpjcf")
2021-03-11 20:21:07,744 [main:113] - Case = [public final val internal: kotlin.String defined in InlinedString[PropertyDescriptorImpl@38019e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c22f8a5]]
2021-03-11 20:21:07,745 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c22f8a5]
2021-03-11 20:21:07,842 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-11 20:21:07,842 [main:302] - generating value of type = Char true depth = 1
2021-03-11 20:21:07,844 [main:117] - GENERATED CALL = (s).internal.replaceFirstChar({a: Char -> '宆'})
2021-03-11 20:21:07,844 [main:113] - Case = [public final val internal: kotlin.String defined in InlinedString[PropertyDescriptorImpl@38019e], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d5c6662]]
2021-03-11 20:21:07,845 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d5c6662]
2021-03-11 20:21:07,929 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:21:08,010 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:21:08,099 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:21:08,100 [main:117] - GENERATED CALL = (s).internal.replaceBeforeLast('⤯', "rrqoo", "ijmfd")
2021-03-11 20:21:08,100 [main:113] - Case = [public final val internal: kotlin.String defined in InlinedString[PropertyDescriptorImpl@38019e], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@369bb7f8]]
2021-03-11 20:21:08,101 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@369bb7f8]
2021-03-11 20:21:08,101 [main:117] - GENERATED CALL = (s).internal.takeLast(internal)
2021-03-11 20:21:08,102 [main:113] - Case = [public final val internal: kotlin.String defined in InlinedString[PropertyDescriptorImpl@38019e], public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7fcd6734]]
2021-03-11 20:21:08,102 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7fcd6734]
2021-03-11 20:21:08,223 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 20:21:08,223 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 20:21:08,225 [main:117] - GENERATED CALL = (s).internal.dropWhile({a: Char -> true})
2021-03-11 20:21:08,225 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:21:08,226 [main:66] - Compilation checking started
2021-03-11 20:21:08,228 [main:71] - Wrong syntax or breaks conditions
2021-03-11 20:21:08,229 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String = (s).internal.replaceBeforeLast('⤯', "rrqoo", "ijmfd"))

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}


2021-03-11 20:21:08,414 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:21:08,496 [main:194] - Type params = []
2021-03-11 20:21:08,597 [main:302] - generating value of type = Int true depth = 1
2021-03-11 20:21:08,598 [main:112] - generating klass InlinedString text = inline class InlinedString(val internal: String)
2021-03-11 20:21:08,689 [main:194] - Type params = []
2021-03-11 20:21:08,775 [main:302] - generating value of type = String true depth = 1
2021-03-11 20:21:08,971 [main:43] - GENERATING CALL OF inline fun <T> foo(callback: () -> T): T {
    return callback()
}
2021-03-11 20:21:09,085 [main:61] - WITHOUT TYPE PARAMS = inline fun <T> foo(callback: () -> Set<Int>): Set<Int> {
    return callback()
}
2021-03-11 20:21:09,272 [main:302] - generating value of type = Function0<Set<Int>> false depth = 1
2021-03-11 20:21:09,273 [main:302] - generating value of type = Set<Int> false depth = 2
2021-03-11 20:21:09,356 [main:43] - GENERATING CALL OF fun <T> setOf(element: Int): Set<Int> = TODO()
2021-03-11 20:21:09,357 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOf(element: Int): Set<Int> = TODO()
2021-03-11 20:21:09,486 [main:302] - generating value of type = Int true depth = 5
2021-03-11 20:21:09,487 [main:95] - GENERATED = setOf<Int>(1745493754)
2021-03-11 20:21:09,488 [main:95] - GENERATED = foo<Set<Int>>({ setOf<Int>(1745493754)})
2021-03-11 20:21:09,587 [main:43] - GENERATING CALL OF inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}
2021-03-11 20:21:09,587 [main:61] - WITHOUT TYPE PARAMS = inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}
2021-03-11 20:21:09,793 [main:302] - generating value of type = Function0<InlinedInt> false depth = 1
2021-03-11 20:21:09,794 [main:302] - generating value of type = InlinedInt false depth = 2
2021-03-11 20:21:09,794 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:21:09,885 [main:194] - Type params = []
2021-03-11 20:21:09,962 [main:302] - generating value of type = Int true depth = 4
2021-03-11 20:21:09,963 [main:95] - GENERATED = bar({ InlinedInt(-1423100014)})
2021-03-11 20:21:10,057 [main:43] - GENERATING CALL OF inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}
2021-03-11 20:21:10,058 [main:61] - WITHOUT TYPE PARAMS = inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}
2021-03-11 20:21:10,238 [main:302] - generating value of type = Function0<InlinedString> false depth = 1
2021-03-11 20:21:10,238 [main:302] - generating value of type = InlinedString false depth = 2
2021-03-11 20:21:10,239 [main:112] - generating klass InlinedString text = inline class InlinedString(val internal: String)
2021-03-11 20:21:10,319 [main:194] - Type params = []
2021-03-11 20:21:10,399 [main:302] - generating value of type = String true depth = 4
2021-03-11 20:21:10,400 [main:95] - GENERATED = baz({ InlinedString("wvyzp")})
2021-03-11 20:21:10,491 [main:43] - GENERATING CALL OF fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}
2021-03-11 20:21:10,491 [main:61] - WITHOUT TYPE PARAMS = fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}
2021-03-11 20:21:10,583 [main:302] - generating value of type = InlinedInt false depth = 1
2021-03-11 20:21:10,583 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:21:10,662 [main:194] - Type params = []
2021-03-11 20:21:10,740 [main:302] - generating value of type = Int true depth = 3
2021-03-11 20:21:10,741 [main:302] - generating value of type = InlinedString false depth = 1
2021-03-11 20:21:10,741 [main:112] - generating klass InlinedString text = inline class InlinedString(val internal: String)
2021-03-11 20:21:10,819 [main:194] - Type params = []
2021-03-11 20:21:10,910 [main:302] - generating value of type = String true depth = 3
2021-03-11 20:21:10,911 [main:95] - GENERATED = test(InlinedInt(-890961062), InlinedString("zkrpn"))
2021-03-11 20:21:11,031 [main:45] - Trying to change 19 nodes
2021-03-11 20:21:11,033 [main:53] - replacing (i, InlinedInt)
2021-03-11 20:21:11,034 [main:50] - replacing i InlinedInt
2021-03-11 20:21:11,034 [main:54] - Getting value of type InlinedInt
2021-03-11 20:21:11,119 [main:302] - generating value of type = InlinedInt false depth = 0
2021-03-11 20:21:11,120 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:21:11,200 [main:194] - Type params = []
2021-03-11 20:21:11,282 [main:302] - generating value of type = Int true depth = 2
2021-03-11 20:21:11,283 [main:58] - GENERATED VALUE OF TYPE InlinedInt = InlinedInt(-1660615562)
2021-03-11 20:21:11,283 [main:61] - GENERATED IS CALL =true
2021-03-11 20:21:11,388 [main:67] - randomType = Double
2021-03-11 20:21:11,488 [main:302] - generating value of type = Double true depth = 0
2021-03-11 20:21:11,558 [main:106] - GETTING InlinedInt from Set<Int>
2021-03-11 20:21:11,596 [main:106] - GETTING InlinedInt from InlinedString
2021-03-11 20:21:11,604 [main:106] - GETTING InlinedInt from String
2021-03-11 20:21:11,643 [main:106] - GETTING InlinedInt from InlinedInt
2021-03-11 20:21:11,651 [main:61] - replacement of i of type InlinedInt is InlinedInt(-1660615562)
2021-03-11 20:21:11,731 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:21:11,732 [main:66] - Compilation checking started
2021-03-11 20:21:12,260 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { InlinedInt(-1660615562) }

    foo { s }
    baz { s }
}


2021-03-11 20:21:12,261 [main:53] - replacing (s, InlinedString)
2021-03-11 20:21:12,261 [main:50] - replacing s InlinedString
2021-03-11 20:21:12,261 [main:54] - Getting value of type InlinedString
2021-03-11 20:21:12,371 [main:302] - generating value of type = InlinedString false depth = 0
2021-03-11 20:21:12,371 [main:112] - generating klass InlinedString text = inline class InlinedString(val internal: String)
2021-03-11 20:21:12,483 [main:194] - Type params = []
2021-03-11 20:21:12,586 [main:302] - generating value of type = String true depth = 2
2021-03-11 20:21:12,586 [main:58] - GENERATED VALUE OF TYPE InlinedString = InlinedString("fftvx")
2021-03-11 20:21:12,587 [main:61] - GENERATED IS CALL =true
2021-03-11 20:21:12,688 [main:67] - randomType = InlinedString?
2021-03-11 20:21:12,771 [main:302] - generating value of type = InlinedString false depth = 0
2021-03-11 20:21:12,772 [main:112] - generating klass InlinedString text = inline class InlinedString(val internal: String)
2021-03-11 20:21:12,854 [main:194] - Type params = []
2021-03-11 20:21:12,933 [main:302] - generating value of type = String true depth = 2
2021-03-11 20:21:12,941 [main:106] - GETTING InlinedString from Set<Int>
2021-03-11 20:21:12,973 [main:106] - GETTING InlinedString from InlinedString
2021-03-11 20:21:12,980 [main:61] - replacement of s of type InlinedString is s
2021-03-11 20:21:13,065 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:21:13,066 [main:53] - replacing (s, InlinedString)
2021-03-11 20:21:13,067 [main:50] - replacing s InlinedString
2021-03-11 20:21:13,067 [main:54] - Getting value of type InlinedString
2021-03-11 20:21:13,164 [main:302] - generating value of type = InlinedString false depth = 0
2021-03-11 20:21:13,164 [main:112] - generating klass InlinedString text = inline class InlinedString(val internal: String)
2021-03-11 20:21:13,259 [main:194] - Type params = []
2021-03-11 20:21:13,353 [main:302] - generating value of type = String true depth = 2
2021-03-11 20:21:13,354 [main:58] - GENERATED VALUE OF TYPE InlinedString = InlinedString("jpxca")
2021-03-11 20:21:13,354 [main:61] - GENERATED IS CALL =true
2021-03-11 20:21:13,355 [main:67] - randomType = InlinedInt
2021-03-11 20:21:13,444 [main:302] - generating value of type = InlinedInt false depth = 0
2021-03-11 20:21:13,444 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:21:13,525 [main:194] - Type params = []
2021-03-11 20:21:13,606 [main:302] - generating value of type = Int true depth = 2
2021-03-11 20:21:13,615 [main:106] - GETTING InlinedString from String
2021-03-11 20:21:13,645 [main:106] - GETTING InlinedString from InlinedInt
2021-03-11 20:21:13,651 [main:106] - GETTING InlinedString from InlinedString
2021-03-11 20:21:13,658 [main:61] - replacement of s of type InlinedString is baz({ InlinedString("wvyzp")})
2021-03-11 20:21:13,742 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:21:13,742 [main:66] - Compilation checking started
2021-03-11 20:21:14,168 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { InlinedInt(-1660615562) }

    foo { s }
    baz { baz({ InlinedString("wvyzp")}) }
}


2021-03-11 20:21:14,169 [main:53] - replacing ({ s }, Function0<InlinedString>)
2021-03-11 20:21:14,170 [main:50] - replacing { s } Function0<InlinedString>
2021-03-11 20:21:14,170 [main:54] - Getting value of type Function0<InlinedString>
2021-03-11 20:21:14,284 [main:302] - generating value of type = Function0<InlinedString> false depth = 0
2021-03-11 20:21:14,285 [main:302] - generating value of type = InlinedString false depth = 1
2021-03-11 20:21:14,285 [main:112] - generating klass InlinedString text = inline class InlinedString(val internal: String)
2021-03-11 20:21:14,371 [main:194] - Type params = []
2021-03-11 20:21:14,449 [main:302] - generating value of type = String true depth = 3
2021-03-11 20:21:14,450 [main:58] - GENERATED VALUE OF TYPE Function0<InlinedString> = { InlinedString("wwvlb")}
2021-03-11 20:21:14,450 [main:61] - GENERATED IS CALL =false
2021-03-11 20:21:14,451 [main:67] - randomType = Int
2021-03-11 20:21:14,527 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:21:14,569 [main:106] - GETTING Function0<InlinedString> from InlinedString
2021-03-11 20:21:14,574 [main:106] - GETTING Function0<InlinedString> from Set<Int>
2021-03-11 20:21:14,596 [main:106] - GETTING Function0<InlinedString> from Int
2021-03-11 20:21:14,647 [main:106] - GETTING Function0<InlinedString> from InlinedInt
2021-03-11 20:21:14,659 [main:106] - GETTING Function0<InlinedString> from InlinedInt
2021-03-11 20:21:14,661 [main:106] - GETTING Function0<InlinedString> from String
2021-03-11 20:21:14,703 [main:106] - GETTING Function0<InlinedString> from InlinedString
2021-03-11 20:21:14,704 [main:61] - replacement of { s } of type Function0<InlinedString> is { InlinedString("wwvlb")}
2021-03-11 20:21:14,800 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:21:14,800 [main:66] - Compilation checking started
2021-03-11 20:21:15,310 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { InlinedInt(-1660615562) }

    foo { InlinedString("wwvlb")}
    baz { baz({ InlinedString("wvyzp")}) }
}


2021-03-11 20:21:15,311 [main:53] - replacing (callback, Function0<InlinedInt>)
2021-03-11 20:21:15,311 [main:50] - replacing callback Function0<InlinedInt>
2021-03-11 20:21:15,311 [main:54] - Getting value of type Function0<InlinedInt>
2021-03-11 20:21:15,403 [main:302] - generating value of type = Function0<InlinedInt> false depth = 0
2021-03-11 20:21:15,404 [main:302] - generating value of type = InlinedInt false depth = 1
2021-03-11 20:21:15,405 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:21:15,493 [main:194] - Type params = []
2021-03-11 20:21:15,570 [main:302] - generating value of type = Int true depth = 3
2021-03-11 20:21:15,570 [main:58] - GENERATED VALUE OF TYPE Function0<InlinedInt> = { InlinedInt(-1048026231)}
2021-03-11 20:21:15,570 [main:61] - GENERATED IS CALL =false
2021-03-11 20:21:15,572 [main:67] - randomType = InlinedString
2021-03-11 20:21:15,648 [main:302] - generating value of type = InlinedString false depth = 0
2021-03-11 20:21:15,648 [main:112] - generating klass InlinedString text = inline class InlinedString(val internal: String)
2021-03-11 20:21:15,725 [main:194] - Type params = []
2021-03-11 20:21:15,800 [main:302] - generating value of type = String true depth = 2
2021-03-11 20:21:15,807 [main:106] - GETTING Function0<InlinedInt> from Set<Int>
2021-03-11 20:21:15,830 [main:106] - GETTING Function0<InlinedInt> from Function0<InlinedInt>
2021-03-11 20:21:15,838 [main:61] - replacement of callback of type Function0<InlinedInt> is callback
2021-03-11 20:21:15,915 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:21:15,916 [main:53] - replacing ({ baz({ InlinedString("wvyzp")}) }, Function0<InlinedString>)
2021-03-11 20:21:15,916 [main:50] - replacing { baz({ InlinedString("wvyzp")}) } Function0<InlinedString>
2021-03-11 20:21:15,916 [main:54] - Getting value of type Function0<InlinedString>
2021-03-11 20:21:15,991 [main:302] - generating value of type = Function0<InlinedString> false depth = 0
2021-03-11 20:21:15,992 [main:302] - generating value of type = InlinedString false depth = 1
2021-03-11 20:21:15,992 [main:112] - generating klass InlinedString text = inline class InlinedString(val internal: String)
2021-03-11 20:21:16,085 [main:194] - Type params = []
2021-03-11 20:21:16,174 [main:302] - generating value of type = String true depth = 3
2021-03-11 20:21:16,176 [main:58] - GENERATED VALUE OF TYPE Function0<InlinedString> = { InlinedString("xsyqa")}
2021-03-11 20:21:16,176 [main:61] - GENERATED IS CALL =false
2021-03-11 20:21:16,177 [main:67] - randomType = Int
2021-03-11 20:21:16,262 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:21:16,321 [main:106] - GETTING Function0<InlinedString> from InlinedString
2021-03-11 20:21:16,330 [main:106] - GETTING Function0<InlinedString> from Int
2021-03-11 20:21:16,387 [main:106] - GETTING Function0<InlinedString> from InlinedInt
2021-03-11 20:21:16,396 [main:106] - GETTING Function0<InlinedString> from String
2021-03-11 20:21:16,428 [main:106] - GETTING Function0<InlinedString> from InlinedString
2021-03-11 20:21:16,430 [main:106] - GETTING Function0<InlinedString> from InlinedInt
2021-03-11 20:21:16,431 [main:106] - GETTING Function0<InlinedString> from Set<Int>
2021-03-11 20:21:16,464 [main:61] - replacement of { baz({ InlinedString("wvyzp")}) } of type Function0<InlinedString> is { InlinedString("xsyqa")}
2021-03-11 20:21:16,544 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:21:16,544 [main:66] - Compilation checking started
2021-03-11 20:21:16,895 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { InlinedInt(-1660615562) }

    foo { InlinedString("wwvlb")}
    baz { InlinedString("xsyqa")}
}


2021-03-11 20:21:16,895 [main:53] - replacing ({ i }, Function0<InlinedInt>)
2021-03-11 20:21:16,896 [main:50] - replacing { i } Function0<InlinedInt>
2021-03-11 20:21:16,896 [main:54] - Getting value of type Function0<InlinedInt>
2021-03-11 20:21:16,975 [main:302] - generating value of type = Function0<InlinedInt> false depth = 0
2021-03-11 20:21:16,976 [main:302] - generating value of type = InlinedInt false depth = 1
2021-03-11 20:21:16,976 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:21:17,077 [main:194] - Type params = []
2021-03-11 20:21:17,159 [main:302] - generating value of type = Int true depth = 3
2021-03-11 20:21:17,160 [main:58] - GENERATED VALUE OF TYPE Function0<InlinedInt> = { InlinedInt(-1634120613)}
2021-03-11 20:21:17,160 [main:61] - GENERATED IS CALL =false
2021-03-11 20:21:17,161 [main:67] - randomType = InlinedInt
2021-03-11 20:21:17,240 [main:302] - generating value of type = InlinedInt false depth = 0
2021-03-11 20:21:17,240 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:21:17,316 [main:194] - Type params = []
2021-03-11 20:21:17,393 [main:302] - generating value of type = Int true depth = 2
2021-03-11 20:21:17,402 [main:106] - GETTING Function0<InlinedInt> from InlinedString
2021-03-11 20:21:17,409 [main:106] - GETTING Function0<InlinedInt> from Int
2021-03-11 20:21:17,448 [main:106] - GETTING Function0<InlinedInt> from String
2021-03-11 20:21:17,467 [main:106] - GETTING Function0<InlinedInt> from InlinedInt
2021-03-11 20:21:17,472 [main:106] - GETTING Function0<InlinedInt> from Set<Int>
2021-03-11 20:21:17,498 [main:106] - GETTING Function0<InlinedInt> from InlinedInt
2021-03-11 20:21:17,499 [main:106] - GETTING Function0<InlinedInt> from InlinedString
2021-03-11 20:21:17,499 [main:61] - replacement of { i } of type Function0<InlinedInt> is { InlinedInt(-1634120613)}
2021-03-11 20:21:17,576 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:21:17,576 [main:66] - Compilation checking started
2021-03-11 20:21:17,904 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { InlinedInt(-1634120613)}
    bar { InlinedInt(-1660615562) }

    foo { InlinedString("wwvlb")}
    baz { InlinedString("xsyqa")}
}


2021-03-11 20:21:17,904 [main:53] - replacing (bar { InlinedInt(-1660615562) }, InlinedInt)
2021-03-11 20:21:17,905 [main:50] - replacing bar { InlinedInt(-1660615562) } InlinedInt
2021-03-11 20:21:17,905 [main:54] - Getting value of type InlinedInt
2021-03-11 20:21:17,998 [main:302] - generating value of type = InlinedInt false depth = 0
2021-03-11 20:21:17,998 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:21:18,083 [main:194] - Type params = []
2021-03-11 20:21:18,170 [main:302] - generating value of type = Int true depth = 2
2021-03-11 20:21:18,171 [main:58] - GENERATED VALUE OF TYPE InlinedInt = InlinedInt(-468727060)
2021-03-11 20:21:18,171 [main:61] - GENERATED IS CALL =true
2021-03-11 20:21:18,452 [main:67] - randomType = HashMap<InlinedString, Double?>
2021-03-11 20:21:18,530 [main:302] - generating value of type = HashMap<InlinedString, Double?> false depth = 0
2021-03-11 20:21:18,613 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<InlinedString, Double?>): HashMap<InledStrg, Double?> = TODO()
2021-03-11 20:21:18,615 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<InlinedString, Double?>): HashMap<InledStrg, Double?> = TODO()
2021-03-11 20:21:18,726 [main:302] - generating value of type = Pair<InlinedString, Double?> false depth = 3
2021-03-11 20:21:18,822 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: InlinedString, second: Double?): Pair<InlinedString, Double?> = TODO()
2021-03-11 20:21:18,824 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: InlinedString, second: Double?): Pair<InlinedString, Double?> = TODO()
2021-03-11 20:21:18,906 [main:302] - generating value of type = InlinedString false depth = 6
2021-03-11 20:21:18,906 [main:112] - generating klass InlinedString text = inline class InlinedString(val internal: String)
2021-03-11 20:21:18,985 [main:194] - Type params = []
2021-03-11 20:21:19,063 [main:302] - generating value of type = String true depth = 8
2021-03-11 20:21:19,064 [main:302] - generating value of type = Double true depth = 6
2021-03-11 20:21:19,065 [main:95] - GENERATED = Pair<InlinedString, Double?>(InlinedString("cjvdb"), 0.7189416614875334)
2021-03-11 20:21:19,065 [main:95] - GENERATED = linkedMapOf<InlinedString, Double?>(Pair<InlinedString, Double?>(InlinedString("cjvdb"), 0.7189416614875334))
2021-03-11 20:21:19,231 [main:106] - GETTING InlinedInt from InlinedString
2021-03-11 20:21:19,239 [main:106] - GETTING InlinedInt from Set<Int>
2021-03-11 20:21:19,272 [main:106] - GETTING InlinedInt from InlinedString
2021-03-11 20:21:19,273 [main:106] - GETTING InlinedInt from String
2021-03-11 20:21:19,303 [main:106] - GETTING InlinedInt from Int
2021-03-11 20:21:19,361 [main:106] - GETTING InlinedInt from InlinedInt
2021-03-11 20:21:19,369 [main:61] - replacement of bar { InlinedInt(-1660615562) } of type InlinedInt is bar({ InlinedInt(-1423100014)})
2021-03-11 20:21:19,454 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:21:19,455 [main:66] - Compilation checking started
2021-03-11 20:21:19,943 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { InlinedInt(-1634120613)}
    bar({ InlinedInt(-1423100014)})

    foo { InlinedString("wwvlb")}
    baz { InlinedString("xsyqa")}
}


2021-03-11 20:21:19,944 [main:53] - replacing (callback, Function0<T>)
2021-03-11 20:21:19,944 [main:50] - replacing callback Function0<T>
2021-03-11 20:21:19,944 [main:54] - Getting value of type Function0<T>
2021-03-11 20:21:20,053 [main:302] - generating value of type = Function0<T> false depth = 0
2021-03-11 20:21:20,053 [main:302] - generating value of type = T false depth = 1
2021-03-11 20:21:20,158 [main:43] - GENERATING CALL OF fun <T> minOf(a: UInt, b: UInt): T = TODO()
2021-03-11 20:21:20,160 [main:61] - WITHOUT TYPE PARAMS = fun <T> minOf(a: UInt, b: UInt): T = TODO()
2021-03-11 20:21:20,256 [main:302] - generating value of type = UInt true depth = 4
2021-03-11 20:21:20,256 [main:302] - generating value of type = UInt true depth = 4
2021-03-11 20:21:20,257 [main:95] - GENERATED = minOf<UInt>(182754379.toUInt(), 555282729.toUInt())
2021-03-11 20:21:20,257 [main:58] - GENERATED VALUE OF TYPE Function0<T> = { minOf<UInt>(182754379.toUInt(), 555282729.toUInt())}
2021-03-11 20:21:20,257 [main:61] - GENERATED IS CALL =false
2021-03-11 20:21:20,258 [main:67] - randomType = InlinedInt
2021-03-11 20:21:20,356 [main:302] - generating value of type = InlinedInt false depth = 0
2021-03-11 20:21:20,356 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:21:20,435 [main:194] - Type params = []
2021-03-11 20:21:20,513 [main:302] - generating value of type = Int true depth = 2
2021-03-11 20:21:20,524 [main:106] - GETTING Function0<T> from InlinedString
2021-03-11 20:21:20,534 [main:106] - GETTING Function0<T> from Int
2021-03-11 20:21:20,591 [main:106] - GETTING Function0<T> from Function0<T>
2021-03-11 20:21:20,607 [main:61] - replacement of callback of type Function0<T> is callback
2021-03-11 20:21:20,723 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:21:20,724 [main:53] - replacing (i, InlinedInt)
2021-03-11 20:21:20,724 [main:50] - replacing i InlinedInt
2021-03-11 20:21:20,724 [main:54] - Getting value of type InlinedInt
2021-03-11 20:21:20,820 [main:302] - generating value of type = InlinedInt false depth = 0
2021-03-11 20:21:20,820 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:21:20,914 [main:194] - Type params = []
2021-03-11 20:21:21,000 [main:302] - generating value of type = Int true depth = 2
2021-03-11 20:21:21,000 [main:58] - GENERATED VALUE OF TYPE InlinedInt = InlinedInt(-56151292)
2021-03-11 20:21:21,001 [main:61] - GENERATED IS CALL =true
2021-03-11 20:21:21,173 [main:67] - randomType = ArrayList<InlinedString?>
2021-03-11 20:21:21,250 [main:302] - generating value of type = ArrayList<InlinedString?> false depth = 0
2021-03-11 20:21:21,333 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<InledStrg?> = TODO()
2021-03-11 20:21:21,334 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<InledStrg?> = TODO()
2021-03-11 20:21:21,418 [main:95] - GENERATED = arrayListOf<InlinedString?>()
2021-03-11 20:21:21,651 [main:106] - GETTING InlinedInt from InlinedInt
2021-03-11 20:21:21,658 [main:61] - replacement of i of type InlinedInt is bar({ InlinedInt(-1423100014)})
2021-03-11 20:21:21,765 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:21:21,766 [main:53] - replacing (callback(), InlinedInt)
2021-03-11 20:21:21,766 [main:50] - replacing callback() InlinedInt
2021-03-11 20:21:21,767 [main:54] - Getting value of type InlinedInt
2021-03-11 20:21:21,886 [main:302] - generating value of type = InlinedInt false depth = 0
2021-03-11 20:21:21,887 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:21:21,983 [main:194] - Type params = []
2021-03-11 20:21:22,058 [main:302] - generating value of type = Int true depth = 2
2021-03-11 20:21:22,059 [main:58] - GENERATED VALUE OF TYPE InlinedInt = InlinedInt(-258773749)
2021-03-11 20:21:22,059 [main:61] - GENERATED IS CALL =true
2021-03-11 20:21:22,060 [main:67] - randomType = InlinedInt
2021-03-11 20:21:22,134 [main:302] - generating value of type = InlinedInt false depth = 0
2021-03-11 20:21:22,134 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:21:22,209 [main:194] - Type params = []
2021-03-11 20:21:22,303 [main:302] - generating value of type = Int true depth = 2
2021-03-11 20:21:22,310 [main:106] - GETTING InlinedInt from String
2021-03-11 20:21:22,332 [main:106] - GETTING InlinedInt from InlinedInt
2021-03-11 20:21:22,337 [main:61] - replacement of callback() of type InlinedInt is bar({ InlinedInt(-1423100014)})
2021-03-11 20:21:22,421 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:21:22,422 [main:66] - Compilation checking started
2021-03-11 20:21:22,564 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return bar({ InlinedInt(-1423100014)})
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { InlinedInt(-1634120613)}
    bar({ InlinedInt(-1423100014)})

    foo { InlinedString("wwvlb")}
    baz { InlinedString("xsyqa")}
}


2021-03-11 20:21:22,565 [main:53] - replacing ({ i }, Function0<InlinedInt>)
2021-03-11 20:21:22,565 [main:50] - replacing { i } Function0<InlinedInt>
2021-03-11 20:21:22,565 [main:54] - Getting value of type Function0<InlinedInt>
2021-03-11 20:21:22,640 [main:302] - generating value of type = Function0<InlinedInt> false depth = 0
2021-03-11 20:21:22,640 [main:302] - generating value of type = InlinedInt false depth = 1
2021-03-11 20:21:22,641 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:21:22,715 [main:194] - Type params = []
2021-03-11 20:21:22,788 [main:302] - generating value of type = Int true depth = 3
2021-03-11 20:21:22,789 [main:58] - GENERATED VALUE OF TYPE Function0<InlinedInt> = { InlinedInt(-1804315158)}
2021-03-11 20:21:22,789 [main:61] - GENERATED IS CALL =false
2021-03-11 20:21:22,975 [main:67] - randomType = HashSet<Byte>
2021-03-11 20:21:23,057 [main:302] - generating value of type = HashSet<Byte> false depth = 0
2021-03-11 20:21:23,138 [main:43] - GENERATING CALL OF fun <T> hashSetOf(): HashSet<Byte> = TODO()
2021-03-11 20:21:23,140 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(): HashSet<Byte> = TODO()
2021-03-11 20:21:23,220 [main:95] - GENERATED = hashSetOf<Byte>()
2021-03-11 20:21:23,390 [main:106] - GETTING Function0<InlinedInt> from InlinedString
2021-03-11 20:21:23,400 [main:106] - GETTING Function0<InlinedInt> from String
2021-03-11 20:21:23,433 [main:106] - GETTING Function0<InlinedInt> from Int
2021-03-11 20:21:23,496 [main:106] - GETTING Function0<InlinedInt> from InlinedInt
2021-03-11 20:21:23,506 [main:106] - GETTING Function0<InlinedInt> from Set<Int>
2021-03-11 20:21:23,541 [main:61] - replacement of { i } of type Function0<InlinedInt> is { InlinedInt(-1804315158)}
2021-03-11 20:21:23,620 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:21:23,621 [main:53] - replacing ({
    foo { InlinedInt(-1634120613)}
    bar({ InlinedInt(-1423100014)})

    foo { InlinedString("wwvlb")}
    baz { InlinedString("xsyqa")}
}, InlinedString)
2021-03-11 20:21:23,622 [main:50] - replacing {
    foo { InlinedInt(-1634120613)}
    bar({ InlinedInt(-1423100014)})

    foo { InlinedString("wwvlb")}
    baz { InlinedString("xsyqa")}
} InlinedString
2021-03-11 20:21:23,622 [main:54] - Getting value of type InlinedString
2021-03-11 20:21:23,702 [main:302] - generating value of type = InlinedString false depth = 0
2021-03-11 20:21:23,702 [main:112] - generating klass InlinedString text = inline class InlinedString(val internal: String)
2021-03-11 20:21:23,797 [main:194] - Type params = []
2021-03-11 20:21:23,877 [main:302] - generating value of type = String true depth = 2
2021-03-11 20:21:23,878 [main:58] - GENERATED VALUE OF TYPE InlinedString = InlinedString("phurw")
2021-03-11 20:21:23,878 [main:61] - GENERATED IS CALL =true
2021-03-11 20:21:24,053 [main:67] - randomType = Map<InlinedInt, UInt>
2021-03-11 20:21:24,053 [main:106] - GETTING InlinedString from InlinedString
2021-03-11 20:21:24,063 [main:61] - replacement of {
    foo { InlinedInt(-1634120613)}
    bar({ InlinedInt(-1423100014)})

    foo { InlinedString("wwvlb")}
    baz { InlinedString("xsyqa")}
} of type InlinedString is baz({ InlinedString("wvyzp")})
2021-03-11 20:21:24,166 [main:33] - Trying to replace BLOCK on Element(CALL_EXPRESSION)
2021-03-11 20:21:24,166 [main:66] - Compilation checking started
2021-03-11 20:21:24,167 [main:71] - Wrong syntax or breaks conditions
2021-03-11 20:21:24,167 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) baz({ InlinedString("wvyzp")})


2021-03-11 20:21:24,168 [main:53] - replacing (callback(), InlinedInt)
2021-03-11 20:21:24,168 [main:50] - replacing callback() InlinedInt
2021-03-11 20:21:24,168 [main:54] - Getting value of type InlinedInt
2021-03-11 20:21:24,245 [main:302] - generating value of type = InlinedInt false depth = 0
2021-03-11 20:21:24,245 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:21:24,321 [main:194] - Type params = []
2021-03-11 20:21:24,420 [main:302] - generating value of type = Int true depth = 2
2021-03-11 20:21:24,421 [main:58] - GENERATED VALUE OF TYPE InlinedInt = InlinedInt(-1903386470)
2021-03-11 20:21:24,421 [main:61] - GENERATED IS CALL =true
2021-03-11 20:21:24,514 [main:67] - randomType = Float
2021-03-11 20:21:24,596 [main:302] - generating value of type = Float true depth = 0
2021-03-11 20:21:24,644 [main:106] - GETTING InlinedInt from Function0<InlinedInt>
2021-03-11 20:21:24,656 [main:113] - Case = [public abstract operator fun invoke(): InlinedInt defined in kotlin.Function0[FunctionInvokeDescriptor@73e3483f]]
2021-03-11 20:21:24,656 [main:149] - GENERATING call of type public abstract operator fun invoke(): InlinedInt defined in kotlin.Function0[FunctionInvokeDescriptor@73e3483f]
2021-03-11 20:21:24,657 [main:117] - GENERATED CALL = (callback).invoke()
2021-03-11 20:21:24,657 [main:61] - replacement of callback() of type InlinedInt is InlinedInt(-1903386470)
2021-03-11 20:21:24,734 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:21:24,734 [main:66] - Compilation checking started
2021-03-11 20:21:25,041 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return InlinedInt(-1903386470)
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { InlinedInt(-1634120613)}
    bar({ InlinedInt(-1423100014)})

    foo { InlinedString("wwvlb")}
    baz { InlinedString("xsyqa")}
}


2021-03-11 20:21:25,042 [main:53] - replacing (i, InlinedInt)
2021-03-11 20:21:25,042 [main:50] - replacing i InlinedInt
2021-03-11 20:21:25,042 [main:54] - Getting value of type InlinedInt
2021-03-11 20:21:25,140 [main:302] - generating value of type = InlinedInt false depth = 0
2021-03-11 20:21:25,141 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:21:25,219 [main:194] - Type params = []
2021-03-11 20:21:25,316 [main:302] - generating value of type = Int true depth = 2
2021-03-11 20:21:25,317 [main:58] - GENERATED VALUE OF TYPE InlinedInt = InlinedInt(-1822615712)
2021-03-11 20:21:25,317 [main:61] - GENERATED IS CALL =true
2021-03-11 20:21:25,398 [main:67] - randomType = Byte
2021-03-11 20:21:25,481 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:21:25,536 [main:106] - GETTING InlinedInt from String
2021-03-11 20:21:25,564 [main:106] - GETTING InlinedInt from InlinedString
2021-03-11 20:21:25,569 [main:106] - GETTING InlinedInt from InlinedInt
2021-03-11 20:21:25,575 [main:61] - replacement of i of type InlinedInt is bar({ InlinedInt(-1423100014)})
2021-03-11 20:21:25,651 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:21:25,726 [main:119] - TRYING TO REPLACE CONSTANT 1634120613
2021-03-11 20:21:25,802 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:21:25,803 [main:66] - Compilation checking started
2021-03-11 20:21:26,088 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return InlinedInt(-1903386470)
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { InlinedInt(InlinedInt(-989664132).internal)}
    bar({ InlinedInt(-1423100014)})

    foo { InlinedString("wwvlb")}
    baz { InlinedString("xsyqa")}
}


2021-03-11 20:21:26,088 [main:119] - TRYING TO REPLACE CONSTANT 1423100014
2021-03-11 20:21:26,162 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-11 20:21:26,162 [main:66] - Compilation checking started
2021-03-11 20:21:26,462 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return InlinedInt(-1903386470)
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { InlinedInt(InlinedInt(-989664132).internal)}
    bar({ InlinedInt(-1634120613)})

    foo { InlinedString("wwvlb")}
    baz { InlinedString("xsyqa")}
}


2021-03-11 20:21:26,462 [main:119] - TRYING TO REPLACE CONSTANT 1903386470
2021-03-11 20:21:26,551 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 20:21:26,552 [main:66] - Compilation checking started
2021-03-11 20:21:26,834 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return InlinedInt(1903386470)
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { InlinedInt(InlinedInt(-989664132).internal)}
    bar({ InlinedInt(-1634120613)})

    foo { InlinedString("wwvlb")}
    baz { InlinedString("xsyqa")}
}


2021-03-11 20:21:26,852 [main:66] - Compilation checking started
2021-03-11 20:21:26,853 [main:71] - Wrong syntax or breaks conditions
2021-03-11 20:21:26,861 [main:41] - AFTER TRY 0 res = inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}


2021-03-11 20:21:27,012 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:21:27,085 [main:194] - Type params = []
2021-03-11 20:21:27,157 [main:302] - generating value of type = Int true depth = 1
2021-03-11 20:21:27,158 [main:112] - generating klass InlinedString text = inline class InlinedString(val internal: String)
2021-03-11 20:21:27,252 [main:194] - Type params = []
2021-03-11 20:21:27,325 [main:302] - generating value of type = String true depth = 1
2021-03-11 20:21:27,477 [main:43] - GENERATING CALL OF inline fun <T> foo(callback: () -> T): T {
    return callback()
}
2021-03-11 20:21:27,640 [main:61] - WITHOUT TYPE PARAMS = inline fun <T> foo(callback: () -> Collection<InlinedString>): Collection<InlinedString> {
    return callback()
}
2021-03-11 20:21:27,793 [main:302] - generating value of type = Function0<Collection<InlinedString>> false depth = 1
2021-03-11 20:21:27,793 [main:302] - generating value of type = Collection<InlinedString> false depth = 2
2021-03-11 20:21:27,872 [main:43] - GENERATING CALL OF fun <T> emptyList(): Collection<InledStrg> = TODO()
2021-03-11 20:21:27,873 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyList(): Collection<InledStrg> = TODO()
2021-03-11 20:21:27,981 [main:95] - GENERATED = emptyList<InlinedString>()
2021-03-11 20:21:27,981 [main:95] - GENERATED = foo<Collection<InlinedString>>({ emptyList<InlinedString>()})
2021-03-11 20:21:28,064 [main:43] - GENERATING CALL OF inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}
2021-03-11 20:21:28,065 [main:61] - WITHOUT TYPE PARAMS = inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}
2021-03-11 20:21:28,223 [main:302] - generating value of type = Function0<InlinedInt> false depth = 1
2021-03-11 20:21:28,223 [main:302] - generating value of type = InlinedInt false depth = 2
2021-03-11 20:21:28,224 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:21:28,297 [main:194] - Type params = []
2021-03-11 20:21:28,370 [main:302] - generating value of type = Int true depth = 4
2021-03-11 20:21:28,370 [main:95] - GENERATED = bar({ InlinedInt(-1100405486)})
2021-03-11 20:21:28,443 [main:43] - GENERATING CALL OF inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}
2021-03-11 20:21:28,444 [main:61] - WITHOUT TYPE PARAMS = inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}
2021-03-11 20:21:28,636 [main:302] - generating value of type = Function0<InlinedString> false depth = 1
2021-03-11 20:21:28,637 [main:302] - generating value of type = InlinedString false depth = 2
2021-03-11 20:21:28,637 [main:112] - generating klass InlinedString text = inline class InlinedString(val internal: String)
2021-03-11 20:21:28,710 [main:194] - Type params = []
2021-03-11 20:21:28,781 [main:302] - generating value of type = String true depth = 4
2021-03-11 20:21:28,782 [main:95] - GENERATED = baz({ InlinedString("ygwjp")})
2021-03-11 20:21:28,852 [main:43] - GENERATING CALL OF fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}
2021-03-11 20:21:28,853 [main:61] - WITHOUT TYPE PARAMS = fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}
2021-03-11 20:21:28,924 [main:302] - generating value of type = InlinedInt false depth = 1
2021-03-11 20:21:28,925 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:21:28,996 [main:194] - Type params = []
2021-03-11 20:21:29,068 [main:302] - generating value of type = Int true depth = 3
2021-03-11 20:21:29,069 [main:302] - generating value of type = InlinedString false depth = 1
2021-03-11 20:21:29,069 [main:112] - generating klass InlinedString text = inline class InlinedString(val internal: String)
2021-03-11 20:21:29,162 [main:194] - Type params = []
2021-03-11 20:21:29,245 [main:302] - generating value of type = String true depth = 3
2021-03-11 20:21:29,246 [main:95] - GENERATED = test(InlinedInt(-1222779726), InlinedString("hkmwu"))
2021-03-11 20:21:29,334 [main:43] - Try №0
2021-03-11 20:21:30,559 [main:69] - Trying to insert fun box758(): String {
    return  { enumValueOf<Kla0>("OK").name  } ()
}
2021-03-11 20:21:30,669 [main:66] - Compilation checking started
2021-03-11 20:21:31,353 [main:103] - Trying to change 6 nodes
2021-03-11 20:21:31,353 [main:107] - replacing ("OK", String)
2021-03-11 20:21:31,354 [main:50] - replacing "OK" String
2021-03-11 20:21:31,354 [main:54] - Getting value of type String
2021-03-11 20:21:31,455 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:21:31,456 [main:58] - GENERATED VALUE OF TYPE String = "hsshz"
2021-03-11 20:21:31,456 [main:61] - GENERATED IS CALL =false
2021-03-11 20:21:31,627 [main:67] - randomType = Array<Byte>
2021-03-11 20:21:31,739 [main:302] - generating value of type = Array<Byte> false depth = 0
2021-03-11 20:21:31,847 [main:43] - GENERATING CALL OF fun <T> arrayOfNulls(size: kotlin.Int): Array<Byte> = TODO()
2021-03-11 20:21:31,849 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOfNulls(size: kotlin.Int): Array<Byte> = TODO()
2021-03-11 20:21:32,069 [main:302] - generating value of type = Int true depth = 3
2021-03-11 20:21:32,070 [main:95] - GENERATED = arrayOfNulls<Byte>(1345823487)
2021-03-11 20:21:32,089 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]
2021-03-11 20:21:32,090 [main:78] - Generated call from random type = (arrayOfNulls<Byte>(1345823487)).size.toString(InlinedInt(1265378532).internal)
2021-03-11 20:21:32,091 [main:106] - GETTING String from Collection<InlinedString>
2021-03-11 20:21:32,111 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@a7ae1a5]]
2021-03-11 20:21:32,111 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@a7ae1a5]
2021-03-11 20:21:32,203 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 20:21:32,332 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 20:21:32,333 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 20:21:32,531 [main:302] - generating value of type = Int true depth = 3
2021-03-11 20:21:32,532 [main:95] - GENERATED = StringBuilder(-813187941)
2021-03-11 20:21:32,619 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 20:21:32,711 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 20:21:32,713 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 20:21:32,890 [main:302] - generating value of type = String true depth = 3
2021-03-11 20:21:32,891 [main:95] - GENERATED = StringBuilder("jedat")
2021-03-11 20:21:32,994 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 20:21:33,088 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 20:21:33,192 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 20:21:33,193 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 20:21:33,363 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 20:21:33,367 [main:95] - GENERATED = StringBuilder("tlgus")
2021-03-11 20:21:33,444 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 20:21:33,445 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 20:21:33,449 [main:117] - GENERATED CALL = (foo<Collection<InlinedString>>({ emptyList<InlinedString>()})).joinToString(StringBuilder(-813187941), StringBuilder("jedat"), "mgxjx", InlinedInt(1265378532).internal, StringBuilder("tlgus"), {a: T -> "ubtle"})
2021-03-11 20:21:33,449 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.Collection[DeserializedPropertyDescriptor@219d24ba], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]]
2021-03-11 20:21:33,449 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]
2021-03-11 20:21:33,450 [main:117] - GENERATED CALL = (foo<Collection<InlinedString>>({ emptyList<InlinedString>()})).size.toString(InlinedInt(1265378532).internal)
2021-03-11 20:21:33,450 [main:114] - replacement of "OK" of type String is (arrayOfNulls<Byte>(1345823487)).size.toString(InlinedInt(1265378532).internal)
2021-03-11 20:21:33,528 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:21:33,528 [main:66] - Compilation checking started
2021-03-11 20:21:33,958 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  { enumValueOf<Kla0>((arrayOfNulls<Byte>(1345823487)).size.toString(InlinedInt(1265378532).internal)).name  } ()
}


2021-03-11 20:21:33,958 [main:107] - replacing ({ enumValueOf<Kla0>((arrayOfNulls<Byte>(1345823487)).size.toString(InlinedInt(1265378532).internal)).name  }, Function0<String>)
2021-03-11 20:21:33,958 [main:50] - replacing { enumValueOf<Kla0>((arrayOfNulls<Byte>(1345823487)).size.toString(InlinedInt(1265378532).internal)).name  } Function0<String>
2021-03-11 20:21:33,958 [main:54] - Getting value of type Function0<String>
2021-03-11 20:21:34,050 [main:302] - generating value of type = Function0<String> false depth = 0
2021-03-11 20:21:34,051 [main:302] - generating value of type = String true depth = 1
2021-03-11 20:21:34,051 [main:58] - GENERATED VALUE OF TYPE Function0<String> = { "ohmox"}
2021-03-11 20:21:34,051 [main:61] - GENERATED IS CALL =false
2021-03-11 20:21:34,053 [main:67] - randomType = InlinedString
2021-03-11 20:21:34,144 [main:302] - generating value of type = InlinedString false depth = 0
2021-03-11 20:21:34,144 [main:112] - generating klass InlinedString text = inline class InlinedString(val internal: String)
2021-03-11 20:21:34,270 [main:194] - Type params = []
2021-03-11 20:21:34,357 [main:302] - generating value of type = String true depth = 2
2021-03-11 20:21:34,366 [main:106] - GETTING Function0<String> from String
2021-03-11 20:21:34,397 [main:106] - GETTING Function0<String> from Int
2021-03-11 20:21:34,445 [main:106] - GETTING Function0<String> from InlinedString
2021-03-11 20:21:34,450 [main:106] - GETTING Function0<String> from InlinedInt
2021-03-11 20:21:34,456 [main:106] - GETTING Function0<String> from Collection<InlinedString>
2021-03-11 20:21:34,471 [main:114] - replacement of { enumValueOf<Kla0>((arrayOfNulls<Byte>(1345823487)).size.toString(InlinedInt(1265378532).internal)).name  } of type Function0<String> is { "ohmox"}
2021-03-11 20:21:34,551 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:21:34,551 [main:66] - Compilation checking started
2021-03-11 20:21:34,889 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  { "ohmox"} ()
}


2021-03-11 20:21:34,889 [main:107] - replacing ({ "ohmox"} (), String)
2021-03-11 20:21:34,889 [main:50] - replacing { "ohmox"} () String
2021-03-11 20:21:34,889 [main:54] - Getting value of type String
2021-03-11 20:21:34,967 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:21:34,967 [main:58] - GENERATED VALUE OF TYPE String = "pakpi"
2021-03-11 20:21:34,967 [main:61] - GENERATED IS CALL =false
2021-03-11 20:21:35,049 [main:67] - randomType = Short
2021-03-11 20:21:35,125 [main:302] - generating value of type = Short true depth = 0
2021-03-11 20:21:35,175 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@571d28fe]
2021-03-11 20:21:35,176 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]
2021-03-11 20:21:35,176 [main:78] - Generated call from random type = (-17594).toLong().toString(InlinedInt(1265378532).internal)
2021-03-11 20:21:35,176 [main:114] - replacement of { "ohmox"} () of type String is (-17594).toLong().toString(InlinedInt(1265378532).internal)
2021-03-11 20:21:35,255 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:21:35,256 [main:66] - Compilation checking started
2021-03-11 20:21:35,706 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  (-17594).toLong().toString(InlinedInt(1265378532).internal)
}


2021-03-11 20:21:35,853 [main:141] - TRYING TO REPLACE CONSTANT 17594
2021-03-11 20:21:35,952 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PARENTHESIZED)
2021-03-11 20:21:35,953 [main:66] - Compilation checking started
2021-03-11 20:21:36,341 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}


2021-03-11 20:21:36,341 [main:141] - TRYING TO REPLACE CONSTANT 1265378532
2021-03-11 20:21:36,442 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:21:36,443 [main:66] - Compilation checking started
2021-03-11 20:21:36,676 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(internal).internal)
}


2021-03-11 20:21:36,676 [main:41] - AFTER TRY 1 res = inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}


2021-03-11 20:21:36,838 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:21:36,918 [main:194] - Type params = []
2021-03-11 20:21:36,994 [main:302] - generating value of type = Int true depth = 1
2021-03-11 20:21:36,995 [main:112] - generating klass InlinedString text = inline class InlinedString(val internal: String)
2021-03-11 20:21:37,076 [main:194] - Type params = []
2021-03-11 20:21:37,154 [main:302] - generating value of type = String true depth = 1
2021-03-11 20:21:37,155 [main:112] - generating klass Kla0 text = enum class Kla0 {
    Kla1
}
2021-03-11 20:21:37,155 [main:112] - generating klass Kla1 text = Kla1
2021-03-11 20:21:37,331 [main:43] - GENERATING CALL OF inline fun <T> foo(callback: () -> T): T {
    return callback()
}
2021-03-11 20:21:37,417 [main:61] - WITHOUT TYPE PARAMS = inline fun <T> foo(callback: () -> ArrayList<InlinedString>): ArrayList<InlinedString> {
    return callback()
}
2021-03-11 20:21:37,577 [main:302] - generating value of type = Function0<ArrayList<InlinedString>> false depth = 1
2021-03-11 20:21:37,577 [main:302] - generating value of type = ArrayList<InlinedString> false depth = 2
2021-03-11 20:21:37,686 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: InlinedString): ArrayList<InledStrg> = TODO()
2021-03-11 20:21:37,687 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: InlinedString): ArrayList<InledStrg> = TODO()
2021-03-11 20:21:37,770 [main:302] - generating value of type = InlinedString false depth = 5
2021-03-11 20:21:37,770 [main:112] - generating klass InlinedString text = inline class InlinedString(val internal: String)
2021-03-11 20:21:37,862 [main:194] - Type params = []
2021-03-11 20:21:37,939 [main:302] - generating value of type = String true depth = 7
2021-03-11 20:21:37,940 [main:95] - GENERATED = arrayListOf<InlinedString>(InlinedString("nrpvk"))
2021-03-11 20:21:37,940 [main:95] - GENERATED = foo<ArrayList<InlinedString>>({ arrayListOf<InlinedString>(InlinedString("nrpvk"))})
2021-03-11 20:21:38,018 [main:43] - GENERATING CALL OF inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}
2021-03-11 20:21:38,018 [main:61] - WITHOUT TYPE PARAMS = inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}
2021-03-11 20:21:38,179 [main:302] - generating value of type = Function0<InlinedInt> false depth = 1
2021-03-11 20:21:38,179 [main:302] - generating value of type = InlinedInt false depth = 2
2021-03-11 20:21:38,179 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:21:38,289 [main:194] - Type params = []
2021-03-11 20:21:38,404 [main:302] - generating value of type = Int true depth = 4
2021-03-11 20:21:38,405 [main:95] - GENERATED = bar({ InlinedInt(-505180088)})
2021-03-11 20:21:38,488 [main:43] - GENERATING CALL OF inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}
2021-03-11 20:21:38,489 [main:61] - WITHOUT TYPE PARAMS = inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}
2021-03-11 20:21:38,670 [main:302] - generating value of type = Function0<InlinedString> false depth = 1
2021-03-11 20:21:38,670 [main:302] - generating value of type = InlinedString false depth = 2
2021-03-11 20:21:38,670 [main:112] - generating klass InlinedString text = inline class InlinedString(val internal: String)
2021-03-11 20:21:38,752 [main:194] - Type params = []
2021-03-11 20:21:38,829 [main:302] - generating value of type = String true depth = 4
2021-03-11 20:21:38,830 [main:95] - GENERATED = baz({ InlinedString("uyvol")})
2021-03-11 20:21:38,909 [main:43] - GENERATING CALL OF fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}
2021-03-11 20:21:38,909 [main:61] - WITHOUT TYPE PARAMS = fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}
2021-03-11 20:21:38,989 [main:302] - generating value of type = InlinedInt false depth = 1
2021-03-11 20:21:38,989 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:21:39,120 [main:194] - Type params = []
2021-03-11 20:21:39,208 [main:302] - generating value of type = Int true depth = 3
2021-03-11 20:21:39,208 [main:302] - generating value of type = InlinedString false depth = 1
2021-03-11 20:21:39,208 [main:112] - generating klass InlinedString text = inline class InlinedString(val internal: String)
2021-03-11 20:21:39,288 [main:194] - Type params = []
2021-03-11 20:21:39,368 [main:302] - generating value of type = String true depth = 3
2021-03-11 20:21:39,369 [main:95] - GENERATED = test(InlinedInt(-1075296016), InlinedString("mfdle"))
2021-03-11 20:21:39,476 [main:43] - Try №1
2021-03-11 20:21:39,695 [main:41] - AFTER TRY 2 res = inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}


2021-03-11 20:21:39,860 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:21:39,941 [main:194] - Type params = []
2021-03-11 20:21:40,082 [main:302] - generating value of type = Int true depth = 1
2021-03-11 20:21:40,083 [main:112] - generating klass InlinedString text = inline class InlinedString(val internal: String)
2021-03-11 20:21:40,184 [main:194] - Type params = []
2021-03-11 20:21:40,291 [main:302] - generating value of type = String true depth = 1
2021-03-11 20:21:40,292 [main:112] - generating klass Kla0 text = enum class Kla0 {
    Kla1
}
2021-03-11 20:21:40,293 [main:112] - generating klass Kla1 text = Kla1
2021-03-11 20:21:40,456 [main:43] - GENERATING CALL OF inline fun <T> foo(callback: () -> T): T {
    return callback()
}
2021-03-11 20:21:40,540 [main:61] - WITHOUT TYPE PARAMS = inline fun <T> foo(callback: () -> ULong): ULong {
    return callback()
}
2021-03-11 20:21:40,707 [main:302] - generating value of type = Function0<ULong> false depth = 1
2021-03-11 20:21:40,708 [main:302] - generating value of type = ULong true depth = 2
2021-03-11 20:21:40,709 [main:95] - GENERATED = foo<ULong>({ 7467005423461192445.toULong()})
2021-03-11 20:21:40,783 [main:43] - GENERATING CALL OF inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}
2021-03-11 20:21:40,784 [main:61] - WITHOUT TYPE PARAMS = inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}
2021-03-11 20:21:40,984 [main:302] - generating value of type = Function0<InlinedInt> false depth = 1
2021-03-11 20:21:40,985 [main:302] - generating value of type = InlinedInt false depth = 2
2021-03-11 20:21:40,985 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:21:41,070 [main:194] - Type params = []
2021-03-11 20:21:41,171 [main:302] - generating value of type = Int true depth = 4
2021-03-11 20:21:41,172 [main:95] - GENERATED = bar({ InlinedInt(-1287773373)})
2021-03-11 20:21:41,271 [main:43] - GENERATING CALL OF inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}
2021-03-11 20:21:41,272 [main:61] - WITHOUT TYPE PARAMS = inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}
2021-03-11 20:21:41,469 [main:302] - generating value of type = Function0<InlinedString> false depth = 1
2021-03-11 20:21:41,470 [main:302] - generating value of type = InlinedString false depth = 2
2021-03-11 20:21:41,470 [main:112] - generating klass InlinedString text = inline class InlinedString(val internal: String)
2021-03-11 20:21:41,548 [main:194] - Type params = []
2021-03-11 20:21:41,662 [main:302] - generating value of type = String true depth = 4
2021-03-11 20:21:41,664 [main:95] - GENERATED = baz({ InlinedString("bvokz")})
2021-03-11 20:21:41,753 [main:43] - GENERATING CALL OF fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}
2021-03-11 20:21:41,753 [main:61] - WITHOUT TYPE PARAMS = fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}
2021-03-11 20:21:41,858 [main:302] - generating value of type = InlinedInt false depth = 1
2021-03-11 20:21:41,858 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:21:41,952 [main:194] - Type params = []
2021-03-11 20:21:42,055 [main:302] - generating value of type = Int true depth = 3
2021-03-11 20:21:42,056 [main:302] - generating value of type = InlinedString false depth = 1
2021-03-11 20:21:42,056 [main:112] - generating klass InlinedString text = inline class InlinedString(val internal: String)
2021-03-11 20:21:42,157 [main:194] - Type params = []
2021-03-11 20:21:42,257 [main:302] - generating value of type = String true depth = 3
2021-03-11 20:21:42,258 [main:95] - GENERATED = test(InlinedInt(331369924), InlinedString("ndbgi"))
2021-03-11 20:21:42,372 [main:43] - Try №2
2021-03-11 20:21:43,213 [main:69] - Trying to insert fun box912(): String {
    try {
        fu1()
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return fu1(f2 = { "O" }) + fu1(f1 = { "K" })
}
2021-03-11 20:21:43,326 [main:66] - Compilation checking started
2021-03-11 20:21:44,004 [main:103] - Trying to change 16 nodes
2021-03-11 20:21:44,004 [main:107] - replacing (fu1(f2 = { "O" }), String)
2021-03-11 20:21:44,004 [main:50] - replacing fu1(f2 = { "O" }) String
2021-03-11 20:21:44,004 [main:54] - Getting value of type String
2021-03-11 20:21:44,100 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:21:44,101 [main:58] - GENERATED VALUE OF TYPE String = "nifwq"
2021-03-11 20:21:44,101 [main:61] - GENERATED IS CALL =false
2021-03-11 20:21:44,102 [main:67] - randomType = Int
2021-03-11 20:21:44,193 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:21:44,237 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7a52df9c]
2021-03-11 20:21:44,237 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]
2021-03-11 20:21:44,237 [main:78] - Generated call from random type = (-686600155).toInt().toString(((-17594)))
2021-03-11 20:21:44,238 [main:106] - GETTING String from ULong
2021-03-11 20:21:44,271 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@522f9681], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e367ce2]]
2021-03-11 20:21:44,271 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@522f9681]
2021-03-11 20:21:44,271 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e367ce2]
2021-03-11 20:21:44,378 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:21:44,379 [main:117] - GENERATED CALL = (foo<ULong>({ 7467005423461192445.toULong()})).toUByte().toString(-1047891503)
2021-03-11 20:21:44,379 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toUInt(): kotlin.UInt defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@b2e1d54], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d92cc0]]
2021-03-11 20:21:44,379 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUInt(): kotlin.UInt defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@b2e1d54]
2021-03-11 20:21:44,379 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d92cc0]
2021-03-11 20:21:44,484 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:21:44,485 [main:117] - GENERATED CALL = (foo<ULong>({ 7467005423461192445.toULong()})).toUInt().toString(-1015711168)
2021-03-11 20:21:44,486 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@49520159], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]]
2021-03-11 20:21:44,486 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@49520159]
2021-03-11 20:21:44,486 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]
2021-03-11 20:21:44,486 [main:117] - GENERATED CALL = (foo<ULong>({ 7467005423461192445.toULong()})).toLong().toString(((-17594)))
2021-03-11 20:21:44,486 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@2441f2e1], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]]
2021-03-11 20:21:44,486 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@2441f2e1]
2021-03-11 20:21:44,570 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 20:21:44,571 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]
2021-03-11 20:21:44,572 [main:117] - GENERATED CALL = (foo<ULong>({ 7467005423461192445.toULong()})).compareTo(39.toUByte()).toString(InlinedInt(-988907151).internal)
2021-03-11 20:21:44,572 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.ULong.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c3ad716]]
2021-03-11 20:21:44,572 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.ULong.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c3ad716]
2021-03-11 20:21:44,652 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:21:44,653 [main:117] - GENERATED CALL = (foo<ULong>({ 7467005423461192445.toULong()})).toString(-2022151329)
2021-03-11 20:21:44,653 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@2d380dbd], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57d8c30b]]
2021-03-11 20:21:44,654 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@2d380dbd]
2021-03-11 20:21:44,654 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57d8c30b]
2021-03-11 20:21:44,735 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:21:44,736 [main:117] - GENERATED CALL = (foo<ULong>({ 7467005423461192445.toULong()})).toByte().toString(-1737741952)
2021-03-11 20:21:44,736 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@629e9f7d], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2889e564]]
2021-03-11 20:21:44,736 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@629e9f7d]
2021-03-11 20:21:44,737 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2889e564]
2021-03-11 20:21:44,819 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:21:44,820 [main:117] - GENERATED CALL = (foo<ULong>({ 7467005423461192445.toULong()})).toShort().toString(595143464)
2021-03-11 20:21:44,820 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@7aab5572], @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70beb7d5]]
2021-03-11 20:21:44,820 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@7aab5572]
2021-03-11 20:21:44,820 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70beb7d5]
2021-03-11 20:21:44,907 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:21:44,908 [main:117] - GENERATED CALL = (foo<ULong>({ 7467005423461192445.toULong()})).toUShort().toString(-357352431)
2021-03-11 20:21:44,908 [main:114] - replacement of fu1(f2 = { "O" }) of type String is (foo<ULong>({ 7467005423461192445.toULong()})).toString(-2022151329)
2021-03-11 20:21:44,997 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:21:44,997 [main:66] - Compilation checking started
2021-03-11 20:21:45,438 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { f2() },
    f2: () -> String = { "Fail: should not be called" }
): String = f1()

fun box912(): String {
    try {
        fu1()
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(-2022151329) + fu1(f1 = { "K" })
}


2021-03-11 20:21:45,439 [main:107] - replacing (f1, Function0<String>)
2021-03-11 20:21:45,439 [main:50] - replacing f1 Function0<String>
2021-03-11 20:21:45,439 [main:54] - Getting value of type Function0<String>
2021-03-11 20:21:45,561 [main:302] - generating value of type = Function0<String> false depth = 0
2021-03-11 20:21:45,562 [main:302] - generating value of type = String true depth = 1
2021-03-11 20:21:45,562 [main:58] - GENERATED VALUE OF TYPE Function0<String> = { "mhmtn"}
2021-03-11 20:21:45,563 [main:61] - GENERATED IS CALL =false
2021-03-11 20:21:45,715 [main:67] - randomType = Kla0
2021-03-11 20:21:45,802 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 20:21:45,802 [main:112] - generating klass Kla0 text = enum class Kla0 {
    Kla1
}
2021-03-11 20:21:45,828 [main:106] - GETTING Function0<String> from InlinedInt
2021-03-11 20:21:45,833 [main:106] - GETTING Function0<String> from Int
2021-03-11 20:21:45,867 [main:106] - GETTING Function0<String> from ULong
2021-03-11 20:21:45,900 [main:106] - GETTING Function0<String> from String
2021-03-11 20:21:45,930 [main:106] - GETTING Function0<String> from Int
2021-03-11 20:21:45,931 [main:106] - GETTING Function0<String> from InlinedInt
2021-03-11 20:21:45,932 [main:106] - GETTING Function0<String> from InlinedString
2021-03-11 20:21:45,941 [main:106] - GETTING Function0<String> from Long
2021-03-11 20:21:45,996 [main:106] - GETTING Function0<String> from Int
2021-03-11 20:21:45,997 [main:106] - GETTING Function0<String> from Int
2021-03-11 20:21:45,997 [main:114] - replacement of f1 of type Function0<String> is { "mhmtn"}
2021-03-11 20:21:46,084 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 20:21:46,084 [main:66] - Compilation checking started
2021-03-11 20:21:46,539 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { f2() },
    f2: () -> String = { "Fail: should not be called" }
): String = { "mhmtn"}()

fun box912(): String {
    try {
        fu1()
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(-2022151329) + fu1(f1 = { "K" })
}


2021-03-11 20:21:46,540 [main:107] - replacing (f2, Function0<String>)
2021-03-11 20:21:46,540 [main:50] - replacing f2 Function0<String>
2021-03-11 20:21:46,540 [main:54] - Getting value of type Function0<String>
2021-03-11 20:21:46,669 [main:302] - generating value of type = Function0<String> false depth = 0
2021-03-11 20:21:46,670 [main:302] - generating value of type = String true depth = 1
2021-03-11 20:21:46,670 [main:58] - GENERATED VALUE OF TYPE Function0<String> = { "ayhpl"}
2021-03-11 20:21:46,671 [main:61] - GENERATED IS CALL =false
2021-03-11 20:21:46,792 [main:67] - randomType = LinkedHashSet<Int>
2021-03-11 20:21:46,882 [main:302] - generating value of type = LinkedHashSet<Int> false depth = 0
2021-03-11 20:21:46,972 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<Int> = TODO()
2021-03-11 20:21:46,974 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<Int> = TODO()
2021-03-11 20:21:47,071 [main:95] - GENERATED = linkedSetOf<Int>()
2021-03-11 20:21:47,290 [main:106] - GETTING Function0<String> from ULong
2021-03-11 20:21:47,327 [main:106] - GETTING Function0<String> from Int
2021-03-11 20:21:47,375 [main:106] - GETTING Function0<String> from Long
2021-03-11 20:21:47,416 [main:106] - GETTING Function0<String> from InlinedInt
2021-03-11 20:21:47,424 [main:106] - GETTING Function0<String> from Int
2021-03-11 20:21:47,425 [main:106] - GETTING Function0<String> from Int
2021-03-11 20:21:47,426 [main:106] - GETTING Function0<String> from InlinedInt
2021-03-11 20:21:47,427 [main:106] - GETTING Function0<String> from InlinedString
2021-03-11 20:21:47,435 [main:106] - GETTING Function0<String> from Int
2021-03-11 20:21:47,436 [main:106] - GETTING Function0<String> from String
2021-03-11 20:21:47,455 [main:114] - replacement of f2 of type Function0<String> is { "ayhpl"}
2021-03-11 20:21:47,539 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 20:21:47,539 [main:66] - Compilation checking started
2021-03-11 20:21:48,029 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "Fail: should not be called" }
): String = { "mhmtn"}()

fun box912(): String {
    try {
        fu1()
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(-2022151329) + fu1(f1 = { "K" })
}


2021-03-11 20:21:48,030 [main:107] - replacing ("K", String)
2021-03-11 20:21:48,030 [main:50] - replacing "K" String
2021-03-11 20:21:48,030 [main:54] - Getting value of type String
2021-03-11 20:21:48,137 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:21:48,138 [main:58] - GENERATED VALUE OF TYPE String = "oswvt"
2021-03-11 20:21:48,138 [main:61] - GENERATED IS CALL =false
2021-03-11 20:21:48,467 [main:67] - randomType = LinkedHashMap<Int, Triple<InlinedString, String, Short>>
2021-03-11 20:21:48,550 [main:302] - generating value of type = LinkedHashMap<Int, Triple<InlinedString, String, Short>> false depth = 0
2021-03-11 20:21:48,652 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Int, Triple<InledStrg, Strg, Short>> = TODO()
2021-03-11 20:21:48,654 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Int, Triple<InledStrg, Strg, Short>> = TODO()
2021-03-11 20:21:48,819 [main:95] - GENERATED = linkedMapOf<Int, Triple<InlinedString, String, Short>>()
2021-03-11 20:21:49,058 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]
2021-03-11 20:21:49,059 [main:78] - Generated call from random type = (linkedMapOf<Int, Triple<InlinedString, String, Short>>()).size.toString((-17594))
2021-03-11 20:21:49,059 [main:106] - GETTING String from Long
2021-03-11 20:21:49,091 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72c8390], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c70f8ae]]
2021-03-11 20:21:49,092 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72c8390]
2021-03-11 20:21:49,092 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c70f8ae]
2021-03-11 20:21:49,174 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:21:49,175 [main:117] - GENERATED CALL = (((-17594)).toLong()).toChar().plus("brsud")
2021-03-11 20:21:49,175 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72c8390], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d654126]]
2021-03-11 20:21:49,176 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72c8390]
2021-03-11 20:21:49,176 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d654126]
2021-03-11 20:21:49,176 [main:117] - GENERATED CALL = (((-17594)).toLong()).toChar().uppercase()
2021-03-11 20:21:49,176 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]]
2021-03-11 20:21:49,176 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]
2021-03-11 20:21:49,176 [main:117] - GENERATED CALL = (((-17594)).toLong()).toString((-17594))
2021-03-11 20:21:49,176 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@58d20a49], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2889e564]]
2021-03-11 20:21:49,176 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@58d20a49]
2021-03-11 20:21:49,176 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2889e564]
2021-03-11 20:21:49,177 [main:117] - GENERATED CALL = (((-17594)).toLong()).toShort().toString(((-17594)))
2021-03-11 20:21:49,177 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@571d28fe], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]]
2021-03-11 20:21:49,177 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@571d28fe]
2021-03-11 20:21:49,177 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]
2021-03-11 20:21:49,260 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:21:49,261 [main:117] - GENERATED CALL = (((-17594)).toLong()).toLong().toString(-2016865105)
2021-03-11 20:21:49,261 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@283024a2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]]
2021-03-11 20:21:49,261 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@283024a2]
2021-03-11 20:21:49,347 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:21:49,347 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]
2021-03-11 20:21:49,437 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:21:49,438 [main:117] - GENERATED CALL = (((-17594)).toLong()).compareTo(22).toString(-1465028612)
2021-03-11 20:21:49,438 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72c8390], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@629a957]]
2021-03-11 20:21:49,438 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72c8390]
2021-03-11 20:21:49,438 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@629a957]
2021-03-11 20:21:49,439 [main:117] - GENERATED CALL = (((-17594)).toLong()).toChar().titlecase()
2021-03-11 20:21:49,439 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72c8390], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4045409b]]
2021-03-11 20:21:49,439 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72c8390]
2021-03-11 20:21:49,439 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4045409b]
2021-03-11 20:21:49,439 [main:117] - GENERATED CALL = (((-17594)).toLong()).toChar().lowercase()
2021-03-11 20:21:49,439 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7a52df9c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]]
2021-03-11 20:21:49,439 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7a52df9c]
2021-03-11 20:21:49,439 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]
2021-03-11 20:21:49,440 [main:117] - GENERATED CALL = (((-17594)).toLong()).toInt().toString((-17594))
2021-03-11 20:21:49,440 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@775f0319], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57d8c30b]]
2021-03-11 20:21:49,440 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@775f0319]
2021-03-11 20:21:49,440 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57d8c30b]
2021-03-11 20:21:49,440 [main:117] - GENERATED CALL = (((-17594)).toLong()).toByte().toString(((-17594)))
2021-03-11 20:21:49,441 [main:114] - replacement of "K" of type String is (((-17594)).toLong()).toChar().titlecase()
2021-03-11 20:21:49,538 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:21:49,538 [main:66] - Compilation checking started
2021-03-11 20:21:50,054 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "Fail: should not be called" }
): String = { "mhmtn"}()

fun box912(): String {
    try {
        fu1()
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(-2022151329) + fu1(f1 = { (((-17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:21:50,055 [main:107] - replacing ({ "Fail: should not be called" }, Function0<String>)
2021-03-11 20:21:50,055 [main:50] - replacing { "Fail: should not be called" } Function0<String>
2021-03-11 20:21:50,055 [main:54] - Getting value of type Function0<String>
2021-03-11 20:21:50,139 [main:302] - generating value of type = Function0<String> false depth = 0
2021-03-11 20:21:50,140 [main:302] - generating value of type = String true depth = 1
2021-03-11 20:21:50,141 [main:58] - GENERATED VALUE OF TYPE Function0<String> = { "pveid"}
2021-03-11 20:21:50,141 [main:61] - GENERATED IS CALL =false
2021-03-11 20:21:50,529 [main:67] - randomType = Function1<Kla0?, InlinedInt?>
2021-03-11 20:21:50,530 [main:106] - GETTING Function0<String> from InlinedInt
2021-03-11 20:21:50,539 [main:106] - GETTING Function0<String> from InlinedInt
2021-03-11 20:21:50,540 [main:106] - GETTING Function0<String> from Long
2021-03-11 20:21:50,592 [main:106] - GETTING Function0<String> from InlinedString
2021-03-11 20:21:50,600 [main:106] - GETTING Function0<String> from ULong
2021-03-11 20:21:50,639 [main:106] - GETTING Function0<String> from String
2021-03-11 20:21:50,659 [main:106] - GETTING Function0<String> from Int
2021-03-11 20:21:50,692 [main:106] - GETTING Function0<String> from Int
2021-03-11 20:21:50,694 [main:106] - GETTING Function0<String> from Int
2021-03-11 20:21:50,695 [main:106] - GETTING Function0<String> from Int
2021-03-11 20:21:50,695 [main:114] - replacement of { "Fail: should not be called" } of type Function0<String> is { "pveid"}
2021-03-11 20:21:50,776 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:21:50,777 [main:66] - Compilation checking started
2021-03-11 20:21:51,245 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        fu1()
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(-2022151329) + fu1(f1 = { (((-17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:21:51,245 [main:107] - replacing (fu1(), String)
2021-03-11 20:21:51,245 [main:50] - replacing fu1() String
2021-03-11 20:21:51,245 [main:54] - Getting value of type String
2021-03-11 20:21:51,337 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:21:51,338 [main:58] - GENERATED VALUE OF TYPE String = "zsdbj"
2021-03-11 20:21:51,338 [main:61] - GENERATED IS CALL =false
2021-03-11 20:21:51,462 [main:67] - randomType = InlinedInt?
2021-03-11 20:21:51,544 [main:302] - generating value of type = InlinedInt false depth = 0
2021-03-11 20:21:51,545 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:21:51,627 [main:194] - Type params = []
2021-03-11 20:21:51,737 [main:302] - generating value of type = Int true depth = 2
2021-03-11 20:21:51,745 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]
2021-03-11 20:21:51,746 [main:78] - Generated call from random type = (InlinedInt(481222100))?.internal.toString(-17594)
2021-03-11 20:21:51,746 [main:114] - replacement of fu1() of type String is (InlinedInt(481222100))?.internal.toString(-17594)
2021-03-11 20:21:51,843 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:21:51,843 [main:66] - Compilation checking started
2021-03-11 20:21:52,398 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(481222100))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(-2022151329) + fu1(f1 = { (((-17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:21:52,532 [main:141] - TRYING TO REPLACE CONSTANT 2022151329
2021-03-11 20:21:52,630 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PARENTHESIZED)
2021-03-11 20:21:52,630 [main:66] - Compilation checking started
2021-03-11 20:21:53,020 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(481222100))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((-17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:21:53,020 [main:141] - TRYING TO REPLACE CONSTANT 7467005423461192445
2021-03-11 20:21:53,128 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 20:21:53,128 [main:66] - Compilation checking started
2021-03-11 20:21:53,605 [main:141] - TRYING TO REPLACE CONSTANT 17594
2021-03-11 20:21:53,716 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 20:21:53,716 [main:66] - Compilation checking started
2021-03-11 20:21:54,121 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(481222100))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:21:54,121 [main:141] - TRYING TO REPLACE CONSTANT 17594
2021-03-11 20:21:54,204 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-11 20:21:54,204 [main:141] - TRYING TO REPLACE CONSTANT 481222100
2021-03-11 20:21:54,290 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-11 20:21:54,290 [main:66] - Compilation checking started
2021-03-11 20:21:54,740 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:21:54,740 [main:84] - Final res = inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:21:54,766 [main:26] - Trying to change some nodes to nodes from other programs 777 times
2021-03-11 20:21:54,766 [main:28] - Try №0 of 777
2021-03-11 20:21:54,790 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:21:54,790 [main:66] - Compilation checking started
2021-03-11 20:21:55,075 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { result = "fail 2" }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:21:55,075 [main:28] - Try №1 of 777
2021-03-11 20:21:55,088 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:21:55,088 [main:66] - Compilation checking started
2021-03-11 20:21:55,335 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : withIndex) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:21:55,335 [main:28] - Try №2 of 777
2021-03-11 20:21:55,356 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:21:55,357 [main:66] - Compilation checking started
2021-03-11 20:21:55,603 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        test.CrossinlineLambdaContainer
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:21:55,604 [main:28] - Try №3 of 777
2021-03-11 20:21:55,620 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:21:55,620 [main:66] - Compilation checking started
2021-03-11 20:21:55,939 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {
            pr = S(string)
            return pr.string
        }

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:21:55,939 [main:28] - Try №4 of 777
2021-03-11 20:21:55,962 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-11 20:21:55,963 [main:66] - Compilation checking started
2021-03-11 20:21:56,197 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString((f contentEquals f.clone())) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:21:56,197 [main:28] - Try №5 of 777
2021-03-11 20:21:56,203 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:21:56,204 [main:66] - Compilation checking started
2021-03-11 20:21:56,205 [main:71] - Wrong syntax or breaks conditions
2021-03-11 20:21:56,205 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch () {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:21:56,206 [main:28] - Try №6 of 777
2021-03-11 20:21:56,210 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:21:56,211 [main:28] - Try №7 of 777
2021-03-11 20:21:56,229 [main:33] - Trying to replace PsiElement(ARROW) on PsiElement(ARROW)
2021-03-11 20:21:56,229 [main:28] - Try №8 of 777
2021-03-11 20:21:56,245 [main:33] - Trying to replace Element(FUNCTION_TYPE) on Element(FUNCTION_TYPE)
2021-03-11 20:21:56,246 [main:66] - Compilation checking started
2021-03-11 20:21:56,500 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> Unit? = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:21:56,501 [main:28] - Try №9 of 777
2021-03-11 20:21:56,504 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:21:56,505 [main:66] - Compilation checking started
2021-03-11 20:21:56,749 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (value(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:21:56,749 [main:28] - Try №10 of 777
2021-03-11 20:21:56,759 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:21:56,760 [main:66] - Compilation checking started
2021-03-11 20:21:57,009 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Foo) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:21:57,009 [main:28] - Try №11 of 777
2021-03-11 20:21:57,014 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:21:57,014 [main:66] - Compilation checking started
2021-03-11 20:21:57,323 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): p {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:21:57,323 [main:28] - Try №12 of 777
2021-03-11 20:21:57,342 [main:33] - Trying to replace Element(SAFE_ACCESS_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 20:21:57,342 [main:66] - Compilation checking started
2021-03-11 20:21:57,596 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (x as? Bar)?.bar().toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:21:57,596 [main:28] - Try №13 of 777
2021-03-11 20:21:57,610 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:21:57,611 [main:66] - Compilation checking started
2021-03-11 20:21:57,832 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: Unit = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:21:57,832 [main:28] - Try №14 of 777
2021-03-11 20:21:57,850 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:21:57,851 [main:66] - Compilation checking started
2021-03-11 20:21:58,122 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (String<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:21:58,122 [main:28] - Try №15 of 777
2021-03-11 20:21:58,133 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-11 20:21:58,133 [main:66] - Compilation checking started
2021-03-11 20:21:58,469 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

fun <T> test() {
        val x = object {
            fun <S1> foo() {}

            fun <S2> S2.ext() {}

            val <S3> S3.extVal
                get() = 1

            var <S4> S4.extVar
                get() = 1
                set(value) {}
        }

        x.foo<Any>()
    }

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:21:58,469 [main:28] - Try №16 of 777
2021-03-11 20:21:58,478 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:21:58,479 [main:28] - Try №17 of 777
2021-03-11 20:21:58,489 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:21:58,489 [main:28] - Try №18 of 777
2021-03-11 20:21:58,503 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-11 20:21:58,503 [main:66] - Compilation checking started
2021-03-11 20:21:58,762 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return res
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:21:58,763 [main:28] - Try №19 of 777
2021-03-11 20:21:58,773 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:21:58,774 [main:28] - Try №20 of 777
2021-03-11 20:21:58,777 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-11 20:21:58,777 [main:66] - Compilation checking started
2021-03-11 20:21:59,139 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

fun box(): String {
    var v = "FAIL"
    val f = { v = "O" }
    JavaClass.run(f, { v += "K" })
    return v
}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:21:59,139 [main:28] - Try №21 of 777
2021-03-11 20:21:59,149 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:21:59,149 [main:66] - Compilation checking started
2021-03-11 20:21:59,596 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:21:59,596 [main:28] - Try №22 of 777
2021-03-11 20:21:59,624 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:21:59,624 [main:66] - Compilation checking started
2021-03-11 20:21:59,857 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(a: UInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:21:59,858 [main:28] - Try №23 of 777
2021-03-11 20:21:59,880 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 20:21:59,880 [main:66] - Compilation checking started
2021-03-11 20:22:00,265 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:22:00,266 [main:28] - Try №24 of 777
2021-03-11 20:22:00,276 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:22:00,277 [main:66] - Compilation checking started
2021-03-11 20:22:00,521 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (listOf(7L, 5L, 3L, 1L)).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:22:00,521 [main:28] - Try №25 of 777
2021-03-11 20:22:00,527 [main:33] - Trying to replace Element(TYPE_PARAMETER_LIST) on Element(TYPE_PARAMETER_LIST)
2021-03-11 20:22:00,527 [main:28] - Try №26 of 777
2021-03-11 20:22:00,543 [main:33] - Trying to replace PsiElement(ARROW) on PsiElement(ARROW)
2021-03-11 20:22:00,544 [main:28] - Try №27 of 777
2021-03-11 20:22:00,550 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:00,550 [main:66] - Compilation checking started
2021-03-11 20:22:00,830 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().String(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:22:00,830 [main:28] - Try №28 of 777
2021-03-11 20:22:00,840 [main:33] - Trying to replace Element(MODIFIER_LIST) on Element(MODIFIER_LIST)
2021-03-11 20:22:00,840 [main:66] - Compilation checking started
2021-03-11 20:22:00,843 [main:71] - Wrong syntax or breaks conditions
2021-03-11 20:22:00,843 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

open class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:22:00,843 [main:28] - Try №29 of 777
2021-03-11 20:22:00,856 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:22:00,856 [main:66] - Compilation checking started
2021-03-11 20:22:01,082 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return this.result + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:22:01,082 [main:28] - Try №30 of 777
2021-03-11 20:22:01,087 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:01,087 [main:66] - Compilation checking started
2021-03-11 20:22:01,474 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun c(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:22:01,474 [main:28] - Try №31 of 777
2021-03-11 20:22:01,485 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:22:01,485 [main:66] - Compilation checking started
2021-03-11 20:22:01,719 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun c(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).Delegate().titlecase() })
}


2021-03-11 20:22:01,719 [main:28] - Try №32 of 777
2021-03-11 20:22:01,737 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:22:01,738 [main:28] - Try №33 of 777
2021-03-11 20:22:01,763 [main:33] - Trying to replace PsiElement(INTEGER_LITERAL) on PsiElement(INTEGER_LITERAL)
2021-03-11 20:22:01,764 [main:66] - Compilation checking started
2021-03-11 20:22:02,218 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:22:02,218 [main:28] - Try №34 of 777
2021-03-11 20:22:02,236 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-11 20:22:02,237 [main:66] - Compilation checking started
2021-03-11 20:22:02,494 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun <T> expectsSam(sam: Sam<T>) = sam.get()

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:22:02,494 [main:28] - Try №35 of 777
2021-03-11 20:22:02,503 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:22:02,503 [main:66] - Compilation checking started
2021-03-11 20:22:02,772 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ ((1L..10L).reversed() step 2L).reversed()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:22:02,773 [main:28] - Try №36 of 777
2021-03-11 20:22:02,778 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:02,779 [main:66] - Compilation checking started
2021-03-11 20:22:03,272 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:22:03,272 [main:28] - Try №37 of 777
2021-03-11 20:22:03,272 [main:28] - Try №38 of 777
2021-03-11 20:22:03,294 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-11 20:22:03,295 [main:66] - Compilation checking started
2021-03-11 20:22:03,567 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { "B" + it }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:22:03,567 [main:28] - Try №39 of 777
2021-03-11 20:22:03,574 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-11 20:22:03,574 [main:66] - Compilation checking started
2021-03-11 20:22:03,832 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun box(): String {
    val test = Test(MapWithBadDefaults())
    test.put("O", "K")
    if (!test.containsKey("O")) return "fail 1: can't find value for key 'O'"
    if (!test.remove("O", "K")) return "fail 2: entry wasn't removed"

    return test.getOrDefault("absent", "OK")
}

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:22:03,832 [main:28] - Try №40 of 777
2021-03-11 20:22:03,845 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:22:03,846 [main:66] - Compilation checking started
2021-03-11 20:22:04,154 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { {
            return "FAIL in exception: " + e.message
        }}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:22:04,155 [main:28] - Try №41 of 777
2021-03-11 20:22:04,174 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-11 20:22:04,174 [main:66] - Compilation checking started
2021-03-11 20:22:04,430 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun c(): String {
    return "enclosing class: $enclosingClass"
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:22:04,430 [main:28] - Try №42 of 777
2021-03-11 20:22:04,439 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:22:04,439 [main:28] - Try №43 of 777
2021-03-11 20:22:04,449 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:04,449 [main:66] - Compilation checking started
2021-03-11 20:22:04,679 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).fn().titlecase() })
}


2021-03-11 20:22:04,680 [main:28] - Try №44 of 777
2021-03-11 20:22:04,690 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:22:04,691 [main:28] - Try №45 of 777
2021-03-11 20:22:04,717 [main:28] - Try №46 of 777
2021-03-11 20:22:04,729 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:22:04,730 [main:28] - Try №47 of 777
2021-03-11 20:22:04,741 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:22:04,742 [main:66] - Compilation checking started
2021-03-11 20:22:04,954 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:22:04,954 [main:28] - Try №48 of 777
2021-03-11 20:22:04,962 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:22:04,963 [main:28] - Try №49 of 777
2021-03-11 20:22:04,969 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:04,969 [main:66] - Compilation checking started
2021-03-11 20:22:05,188 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun B(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:22:05,188 [main:28] - Try №50 of 777
2021-03-11 20:22:05,199 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:05,199 [main:66] - Compilation checking started
2021-03-11 20:22:05,408 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).DEFAULT()).toChar().titlecase() })
}


2021-03-11 20:22:05,409 [main:28] - Try №51 of 777
2021-03-11 20:22:05,415 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:05,416 [main:66] - Compilation checking started
2021-03-11 20:22:05,635 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): OUT {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:22:05,635 [main:28] - Try №52 of 777
2021-03-11 20:22:05,651 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:05,651 [main:66] - Compilation checking started
2021-03-11 20:22:05,900 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).foo)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:22:05,900 [main:28] - Try №53 of 777
2021-03-11 20:22:05,907 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:22:05,908 [main:66] - Compilation checking started
2021-03-11 20:22:06,150 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ javaClass.x})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:22:06,151 [main:28] - Try №54 of 777
2021-03-11 20:22:06,166 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 20:22:06,166 [main:66] - Compilation checking started
2021-03-11 20:22:06,590 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:22:06,590 [main:28] - Try №55 of 777
2021-03-11 20:22:06,607 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:22:06,608 [main:28] - Try №56 of 777
2021-03-11 20:22:06,619 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:22:06,619 [main:66] - Compilation checking started
2021-03-11 20:22:06,836 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(listOf(7L, 5L, 3L, 1L), longList)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:22:06,836 [main:28] - Try №57 of 777
2021-03-11 20:22:06,840 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:06,840 [main:66] - Compilation checking started
2021-03-11 20:22:07,051 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (Test(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:22:07,051 [main:28] - Try №58 of 777
2021-03-11 20:22:07,074 [main:33] - Trying to replace PsiElement(ARROW) on PsiElement(ARROW)
2021-03-11 20:22:07,075 [main:28] - Try №59 of 777
2021-03-11 20:22:07,093 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-11 20:22:07,093 [main:66] - Compilation checking started
2021-03-11 20:22:07,425 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:07,425 [main:28] - Try №60 of 777
2021-03-11 20:22:07,436 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:22:07,437 [main:28] - Try №61 of 777
2021-03-11 20:22:07,463 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:22:07,463 [main:66] - Compilation checking started
2021-03-11 20:22:07,666 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { {
        prop + test()
    }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:07,667 [main:28] - Try №62 of 777
2021-03-11 20:22:07,693 [main:33] - Trying to replace PsiElement(ARROW) on PsiElement(ARROW)
2021-03-11 20:22:07,693 [main:28] - Try №63 of 777
2021-03-11 20:22:07,720 [main:33] - Trying to replace Element(FUNCTION_TYPE) on Element(FUNCTION_TYPE)
2021-03-11 20:22:07,720 [main:66] - Compilation checking started
2021-03-11 20:22:07,900 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> Unit): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:07,900 [main:28] - Try №64 of 777
2021-03-11 20:22:07,910 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 20:22:07,911 [main:28] - Try №65 of 777
2021-03-11 20:22:07,927 [main:33] - Trying to replace PsiElement(INTEGER_LITERAL) on PsiElement(INTEGER_LITERAL)
2021-03-11 20:22:07,927 [main:66] - Compilation checking started
2021-03-11 20:22:08,132 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-8uL))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:08,132 [main:28] - Try №66 of 777
2021-03-11 20:22:08,161 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-11 20:22:08,161 [main:28] - Try №67 of 777
2021-03-11 20:22:08,166 [main:33] - Trying to replace Element(CLASS) on Element(CLASS)
2021-03-11 20:22:08,167 [main:66] - Compilation checking started
2021-03-11 20:22:08,411 [main:49] - Result = false
Text:
@Ann(1 % 1, 1 % 1, 1 % 1, 1 % 1, 1.0 % 1.0, 1.0.toFloat() % 1.0.toFloat()) class MyClass
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:08,412 [main:28] - Try №68 of 777
2021-03-11 20:22:08,419 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:08,420 [main:66] - Compilation checking started
2021-03-11 20:22:08,675 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> key = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:08,675 [main:28] - Try №69 of 777
2021-03-11 20:22:08,688 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:22:08,688 [main:28] - Try №70 of 777
2021-03-11 20:22:08,705 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:22:08,705 [main:28] - Try №71 of 777
2021-03-11 20:22:08,726 [main:28] - Try №72 of 777
2021-03-11 20:22:08,743 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 20:22:08,743 [main:66] - Compilation checking started
2021-03-11 20:22:09,064 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:09,064 [main:28] - Try №73 of 777
2021-03-11 20:22:09,075 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:22:09,076 [main:66] - Compilation checking started
2021-03-11 20:22:09,282 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "OK"
    } catch (e : String) {
    }
    return "OK"
}


2021-03-11 20:22:09,282 [main:28] - Try №74 of 777
2021-03-11 20:22:09,293 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:09,293 [main:28] - Try №75 of 777
2021-03-11 20:22:09,297 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:09,297 [main:66] - Compilation checking started
2021-03-11 20:22:09,299 [main:71] - Wrong syntax or breaks conditions
2021-03-11 20:22:09,299 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun property(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:09,299 [main:28] - Try №76 of 777
2021-03-11 20:22:09,309 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:09,310 [main:66] - Compilation checking started
2021-03-11 20:22:09,495 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).listOf)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:09,495 [main:28] - Try №77 of 777
2021-03-11 20:22:09,499 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:09,499 [main:66] - Compilation checking started
2021-03-11 20:22:09,721 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): EXTENSION_RECEIVER = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:09,721 [main:28] - Try №78 of 777
2021-03-11 20:22:09,725 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:22:09,726 [main:28] - Try №79 of 777
2021-03-11 20:22:09,736 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:09,736 [main:28] - Try №80 of 777
2021-03-11 20:22:09,746 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:22:09,746 [main:66] - Compilation checking started
2021-03-11 20:22:09,936 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> String): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:09,936 [main:28] - Try №81 of 777
2021-03-11 20:22:09,943 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:22:09,943 [main:66] - Compilation checking started
2021-03-11 20:22:10,148 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = assertEquals(listOf(1u, 4u, 7u), uintList)

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:10,149 [main:28] - Try №82 of 777
2021-03-11 20:22:10,155 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:22:10,155 [main:66] - Compilation checking started
2021-03-11 20:22:10,359 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:10,359 [main:28] - Try №83 of 777
2021-03-11 20:22:10,373 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:22:10,373 [main:66] - Compilation checking started
2021-03-11 20:22:10,572 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(JavaClass().doIt())
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:10,573 [main:28] - Try №84 of 777
2021-03-11 20:22:10,590 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:22:10,591 [main:66] - Compilation checking started
2021-03-11 20:22:10,797 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): Int {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:10,798 [main:28] - Try №85 of 777
2021-03-11 20:22:10,808 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:22:10,808 [main:66] - Compilation checking started
2021-03-11 20:22:11,001 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: Int) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:11,001 [main:28] - Try №86 of 777
2021-03-11 20:22:11,009 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:22:11,009 [main:66] - Compilation checking started
2021-03-11 20:22:11,185 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(quz(IC(suspendMe())).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:11,185 [main:28] - Try №87 of 777
2021-03-11 20:22:11,189 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:11,190 [main:66] - Compilation checking started
2021-03-11 20:22:11,578 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:11,579 [main:28] - Try №88 of 777
2021-03-11 20:22:11,593 [main:33] - Trying to replace PsiElement(COMMA) on PsiElement(COMMA)
2021-03-11 20:22:11,594 [main:28] - Try №89 of 777
2021-03-11 20:22:11,613 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:11,613 [main:66] - Compilation checking started
2021-03-11 20:22:11,795 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { JvmDefault }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:11,795 [main:28] - Try №90 of 777
2021-03-11 20:22:11,802 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:22:11,803 [main:66] - Compilation checking started
2021-03-11 20:22:12,011 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: String): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:12,011 [main:28] - Try №91 of 777
2021-03-11 20:22:12,022 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:22:12,022 [main:66] - Compilation checking started
2021-03-11 20:22:12,194 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): T {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:12,194 [main:28] - Try №92 of 777
2021-03-11 20:22:12,198 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:12,198 [main:66] - Compilation checking started
2021-03-11 20:22:12,403 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { i }
    Int { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:12,403 [main:28] - Try №93 of 777
2021-03-11 20:22:12,410 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:22:12,410 [main:28] - Try №94 of 777
2021-03-11 20:22:12,435 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:22:12,435 [main:66] - Compilation checking started
2021-03-11 20:22:12,761 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:12,761 [main:28] - Try №95 of 777
2021-03-11 20:22:12,771 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:22:12,772 [main:66] - Compilation checking started
2021-03-11 20:22:12,980 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): Deprecated = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:12,980 [main:28] - Try №96 of 777
2021-03-11 20:22:12,990 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:22:12,990 [main:28] - Try №97 of 777
2021-03-11 20:22:13,003 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:22:13,004 [main:28] - Try №98 of 777
2021-03-11 20:22:13,017 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-11 20:22:13,018 [main:66] - Compilation checking started
2021-03-11 20:22:13,198 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt("extension"))?.internal.toString(-17594)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:13,198 [main:28] - Try №99 of 777
2021-03-11 20:22:13,203 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:13,204 [main:66] - Compilation checking started
2021-03-11 20:22:13,399 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(A: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:13,399 [main:28] - Try №100 of 777
2021-03-11 20:22:13,404 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:13,404 [main:66] - Compilation checking started
2021-03-11 20:22:13,583 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(res: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:13,583 [main:28] - Try №101 of 777
2021-03-11 20:22:13,589 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:22:13,589 [main:28] - Try №102 of 777
2021-03-11 20:22:13,595 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:22:13,596 [main:28] - Try №103 of 777
2021-03-11 20:22:13,606 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:22:13,607 [main:66] - Compilation checking started
2021-03-11 20:22:13,783 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: String)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:13,783 [main:28] - Try №104 of 777
2021-03-11 20:22:13,792 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:22:13,793 [main:66] - Compilation checking started
2021-03-11 20:22:13,975 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "OK"
    } catch (doNonLocal: Boolean) {
    }
    return "OK"
}


2021-03-11 20:22:13,975 [main:28] - Try №105 of 777
2021-03-11 20:22:13,991 [main:33] - Trying to replace PsiElement(INTEGER_LITERAL) on PsiElement(INTEGER_LITERAL)
2021-03-11 20:22:13,992 [main:66] - Compilation checking started
2021-03-11 20:22:14,291 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:14,291 [main:28] - Try №106 of 777
2021-03-11 20:22:14,318 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-11 20:22:14,318 [main:66] - Compilation checking started
2021-03-11 20:22:14,543 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo {
        object : Z<Z<String>> {
            override val property = test {
                object : Z<String> {
                    override val property = _member
                }
            }
        }
    }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:14,543 [main:28] - Try №107 of 777
2021-03-11 20:22:14,550 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:14,551 [main:66] - Compilation checking started
2021-03-11 20:22:14,744 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.b.toString(-2)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:14,744 [main:28] - Try №108 of 777
2021-03-11 20:22:14,749 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:22:14,750 [main:66] - Compilation checking started
2021-03-11 20:22:14,947 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(val a: Int = 1) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:14,947 [main:28] - Try №109 of 777
2021-03-11 20:22:14,965 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:14,966 [main:66] - Compilation checking started
2021-03-11 20:22:15,152 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return test3T()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:15,152 [main:28] - Try №110 of 777
2021-03-11 20:22:15,159 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:22:15,159 [main:28] - Try №111 of 777
2021-03-11 20:22:15,169 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:15,169 [main:28] - Try №112 of 777
2021-03-11 20:22:15,176 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:22:15,176 [main:66] - Compilation checking started
2021-03-11 20:22:15,398 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.Z(1, 2)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:15,398 [main:28] - Try №113 of 777
2021-03-11 20:22:15,409 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:22:15,409 [main:28] - Try №114 of 777
2021-03-11 20:22:15,412 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:15,413 [main:66] - Compilation checking started
2021-03-11 20:22:15,581 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> x = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:15,582 [main:28] - Try №115 of 777
2021-03-11 20:22:15,593 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:22:15,593 [main:28] - Try №116 of 777
2021-03-11 20:22:15,600 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:22:15,600 [main:66] - Compilation checking started
2021-03-11 20:22:15,798 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
        foo("K")
    }

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:15,798 [main:28] - Try №117 of 777
2021-03-11 20:22:15,815 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:22:15,816 [main:66] - Compilation checking started
2021-03-11 20:22:16,057 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo {
        when(it) {
            X.A-> "O"
            X.B-> "K"
        }
    }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:16,058 [main:28] - Try №118 of 777
2021-03-11 20:22:16,066 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:22:16,067 [main:28] - Try №119 of 777
2021-03-11 20:22:16,085 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-11 20:22:16,085 [main:66] - Compilation checking started
2021-03-11 20:22:16,343 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = {
            try {
                throwHere()
                count = 1
            } finally {
                if (count == 0) {
                    count = 2
                    result = "O"
                    throw Exception("K")
                } else if (count == 2) {
                    result = "FAIL: execution gets into infinite loop"
                } else {
                    result = "FAIL: exception has not been thrown"
                }
            }
        },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:16,343 [main:28] - Try №120 of 777
2021-03-11 20:22:16,355 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:16,356 [main:66] - Compilation checking started
2021-03-11 20:22:16,536 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).this)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:16,537 [main:28] - Try №121 of 777
2021-03-11 20:22:16,552 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:16,552 [main:66] - Compilation checking started
2021-03-11 20:22:16,729 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> nullable = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:16,729 [main:28] - Try №122 of 777
2021-03-11 20:22:16,737 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:22:16,737 [main:28] - Try №123 of 777
2021-03-11 20:22:16,743 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:16,743 [main:66] - Compilation checking started
2021-03-11 20:22:16,949 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : I) {
    }
    return "OK"
}


2021-03-11 20:22:16,949 [main:28] - Try №124 of 777
2021-03-11 20:22:16,962 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:22:16,962 [main:28] - Try №125 of 777
2021-03-11 20:22:16,977 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:16,977 [main:66] - Compilation checking started
2021-03-11 20:22:17,169 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): foo {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:17,170 [main:28] - Try №126 of 777
2021-03-11 20:22:17,176 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:22:17,176 [main:66] - Compilation checking started
2021-03-11 20:22:17,351 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString()

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:17,352 [main:28] - Try №127 of 777
2021-03-11 20:22:17,356 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:17,356 [main:28] - Try №128 of 777
2021-03-11 20:22:17,364 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:22:17,365 [main:28] - Try №129 of 777
2021-03-11 20:22:17,376 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:22:17,376 [main:28] - Try №130 of 777
2021-03-11 20:22:17,392 [main:33] - Trying to replace PsiElement(INTEGER_LITERAL) on PsiElement(INTEGER_LITERAL)
2021-03-11 20:22:17,393 [main:28] - Try №131 of 777
2021-03-11 20:22:17,400 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:22:17,401 [main:66] - Compilation checking started
2021-03-11 20:22:17,622 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { {
    var res: String? = null
    builder {
        val base: Base<*> = Derived()
        res = (base.generic() as IC).s as String
    }
    return res!!
} }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:17,623 [main:28] - Try №132 of 777
2021-03-11 20:22:17,630 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:22:17,630 [main:28] - Try №133 of 777
2021-03-11 20:22:17,640 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:17,640 [main:66] - Compilation checking started
2021-03-11 20:22:17,826 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return Base()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:17,826 [main:28] - Try №134 of 777
2021-03-11 20:22:17,830 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:22:17,831 [main:28] - Try №135 of 777
2021-03-11 20:22:17,841 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:22:17,842 [main:66] - Compilation checking started
2021-03-11 20:22:18,026 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Int) {
    }
    return "OK"
}


2021-03-11 20:22:18,026 [main:28] - Try №136 of 777
2021-03-11 20:22:18,032 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:18,032 [main:66] - Compilation checking started
2021-03-11 20:22:18,205 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> res = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:18,205 [main:28] - Try №137 of 777
2021-03-11 20:22:18,216 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:22:18,216 [main:28] - Try №138 of 777
2021-03-11 20:22:18,227 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:22:18,227 [main:28] - Try №139 of 777
2021-03-11 20:22:18,245 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:22:18,245 [main:28] - Try №140 of 777
2021-03-11 20:22:18,251 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:22:18,252 [main:28] - Try №141 of 777
2021-03-11 20:22:18,267 [main:28] - Try №142 of 777
2021-03-11 20:22:18,271 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:18,271 [main:66] - Compilation checking started
2021-03-11 20:22:18,445 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(step: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:18,446 [main:28] - Try №143 of 777
2021-03-11 20:22:18,458 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 20:22:18,458 [main:28] - Try №144 of 777
2021-03-11 20:22:18,468 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:18,468 [main:66] - Compilation checking started
2021-03-11 20:22:18,643 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).s1().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:18,643 [main:28] - Try №145 of 777
2021-03-11 20:22:18,669 [main:28] - Try №146 of 777
2021-03-11 20:22:18,686 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:22:18,687 [main:66] - Compilation checking started
2021-03-11 20:22:18,913 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: Int, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:18,913 [main:28] - Try №147 of 777
2021-03-11 20:22:18,928 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:22:18,928 [main:66] - Compilation checking started
2021-03-11 20:22:19,134 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (var x: Int) {
    }
    return "OK"
}


2021-03-11 20:22:19,135 [main:28] - Try №148 of 777
2021-03-11 20:22:19,140 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:19,141 [main:66] - Compilation checking started
2021-03-11 20:22:19,348 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    i { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:19,348 [main:28] - Try №149 of 777
2021-03-11 20:22:19,370 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-11 20:22:19,371 [main:28] - Try №150 of 777
2021-03-11 20:22:19,393 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:19,393 [main:66] - Compilation checking started
2021-03-11 20:22:19,581 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.range0.toString(-2)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:19,581 [main:28] - Try №151 of 777
2021-03-11 20:22:19,585 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:22:19,586 [main:28] - Try №152 of 777
2021-03-11 20:22:19,597 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:22:19,597 [main:28] - Try №153 of 777
2021-03-11 20:22:19,607 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:19,607 [main:66] - Compilation checking started
2021-03-11 20:22:19,816 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(I(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:19,816 [main:28] - Try №154 of 777
2021-03-11 20:22:19,820 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:22:19,821 [main:28] - Try №155 of 777
2021-03-11 20:22:19,829 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:22:19,829 [main:28] - Try №156 of 777
2021-03-11 20:22:19,833 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:19,833 [main:28] - Try №157 of 777
2021-03-11 20:22:19,851 [main:33] - Trying to replace Element(FUNCTION_TYPE) on Element(FUNCTION_TYPE)
2021-03-11 20:22:19,852 [main:66] - Compilation checking started
2021-03-11 20:22:20,023 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: (e: RuntimeException, T) -> R = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:20,024 [main:28] - Try №158 of 777
2021-03-11 20:22:20,029 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-11 20:22:20,030 [main:66] - Compilation checking started
2021-03-11 20:22:20,233 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

fun box(): String {
  if (C.myIntProp != 0) return "fail Int"
  if (C.myByteProp != 0.toByte()) return "fail Byte"
  if (C.myLongProp != 0L) return "fail Long"
  if (C.myShortProp != 0.toShort()) return "fail Short"
  if (C.myDoubleProp != 0.0) return "fail Double"
  if (C.myFloatProp != 0.0f) return "fail Float"
  if (C.myBooleanProp != false) return "fail Boolean"
  if (C.myCharProp != '\u0000') return "fail Char"
  return "OK"
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:20,234 [main:28] - Try №159 of 777
2021-03-11 20:22:20,242 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:22:20,243 [main:28] - Try №160 of 777
2021-03-11 20:22:20,258 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-11 20:22:20,259 [main:66] - Compilation checking started
2021-03-11 20:22:20,427 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return s
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:20,427 [main:28] - Try №161 of 777
2021-03-11 20:22:20,434 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:22:20,435 [main:66] - Compilation checking started
2021-03-11 20:22:20,609 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
        result += "E.init($a);"
    }

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:20,609 [main:28] - Try №162 of 777
2021-03-11 20:22:20,619 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:20,619 [main:66] - Compilation checking started
2021-03-11 20:22:20,799 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : String) {
    }
    return "OK"
}


2021-03-11 20:22:20,799 [main:28] - Try №163 of 777
2021-03-11 20:22:20,802 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:20,803 [main:66] - Compilation checking started
2021-03-11 20:22:20,974 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> forName): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:20,974 [main:28] - Try №164 of 777
2021-03-11 20:22:20,978 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:20,978 [main:66] - Compilation checking started
2021-03-11 20:22:21,158 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    getReferencedNameElement { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:21,158 [main:28] - Try №165 of 777
2021-03-11 20:22:21,162 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:21,162 [main:66] - Compilation checking started
2021-03-11 20:22:21,348 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    c1 { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:21,348 [main:28] - Try №166 of 777
2021-03-11 20:22:21,353 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:22:21,353 [main:66] - Compilation checking started
2021-03-11 20:22:21,534 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(c: suspend () -> Unit): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:21,535 [main:28] - Try №167 of 777
2021-03-11 20:22:21,546 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:22:21,547 [main:66] - Compilation checking started
2021-03-11 20:22:21,754 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): String {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:21,755 [main:28] - Try №168 of 777
2021-03-11 20:22:21,759 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:21,759 [main:66] - Compilation checking started
2021-03-11 20:22:21,921 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.full(-2)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:21,922 [main:28] - Try №169 of 777
2021-03-11 20:22:21,936 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:22:21,936 [main:28] - Try №170 of 777
2021-03-11 20:22:21,942 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:22:21,943 [main:66] - Compilation checking started
2021-03-11 20:22:22,124 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: String): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:22,125 [main:28] - Try №171 of 777
2021-03-11 20:22:22,139 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-11 20:22:22,140 [main:66] - Compilation checking started
2021-03-11 20:22:22,351 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-0.0))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:22,351 [main:28] - Try №172 of 777
2021-03-11 20:22:22,361 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:22,361 [main:66] - Compilation checking started
2021-03-11 20:22:22,562 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> MIN_VALUE): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:22,562 [main:28] - Try №173 of 777
2021-03-11 20:22:22,577 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-11 20:22:22,577 [main:28] - Try №174 of 777
2021-03-11 20:22:22,585 [main:33] - Trying to replace Element(MODIFIER_LIST) on Element(MODIFIER_LIST)
2021-03-11 20:22:22,585 [main:66] - Compilation checking started
2021-03-11 20:22:22,769 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

override fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:22,769 [main:28] - Try №175 of 777
2021-03-11 20:22:22,776 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:22,777 [main:66] - Compilation checking started
2021-03-11 20:22:22,967 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): it {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK"}() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:22,967 [main:28] - Try №176 of 777
2021-03-11 20:22:22,971 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:22,971 [main:28] - Try №177 of 777
2021-03-11 20:22:22,982 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:22:22,982 [main:28] - Try №178 of 777
2021-03-11 20:22:22,992 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:22,992 [main:28] - Try №179 of 777
2021-03-11 20:22:23,009 [main:33] - Trying to replace Element(TYPE_PROJECTION) on Element(TYPE_PROJECTION)
2021-03-11 20:22:23,009 [main:28] - Try №180 of 777
2021-03-11 20:22:23,028 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-11 20:22:23,028 [main:28] - Try №181 of 777
2021-03-11 20:22:23,037 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:22:23,037 [main:28] - Try №182 of 777
2021-03-11 20:22:23,045 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:22:23,045 [main:28] - Try №183 of 777
2021-03-11 20:22:23,060 [main:28] - Try №184 of 777
2021-03-11 20:22:23,077 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-11 20:22:23,077 [main:66] - Compilation checking started
2021-03-11 20:22:23,381 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:23,381 [main:28] - Try №185 of 777
2021-03-11 20:22:23,401 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:22:23,401 [main:66] - Compilation checking started
2021-03-11 20:22:23,635 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = {
        this@foo + this@block.toString() + x.toString() + count.toString()
    },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:23,636 [main:28] - Try №186 of 777
2021-03-11 20:22:23,646 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 20:22:23,646 [main:66] - Compilation checking started
2021-03-11 20:22:23,648 [main:71] - Wrong syntax or breaks conditions
2021-03-11 20:22:23,648 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((?:1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:23,648 [main:28] - Try №187 of 777
2021-03-11 20:22:23,652 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:23,652 [main:28] - Try №188 of 777
2021-03-11 20:22:23,666 [main:33] - Trying to replace Element(TYPE_ARGUMENT_LIST) on Element(TYPE_ARGUMENT_LIST)
2021-03-11 20:22:23,666 [main:28] - Try №189 of 777
2021-03-11 20:22:23,670 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:23,670 [main:66] - Compilation checking started
2021-03-11 20:22:23,850 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    longLow { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    }
    return "OK"
}


2021-03-11 20:22:23,850 [main:28] - Try №190 of 777
2021-03-11 20:22:23,860 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:22:23,861 [main:66] - Compilation checking started
2021-03-11 20:22:24,206 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:24,207 [main:28] - Try №191 of 777
2021-03-11 20:22:24,215 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:22:24,216 [main:66] - Compilation checking started
2021-03-11 20:22:24,407 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, e: Exception) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:24,407 [main:28] - Try №192 of 777
2021-03-11 20:22:24,423 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 20:22:24,423 [main:28] - Try №193 of 777
2021-03-11 20:22:24,428 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:24,428 [main:66] - Compilation checking started
2021-03-11 20:22:24,639 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun A(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:24,640 [main:28] - Try №194 of 777
2021-03-11 20:22:24,650 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:22:24,650 [main:66] - Compilation checking started
2021-03-11 20:22:24,861 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): String {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:24,862 [main:28] - Try №195 of 777
2021-03-11 20:22:24,875 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:22:24,875 [main:28] - Try №196 of 777
2021-03-11 20:22:24,889 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:22:24,890 [main:28] - Try №197 of 777
2021-03-11 20:22:24,893 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-11 20:22:24,894 [main:66] - Compilation checking started
2021-03-11 20:22:25,137 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun increment(): Int {
  return ++x;
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:25,137 [main:28] - Try №198 of 777
2021-03-11 20:22:25,146 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:22:25,146 [main:28] - Try №199 of 777
2021-03-11 20:22:25,162 [main:33] - Trying to replace PsiElement(INTEGER_LITERAL) on PsiElement(INTEGER_LITERAL)
2021-03-11 20:22:25,162 [main:28] - Try №200 of 777
2021-03-11 20:22:25,167 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:25,167 [main:28] - Try №201 of 777
2021-03-11 20:22:25,171 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:25,172 [main:66] - Compilation checking started
2021-03-11 20:22:25,354 [main:49] - Result = false
Text:
inline class t(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:25,354 [main:28] - Try №202 of 777
2021-03-11 20:22:25,370 [main:28] - Try №203 of 777
2021-03-11 20:22:25,385 [main:28] - Try №204 of 777
2021-03-11 20:22:25,392 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:22:25,393 [main:66] - Compilation checking started
2021-03-11 20:22:25,600 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  org.jetbrains.annotations.Nullable.toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:25,600 [main:28] - Try №205 of 777
2021-03-11 20:22:25,609 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:22:25,610 [main:66] - Compilation checking started
2021-03-11 20:22:25,794 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> Int = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:25,794 [main:28] - Try №206 of 777
2021-03-11 20:22:25,800 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:22:25,801 [main:28] - Try №207 of 777
2021-03-11 20:22:25,816 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:25,816 [main:28] - Try №208 of 777
2021-03-11 20:22:25,832 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:22:25,832 [main:66] - Compilation checking started
2021-03-11 20:22:25,832 [main:68] - Already checked
2021-03-11 20:22:25,832 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): String {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:25,832 [main:28] - Try №209 of 777
2021-03-11 20:22:25,850 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:22:25,850 [main:28] - Try №210 of 777
2021-03-11 20:22:25,860 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:25,860 [main:28] - Try №211 of 777
2021-03-11 20:22:25,864 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:25,864 [main:28] - Try №212 of 777
2021-03-11 20:22:25,874 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:25,874 [main:66] - Compilation checking started
2021-03-11 20:22:26,048 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): s = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:26,049 [main:28] - Try №213 of 777
2021-03-11 20:22:26,060 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 20:22:26,060 [main:66] - Compilation checking started
2021-03-11 20:22:26,061 [main:71] - Wrong syntax or breaks conditions
2021-03-11 20:22:26,061 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(==2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:26,061 [main:28] - Try №214 of 777
2021-03-11 20:22:26,073 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:26,073 [main:66] - Compilation checking started
2021-03-11 20:22:26,258 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).annotations().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:26,259 [main:28] - Try №215 of 777
2021-03-11 20:22:26,281 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:22:26,282 [main:28] - Try №216 of 777
2021-03-11 20:22:26,292 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:22:26,293 [main:28] - Try №217 of 777
2021-03-11 20:22:26,301 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:22:26,301 [main:66] - Compilation checking started
2021-03-11 20:22:26,492 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (f: (Int) -> Int) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:26,492 [main:28] - Try №218 of 777
2021-03-11 20:22:26,502 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:26,503 [main:28] - Try №219 of 777
2021-03-11 20:22:26,518 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:26,518 [main:28] - Try №220 of 777
2021-03-11 20:22:26,545 [main:33] - Trying to replace Element(TRY) on Element(TRY)
2021-03-11 20:22:26,545 [main:66] - Compilation checking started
2021-03-11 20:22:26,724 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        b({ result += "OK"; 1 }, { result += "fail"; 2 })
        return "fail: expected exception"
    } catch (e: RuntimeException) {

    }
    return "OK"
}


2021-03-11 20:22:26,724 [main:28] - Try №221 of 777
2021-03-11 20:22:26,731 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:22:26,731 [main:66] - Compilation checking started
2021-03-11 20:22:26,732 [main:71] - Wrong syntax or breaks conditions
2021-03-11 20:22:26,732 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String it.name == "foo"


2021-03-11 20:22:26,732 [main:28] - Try №222 of 777
2021-03-11 20:22:26,744 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 20:22:26,744 [main:66] - Compilation checking started
2021-03-11 20:22:26,745 [main:71] - Wrong syntax or breaks conditions
2021-03-11 20:22:26,745 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(=17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:26,746 [main:28] - Try №223 of 777
2021-03-11 20:22:26,755 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:26,756 [main:66] - Compilation checking started
2021-03-11 20:22:26,946 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().field(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:26,947 [main:28] - Try №224 of 777
2021-03-11 20:22:26,954 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:22:26,955 [main:28] - Try №225 of 777
2021-03-11 20:22:26,962 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:22:26,962 [main:28] - Try №226 of 777
2021-03-11 20:22:26,968 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:26,968 [main:66] - Compilation checking started
2021-03-11 20:22:27,142 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(box: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:27,142 [main:28] - Try №227 of 777
2021-03-11 20:22:27,149 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:22:27,150 [main:28] - Try №228 of 777
2021-03-11 20:22:27,156 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:27,156 [main:28] - Try №229 of 777
2021-03-11 20:22:27,184 [main:33] - Trying to replace Element(LAMBDA_ARGUMENT) on Element(LAMBDA_ARGUMENT)
2021-03-11 20:22:27,185 [main:66] - Compilation checking started
2021-03-11 20:22:27,374 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { it.name == "bar" }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:27,375 [main:28] - Try №230 of 777
2021-03-11 20:22:27,400 [main:33] - Trying to replace PsiElement(ARROW) on PsiElement(ARROW)
2021-03-11 20:22:27,400 [main:28] - Try №231 of 777
2021-03-11 20:22:27,411 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:27,411 [main:28] - Try №232 of 777
2021-03-11 20:22:27,425 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:22:27,426 [main:28] - Try №233 of 777
2021-03-11 20:22:27,440 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:27,441 [main:66] - Compilation checking started
2021-03-11 20:22:27,615 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): Int {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:27,615 [main:28] - Try №234 of 777
2021-03-11 20:22:27,625 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:22:27,625 [main:66] - Compilation checking started
2021-03-11 20:22:27,807 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:27,808 [main:28] - Try №235 of 777
2021-03-11 20:22:27,815 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:22:27,816 [main:66] - Compilation checking started
2021-03-11 20:22:27,998 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    bar()
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:27,998 [main:28] - Try №236 of 777
2021-03-11 20:22:28,022 [main:28] - Try №237 of 777
2021-03-11 20:22:28,042 [main:28] - Try №238 of 777
2021-03-11 20:22:28,055 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:28,055 [main:28] - Try №239 of 777
2021-03-11 20:22:28,057 [main:33] - Trying to replace Element(PACKAGE_DIRECTIVE) on Element(PACKAGE_DIRECTIVE)
2021-03-11 20:22:28,057 [main:66] - Compilation checking started
2021-03-11 20:22:28,057 [main:68] - Already checked
2021-03-11 20:22:28,057 [main:28] - Try №240 of 777
2021-03-11 20:22:28,067 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:22:28,068 [main:66] - Compilation checking started
2021-03-11 20:22:28,262 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return plus("239")
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:28,262 [main:28] - Try №241 of 777
2021-03-11 20:22:28,268 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:22:28,269 [main:28] - Try №242 of 777
2021-03-11 20:22:28,276 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:22:28,276 [main:66] - Compilation checking started
2021-03-11 20:22:28,461 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { x + y }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:28,462 [main:28] - Try №243 of 777
2021-03-11 20:22:28,483 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-11 20:22:28,483 [main:66] - Compilation checking started
2021-03-11 20:22:28,672 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(!test<String>("OK")))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:28,672 [main:28] - Try №244 of 777
2021-03-11 20:22:28,697 [main:33] - Trying to replace PsiElement(INTEGER_LITERAL) on PsiElement(INTEGER_LITERAL)
2021-03-11 20:22:28,698 [main:28] - Try №245 of 777
2021-03-11 20:22:28,712 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:22:28,712 [main:28] - Try №246 of 777
2021-03-11 20:22:28,720 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:22:28,720 [main:28] - Try №247 of 777
2021-03-11 20:22:28,727 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:22:28,728 [main:66] - Compilation checking started
2021-03-11 20:22:28,922 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { {
    val a = A()
    if (a.f() != "OK") return "FAIL0"
    a.g()
    return A.v
} }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:28,922 [main:28] - Try №248 of 777
2021-03-11 20:22:28,929 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:22:28,929 [main:66] - Compilation checking started
2021-03-11 20:22:29,111 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = toLong()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:29,111 [main:28] - Try №249 of 777
2021-03-11 20:22:29,124 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:22:29,124 [main:28] - Try №250 of 777
2021-03-11 20:22:29,128 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:29,128 [main:28] - Try №251 of 777
2021-03-11 20:22:29,132 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:29,132 [main:66] - Compilation checking started
2021-03-11 20:22:29,328 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.size(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:29,328 [main:28] - Try №252 of 777
2021-03-11 20:22:29,337 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:22:29,338 [main:28] - Try №253 of 777
2021-03-11 20:22:29,344 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:22:29,344 [main:28] - Try №254 of 777
2021-03-11 20:22:29,348 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:29,348 [main:66] - Compilation checking started
2021-03-11 20:22:29,522 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): x = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:29,522 [main:28] - Try №255 of 777
2021-03-11 20:22:29,532 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:29,532 [main:28] - Try №256 of 777
2021-03-11 20:22:29,539 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:22:29,539 [main:66] - Compilation checking started
2021-03-11 20:22:29,722 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    return Bar.ONE.toString()
}


2021-03-11 20:22:29,722 [main:28] - Try №257 of 777
2021-03-11 20:22:29,737 [main:28] - Try №258 of 777
2021-03-11 20:22:29,742 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:22:29,742 [main:28] - Try №259 of 777
2021-03-11 20:22:29,749 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:22:29,749 [main:28] - Try №260 of 777
2021-03-11 20:22:29,767 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-11 20:22:29,767 [main:66] - Compilation checking started
2021-03-11 20:22:29,940 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (base.generic() as IC)?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:29,940 [main:28] - Try №261 of 777
2021-03-11 20:22:29,948 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:22:29,948 [main:66] - Compilation checking started
2021-03-11 20:22:30,117 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): Int = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:30,118 [main:28] - Try №262 of 777
2021-03-11 20:22:30,121 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:30,121 [main:66] - Compilation checking started
2021-03-11 20:22:30,294 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun Int(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:30,294 [main:28] - Try №263 of 777
2021-03-11 20:22:30,298 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:30,298 [main:66] - Compilation checking started
2021-03-11 20:22:30,636 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:30,636 [main:28] - Try №264 of 777
2021-03-11 20:22:30,640 [main:33] - Trying to replace Element(CLASS) on Element(CLASS)
2021-03-11 20:22:30,640 [main:66] - Compilation checking started
2021-03-11 20:22:30,868 [main:49] - Result = false
Text:
class Test {
    fun fooTest() {
        val foo: JsonCodingParser = object : JsonCodingParser {}
        testDecoding(foo::parseValue)
    }
}
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:30,868 [main:28] - Try №265 of 777
2021-03-11 20:22:30,878 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:22:30,878 [main:66] - Compilation checking started
2021-03-11 20:22:31,143 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): Int {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:31,144 [main:28] - Try №266 of 777
2021-03-11 20:22:31,156 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-11 20:22:31,156 [main:28] - Try №267 of 777
2021-03-11 20:22:31,159 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:31,160 [main:28] - Try №268 of 777
2021-03-11 20:22:31,169 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:31,170 [main:66] - Compilation checking started
2021-03-11 20:22:31,366 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).prop)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:31,366 [main:28] - Try №269 of 777
2021-03-11 20:22:31,374 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:22:31,374 [main:28] - Try №270 of 777
2021-03-11 20:22:31,381 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:22:31,381 [main:28] - Try №271 of 777
2021-03-11 20:22:31,390 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:22:31,390 [main:28] - Try №272 of 777
2021-03-11 20:22:31,399 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:22:31,399 [main:28] - Try №273 of 777
2021-03-11 20:22:31,407 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:22:31,408 [main:28] - Try №274 of 777
2021-03-11 20:22:31,422 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 20:22:31,422 [main:28] - Try №275 of 777
2021-03-11 20:22:31,429 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:22:31,429 [main:66] - Compilation checking started
2021-03-11 20:22:31,652 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Int) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:31,652 [main:28] - Try №276 of 777
2021-03-11 20:22:31,662 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:31,663 [main:66] - Compilation checking started
2021-03-11 20:22:31,841 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    a { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:31,842 [main:28] - Try №277 of 777
2021-03-11 20:22:31,848 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:22:31,848 [main:28] - Try №278 of 777
2021-03-11 20:22:31,855 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:22:31,855 [main:66] - Compilation checking started
2021-03-11 20:22:32,025 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return `A!u00A0`().ok
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:32,025 [main:28] - Try №279 of 777
2021-03-11 20:22:32,036 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:22:32,036 [main:66] - Compilation checking started
2021-03-11 20:22:32,212 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: String)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:32,213 [main:28] - Try №280 of 777
2021-03-11 20:22:32,228 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:32,228 [main:28] - Try №281 of 777
2021-03-11 20:22:32,242 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:32,242 [main:28] - Try №282 of 777
2021-03-11 20:22:32,247 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:22:32,247 [main:28] - Try №283 of 777
2021-03-11 20:22:32,251 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:32,251 [main:28] - Try №284 of 777
2021-03-11 20:22:32,262 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:22:32,263 [main:28] - Try №285 of 777
2021-03-11 20:22:32,269 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:32,269 [main:66] - Compilation checking started
2021-03-11 20:22:32,453 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> java): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:32,453 [main:28] - Try №286 of 777
2021-03-11 20:22:32,461 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:22:32,461 [main:28] - Try №287 of 777
2021-03-11 20:22:32,472 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:22:32,472 [main:28] - Try №288 of 777
2021-03-11 20:22:32,483 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:22:32,483 [main:28] - Try №289 of 777
2021-03-11 20:22:32,493 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:32,493 [main:28] - Try №290 of 777
2021-03-11 20:22:32,507 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 20:22:32,508 [main:28] - Try №291 of 777
2021-03-11 20:22:32,524 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:22:32,524 [main:66] - Compilation checking started
2021-03-11 20:22:32,696 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { async(::addOK).run() }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:32,696 [main:28] - Try №292 of 777
2021-03-11 20:22:32,706 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:22:32,707 [main:66] - Compilation checking started
2021-03-11 20:22:32,884 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: Int = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:32,885 [main:28] - Try №293 of 777
2021-03-11 20:22:32,888 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:32,888 [main:66] - Compilation checking started
2021-03-11 20:22:33,083 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(Runnable: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:33,083 [main:28] - Try №294 of 777
2021-03-11 20:22:33,093 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:22:33,093 [main:66] - Compilation checking started
2021-03-11 20:22:33,305 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: JvmDefault): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:33,306 [main:28] - Try №295 of 777
2021-03-11 20:22:33,317 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:22:33,317 [main:66] - Compilation checking started
2021-03-11 20:22:33,487 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    test()
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:33,487 [main:28] - Try №296 of 777
2021-03-11 20:22:33,495 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:22:33,495 [main:28] - Try №297 of 777
2021-03-11 20:22:33,498 [main:33] - Trying to replace Element(IMPORT_LIST) on Element(IMPORT_LIST)
2021-03-11 20:22:33,498 [main:66] - Compilation checking started
2021-03-11 20:22:33,498 [main:68] - Already checked
2021-03-11 20:22:33,498 [main:28] - Try №298 of 777
2021-03-11 20:22:33,501 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:33,501 [main:28] - Try №299 of 777
2021-03-11 20:22:33,510 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:22:33,510 [main:28] - Try №300 of 777
2021-03-11 20:22:33,521 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:22:33,522 [main:66] - Compilation checking started
2021-03-11 20:22:33,711 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): I {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:33,711 [main:28] - Try №301 of 777
2021-03-11 20:22:33,729 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-11 20:22:33,730 [main:66] - Compilation checking started
2021-03-11 20:22:33,731 [main:71] - Wrong syntax or breaks conditions
2021-03-11 20:22:33,731 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  (T[] a).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:33,731 [main:28] - Try №302 of 777
2021-03-11 20:22:33,737 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:22:33,738 [main:28] - Try №303 of 777
2021-03-11 20:22:33,745 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:22:33,745 [main:66] - Compilation checking started
2021-03-11 20:22:33,930 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.assertFalse(Unit::infix.isExternal)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:33,930 [main:28] - Try №304 of 777
2021-03-11 20:22:33,943 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:22:33,943 [main:28] - Try №305 of 777
2021-03-11 20:22:33,951 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:22:33,951 [main:28] - Try №306 of 777
2021-03-11 20:22:33,962 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:22:33,962 [main:66] - Compilation checking started
2021-03-11 20:22:34,142 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: IFooBar2): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:34,143 [main:28] - Try №307 of 777
2021-03-11 20:22:34,155 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:22:34,155 [main:66] - Compilation checking started
2021-03-11 20:22:34,335 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(state: Int): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:34,335 [main:28] - Try №308 of 777
2021-03-11 20:22:34,341 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:22:34,342 [main:66] - Compilation checking started
2021-03-11 20:22:34,524 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : String?) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:34,524 [main:28] - Try №309 of 777
2021-03-11 20:22:34,540 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:22:34,540 [main:28] - Try №310 of 777
2021-03-11 20:22:34,555 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:34,555 [main:28] - Try №311 of 777
2021-03-11 20:22:34,571 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:22:34,571 [main:28] - Try №312 of 777
2021-03-11 20:22:34,578 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:22:34,578 [main:66] - Compilation checking started
2021-03-11 20:22:34,760 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: suspend () -> Unit): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:34,761 [main:28] - Try №313 of 777
2021-03-11 20:22:34,767 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:22:34,767 [main:66] - Compilation checking started
2021-03-11 20:22:34,947 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:34,947 [main:28] - Try №314 of 777
2021-03-11 20:22:34,950 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:34,950 [main:66] - Compilation checking started
2021-03-11 20:22:35,118 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> get): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:35,118 [main:28] - Try №315 of 777
2021-03-11 20:22:35,127 [main:33] - Trying to replace PsiElement(COMMA) on PsiElement(COMMA)
2021-03-11 20:22:35,127 [main:28] - Try №316 of 777
2021-03-11 20:22:35,144 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-11 20:22:35,145 [main:66] - Compilation checking started
2021-03-11 20:22:35,339 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (::A)?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:35,339 [main:28] - Try №317 of 777
2021-03-11 20:22:35,359 [main:33] - Trying to replace Element(FUNCTION_TYPE) on Element(FUNCTION_TYPE)
2021-03-11 20:22:35,360 [main:66] - Compilation checking started
2021-03-11 20:22:35,543 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: (String) -> Unit): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:35,543 [main:28] - Try №318 of 777
2021-03-11 20:22:35,572 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-11 20:22:35,573 [main:28] - Try №319 of 777
2021-03-11 20:22:35,593 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:22:35,594 [main:28] - Try №320 of 777
2021-03-11 20:22:35,599 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:35,599 [main:28] - Try №321 of 777
2021-03-11 20:22:35,618 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:22:35,619 [main:28] - Try №322 of 777
2021-03-11 20:22:35,619 [main:28] - Try №323 of 777
2021-03-11 20:22:35,626 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:22:35,626 [main:28] - Try №324 of 777
2021-03-11 20:22:35,638 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-11 20:22:35,638 [main:66] - Compilation checking started
2021-03-11 20:22:35,823 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(IC("K")).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:35,823 [main:28] - Try №325 of 777
2021-03-11 20:22:35,827 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:35,827 [main:28] - Try №326 of 777
2021-03-11 20:22:35,844 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-11 20:22:35,845 [main:28] - Try №327 of 777
2021-03-11 20:22:35,860 [main:33] - Trying to replace PsiElement(ARROW) on PsiElement(ARROW)
2021-03-11 20:22:35,861 [main:28] - Try №328 of 777
2021-03-11 20:22:35,867 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:22:35,867 [main:66] - Compilation checking started
2021-03-11 20:22:36,062 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: String): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:36,062 [main:28] - Try №329 of 777
2021-03-11 20:22:36,072 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:22:36,072 [main:28] - Try №330 of 777
2021-03-11 20:22:36,089 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:22:36,089 [main:66] - Compilation checking started
2021-03-11 20:22:36,261 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { x }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:36,261 [main:28] - Try №331 of 777
2021-03-11 20:22:36,272 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:22:36,272 [main:28] - Try №332 of 777
2021-03-11 20:22:36,276 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:36,276 [main:28] - Try №333 of 777
2021-03-11 20:22:36,285 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:22:36,285 [main:28] - Try №334 of 777
2021-03-11 20:22:36,292 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:22:36,292 [main:66] - Compilation checking started
2021-03-11 20:22:36,477 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).let {
            if (s.length < 4) {
                shortStrings.add(s)
            }
            else {
                longStrings.add(s)
            }
        }.toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f2: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:36,477 [main:28] - Try №335 of 777
2021-03-11 20:22:36,483 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:36,484 [main:66] - Compilation checking started
2021-03-11 20:22:36,813 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    JavaClass: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:36,813 [main:28] - Try №336 of 777
2021-03-11 20:22:36,825 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:22:36,825 [main:28] - Try №337 of 777
2021-03-11 20:22:36,841 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:36,841 [main:66] - Compilation checking started
2021-03-11 20:22:37,029 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).uintList().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    JavaClass: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:37,029 [main:28] - Try №338 of 777
2021-03-11 20:22:37,051 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 20:22:37,051 [main:28] - Try №339 of 777
2021-03-11 20:22:37,060 [main:33] - Trying to replace Element(MODIFIER_LIST) on Element(MODIFIER_LIST)
2021-03-11 20:22:37,061 [main:66] - Compilation checking started
2021-03-11 20:22:37,062 [main:71] - Wrong syntax or breaks conditions
2021-03-11 20:22:37,063 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

public override class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    JavaClass: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (e : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:37,063 [main:28] - Try №340 of 777
2021-03-11 20:22:37,068 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:37,069 [main:66] - Compilation checking started
2021-03-11 20:22:37,363 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    JavaClass: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:37,363 [main:28] - Try №341 of 777
2021-03-11 20:22:37,373 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:22:37,374 [main:66] - Compilation checking started
2021-03-11 20:22:37,552 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    JavaClass: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : String) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:37,552 [main:28] - Try №342 of 777
2021-03-11 20:22:37,568 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-11 20:22:37,569 [main:66] - Compilation checking started
2021-03-11 20:22:37,742 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = {
    dummy()
    dummy()
},
    JavaClass: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:37,742 [main:28] - Try №343 of 777
2021-03-11 20:22:37,752 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:22:37,752 [main:66] - Compilation checking started
2021-03-11 20:22:37,931 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    JavaClass: () -> String = { "pveid"}
): Int = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:37,931 [main:28] - Try №344 of 777
2021-03-11 20:22:37,941 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:37,942 [main:66] - Compilation checking started
2021-03-11 20:22:38,134 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: String)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    JavaClass: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:38,134 [main:28] - Try №345 of 777
2021-03-11 20:22:38,151 [main:33] - Trying to replace Element(LAMBDA_ARGUMENT) on Element(LAMBDA_ARGUMENT)
2021-03-11 20:22:38,151 [main:66] - Compilation checking started
2021-03-11 20:22:38,327 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { return null; }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    JavaClass: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:38,328 [main:28] - Try №346 of 777
2021-03-11 20:22:38,336 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:22:38,336 [main:28] - Try №347 of 777
2021-03-11 20:22:38,346 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:38,346 [main:66] - Compilation checking started
2021-03-11 20:22:38,523 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    JavaClass: () -> String = { "pveid"}
): entries = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:38,523 [main:28] - Try №348 of 777
2021-03-11 20:22:38,532 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:22:38,533 [main:66] - Compilation checking started
2021-03-11 20:22:38,534 [main:71] - Wrong syntax or breaks conditions
2021-03-11 20:22:38,534 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) test2 {
            test2 {
                test2 {
                    test2 {
                        test2 {
                            res = calculate()
                        }
                    }
                }
            }
        }

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    JavaClass: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:38,534 [main:28] - Try №349 of 777
2021-03-11 20:22:38,542 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:22:38,542 [main:28] - Try №350 of 777
2021-03-11 20:22:38,558 [main:33] - Trying to replace PsiElement(INTEGER_LITERAL) on PsiElement(INTEGER_LITERAL)
2021-03-11 20:22:38,558 [main:66] - Compilation checking started
2021-03-11 20:22:38,835 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    JavaClass: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-0))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:38,835 [main:28] - Try №351 of 777
2021-03-11 20:22:38,854 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-11 20:22:38,854 [main:66] - Compilation checking started
2021-03-11 20:22:39,047 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    JavaClass: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (O::class.members.single { it.name == "baz" } as KMutableProperty<*>)?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:39,047 [main:28] - Try №352 of 777
2021-03-11 20:22:39,051 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:39,051 [main:66] - Compilation checking started
2021-03-11 20:22:39,226 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(add: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    JavaClass: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-0))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:39,226 [main:28] - Try №353 of 777
2021-03-11 20:22:39,230 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:22:39,231 [main:28] - Try №354 of 777
2021-03-11 20:22:39,240 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:39,240 [main:66] - Compilation checking started
2021-03-11 20:22:39,417 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): String {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    JavaClass: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-0))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:39,417 [main:28] - Try №355 of 777
2021-03-11 20:22:39,421 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:39,422 [main:28] - Try №356 of 777
2021-03-11 20:22:39,431 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 20:22:39,432 [main:66] - Compilation checking started
2021-03-11 20:22:39,599 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((until1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    JavaClass: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-0))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:39,599 [main:28] - Try №357 of 777
2021-03-11 20:22:39,611 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-11 20:22:39,612 [main:66] - Compilation checking started
2021-03-11 20:22:39,779 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    JavaClass: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-0))?.internal.toString("not implemented")
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:39,779 [main:28] - Try №358 of 777
2021-03-11 20:22:39,788 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:39,789 [main:66] - Compilation checking started
2021-03-11 20:22:39,971 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: foo)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    JavaClass: () -> String = { "pveid"}
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-0))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:39,971 [main:28] - Try №359 of 777
2021-03-11 20:22:39,985 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:22:39,985 [main:66] - Compilation checking started
2021-03-11 20:22:40,298 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-0))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:40,299 [main:28] - Try №360 of 777
2021-03-11 20:22:40,321 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 20:22:40,321 [main:28] - Try №361 of 777
2021-03-11 20:22:40,336 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-11 20:22:40,336 [main:66] - Compilation checking started
2021-03-11 20:22:40,535 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return s(x)
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-0))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:40,535 [main:28] - Try №362 of 777
2021-03-11 20:22:40,547 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-11 20:22:40,547 [main:28] - Try №363 of 777
2021-03-11 20:22:40,550 [main:33] - Trying to replace Element(CLASS) on Element(CLASS)
2021-03-11 20:22:40,551 [main:66] - Compilation checking started
2021-03-11 20:22:40,729 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

@Ann(1 or 1, 1 and 1, 1 xor 1, 1 shl 1, 1 shr 1, 1 ushr 1) class MyClass

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-0))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:40,730 [main:28] - Try №364 of 777
2021-03-11 20:22:40,733 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-11 20:22:40,733 [main:66] - Compilation checking started
2021-03-11 20:22:40,913 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

fun box(): String {
    val test1 = FakePlatformName().foo()
    if (test1 != "foo") return "Failed: FakePlatformName().foo()==$test1"

    return "OK"
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-0))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:40,913 [main:28] - Try №365 of 777
2021-03-11 20:22:40,929 [main:33] - Trying to replace PsiElement(INTEGER_LITERAL) on PsiElement(INTEGER_LITERAL)
2021-03-11 20:22:40,929 [main:28] - Try №366 of 777
2021-03-11 20:22:40,935 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:22:40,936 [main:66] - Compilation checking started
2021-03-11 20:22:41,099 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return if (B().f() == 239) "OK" else "fail"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-0))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:41,099 [main:28] - Try №367 of 777
2021-03-11 20:22:41,107 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:22:41,107 [main:28] - Try №368 of 777
2021-03-11 20:22:41,119 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-11 20:22:41,119 [main:66] - Compilation checking started
2021-03-11 20:22:41,291 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(job).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-0))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:41,291 [main:28] - Try №369 of 777
2021-03-11 20:22:41,295 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:41,295 [main:66] - Compilation checking started
2021-03-11 20:22:41,465 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: Int) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-0))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:41,465 [main:28] - Try №370 of 777
2021-03-11 20:22:41,475 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:22:41,476 [main:28] - Try №371 of 777
2021-03-11 20:22:41,484 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:22:41,485 [main:66] - Compilation checking started
2021-03-11 20:22:41,660 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-0))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:41,661 [main:28] - Try №372 of 777
2021-03-11 20:22:41,671 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:41,671 [main:66] - Compilation checking started
2021-03-11 20:22:41,843 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(s: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-0))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:41,843 [main:28] - Try №373 of 777
2021-03-11 20:22:41,871 [main:33] - Trying to replace Element(LAMBDA_ARGUMENT) on Element(LAMBDA_ARGUMENT)
2021-03-11 20:22:41,871 [main:66] - Compilation checking started
2021-03-11 20:22:42,046 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz {
        return u1 // box
    }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-0))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:42,046 [main:28] - Try №374 of 777
2021-03-11 20:22:42,052 [main:33] - Trying to replace Element(MODIFIER_LIST) on Element(MODIFIER_LIST)
2021-03-11 20:22:42,052 [main:66] - Compilation checking started
2021-03-11 20:22:42,351 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-0))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:42,351 [main:28] - Try №375 of 777
2021-03-11 20:22:42,361 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:22:42,361 [main:28] - Try №376 of 777
2021-03-11 20:22:42,373 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 20:22:42,374 [main:28] - Try №377 of 777
2021-03-11 20:22:42,387 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:22:42,387 [main:28] - Try №378 of 777
2021-03-11 20:22:42,394 [main:33] - Trying to replace Element(MODIFIER_LIST) on Element(MODIFIER_LIST)
2021-03-11 20:22:42,394 [main:66] - Compilation checking started
2021-03-11 20:22:42,395 [main:71] - Wrong syntax or breaks conditions
2021-03-11 20:22:42,395 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

operator class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-0))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:42,395 [main:28] - Try №379 of 777
2021-03-11 20:22:42,413 [main:33] - Trying to replace Element(FUNCTION_TYPE) on Element(FUNCTION_TYPE)
2021-03-11 20:22:42,413 [main:66] - Compilation checking started
2021-03-11 20:22:42,580 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: (T) -> Unit): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-0))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:42,580 [main:28] - Try №380 of 777
2021-03-11 20:22:42,592 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:22:42,593 [main:66] - Compilation checking started
2021-03-11 20:22:42,870 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-0))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:42,870 [main:28] - Try №381 of 777
2021-03-11 20:22:42,877 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:22:42,877 [main:28] - Try №382 of 777
2021-03-11 20:22:42,897 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-11 20:22:42,897 [main:28] - Try №383 of 777
2021-03-11 20:22:42,907 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:42,907 [main:28] - Try №384 of 777
2021-03-11 20:22:42,913 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:22:42,914 [main:66] - Compilation checking started
2021-03-11 20:22:43,085 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { JNotNull { s } },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-0))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:43,085 [main:28] - Try №385 of 777
2021-03-11 20:22:43,101 [main:33] - Trying to replace PsiElement(ARROW) on PsiElement(ARROW)
2021-03-11 20:22:43,101 [main:28] - Try №386 of 777
2021-03-11 20:22:43,105 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:43,105 [main:28] - Try №387 of 777
2021-03-11 20:22:43,116 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:43,116 [main:66] - Compilation checking started
2021-03-11 20:22:43,282 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    Provider { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-0))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:43,282 [main:28] - Try №388 of 777
2021-03-11 20:22:43,291 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:43,292 [main:28] - Try №389 of 777
2021-03-11 20:22:43,295 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:43,296 [main:66] - Compilation checking started
2021-03-11 20:22:43,463 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { x }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-0))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:43,464 [main:28] - Try №390 of 777
2021-03-11 20:22:43,472 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:22:43,472 [main:28] - Try №391 of 777
2021-03-11 20:22:43,477 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:43,478 [main:66] - Compilation checking started
2021-03-11 20:22:43,650 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).A().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-0))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:43,650 [main:28] - Try №392 of 777
2021-03-11 20:22:43,661 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:22:43,661 [main:28] - Try №393 of 777
2021-03-11 20:22:43,678 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-11 20:22:43,678 [main:28] - Try №394 of 777
2021-03-11 20:22:43,686 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:22:43,686 [main:28] - Try №395 of 777
2021-03-11 20:22:43,690 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:43,690 [main:66] - Compilation checking started
2021-03-11 20:22:43,854 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: bar, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-0))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:43,854 [main:28] - Try №396 of 777
2021-03-11 20:22:43,858 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:43,859 [main:28] - Try №397 of 777
2021-03-11 20:22:43,868 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:43,868 [main:66] - Compilation checking started
2021-03-11 20:22:44,032 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-0))?.this.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:44,032 [main:28] - Try №398 of 777
2021-03-11 20:22:44,044 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-11 20:22:44,044 [main:66] - Compilation checking started
2021-03-11 20:22:44,207 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return "OK"
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-0))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:44,207 [main:28] - Try №399 of 777
2021-03-11 20:22:44,210 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:44,211 [main:66] - Compilation checking started
2021-03-11 20:22:44,372 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    x { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-0))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:44,373 [main:28] - Try №400 of 777
2021-03-11 20:22:44,381 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:22:44,382 [main:66] - Compilation checking started
2021-03-11 20:22:44,575 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(x: Any?, operation: String) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-0))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:44,576 [main:28] - Try №401 of 777
2021-03-11 20:22:44,590 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:22:44,590 [main:66] - Compilation checking started
2021-03-11 20:22:44,766 [main:49] - Result = false
Text:
inline class InlinedInt(vararg value: Any)
inline class InlinedString(val internal: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-0))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:44,766 [main:28] - Try №402 of 777
2021-03-11 20:22:44,770 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:44,770 [main:28] - Try №403 of 777
2021-03-11 20:22:44,775 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:44,775 [main:66] - Compilation checking started
2021-03-11 20:22:44,953 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return Delegate()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-0))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:44,953 [main:28] - Try №404 of 777
2021-03-11 20:22:44,958 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:44,959 [main:28] - Try №405 of 777
2021-03-11 20:22:44,973 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:44,973 [main:66] - Compilation checking started
2021-03-11 20:22:45,155 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    ans1 { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-0))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:45,155 [main:28] - Try №406 of 777
2021-03-11 20:22:45,159 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:45,159 [main:66] - Compilation checking started
2021-03-11 20:22:45,318 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

public fun <T> newValue(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-0))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:45,318 [main:28] - Try №407 of 777
2021-03-11 20:22:45,328 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:45,328 [main:28] - Try №408 of 777
2021-03-11 20:22:45,332 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:45,332 [main:28] - Try №409 of 777
2021-03-11 20:22:45,341 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:45,342 [main:66] - Compilation checking started
2021-03-11 20:22:45,504 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    x { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-0))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:45,504 [main:28] - Try №410 of 777
2021-03-11 20:22:45,508 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:45,508 [main:66] - Compilation checking started
2021-03-11 20:22:45,679 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): x {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-0))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:45,679 [main:28] - Try №411 of 777
2021-03-11 20:22:45,691 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-11 20:22:45,691 [main:28] - Try №412 of 777
2021-03-11 20:22:45,695 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:45,695 [main:28] - Try №413 of 777
2021-03-11 20:22:45,706 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 20:22:45,706 [main:66] - Compilation checking started
2021-03-11 20:22:45,707 [main:71] - Wrong syntax or breaks conditions
2021-03-11 20:22:45,707 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(=0))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:45,707 [main:28] - Try №414 of 777
2021-03-11 20:22:45,714 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:22:45,714 [main:66] - Compilation checking started
2021-03-11 20:22:45,887 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    assertEquals(listOf(1, 3, 5, 7), intList)
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-0))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:45,887 [main:28] - Try №415 of 777
2021-03-11 20:22:45,891 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:45,891 [main:66] - Compilation checking started
2021-03-11 20:22:46,070 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> i = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-0))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:46,070 [main:28] - Try №416 of 777
2021-03-11 20:22:46,080 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:46,080 [main:66] - Compilation checking started
2021-03-11 20:22:46,250 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

public fun <T> foo(callback: () -> T): T {
    return kotlin()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-0))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:46,250 [main:28] - Try №417 of 777
2021-03-11 20:22:46,257 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:22:46,258 [main:28] - Try №418 of 777
2021-03-11 20:22:46,275 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-11 20:22:46,275 [main:66] - Compilation checking started
2021-03-11 20:22:46,439 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (null)?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:46,439 [main:28] - Try №419 of 777
2021-03-11 20:22:46,450 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:22:46,451 [main:28] - Try №420 of 777
2021-03-11 20:22:46,464 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:22:46,464 [main:28] - Try №421 of 777
2021-03-11 20:22:46,470 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-11 20:22:46,471 [main:28] - Try №422 of 777
2021-03-11 20:22:46,485 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 20:22:46,485 [main:28] - Try №423 of 777
2021-03-11 20:22:46,504 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-11 20:22:46,504 [main:66] - Compilation checking started
2021-03-11 20:22:46,706 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (1L in 1L downTo 3L)?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:46,706 [main:28] - Try №424 of 777
2021-03-11 20:22:46,716 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:22:46,716 [main:28] - Try №425 of 777
2021-03-11 20:22:46,727 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:22:46,727 [main:66] - Compilation checking started
2021-03-11 20:22:46,910 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: String)
inline class InlinedString(val internal: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(-0))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:46,911 [main:28] - Try №426 of 777
2021-03-11 20:22:46,919 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:22:46,920 [main:28] - Try №427 of 777
2021-03-11 20:22:46,929 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:22:46,930 [main:28] - Try №428 of 777
2021-03-11 20:22:46,940 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:22:46,940 [main:28] - Try №429 of 777
2021-03-11 20:22:46,946 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:22:46,946 [main:28] - Try №430 of 777
2021-03-11 20:22:46,958 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-11 20:22:46,958 [main:66] - Compilation checking started
2021-03-11 20:22:47,257 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:47,257 [main:28] - Try №431 of 777
2021-03-11 20:22:47,262 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:22:47,262 [main:66] - Compilation checking started
2021-03-11 20:22:47,436 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

public fun <T> foo(a: Tr<Int>): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:47,436 [main:28] - Try №432 of 777
2021-03-11 20:22:47,441 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:47,441 [main:66] - Compilation checking started
2021-03-11 20:22:47,608 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    test { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:47,608 [main:28] - Try №433 of 777
2021-03-11 20:22:47,633 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:22:47,634 [main:28] - Try №434 of 777
2021-03-11 20:22:47,648 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:47,648 [main:66] - Compilation checking started
2021-03-11 20:22:47,816 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: String)
inline class InlinedString(val internal: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:47,816 [main:28] - Try №435 of 777
2021-03-11 20:22:47,826 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:47,827 [main:66] - Compilation checking started
2021-03-11 20:22:47,996 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: Unit?)

public fun <T> foo(expectOrder: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:47,996 [main:28] - Try №436 of 777
2021-03-11 20:22:48,000 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:48,000 [main:66] - Compilation checking started
2021-03-11 20:22:48,302 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:48,303 [main:28] - Try №437 of 777
2021-03-11 20:22:48,309 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:22:48,309 [main:28] - Try №438 of 777
2021-03-11 20:22:48,319 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:22:48,319 [main:66] - Compilation checking started
2021-03-11 20:22:48,486 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: Int): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:48,486 [main:28] - Try №439 of 777
2021-03-11 20:22:48,496 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:22:48,497 [main:66] - Compilation checking started
2021-03-11 20:22:48,665 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt())?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:48,665 [main:28] - Try №440 of 777
2021-03-11 20:22:48,670 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:22:48,670 [main:66] - Compilation checking started
2021-03-11 20:22:48,832 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:48,832 [main:28] - Try №441 of 777
2021-03-11 20:22:48,836 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:48,836 [main:66] - Compilation checking started
2021-03-11 20:22:49,000 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return test()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:49,000 [main:28] - Try №442 of 777
2021-03-11 20:22:49,017 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-11 20:22:49,017 [main:28] - Try №443 of 777
2021-03-11 20:22:49,031 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:22:49,031 [main:28] - Try №444 of 777
2021-03-11 20:22:49,043 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:22:49,043 [main:28] - Try №445 of 777
2021-03-11 20:22:49,049 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-11 20:22:49,049 [main:28] - Try №446 of 777
2021-03-11 20:22:49,059 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:49,059 [main:28] - Try №447 of 777
2021-03-11 20:22:49,102 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-11 20:22:49,102 [main:28] - Try №448 of 777
2021-03-11 20:22:49,107 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:22:49,107 [main:66] - Compilation checking started
2021-03-11 20:22:49,268 [main:49] - Result = false
Text:
inline class InlinedInt(thiz: My, property: KProperty<*>)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:49,268 [main:28] - Try №449 of 777
2021-03-11 20:22:49,279 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:22:49,279 [main:28] - Try №450 of 777
2021-03-11 20:22:49,289 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:49,289 [main:66] - Compilation checking started
2021-03-11 20:22:49,453 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun fu0() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (fn(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:49,453 [main:28] - Try №451 of 777
2021-03-11 20:22:49,457 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:49,457 [main:66] - Compilation checking started
2021-03-11 20:22:49,736 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:49,736 [main:28] - Try №452 of 777
2021-03-11 20:22:49,746 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:49,746 [main:66] - Compilation checking started
2021-03-11 20:22:49,929 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): r {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:49,929 [main:28] - Try №453 of 777
2021-03-11 20:22:49,933 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:49,933 [main:28] - Try №454 of 777
2021-03-11 20:22:49,938 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:22:49,939 [main:28] - Try №455 of 777
2021-03-11 20:22:49,948 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:49,948 [main:28] - Try №456 of 777
2021-03-11 20:22:49,957 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:22:49,957 [main:66] - Compilation checking started
2021-03-11 20:22:50,128 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(c: suspend Controller.() -> Unit): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:50,128 [main:28] - Try №457 of 777
2021-03-11 20:22:50,152 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 20:22:50,152 [main:28] - Try №458 of 777
2021-03-11 20:22:50,169 [main:33] - Trying to replace Element(LAMBDA_ARGUMENT) on Element(LAMBDA_ARGUMENT)
2021-03-11 20:22:50,170 [main:66] - Compilation checking started
2021-03-11 20:22:50,337 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo {
        v = callSuspend()
    }
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:50,337 [main:28] - Try №459 of 777
2021-03-11 20:22:50,341 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:50,341 [main:28] - Try №460 of 777
2021-03-11 20:22:50,349 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:22:50,349 [main:66] - Compilation checking started
2021-03-11 20:22:50,511 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  receiver.block().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:50,512 [main:28] - Try №461 of 777
2021-03-11 20:22:50,516 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:22:50,517 [main:28] - Try №462 of 777
2021-03-11 20:22:50,530 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-11 20:22:50,530 [main:28] - Try №463 of 777
2021-03-11 20:22:50,541 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:22:50,541 [main:28] - Try №464 of 777
2021-03-11 20:22:50,548 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:22:50,548 [main:66] - Compilation checking started
2021-03-11 20:22:50,714 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    toString()

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:50,714 [main:28] - Try №465 of 777
2021-03-11 20:22:50,727 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:50,728 [main:66] - Compilation checking started
2021-03-11 20:22:50,729 [main:71] - Wrong syntax or breaks conditions
2021-03-11 20:22:50,729 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: this, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:50,729 [main:28] - Try №466 of 777
2021-03-11 20:22:50,736 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:22:50,736 [main:66] - Compilation checking started
2021-03-11 20:22:50,908 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (reversed())?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:50,909 [main:28] - Try №467 of 777
2021-03-11 20:22:50,912 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:50,912 [main:28] - Try №468 of 777
2021-03-11 20:22:50,916 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:50,916 [main:28] - Try №469 of 777
2021-03-11 20:22:50,922 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:22:50,923 [main:66] - Compilation checking started
2021-03-11 20:22:51,085 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): String {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:51,085 [main:28] - Try №470 of 777
2021-03-11 20:22:51,099 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:51,100 [main:28] - Try №471 of 777
2021-03-11 20:22:51,112 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-11 20:22:51,112 [main:28] - Try №472 of 777
2021-03-11 20:22:51,117 [main:33] - Trying to replace Element(TYPE_PARAMETER_LIST) on Element(TYPE_PARAMETER_LIST)
2021-03-11 20:22:51,117 [main:28] - Try №473 of 777
2021-03-11 20:22:51,127 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:22:51,127 [main:66] - Compilation checking started
2021-03-11 20:22:51,283 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (f())?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:51,283 [main:28] - Try №474 of 777
2021-03-11 20:22:51,289 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:51,289 [main:28] - Try №475 of 777
2021-03-11 20:22:51,303 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:22:51,303 [main:28] - Try №476 of 777
2021-03-11 20:22:51,313 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:22:51,313 [main:66] - Compilation checking started
2021-03-11 20:22:51,474 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return l()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:51,474 [main:28] - Try №477 of 777
2021-03-11 20:22:51,481 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:51,481 [main:66] - Compilation checking started
2021-03-11 20:22:51,645 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: Cloneable, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:51,645 [main:28] - Try №478 of 777
2021-03-11 20:22:51,650 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:51,651 [main:66] - Compilation checking started
2021-03-11 20:22:51,810 [main:49] - Result = false
Text:
inline class receiver(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:51,810 [main:28] - Try №479 of 777
2021-03-11 20:22:51,832 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-11 20:22:51,832 [main:28] - Try №480 of 777
2021-03-11 20:22:51,854 [main:28] - Try №481 of 777
2021-03-11 20:22:51,881 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-11 20:22:51,881 [main:28] - Try №482 of 777
2021-03-11 20:22:51,889 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:22:51,889 [main:28] - Try №483 of 777
2021-03-11 20:22:51,902 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:51,902 [main:28] - Try №484 of 777
2021-03-11 20:22:51,912 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:22:51,912 [main:28] - Try №485 of 777
2021-03-11 20:22:51,917 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:51,917 [main:28] - Try №486 of 777
2021-03-11 20:22:51,926 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:22:51,927 [main:66] - Compilation checking started
2021-03-11 20:22:52,093 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: String) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:52,094 [main:28] - Try №487 of 777
2021-03-11 20:22:52,101 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:52,102 [main:28] - Try №488 of 777
2021-03-11 20:22:52,107 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:52,107 [main:28] - Try №489 of 777
2021-03-11 20:22:52,117 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:22:52,117 [main:28] - Try №490 of 777
2021-03-11 20:22:52,128 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:22:52,129 [main:66] - Compilation checking started
2021-03-11 20:22:52,295 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Double) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:52,295 [main:28] - Try №491 of 777
2021-03-11 20:22:52,299 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:52,299 [main:28] - Try №492 of 777
2021-03-11 20:22:52,316 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-11 20:22:52,316 [main:28] - Try №493 of 777
2021-03-11 20:22:52,328 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-11 20:22:52,328 [main:28] - Try №494 of 777
2021-03-11 20:22:52,333 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:22:52,334 [main:66] - Compilation checking started
2021-03-11 20:22:52,498 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(scalar : Int): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:52,498 [main:28] - Try №495 of 777
2021-03-11 20:22:52,507 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:52,508 [main:66] - Compilation checking started
2021-03-11 20:22:52,669 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (foo2(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:52,669 [main:28] - Try №496 of 777
2021-03-11 20:22:52,672 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:52,673 [main:28] - Try №497 of 777
2021-03-11 20:22:52,684 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-11 20:22:52,684 [main:28] - Try №498 of 777
2021-03-11 20:22:52,695 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:52,696 [main:66] - Compilation checking started
2021-03-11 20:22:52,873 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.add.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:52,873 [main:28] - Try №499 of 777
2021-03-11 20:22:52,877 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:52,877 [main:66] - Compilation checking started
2021-03-11 20:22:53,046 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { joinToString }
}

inline fun NotNull() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:53,046 [main:28] - Try №500 of 777
2021-03-11 20:22:53,052 [main:33] - Trying to replace Element(MODIFIER_LIST) on Element(MODIFIER_LIST)
2021-03-11 20:22:53,052 [main:66] - Compilation checking started
2021-03-11 20:22:53,213 [main:49] - Result = false
Text:
operator class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:53,213 [main:28] - Try №501 of 777
2021-03-11 20:22:53,219 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:22:53,220 [main:28] - Try №502 of 777
2021-03-11 20:22:53,235 [main:33] - Trying to replace PsiElement(INTEGER_LITERAL) on PsiElement(INTEGER_LITERAL)
2021-03-11 20:22:53,235 [main:28] - Try №503 of 777
2021-03-11 20:22:53,240 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:22:53,240 [main:28] - Try №504 of 777
2021-03-11 20:22:53,251 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:22:53,251 [main:28] - Try №505 of 777
2021-03-11 20:22:53,267 [main:33] - Trying to replace Element(FUNCTION_TYPE) on Element(FUNCTION_TYPE)
2021-03-11 20:22:53,267 [main:66] - Compilation checking started
2021-03-11 20:22:53,435 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> String): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:53,435 [main:28] - Try №506 of 777
2021-03-11 20:22:53,452 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-11 20:22:53,452 [main:28] - Try №507 of 777
2021-03-11 20:22:53,460 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:22:53,460 [main:66] - Compilation checking started
2021-03-11 20:22:53,557 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
        //or no class at all
    }


2021-03-11 20:22:53,558 [main:28] - Try №508 of 777
2021-03-11 20:22:53,561 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-11 20:22:53,561 [main:66] - Compilation checking started
2021-03-11 20:22:53,562 [main:71] - Wrong syntax or breaks conditions
2021-03-11 20:22:53,562 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

{
        if (x instanceof Function1) return "Fail 1";
        if (x instanceof Function2) return "Fail 2";
        if (!(x instanceof Function0)) return "Fail 3";

        return ((Function0<String>) x).invoke();
    }

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:53,562 [main:28] - Try №509 of 777
2021-03-11 20:22:53,566 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:53,566 [main:28] - Try №510 of 777
2021-03-11 20:22:53,577 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:22:53,577 [main:66] - Compilation checking started
2021-03-11 20:22:53,741 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): A {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:53,742 [main:28] - Try №511 of 777
2021-03-11 20:22:53,745 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:53,745 [main:66] - Compilation checking started
2021-03-11 20:22:53,908 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    foo { -> s }
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().foo()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:53,909 [main:28] - Try №512 of 777
2021-03-11 20:22:53,915 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:22:53,916 [main:66] - Compilation checking started
2021-03-11 20:22:54,212 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:54,212 [main:28] - Try №513 of 777
2021-03-11 20:22:54,224 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-11 20:22:54,224 [main:28] - Try №514 of 777
2021-03-11 20:22:54,236 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-11 20:22:54,237 [main:28] - Try №515 of 777
2021-03-11 20:22:54,242 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:54,243 [main:66] - Compilation checking started
2021-03-11 20:22:54,441 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, T: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:54,442 [main:28] - Try №516 of 777
2021-03-11 20:22:54,446 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:22:54,447 [main:28] - Try №517 of 777
2021-03-11 20:22:54,455 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:22:54,455 [main:28] - Try №518 of 777
2021-03-11 20:22:54,463 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:22:54,464 [main:28] - Try №519 of 777
2021-03-11 20:22:54,478 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-11 20:22:54,479 [main:66] - Compilation checking started
2021-03-11 20:22:54,635 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    Kla1
}

fun c(): String {
    return  ((!complete)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:54,635 [main:28] - Try №520 of 777
2021-03-11 20:22:54,639 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:22:54,640 [main:28] - Try №521 of 777
2021-03-11 20:22:54,650 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:22:54,650 [main:28] - Try №522 of 777
2021-03-11 20:22:54,654 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:54,654 [main:28] - Try №523 of 777
2021-03-11 20:22:54,657 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:54,658 [main:66] - Compilation checking started
2021-03-11 20:22:54,944 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:54,944 [main:28] - Try №524 of 777
2021-03-11 20:22:54,950 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:22:54,950 [main:66] - Compilation checking started
2021-03-11 20:22:55,119 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): Double = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:55,119 [main:28] - Try №525 of 777
2021-03-11 20:22:55,126 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:22:55,126 [main:28] - Try №526 of 777
2021-03-11 20:22:55,139 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:22:55,139 [main:28] - Try №527 of 777
2021-03-11 20:22:55,149 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:22:55,149 [main:28] - Try №528 of 777
2021-03-11 20:22:55,153 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:55,153 [main:28] - Try №529 of 777
2021-03-11 20:22:55,157 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:55,157 [main:66] - Compilation checking started
2021-03-11 20:22:55,320 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    b { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:55,321 [main:28] - Try №530 of 777
2021-03-11 20:22:55,330 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:55,330 [main:28] - Try №531 of 777
2021-03-11 20:22:55,337 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:22:55,338 [main:66] - Compilation checking started
2021-03-11 20:22:55,507 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): Int {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:55,508 [main:28] - Try №532 of 777
2021-03-11 20:22:55,526 [main:33] - Trying to replace Element(SAFE_ACCESS_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 20:22:55,527 [main:66] - Compilation checking started
2021-03-11 20:22:55,691 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        c?.resumeWithException(IllegalStateException("OK")).toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:55,691 [main:28] - Try №533 of 777
2021-03-11 20:22:55,701 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:55,702 [main:66] - Compilation checking started
2021-03-11 20:22:55,876 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return Int()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:55,876 [main:28] - Try №534 of 777
2021-03-11 20:22:55,880 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:55,880 [main:66] - Compilation checking started
2021-03-11 20:22:56,069 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return result()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:56,069 [main:28] - Try №535 of 777
2021-03-11 20:22:56,071 [main:33] - Trying to replace Element(PACKAGE_DIRECTIVE) on Element(PACKAGE_DIRECTIVE)
2021-03-11 20:22:56,071 [main:66] - Compilation checking started
2021-03-11 20:22:56,071 [main:68] - Already checked
2021-03-11 20:22:56,071 [main:28] - Try №536 of 777
2021-03-11 20:22:56,077 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:22:56,077 [main:66] - Compilation checking started
2021-03-11 20:22:56,248 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): T {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:56,248 [main:28] - Try №537 of 777
2021-03-11 20:22:56,251 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:56,252 [main:66] - Compilation checking started
2021-03-11 20:22:56,436 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : x) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:56,436 [main:28] - Try №538 of 777
2021-03-11 20:22:56,443 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:22:56,444 [main:66] - Compilation checking started
2021-03-11 20:22:56,610 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { { value = x; } }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:56,610 [main:28] - Try №539 of 777
2021-03-11 20:22:56,616 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:22:56,617 [main:66] - Compilation checking started
2021-03-11 20:22:56,801 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.get(a)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:56,801 [main:28] - Try №540 of 777
2021-03-11 20:22:56,811 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:56,811 [main:28] - Try №541 of 777
2021-03-11 20:22:56,828 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:22:56,829 [main:66] - Compilation checking started
2021-03-11 20:22:57,027 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { a, b ->
        res += a + b
    }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:57,027 [main:28] - Try №542 of 777
2021-03-11 20:22:57,036 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:57,037 [main:66] - Compilation checking started
2021-03-11 20:22:57,207 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    v { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:57,207 [main:28] - Try №543 of 777
2021-03-11 20:22:57,216 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:22:57,216 [main:28] - Try №544 of 777
2021-03-11 20:22:57,226 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:57,226 [main:28] - Try №545 of 777
2021-03-11 20:22:57,229 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:57,230 [main:66] - Compilation checking started
2021-03-11 20:22:57,397 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(Local: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:57,398 [main:28] - Try №546 of 777
2021-03-11 20:22:57,404 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:22:57,405 [main:66] - Compilation checking started
2021-03-11 20:22:57,584 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: Long.() -> Unit): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (assertEquals : Exception) {
    var x = 0
    run { ++x }
}
    return "OK"
}


2021-03-11 20:22:57,584 [main:28] - Try №547 of 777
2021-03-11 20:22:57,597 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:22:57,598 [main:28] - Try №548 of 777
2021-03-11 20:22:57,610 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:22:57,610 [main:28] - Try №549 of 777
2021-03-11 20:22:57,616 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:22:57,617 [main:28] - Try №550 of 777
2021-03-11 20:22:57,629 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-11 20:22:57,629 [main:28] - Try №551 of 777
2021-03-11 20:22:57,657 [main:33] - Trying to replace Element(CATCH) on Element(CATCH)
2021-03-11 20:22:57,657 [main:66] - Compilation checking started
2021-03-11 20:22:57,923 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:22:57,923 [main:28] - Try №552 of 777
2021-03-11 20:22:57,936 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:22:57,936 [main:28] - Try №553 of 777
2021-03-11 20:22:57,947 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:57,948 [main:28] - Try №554 of 777
2021-03-11 20:22:57,972 [main:33] - Trying to replace Element(LAMBDA_ARGUMENT) on Element(LAMBDA_ARGUMENT)
2021-03-11 20:22:57,972 [main:66] - Compilation checking started
2021-03-11 20:22:58,148 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { x -> x == "abc" }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    return  ((-1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:22:58,148 [main:28] - Try №555 of 777
2021-03-11 20:22:58,164 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 20:22:58,165 [main:66] - Compilation checking started
2021-03-11 20:22:58,166 [main:71] - Wrong syntax or breaks conditions
2021-03-11 20:22:58,166 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    return  ((=1)).toLong().toString()
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:22:58,166 [main:28] - Try №556 of 777
2021-03-11 20:22:58,176 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:22:58,177 [main:28] - Try №557 of 777
2021-03-11 20:22:58,187 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:22:58,187 [main:28] - Try №558 of 777
2021-03-11 20:22:58,206 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 20:22:58,206 [main:28] - Try №559 of 777
2021-03-11 20:22:58,213 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:22:58,213 [main:28] - Try №560 of 777
2021-03-11 20:22:58,219 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:58,219 [main:28] - Try №561 of 777
2021-03-11 20:22:58,234 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:22:58,235 [main:28] - Try №562 of 777
2021-03-11 20:22:58,241 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:22:58,242 [main:66] - Compilation checking started
2021-03-11 20:22:58,568 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:22:58,568 [main:28] - Try №563 of 777
2021-03-11 20:22:58,576 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:22:58,576 [main:28] - Try №564 of 777
2021-03-11 20:22:58,587 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:22:58,587 [main:28] - Try №565 of 777
2021-03-11 20:22:58,598 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:22:58,598 [main:28] - Try №566 of 777
2021-03-11 20:22:58,609 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:58,610 [main:66] - Compilation checking started
2021-03-11 20:22:58,821 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.List.toString(-2)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:22:58,822 [main:28] - Try №567 of 777
2021-03-11 20:22:58,825 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:58,826 [main:28] - Try №568 of 777
2021-03-11 20:22:58,835 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:22:58,835 [main:28] - Try №569 of 777
2021-03-11 20:22:58,845 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:58,845 [main:28] - Try №570 of 777
2021-03-11 20:22:58,862 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:22:58,862 [main:66] - Compilation checking started
2021-03-11 20:22:59,064 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = {
        callsInPlace(block, InvocationKind.EXACTLY_ONCE)
    }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:22:59,065 [main:28] - Try №571 of 777
2021-03-11 20:22:59,070 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:22:59,071 [main:28] - Try №572 of 777
2021-03-11 20:22:59,088 [main:28] - Try №573 of 777
2021-03-11 20:22:59,103 [main:33] - Trying to replace PsiElement(INTEGER_LITERAL) on PsiElement(INTEGER_LITERAL)
2021-03-11 20:22:59,103 [main:28] - Try №574 of 777
2021-03-11 20:22:59,113 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:22:59,113 [main:28] - Try №575 of 777
2021-03-11 20:22:59,117 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:59,117 [main:28] - Try №576 of 777
2021-03-11 20:22:59,128 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:22:59,128 [main:28] - Try №577 of 777
2021-03-11 20:22:59,145 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:22:59,145 [main:66] - Compilation checking started
2021-03-11 20:22:59,328 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = {
                z = "OK"
            },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:22:59,328 [main:28] - Try №578 of 777
2021-03-11 20:22:59,332 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:59,332 [main:28] - Try №579 of 777
2021-03-11 20:22:59,338 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-11 20:22:59,338 [main:28] - Try №580 of 777
2021-03-11 20:22:59,348 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 20:22:59,348 [main:28] - Try №581 of 777
2021-03-11 20:22:59,361 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:22:59,361 [main:28] - Try №582 of 777
2021-03-11 20:22:59,365 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:59,365 [main:28] - Try №583 of 777
2021-03-11 20:22:59,374 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:22:59,374 [main:28] - Try №584 of 777
2021-03-11 20:22:59,377 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-11 20:22:59,378 [main:66] - Compilation checking started
2021-03-11 20:22:59,568 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

fun <A> foo() {}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:22:59,568 [main:28] - Try №585 of 777
2021-03-11 20:22:59,576 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:22:59,576 [main:28] - Try №586 of 777
2021-03-11 20:22:59,582 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:22:59,582 [main:28] - Try №587 of 777
2021-03-11 20:22:59,595 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:22:59,595 [main:28] - Try №588 of 777
2021-03-11 20:22:59,603 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:22:59,603 [main:28] - Try №589 of 777
2021-03-11 20:22:59,616 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:22:59,616 [main:28] - Try №590 of 777
2021-03-11 20:22:59,616 [main:28] - Try №591 of 777
2021-03-11 20:22:59,628 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:22:59,628 [main:28] - Try №592 of 777
2021-03-11 20:22:59,649 [main:33] - Trying to replace PsiElement(INTEGER_LITERAL) on PsiElement(INTEGER_LITERAL)
2021-03-11 20:22:59,650 [main:28] - Try №593 of 777
2021-03-11 20:22:59,670 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:22:59,670 [main:28] - Try №594 of 777
2021-03-11 20:22:59,675 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:59,675 [main:28] - Try №595 of 777
2021-03-11 20:22:59,682 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:22:59,682 [main:28] - Try №596 of 777
2021-03-11 20:22:59,689 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:22:59,689 [main:28] - Try №597 of 777
2021-03-11 20:22:59,693 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:22:59,693 [main:28] - Try №598 of 777
2021-03-11 20:22:59,697 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:22:59,698 [main:28] - Try №599 of 777
2021-03-11 20:22:59,704 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:22:59,704 [main:28] - Try №600 of 777
2021-03-11 20:22:59,721 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:22:59,722 [main:66] - Compilation checking started
2021-03-11 20:22:59,923 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = {
        try {
            p = 1
            return "OK" //finally from inline fun doen't split this try
        } catch(e: Exception) {
            p = -1;
            p
        } finally {
            p++
        }

    }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:22:59,923 [main:28] - Try №601 of 777
2021-03-11 20:22:59,931 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:22:59,931 [main:66] - Compilation checking started
2021-03-11 20:23:00,122 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): String {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:00,123 [main:28] - Try №602 of 777
2021-03-11 20:23:00,135 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-11 20:23:00,135 [main:28] - Try №603 of 777
2021-03-11 20:23:00,148 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-11 20:23:00,148 [main:28] - Try №604 of 777
2021-03-11 20:23:00,162 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:23:00,162 [main:28] - Try №605 of 777
2021-03-11 20:23:00,172 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:00,172 [main:28] - Try №606 of 777
2021-03-11 20:23:00,177 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:23:00,177 [main:28] - Try №607 of 777
2021-03-11 20:23:00,190 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:23:00,190 [main:28] - Try №608 of 777
2021-03-11 20:23:00,199 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:23:00,199 [main:28] - Try №609 of 777
2021-03-11 20:23:00,203 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:23:00,203 [main:28] - Try №610 of 777
2021-03-11 20:23:00,215 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:23:00,215 [main:28] - Try №611 of 777
2021-03-11 20:23:00,232 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:23:00,232 [main:66] - Compilation checking started
2021-03-11 20:23:00,460 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { {
        result = it.message!!
    }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:00,460 [main:28] - Try №612 of 777
2021-03-11 20:23:00,466 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:00,466 [main:28] - Try №613 of 777
2021-03-11 20:23:00,487 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 20:23:00,487 [main:28] - Try №614 of 777
2021-03-11 20:23:00,495 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:23:00,496 [main:28] - Try №615 of 777
2021-03-11 20:23:00,503 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:23:00,503 [main:28] - Try №616 of 777
2021-03-11 20:23:00,512 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:23:00,512 [main:28] - Try №617 of 777
2021-03-11 20:23:00,524 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-11 20:23:00,524 [main:66] - Compilation checking started
2021-03-11 20:23:00,723 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(J::objectTypes)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:00,724 [main:28] - Try №618 of 777
2021-03-11 20:23:00,728 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:00,728 [main:66] - Compilation checking started
2021-03-11 20:23:00,934 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    R { s }
}

inline fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:00,935 [main:28] - Try №619 of 777
2021-03-11 20:23:00,943 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:23:00,943 [main:28] - Try №620 of 777
2021-03-11 20:23:00,954 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:23:00,954 [main:28] - Try №621 of 777
2021-03-11 20:23:00,965 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-11 20:23:00,966 [main:28] - Try №622 of 777
2021-03-11 20:23:00,973 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:23:00,974 [main:28] - Try №623 of 777
2021-03-11 20:23:00,980 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:23:00,980 [main:28] - Try №624 of 777
2021-03-11 20:23:00,990 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:23:00,990 [main:28] - Try №625 of 777
2021-03-11 20:23:01,001 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-11 20:23:01,002 [main:66] - Compilation checking started
2021-03-11 20:23:01,193 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString("42")
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:01,194 [main:28] - Try №626 of 777
2021-03-11 20:23:01,210 [main:28] - Try №627 of 777
2021-03-11 20:23:01,220 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:23:01,220 [main:28] - Try №628 of 777
2021-03-11 20:23:01,229 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:23:01,230 [main:66] - Compilation checking started
2021-03-11 20:23:01,419 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, c: Double? = null) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:01,419 [main:28] - Try №629 of 777
2021-03-11 20:23:01,429 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:01,430 [main:28] - Try №630 of 777
2021-03-11 20:23:01,434 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:23:01,435 [main:28] - Try №631 of 777
2021-03-11 20:23:01,438 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:01,438 [main:28] - Try №632 of 777
2021-03-11 20:23:01,444 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:01,445 [main:66] - Compilation checking started
2021-03-11 20:23:01,670 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:01,670 [main:28] - Try №633 of 777
2021-03-11 20:23:01,676 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:01,677 [main:66] - Compilation checking started
2021-03-11 20:23:01,890 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: J): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:01,890 [main:28] - Try №634 of 777
2021-03-11 20:23:01,900 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:01,900 [main:28] - Try №635 of 777
2021-03-11 20:23:01,910 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 20:23:01,910 [main:28] - Try №636 of 777
2021-03-11 20:23:01,928 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-11 20:23:01,928 [main:28] - Try №637 of 777
2021-03-11 20:23:01,932 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:01,932 [main:28] - Try №638 of 777
2021-03-11 20:23:01,936 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:01,936 [main:28] - Try №639 of 777
2021-03-11 20:23:01,953 [main:33] - Trying to replace Element(FUNCTION_TYPE) on Element(FUNCTION_TYPE)
2021-03-11 20:23:01,953 [main:28] - Try №640 of 777
2021-03-11 20:23:01,962 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:23:01,962 [main:66] - Compilation checking started
2021-03-11 20:23:02,151 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(x: Long = 1): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:02,152 [main:28] - Try №641 of 777
2021-03-11 20:23:02,158 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:02,158 [main:66] - Compilation checking started
2021-03-11 20:23:02,348 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> String): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:02,348 [main:28] - Try №642 of 777
2021-03-11 20:23:02,357 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:02,357 [main:28] - Try №643 of 777
2021-03-11 20:23:02,372 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:23:02,372 [main:66] - Compilation checking started
2021-03-11 20:23:02,562 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: String) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

inline fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:02,562 [main:28] - Try №644 of 777
2021-03-11 20:23:02,568 [main:33] - Trying to replace Element(MODIFIER_LIST) on Element(MODIFIER_LIST)
2021-03-11 20:23:02,569 [main:66] - Compilation checking started
2021-03-11 20:23:02,858 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:02,858 [main:28] - Try №645 of 777
2021-03-11 20:23:02,864 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:02,864 [main:66] - Compilation checking started
2021-03-11 20:23:03,053 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): inlineFun {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:03,053 [main:28] - Try №646 of 777
2021-03-11 20:23:03,064 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:23:03,064 [main:66] - Compilation checking started
2021-03-11 20:23:03,240 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt())?.internal.toString(-2)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:03,241 [main:28] - Try №647 of 777
2021-03-11 20:23:03,250 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:03,250 [main:28] - Try №648 of 777
2021-03-11 20:23:03,265 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:23:03,265 [main:66] - Compilation checking started
2021-03-11 20:23:03,448 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, arg: Int) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:03,448 [main:28] - Try №649 of 777
2021-03-11 20:23:03,458 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:03,459 [main:28] - Try №650 of 777
2021-03-11 20:23:03,474 [main:28] - Try №651 of 777
2021-03-11 20:23:03,491 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-11 20:23:03,491 [main:28] - Try №652 of 777
2021-03-11 20:23:03,508 [main:33] - Trying to replace Element(FUNCTION_TYPE) on Element(FUNCTION_TYPE)
2021-03-11 20:23:03,508 [main:28] - Try №653 of 777
2021-03-11 20:23:03,511 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:03,511 [main:28] - Try №654 of 777
2021-03-11 20:23:03,520 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:23:03,520 [main:28] - Try №655 of 777
2021-03-11 20:23:03,524 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:03,525 [main:66] - Compilation checking started
2021-03-11 20:23:03,712 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(Float: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:03,712 [main:28] - Try №656 of 777
2021-03-11 20:23:03,722 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:03,723 [main:66] - Compilation checking started
2021-03-11 20:23:03,904 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: assertTrue, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:03,904 [main:28] - Try №657 of 777
2021-03-11 20:23:03,914 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:23:03,914 [main:66] - Compilation checking started
2021-03-11 20:23:04,094 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(value, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:04,094 [main:28] - Try №658 of 777
2021-03-11 20:23:04,107 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:23:04,107 [main:28] - Try №659 of 777
2021-03-11 20:23:04,122 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 20:23:04,122 [main:28] - Try №660 of 777
2021-03-11 20:23:04,130 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:23:04,130 [main:28] - Try №661 of 777
2021-03-11 20:23:04,144 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:23:04,145 [main:28] - Try №662 of 777
2021-03-11 20:23:04,152 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:23:04,152 [main:28] - Try №663 of 777
2021-03-11 20:23:04,162 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:04,162 [main:66] - Compilation checking started
2021-03-11 20:23:04,352 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    T { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:04,352 [main:28] - Try №664 of 777
2021-03-11 20:23:04,357 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:04,357 [main:66] - Compilation checking started
2021-03-11 20:23:04,543 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun captured(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:04,543 [main:28] - Try №665 of 777
2021-03-11 20:23:04,561 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-11 20:23:04,561 [main:66] - Compilation checking started
2021-03-11 20:23:04,743 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        ('h' downTo 'a')?.internal.toString(-2)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:04,743 [main:28] - Try №666 of 777
2021-03-11 20:23:04,752 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:23:04,752 [main:28] - Try №667 of 777
2021-03-11 20:23:04,756 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:04,756 [main:66] - Compilation checking started
2021-03-11 20:23:04,938 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.listOf.toString(-2)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:04,938 [main:28] - Try №668 of 777
2021-03-11 20:23:04,954 [main:33] - Trying to replace PsiElement(ARROW) on PsiElement(ARROW)
2021-03-11 20:23:04,954 [main:28] - Try №669 of 777
2021-03-11 20:23:04,958 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:04,958 [main:66] - Compilation checking started
2021-03-11 20:23:05,149 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: next)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:05,149 [main:28] - Try №670 of 777
2021-03-11 20:23:05,153 [main:33] - Trying to replace Element(PRIMARY_CONSTRUCTOR) on Element(PRIMARY_CONSTRUCTOR)
2021-03-11 20:23:05,153 [main:66] - Compilation checking started
2021-03-11 20:23:05,351 [main:49] - Result = false
Text:
inline class InlinedInt(val x: S, val y: S = S("K"))
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:05,351 [main:28] - Try №671 of 777
2021-03-11 20:23:05,357 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:23:05,358 [main:28] - Try №672 of 777
2021-03-11 20:23:05,375 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:23:05,375 [main:66] - Compilation checking started
2021-03-11 20:23:05,570 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { BooleanArray(1) }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-2)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:05,571 [main:28] - Try №673 of 777
2021-03-11 20:23:05,588 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-11 20:23:05,589 [main:66] - Compilation checking started
2021-03-11 20:23:05,868 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:05,868 [main:28] - Try №674 of 777
2021-03-11 20:23:05,878 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:23:05,878 [main:28] - Try №675 of 777
2021-03-11 20:23:05,882 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-11 20:23:05,883 [main:66] - Compilation checking started
2021-03-11 20:23:06,077 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

override fun foo() = z

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:06,077 [main:28] - Try №676 of 777
2021-03-11 20:23:06,082 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:23:06,082 [main:28] - Try №677 of 777
2021-03-11 20:23:06,086 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:06,086 [main:28] - Try №678 of 777
2021-03-11 20:23:06,096 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:23:06,096 [main:66] - Compilation checking started
2021-03-11 20:23:06,097 [main:71] - Wrong syntax or breaks conditions
2021-03-11 20:23:06,098 [main:49] - Result = false
Text:
inline class InlinedInt(i)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:06,098 [main:28] - Try №679 of 777
2021-03-11 20:23:06,108 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:23:06,109 [main:28] - Try №680 of 777
2021-03-11 20:23:06,123 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:23:06,123 [main:28] - Try №681 of 777
2021-03-11 20:23:06,126 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-11 20:23:06,126 [main:66] - Compilation checking started
2021-03-11 20:23:06,302 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun create() = C()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:06,302 [main:28] - Try №682 of 777
2021-03-11 20:23:06,319 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-11 20:23:06,320 [main:66] - Compilation checking started
2021-03-11 20:23:06,501 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar {
        if (b) {
            return@local 1
        } else {
            return@local 2
        }
        3
    }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:06,501 [main:28] - Try №683 of 777
2021-03-11 20:23:06,518 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:23:06,518 [main:28] - Try №684 of 777
2021-03-11 20:23:06,535 [main:33] - Trying to replace Element(LAMBDA_ARGUMENT) on Element(LAMBDA_ARGUMENT)
2021-03-11 20:23:06,535 [main:66] - Compilation checking started
2021-03-11 20:23:06,722 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar {
        when (e) {
            E.A -> "OK"
        }
    }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:06,722 [main:28] - Try №685 of 777
2021-03-11 20:23:06,732 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:06,732 [main:66] - Compilation checking started
2021-03-11 20:23:06,928 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (Char(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:06,929 [main:28] - Try №686 of 777
2021-03-11 20:23:06,933 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:06,934 [main:28] - Try №687 of 777
2021-03-11 20:23:06,937 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:06,937 [main:66] - Compilation checking started
2021-03-11 20:23:07,118 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun String(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:07,118 [main:28] - Try №688 of 777
2021-03-11 20:23:07,136 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:23:07,136 [main:66] - Compilation checking started
2021-03-11 20:23:07,345 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { a: String, b: Int -> a + b }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:07,345 [main:28] - Try №689 of 777
2021-03-11 20:23:07,355 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:07,355 [main:66] - Compilation checking started
2021-03-11 20:23:07,538 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return a()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:07,538 [main:28] - Try №690 of 777
2021-03-11 20:23:07,546 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:23:07,546 [main:28] - Try №691 of 777
2021-03-11 20:23:07,563 [main:28] - Try №692 of 777
2021-03-11 20:23:07,567 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:07,567 [main:66] - Compilation checking started
2021-03-11 20:23:07,737 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.add(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:07,737 [main:28] - Try №693 of 777
2021-03-11 20:23:07,741 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:07,742 [main:66] - Compilation checking started
2021-03-11 20:23:07,922 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    test { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:07,922 [main:28] - Try №694 of 777
2021-03-11 20:23:07,931 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:23:07,931 [main:28] - Try №695 of 777
2021-03-11 20:23:07,935 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:07,935 [main:66] - Compilation checking started
2021-03-11 20:23:08,109 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): cast {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:08,110 [main:28] - Try №696 of 777
2021-03-11 20:23:08,119 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:08,119 [main:28] - Try №697 of 777
2021-03-11 20:23:08,123 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:08,123 [main:66] - Compilation checking started
2021-03-11 20:23:08,305 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): aOther {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:08,305 [main:28] - Try №698 of 777
2021-03-11 20:23:08,313 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:23:08,313 [main:66] - Compilation checking started
2021-03-11 20:23:08,504 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    var res = extension<Int>(IC(40)) + 3
    if (res != 43) return "FAIL 2: $res"

    res = dispatch<Int>(IC(40)) + 4
    if (res != 44) return "FAIL 3: $res"

    res = normal<Int>(IC(40)) + 5
    if (res != 45) return "FAIL 4: $res"

    return "OK"
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:08,504 [main:28] - Try №699 of 777
2021-03-11 20:23:08,510 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:08,510 [main:28] - Try №700 of 777
2021-03-11 20:23:08,514 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:08,514 [main:66] - Compilation checking started
2021-03-11 20:23:08,516 [main:71] - Wrong syntax or breaks conditions
2021-03-11 20:23:08,516 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun prop(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:08,516 [main:28] - Try №701 of 777
2021-03-11 20:23:08,526 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:23:08,527 [main:66] - Compilation checking started
2021-03-11 20:23:08,703 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> Identifier): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:08,703 [main:28] - Try №702 of 777
2021-03-11 20:23:08,710 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:08,711 [main:66] - Compilation checking started
2021-03-11 20:23:08,886 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): IC = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:08,887 [main:28] - Try №703 of 777
2021-03-11 20:23:08,891 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:08,891 [main:66] - Compilation checking started
2021-03-11 20:23:09,070 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(Flow: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:09,071 [main:28] - Try №704 of 777
2021-03-11 20:23:09,078 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:23:09,079 [main:28] - Try №705 of 777
2021-03-11 20:23:09,089 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:23:09,089 [main:28] - Try №706 of 777
2021-03-11 20:23:09,099 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:09,099 [main:66] - Compilation checking started
2021-03-11 20:23:09,275 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.A.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:09,276 [main:28] - Try №707 of 777
2021-03-11 20:23:09,294 [main:33] - Trying to replace Element(SAFE_ACCESS_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 20:23:09,294 [main:66] - Compilation checking started
2021-03-11 20:23:09,464 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (c as? Continuation<Dummy>)?.resume(Dummy).toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:09,465 [main:28] - Try №708 of 777
2021-03-11 20:23:09,476 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:09,476 [main:66] - Compilation checking started
2021-03-11 20:23:09,652 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { kotlin }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:09,652 [main:28] - Try №709 of 777
2021-03-11 20:23:09,663 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:23:09,663 [main:28] - Try №710 of 777
2021-03-11 20:23:09,677 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:23:09,677 [main:28] - Try №711 of 777
2021-03-11 20:23:09,687 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:09,687 [main:28] - Try №712 of 777
2021-03-11 20:23:09,690 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:09,691 [main:66] - Compilation checking started
2021-03-11 20:23:09,868 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return foo()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:09,869 [main:28] - Try №713 of 777
2021-03-11 20:23:09,877 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:23:09,877 [main:28] - Try №714 of 777
2021-03-11 20:23:09,890 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:23:09,891 [main:28] - Try №715 of 777
2021-03-11 20:23:09,897 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:09,897 [main:66] - Compilation checking started
2021-03-11 20:23:10,095 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): String {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:10,095 [main:28] - Try №716 of 777
2021-03-11 20:23:10,110 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 20:23:10,111 [main:28] - Try №717 of 777
2021-03-11 20:23:10,116 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:23:10,116 [main:66] - Compilation checking started
2021-03-11 20:23:10,295 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString()

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:10,295 [main:28] - Try №718 of 777
2021-03-11 20:23:10,312 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:23:10,312 [main:66] - Compilation checking started
2021-03-11 20:23:10,495 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo {
        result += it
        return
    }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:10,495 [main:28] - Try №719 of 777
2021-03-11 20:23:10,511 [main:33] - Trying to replace Element(FUNCTION_TYPE) on Element(FUNCTION_TYPE)
2021-03-11 20:23:10,511 [main:66] - Compilation checking started
2021-03-11 20:23:10,710 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: Point.(scalar : Int) -> Point = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:10,710 [main:28] - Try №720 of 777
2021-03-11 20:23:10,720 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:10,720 [main:66] - Compilation checking started
2021-03-11 20:23:10,906 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    inlineMe { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:10,906 [main:28] - Try №721 of 777
2021-03-11 20:23:10,914 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:23:10,914 [main:28] - Try №722 of 777
2021-03-11 20:23:10,918 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:10,918 [main:28] - Try №723 of 777
2021-03-11 20:23:10,923 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:10,923 [main:66] - Compilation checking started
2021-03-11 20:23:11,100 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.Exception(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:11,100 [main:28] - Try №724 of 777
2021-03-11 20:23:11,110 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:11,110 [main:28] - Try №725 of 777
2021-03-11 20:23:11,116 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:11,116 [main:28] - Try №726 of 777
2021-03-11 20:23:11,125 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:23:11,125 [main:28] - Try №727 of 777
2021-03-11 20:23:11,129 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:11,129 [main:28] - Try №728 of 777
2021-03-11 20:23:11,148 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-11 20:23:11,148 [main:28] - Try №729 of 777
2021-03-11 20:23:11,152 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:11,152 [main:28] - Try №730 of 777
2021-03-11 20:23:11,160 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:23:11,160 [main:28] - Try №731 of 777
2021-03-11 20:23:11,164 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:11,164 [main:66] - Compilation checking started
2021-03-11 20:23:11,345 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (String(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:11,345 [main:28] - Try №732 of 777
2021-03-11 20:23:11,352 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:23:11,353 [main:28] - Try №733 of 777
2021-03-11 20:23:11,364 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:23:11,364 [main:28] - Try №734 of 777
2021-03-11 20:23:11,368 [main:33] - Trying to replace Element(PRIMARY_CONSTRUCTOR) on Element(PRIMARY_CONSTRUCTOR)
2021-03-11 20:23:11,369 [main:66] - Compilation checking started
2021-03-11 20:23:11,555 [main:49] - Result = false
Text:
inline class InlinedInt(val array : ReadOnlyArray<T>)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:11,555 [main:28] - Try №735 of 777
2021-03-11 20:23:11,561 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:11,562 [main:66] - Compilation checking started
2021-03-11 20:23:11,737 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "DefaultImpls"}()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:11,737 [main:28] - Try №736 of 777
2021-03-11 20:23:11,742 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:23:11,742 [main:28] - Try №737 of 777
2021-03-11 20:23:11,761 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-11 20:23:11,762 [main:66] - Compilation checking started
2021-03-11 20:23:12,063 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:12,063 [main:28] - Try №738 of 777
2021-03-11 20:23:12,073 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:12,073 [main:28] - Try №739 of 777
2021-03-11 20:23:12,086 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:23:12,086 [main:28] - Try №740 of 777
2021-03-11 20:23:12,100 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-11 20:23:12,100 [main:28] - Try №741 of 777
2021-03-11 20:23:12,106 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-11 20:23:12,106 [main:28] - Try №742 of 777
2021-03-11 20:23:12,114 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:23:12,114 [main:28] - Try №743 of 777
2021-03-11 20:23:12,122 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:23:12,122 [main:28] - Try №744 of 777
2021-03-11 20:23:12,129 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:23:12,129 [main:28] - Try №745 of 777
2021-03-11 20:23:12,136 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:23:12,137 [main:66] - Compilation checking started
2021-03-11 20:23:12,322 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    var a = Base()

    val count = a.count
    if (count != 0) return "fail 1: $count"

    val count2 = a.count
    if (count2 != 1) return "fail 2: $count2"

    return "OK"

}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:12,322 [main:28] - Try №746 of 777
2021-03-11 20:23:12,329 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:23:12,329 [main:66] - Compilation checking started
2021-03-11 20:23:12,540 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { {
    var array : IntArray? = IntArray(10)
    array?.set(0, 3)
    if(array?.get(0) != 3) return "fail"

    var a = arrayOfNulls<Array<String?>>(5)
    var b = arrayOfNulls<String>(1)
    b.set(0, "239")
    a?.set(0, b)

    if(a?.get(0)?.get(0) != "239") return "fail"

    return "OK"
} }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:12,540 [main:28] - Try №747 of 777
2021-03-11 20:23:12,544 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:12,544 [main:66] - Compilation checking started
2021-03-11 20:23:12,728 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.charSeq(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:12,728 [main:28] - Try №748 of 777
2021-03-11 20:23:12,738 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:12,738 [main:66] - Compilation checking started
2021-03-11 20:23:12,922 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return kotlin()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:12,922 [main:28] - Try №749 of 777
2021-03-11 20:23:12,927 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:23:12,927 [main:66] - Compilation checking started
2021-03-11 20:23:13,114 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:13,114 [main:28] - Try №750 of 777
2021-03-11 20:23:13,124 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:13,125 [main:28] - Try №751 of 777
2021-03-11 20:23:13,134 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:13,135 [main:28] - Try №752 of 777
2021-03-11 20:23:13,143 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:23:13,143 [main:28] - Try №753 of 777
2021-03-11 20:23:13,148 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:23:13,148 [main:28] - Try №754 of 777
2021-03-11 20:23:13,152 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:13,153 [main:66] - Compilation checking started
2021-03-11 20:23:13,338 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(Boolean: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:13,338 [main:28] - Try №755 of 777
2021-03-11 20:23:13,342 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:13,342 [main:28] - Try №756 of 777
2021-03-11 20:23:13,349 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:13,349 [main:66] - Compilation checking started
2021-03-11 20:23:13,538 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: KInterface2): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:13,539 [main:28] - Try №757 of 777
2021-03-11 20:23:13,551 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:23:13,552 [main:28] - Try №758 of 777
2021-03-11 20:23:13,556 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:13,556 [main:28] - Try №759 of 777
2021-03-11 20:23:13,560 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:13,561 [main:66] - Compilation checking started
2021-03-11 20:23:13,747 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    abs { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:13,747 [main:28] - Try №760 of 777
2021-03-11 20:23:13,750 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:13,750 [main:28] - Try №761 of 777
2021-03-11 20:23:13,763 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-11 20:23:13,763 [main:28] - Try №762 of 777
2021-03-11 20:23:13,770 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:23:13,770 [main:28] - Try №763 of 777
2021-03-11 20:23:13,779 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:23:13,779 [main:66] - Compilation checking started
2021-03-11 20:23:13,970 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { {
        throw AssertionError("Fail $message", e)
    } },
    f: () -> String
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:13,970 [main:28] - Try №764 of 777
2021-03-11 20:23:13,984 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-11 20:23:13,984 [main:28] - Try №765 of 777
2021-03-11 20:23:13,991 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:23:13,992 [main:66] - Compilation checking started
2021-03-11 20:23:13,993 [main:71] - Wrong syntax or breaks conditions
2021-03-11 20:23:13,993 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString return null;

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:13,993 [main:28] - Try №766 of 777
2021-03-11 20:23:14,011 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-11 20:23:14,011 [main:28] - Try №767 of 777
2021-03-11 20:23:14,015 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:14,016 [main:66] - Compilation checking started
2021-03-11 20:23:14,240 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return c()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:14,240 [main:28] - Try №768 of 777
2021-03-11 20:23:14,251 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:23:14,252 [main:66] - Compilation checking started
2021-03-11 20:23:14,462 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { {
    val s = M().doTest()
    return if (s == "1:2;2:3;3:4;") "OK" else "fail: $s"
} }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:14,462 [main:28] - Try №769 of 777
2021-03-11 20:23:14,469 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:23:14,469 [main:28] - Try №770 of 777
2021-03-11 20:23:14,476 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:23:14,477 [main:66] - Compilation checking started
2021-03-11 20:23:14,655 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    assertEquals(listOf(8uL, 5uL, 2uL), ulongList)
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:14,655 [main:28] - Try №771 of 777
2021-03-11 20:23:14,676 [main:33] - Trying to replace Element(TRY) on Element(TRY)
2021-03-11 20:23:14,676 [main:66] - Compilation checking started
2021-03-11 20:23:14,843 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "BOOYA" }()

fun box912(): String {
    try {
        klass.cast(value)
        fail("Value should not be an instance of $klass: $value")
    }
    catch (e: Exception) { /* OK */ }
    return "OK"
}


2021-03-11 20:23:14,843 [main:28] - Try №772 of 777
2021-03-11 20:23:14,850 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:23:14,850 [main:28] - Try №773 of 777
2021-03-11 20:23:14,857 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:23:14,857 [main:66] - Compilation checking started
2021-03-11 20:23:15,040 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    get(t)
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:15,040 [main:28] - Try №774 of 777
2021-03-11 20:23:15,043 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:15,044 [main:66] - Compilation checking started
2021-03-11 20:23:15,220 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return Any()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:15,221 [main:28] - Try №775 of 777
2021-03-11 20:23:15,228 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:23:15,229 [main:28] - Try №776 of 777
2021-03-11 20:23:15,245 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:23:15,246 [main:28] - Try №777 of 777
2021-03-11 20:23:15,262 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:23:15,275 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:15,276 [main:66] - Compilation checking started
2021-03-11 20:23:15,481 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): HashSet<LinkedHashSet<Collection<ULong>>> {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: () -> String
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:15,482 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:15,482 [main:66] - Compilation checking started
2021-03-11 20:23:15,804 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:15,805 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:15,805 [main:66] - Compilation checking started
2021-03-11 20:23:15,991 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: Double = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:15,991 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:15,991 [main:66] - Compilation checking started
2021-03-11 20:23:16,176 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: Short): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:16,177 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:16,177 [main:66] - Compilation checking started
2021-03-11 20:23:16,359 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: UByte): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:16,359 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:16,360 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:16,360 [main:66] - Compilation checking started
2021-03-11 20:23:16,554 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: HashMap<UShort, UByte> = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:16,554 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:16,555 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:16,555 [main:66] - Compilation checking started
2021-03-11 20:23:16,737 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> String): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:16,741 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:16,741 [main:66] - Compilation checking started
2021-03-11 20:23:16,957 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: HashMap<Long, MutableMap<Map<Short, Float>, HashMap<ULong, Triple<Char, Sequence<ArrayDeque<LinkedHashSet<ULong>>>, Float>>>>): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:16,957 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:16,957 [main:66] - Compilation checking started
2021-03-11 20:23:17,142 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): String {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:17,142 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:17,143 [main:66] - Compilation checking started
2021-03-11 20:23:17,323 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:17,323 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:17,324 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:17,324 [main:66] - Compilation checking started
2021-03-11 20:23:17,512 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> ArrayDeque<List<Set<Long>>>): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:17,513 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:17,513 [main:66] - Compilation checking started
2021-03-11 20:23:17,695 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:17,695 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:17,695 [main:66] - Compilation checking started
2021-03-11 20:23:17,876 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: () -> InlinedInt)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:17,876 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:17,876 [main:66] - Compilation checking started
2021-03-11 20:23:18,049 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: () -> InlinedInt) {}
    return "OK"
}


2021-03-11 20:23:18,049 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:18,049 [main:66] - Compilation checking started
2021-03-11 20:23:18,049 [main:68] - Already checked
2021-03-11 20:23:18,049 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:18,049 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:18,049 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:18,049 [main:66] - Compilation checking started
2021-03-11 20:23:18,245 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedInt {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:18,247 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:18,247 [main:66] - Compilation checking started
2021-03-11 20:23:18,455 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): Array<MutableMap<UInt, LinkedHashMap<HashSet<LinkedHashMap<HashSet<String>, Sequence<UInt>>>, Pair<LinkedHashSet<Map<HashSet<Boolean>, Double>>, HashMap<HashSet<UShort>, Double>>>>> {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:18,456 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:18,456 [main:66] - Compilation checking started
2021-03-11 20:23:18,647 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: ULong)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:18,648 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:18,648 [main:66] - Compilation checking started
2021-03-11 20:23:18,831 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> Byte = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:18,831 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:18,831 [main:66] - Compilation checking started
2021-03-11 20:23:19,011 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: T)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:19,011 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:19,011 [main:66] - Compilation checking started
2021-03-11 20:23:19,012 [main:68] - Already checked
2021-03-11 20:23:19,012 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): String {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:19,012 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:19,012 [main:66] - Compilation checking started
2021-03-11 20:23:19,191 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): Double {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:19,191 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:19,192 [main:66] - Compilation checking started
2021-03-11 20:23:19,371 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> Double): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:19,371 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:19,371 [main:66] - Compilation checking started
2021-03-11 20:23:19,556 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): Char {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:19,556 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:19,556 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:19,557 [main:66] - Compilation checking started
2021-03-11 20:23:19,731 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): Sequence<Boolean> = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:19,731 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:19,731 [main:66] - Compilation checking started
2021-03-11 20:23:19,731 [main:68] - Already checked
2021-03-11 20:23:19,731 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:19,732 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:19,732 [main:66] - Compilation checking started
2021-03-11 20:23:19,907 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: Unit?): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:19,908 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:19,908 [main:66] - Compilation checking started
2021-03-11 20:23:20,079 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): Boolean {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:20,080 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:20,080 [main:66] - Compilation checking started
2021-03-11 20:23:20,271 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: ArrayList<Set<HashSet<Double>>>): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:20,271 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:20,271 [main:66] - Compilation checking started
2021-03-11 20:23:20,452 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> Int = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:20,452 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:20,453 [main:66] - Compilation checking started
2021-03-11 20:23:20,665 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Unit?)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): () -> InlinedInt {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:20,665 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:20,665 [main:66] - Compilation checking started
2021-03-11 20:23:20,989 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:20,989 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:20,989 [main:66] - Compilation checking started
2021-03-11 20:23:21,164 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): InlinedInt {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:21,165 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:21,165 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:21,165 [main:66] - Compilation checking started
2021-03-11 20:23:21,343 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: Char): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:21,343 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:21,343 [main:66] - Compilation checking started
2021-03-11 20:23:21,524 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): ArrayList<Short> {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:21,525 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:21,525 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:21,525 [main:66] - Compilation checking started
2021-03-11 20:23:21,707 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:21,708 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:21,708 [main:66] - Compilation checking started
2021-03-11 20:23:21,885 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> String): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:21,885 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:21,885 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:21,885 [main:66] - Compilation checking started
2021-03-11 20:23:22,061 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:22,061 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:22,061 [main:66] - Compilation checking started
2021-03-11 20:23:22,234 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: Collection<Collection<UInt>>, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:22,234 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:22,234 [main:66] - Compilation checking started
2021-03-11 20:23:22,434 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): String {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:22,434 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:22,435 [main:66] - Compilation checking started
2021-03-11 20:23:22,609 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: String): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:22,609 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:22,609 [main:66] - Compilation checking started
2021-03-11 20:23:22,797 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> () -> InlinedInt): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:22,797 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:22,797 [main:66] - Compilation checking started
2021-03-11 20:23:22,978 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:22,978 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:22,978 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:22,978 [main:66] - Compilation checking started
2021-03-11 20:23:23,164 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: UInt)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:23,165 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:23,165 [main:66] - Compilation checking started
2021-03-11 20:23:23,352 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: InlinedInt)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:23,353 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:23,353 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:23,353 [main:66] - Compilation checking started
2021-03-11 20:23:23,524 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: InlinedInt) {}
    return "OK"
}


2021-03-11 20:23:23,525 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:23,525 [main:66] - Compilation checking started
2021-03-11 20:23:23,701 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: UInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:23,702 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:23,702 [main:66] - Compilation checking started
2021-03-11 20:23:23,874 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: Array<ArrayDeque<Short>>) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:23,874 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:23,875 [main:66] - Compilation checking started
2021-03-11 20:23:24,053 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): LinkedHashMap<Float, ArrayDeque<ULong>> {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:24,053 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:24,053 [main:66] - Compilation checking started
2021-03-11 20:23:24,243 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): InlinedInt {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:24,244 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:24,244 [main:66] - Compilation checking started
2021-03-11 20:23:24,244 [main:68] - Already checked
2021-03-11 20:23:24,244 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: InlinedInt) {}
    return "OK"
}


2021-03-11 20:23:24,244 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:24,244 [main:66] - Compilation checking started
2021-03-11 20:23:24,427 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: () -> InlinedInt) {}
    return "OK"
}


2021-03-11 20:23:24,428 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:24,428 [main:66] - Compilation checking started
2021-03-11 20:23:24,620 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: MutableMap<UInt, Array<ULong>>, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:24,621 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:24,621 [main:66] - Compilation checking started
2021-03-11 20:23:24,797 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> List<Set<HashSet<MutableMap<Char, Int>>>>): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:24,797 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:24,798 [main:66] - Compilation checking started
2021-03-11 20:23:24,981 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): LinkedHashMap<LinkedHashSet<Byte>, Float> {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:24,982 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:24,983 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:24,984 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:24,984 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:24,984 [main:66] - Compilation checking started
2021-03-11 20:23:25,156 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> Int = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:25,156 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:25,156 [main:66] - Compilation checking started
2021-03-11 20:23:25,351 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> Int): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:25,351 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:25,352 [main:66] - Compilation checking started
2021-03-11 20:23:25,352 [main:68] - Already checked
2021-03-11 20:23:25,352 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): String {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:25,352 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:25,352 [main:66] - Compilation checking started
2021-03-11 20:23:25,352 [main:68] - Already checked
2021-03-11 20:23:25,352 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:25,352 [main:66] - Compilation checking started
2021-03-11 20:23:25,352 [main:68] - Already checked
2021-03-11 20:23:25,352 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:25,352 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:25,352 [main:66] - Compilation checking started
2021-03-11 20:23:25,538 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: ArrayDeque<UByte>): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:25,538 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:25,538 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:25,538 [main:66] - Compilation checking started
2021-03-11 20:23:25,715 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): InlinedInt {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:25,715 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:25,716 [main:66] - Compilation checking started
2021-03-11 20:23:25,898 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: UShort): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:25,898 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:25,899 [main:66] - Compilation checking started
2021-03-11 20:23:26,103 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: InlinedString = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:26,104 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:26,104 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:26,104 [main:66] - Compilation checking started
2021-03-11 20:23:26,286 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: () -> InlinedInt)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:26,286 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:26,286 [main:66] - Compilation checking started
2021-03-11 20:23:26,466 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: () -> String)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:26,466 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:26,466 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:26,467 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:26,467 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:26,467 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:26,467 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:26,467 [main:66] - Compilation checking started
2021-03-11 20:23:26,660 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: InlinedInt): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:26,660 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:26,660 [main:66] - Compilation checking started
2021-03-11 20:23:26,856 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: Long): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:26,857 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:26,857 [main:66] - Compilation checking started
2021-03-11 20:23:27,030 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): ULong {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:27,031 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:27,031 [main:66] - Compilation checking started
2021-03-11 20:23:27,216 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: HashMap<ArrayDeque<Char>, Byte>, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:27,216 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:27,216 [main:66] - Compilation checking started
2021-03-11 20:23:27,392 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): Double {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:27,392 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:27,393 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:27,393 [main:66] - Compilation checking started
2021-03-11 20:23:27,576 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): Pair<ULong, Byte> {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:27,577 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:27,577 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:27,577 [main:66] - Compilation checking started
2021-03-11 20:23:27,755 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: Int): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:27,755 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:27,755 [main:66] - Compilation checking started
2021-03-11 20:23:27,929 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): UInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:27,930 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:27,930 [main:66] - Compilation checking started
2021-03-11 20:23:28,106 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: UShort): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:28,107 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:28,107 [main:66] - Compilation checking started
2021-03-11 20:23:28,289 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> NullPointerException): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:28,289 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:28,290 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:28,291 [main:66] - Compilation checking started
2021-03-11 20:23:28,493 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: Collection<Map<Pair<Map<LinkedHashSet<Float>, List<Collection<UShort>>>, Float>, MutableMap<Map<Set<Short>, Short>, Int>>>): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:28,500 [main:26] - Trying to change some nodes to nodes from other programs 998 times
2021-03-11 20:23:28,500 [main:28] - Try №0 of 998
2021-03-11 20:23:28,514 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:28,514 [main:66] - Compilation checking started
2021-03-11 20:23:28,682 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.args.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:28,682 [main:28] - Try №1 of 998
2021-03-11 20:23:28,692 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:28,693 [main:66] - Compilation checking started
2021-03-11 20:23:28,893 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: y)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:28,893 [main:28] - Try №2 of 998
2021-03-11 20:23:28,906 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 20:23:28,906 [main:66] - Compilation checking started
2021-03-11 20:23:29,184 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 8"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:29,184 [main:28] - Try №3 of 998
2021-03-11 20:23:29,189 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:29,189 [main:66] - Compilation checking started
2021-03-11 20:23:29,362 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.box != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 8"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:29,362 [main:28] - Try №4 of 998
2021-03-11 20:23:29,365 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:29,366 [main:66] - Compilation checking started
2021-03-11 20:23:29,542 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(box: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 8"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:29,542 [main:28] - Try №5 of 998
2021-03-11 20:23:29,547 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:29,547 [main:66] - Compilation checking started
2021-03-11 20:23:29,725 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <FooHolder> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 8"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:29,725 [main:28] - Try №6 of 998
2021-03-11 20:23:29,739 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 20:23:29,740 [main:66] - Compilation checking started
2021-03-11 20:23:30,018 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "fail") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 8"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:30,018 [main:28] - Try №7 of 998
2021-03-11 20:23:30,035 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-11 20:23:30,036 [main:66] - Compilation checking started
2021-03-11 20:23:30,240 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { it + 2 }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "fail") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 8"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:30,240 [main:28] - Try №8 of 998
2021-03-11 20:23:30,244 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:30,244 [main:66] - Compilation checking started
2021-03-11 20:23:30,417 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: test) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "fail") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 8"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:30,417 [main:28] - Try №9 of 998
2021-03-11 20:23:30,421 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:30,421 [main:28] - Try №10 of 998
2021-03-11 20:23:30,427 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-11 20:23:30,427 [main:66] - Compilation checking started
2021-03-11 20:23:30,625 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "fail") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (this + b || t.cause != null) return "fail 8"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:30,626 [main:28] - Try №11 of 998
2021-03-11 20:23:30,628 [main:33] - Trying to replace Element(IMPORT_LIST) on Element(IMPORT_LIST)
2021-03-11 20:23:30,628 [main:66] - Compilation checking started
2021-03-11 20:23:30,628 [main:68] - Already checked
2021-03-11 20:23:30,628 [main:28] - Try №12 of 998
2021-03-11 20:23:30,642 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 20:23:30,642 [main:66] - Compilation checking started
2021-03-11 20:23:30,958 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    T2
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 8"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:30,958 [main:28] - Try №13 of 998
2021-03-11 20:23:30,967 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:23:30,967 [main:28] - Try №14 of 998
2021-03-11 20:23:30,971 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:23:30,972 [main:28] - Try №15 of 998
2021-03-11 20:23:30,989 [main:33] - Trying to replace Element(ENUM_ENTRY) on Element(ENUM_ENTRY)
2021-03-11 20:23:30,989 [main:66] - Compilation checking started
2021-03-11 20:23:31,293 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 8"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:31,293 [main:28] - Try №16 of 998
2021-03-11 20:23:31,301 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:23:31,301 [main:66] - Compilation checking started
2021-03-11 20:23:31,482 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || kotlin.coroutines != null) return "fail 8"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:31,483 [main:28] - Try №17 of 998
2021-03-11 20:23:31,497 [main:33] - Trying to replace Element(IF) on Element(IF)
2021-03-11 20:23:31,497 [main:66] - Compilation checking started
2021-03-11 20:23:31,671 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "fail1"

    t = Throwable(Throwable("OK"))
    if (result != "suspend(OK);return(OK);") return "fail: $result"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 8"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:31,672 [main:28] - Try №18 of 998
2021-03-11 20:23:31,682 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:31,683 [main:66] - Compilation checking started
2021-03-11 20:23:31,854 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "fail1"

    t = Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 8"

    t = Throwable()
    if (t.message != null || t.getFileName != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:31,855 [main:28] - Try №19 of 998
2021-03-11 20:23:31,872 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 20:23:31,872 [main:66] - Compilation checking started
2021-03-11 20:23:32,146 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "fail1"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 8"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:32,146 [main:28] - Try №20 of 998
2021-03-11 20:23:32,160 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:23:32,161 [main:28] - Try №21 of 998
2021-03-11 20:23:32,175 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:23:32,175 [main:28] - Try №22 of 998
2021-03-11 20:23:32,185 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:23:32,186 [main:28] - Try №23 of 998
2021-03-11 20:23:32,200 [main:33] - Trying to replace Element(THEN) on Element(THEN)
2021-03-11 20:23:32,201 [main:66] - Compilation checking started
2021-03-11 20:23:32,476 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "fail1"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:32,477 [main:28] - Try №24 of 998
2021-03-11 20:23:32,480 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:32,481 [main:66] - Compilation checking started
2021-03-11 20:23:32,676 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "fail1"

    t != Throwable(Throwable("OK"))
    if (t.add == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:32,676 [main:28] - Try №25 of 998
2021-03-11 20:23:32,693 [main:28] - Try №26 of 998
2021-03-11 20:23:32,704 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:23:32,704 [main:66] - Compilation checking started
2021-03-11 20:23:32,879 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): Suppress {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "fail1"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:32,879 [main:28] - Try №27 of 998
2021-03-11 20:23:32,884 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-11 20:23:32,884 [main:66] - Compilation checking started
2021-03-11 20:23:33,071 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (x.string + y.string || t.cause?.message != "fail") return "fail1"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:33,071 [main:28] - Try №28 of 998
2021-03-11 20:23:33,082 [main:33] - Trying to replace Element(PROPERTY) on Element(PROPERTY)
2021-03-11 20:23:33,082 [main:66] - Compilation checking started
2021-03-11 20:23:33,269 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    OK
}

fun c(): String {
    val lambda2 = {
        super.bar()
    }
    if (t.message != "OK" || t.cause?.message != "fail") return "fail1"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:33,269 [main:28] - Try №29 of 998
2021-03-11 20:23:33,274 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:23:33,274 [main:66] - Compilation checking started
2021-03-11 20:23:33,450 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "fail1"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:33,450 [main:28] - Try №30 of 998
2021-03-11 20:23:33,456 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:33,457 [main:66] - Compilation checking started
2021-03-11 20:23:33,641 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "fail1"

    t != Throwable(deleteCharAt("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:33,641 [main:28] - Try №31 of 998
2021-03-11 20:23:33,660 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:23:33,661 [main:28] - Try №32 of 998
2021-03-11 20:23:33,672 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:23:33,672 [main:66] - Compilation checking started
2021-03-11 20:23:33,851 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "fail1"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { {
        return "OK";
    } }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:33,852 [main:28] - Try №33 of 998
2021-03-11 20:23:33,860 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:23:33,860 [main:28] - Try №34 of 998
2021-03-11 20:23:33,869 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:23:33,869 [main:28] - Try №35 of 998
2021-03-11 20:23:33,880 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:23:33,880 [main:66] - Compilation checking started
2021-03-11 20:23:34,064 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): A<Int, Number> {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    bar { i }

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "fail1"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:34,064 [main:28] - Try №36 of 998
2021-03-11 20:23:34,073 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:23:34,073 [main:66] - Compilation checking started
2021-03-11 20:23:34,350 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    RuntimeException()

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "fail1"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:34,350 [main:28] - Try №37 of 998
2021-03-11 20:23:34,356 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:34,357 [main:66] - Compilation checking started
2021-03-11 20:23:34,535 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    RuntimeException()

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = withIndex("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "fail1"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:34,535 [main:28] - Try №38 of 998
2021-03-11 20:23:34,547 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:23:34,547 [main:66] - Compilation checking started
2021-03-11 20:23:34,735 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    RuntimeException()

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (B().x() != "OK" || t.cause?.message != "fail") return "fail1"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:34,735 [main:28] - Try №39 of 998
2021-03-11 20:23:34,742 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:23:34,743 [main:66] - Compilation checking started
2021-03-11 20:23:34,927 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return true || return false;
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    RuntimeException()

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "fail1"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:34,927 [main:28] - Try №40 of 998
2021-03-11 20:23:34,936 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:23:34,936 [main:28] - Try №41 of 998
2021-03-11 20:23:34,939 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:34,940 [main:66] - Compilation checking started
2021-03-11 20:23:35,136 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: Unit) {
    error("FAIL")
    RuntimeException()

    foo { String }
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "fail1"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:35,137 [main:28] - Try №42 of 998
2021-03-11 20:23:35,144 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:23:35,144 [main:66] - Compilation checking started
2021-03-11 20:23:35,414 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

public fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "fail1"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:35,414 [main:28] - Try №43 of 998
2021-03-11 20:23:35,430 [main:28] - Try №44 of 998
2021-03-11 20:23:35,436 [main:33] - Trying to replace Element(MODIFIER_LIST) on Element(MODIFIER_LIST)
2021-03-11 20:23:35,436 [main:66] - Compilation checking started
2021-03-11 20:23:35,760 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "fail1"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:35,761 [main:28] - Try №45 of 998
2021-03-11 20:23:35,782 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:23:35,782 [main:28] - Try №46 of 998
2021-03-11 20:23:35,801 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:35,801 [main:66] - Compilation checking started
2021-03-11 20:23:35,987 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "fail1"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (resume.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:35,988 [main:28] - Try №47 of 998
2021-03-11 20:23:35,997 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:35,997 [main:66] - Compilation checking started
2021-03-11 20:23:36,166 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "fail1"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.Foo(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:36,166 [main:28] - Try №48 of 998
2021-03-11 20:23:36,175 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:36,176 [main:66] - Compilation checking started
2021-03-11 20:23:36,378 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.String != "OK" || t.cause?.message != "fail") return "fail1"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:36,378 [main:28] - Try №49 of 998
2021-03-11 20:23:36,389 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:36,389 [main:66] - Compilation checking started
2021-03-11 20:23:36,605 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    RuntimeException()

    AssertionError()
    baz { foo }
}

public fun NotNull() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "fail1"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:36,606 [main:28] - Try №50 of 998
2021-03-11 20:23:36,615 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:23:36,615 [main:66] - Compilation checking started
2021-03-11 20:23:36,794 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    RuntimeException()

    AssertionError()
    baz { {
            try {
            } finally {
                try {
                } finally {
                }
            }
        } }
}

public fun NotNull() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "fail1"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:36,794 [main:28] - Try №51 of 998
2021-03-11 20:23:36,800 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:23:36,800 [main:66] - Compilation checking started
2021-03-11 20:23:36,973 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "fail1"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (element: Z) {}
    return "OK"
}


2021-03-11 20:23:36,973 [main:28] - Try №52 of 998
2021-03-11 20:23:36,977 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:36,977 [main:66] - Compilation checking started
2021-03-11 20:23:37,170 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: NullPointerException)

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "fail1"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (ArrayList.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:37,170 [main:28] - Try №53 of 998
2021-03-11 20:23:37,178 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:23:37,179 [main:28] - Try №54 of 998
2021-03-11 20:23:37,187 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:23:37,187 [main:28] - Try №55 of 998
2021-03-11 20:23:37,198 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:23:37,198 [main:66] - Compilation checking started
2021-03-11 20:23:37,493 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: String)

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "fail1"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun fu1(
    f1: () -> String = { { "OK" }() },
    f: Char
): String = { "BOOYA" }()

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:37,494 [main:28] - Try №56 of 998
2021-03-11 20:23:37,497 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-11 20:23:37,497 [main:66] - Compilation checking started
2021-03-11 20:23:37,772 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: String)

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "fail1"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:37,772 [main:28] - Try №57 of 998
2021-03-11 20:23:37,786 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-11 20:23:37,786 [main:66] - Compilation checking started
2021-03-11 20:23:37,971 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: String)

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "fail1"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-0.0)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:37,971 [main:28] - Try №58 of 998
2021-03-11 20:23:37,979 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:23:37,980 [main:28] - Try №59 of 998
2021-03-11 20:23:37,996 [main:33] - Trying to replace PsiElement(ARROW) on PsiElement(ARROW)
2021-03-11 20:23:37,996 [main:28] - Try №60 of 998
2021-03-11 20:23:38,004 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:23:38,004 [main:28] - Try №61 of 998
2021-03-11 20:23:38,008 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:38,008 [main:28] - Try №62 of 998
2021-03-11 20:23:38,012 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:38,012 [main:66] - Compilation checking started
2021-03-11 20:23:38,193 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: String)

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.u != "OK" || t.cause?.message != "fail") return "fail1"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:38,193 [main:28] - Try №63 of 998
2021-03-11 20:23:38,210 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:23:38,210 [main:28] - Try №64 of 998
2021-03-11 20:23:38,228 [main:33] - Trying to replace Element(TRY) on Element(TRY)
2021-03-11 20:23:38,229 [main:66] - Compilation checking started
2021-03-11 20:23:38,404 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: String)

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "fail1"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        for (i in JImpl().listOfNotNull()) {
            return "Fail: should throw on get() in loop header"
        }
    }
    catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:38,404 [main:28] - Try №65 of 998
2021-03-11 20:23:38,416 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 20:23:38,417 [main:66] - Compilation checking started
2021-03-11 20:23:38,689 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: String)

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "fail1"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:38,689 [main:28] - Try №66 of 998
2021-03-11 20:23:38,695 [main:33] - Trying to replace Element(MODIFIER_LIST) on Element(MODIFIER_LIST)
2021-03-11 20:23:38,695 [main:66] - Compilation checking started
2021-03-11 20:23:38,889 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: String)

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    RuntimeException()

    AssertionError()
    baz { s }
}

companion fun NotNull() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "fail1"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:38,890 [main:28] - Try №67 of 998
2021-03-11 20:23:38,902 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:23:38,902 [main:28] - Try №68 of 998
2021-03-11 20:23:38,907 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:38,908 [main:66] - Compilation checking started
2021-03-11 20:23:39,084 [main:49] - Result = false
Text:
inline class InlinedInt(val box: Int)
inline class InlinedString(val simpleName: String)

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "fail1"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:39,085 [main:28] - Try №69 of 998
2021-03-11 20:23:39,104 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:23:39,105 [main:28] - Try №70 of 998
2021-03-11 20:23:39,121 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 20:23:39,122 [main:28] - Try №71 of 998
2021-03-11 20:23:39,145 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:23:39,146 [main:28] - Try №72 of 998
2021-03-11 20:23:39,168 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:23:39,168 [main:28] - Try №73 of 998
2021-03-11 20:23:39,182 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 20:23:39,182 [main:28] - Try №74 of 998
2021-03-11 20:23:39,187 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:39,187 [main:66] - Compilation checking started
2021-03-11 20:23:39,372 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: String)

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "fail1"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    c = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:39,372 [main:28] - Try №75 of 998
2021-03-11 20:23:39,381 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:39,382 [main:28] - Try №76 of 998
2021-03-11 20:23:39,397 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 20:23:39,397 [main:28] - Try №77 of 998
2021-03-11 20:23:39,411 [main:33] - Trying to replace Element(IF) on Element(IF)
2021-03-11 20:23:39,411 [main:66] - Compilation checking started
2021-03-11 20:23:39,591 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: String)

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "fail1"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (a === b) return "Fail identity"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:39,591 [main:28] - Try №78 of 998
2021-03-11 20:23:39,597 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:39,597 [main:66] - Compilation checking started
2021-03-11 20:23:39,770 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: String)

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: B): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "fail1"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:39,771 [main:28] - Try №79 of 998
2021-03-11 20:23:39,782 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 20:23:39,783 [main:28] - Try №80 of 998
2021-03-11 20:23:39,787 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:39,787 [main:66] - Compilation checking started
2021-03-11 20:23:39,961 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: String)

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "fail1"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable("OK")
    if (t.range4 != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:39,961 [main:28] - Try №81 of 998
2021-03-11 20:23:39,968 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:39,968 [main:66] - Compilation checking started
2021-03-11 20:23:40,274 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Int)

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun NotNull() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "fail1"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:40,274 [main:28] - Try №82 of 998
2021-03-11 20:23:40,280 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:23:40,281 [main:28] - Try №83 of 998
2021-03-11 20:23:40,286 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:40,286 [main:66] - Compilation checking started
2021-03-11 20:23:40,544 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Int)

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "fail1"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:40,544 [main:28] - Try №84 of 998
2021-03-11 20:23:40,565 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-11 20:23:40,566 [main:66] - Compilation checking started
2021-03-11 20:23:40,747 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Int)

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("FAIL")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", "LHX")
    if (t.message != "OK" || t.cause?.message != "fail") return "fail1"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:40,747 [main:28] - Try №85 of 998
2021-03-11 20:23:40,759 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-11 20:23:40,760 [main:66] - Compilation checking started
2021-03-11 20:23:41,018 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Int)

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "fail1"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:41,018 [main:28] - Try №86 of 998
2021-03-11 20:23:41,031 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 20:23:41,032 [main:28] - Try №87 of 998
2021-03-11 20:23:41,050 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-11 20:23:41,050 [main:66] - Compilation checking started
2021-03-11 20:23:41,232 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Int)

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return if (m.remove(A.nil()) == null) "OK" else "Fail"
}

fun M(i: InlinedInt, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "fail1"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:41,232 [main:28] - Try №88 of 998
2021-03-11 20:23:41,242 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:23:41,243 [main:28] - Try №89 of 998
2021-03-11 20:23:41,263 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 20:23:41,263 [main:66] - Compilation checking started
2021-03-11 20:23:41,519 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Int)

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "OK"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:41,519 [main:28] - Try №90 of 998
2021-03-11 20:23:41,538 [main:33] - Trying to replace Element(THEN) on Element(THEN)
2021-03-11 20:23:41,538 [main:66] - Compilation checking started
2021-03-11 20:23:41,725 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Int)

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") {
        assertEquals(listOf("kotlin.collections.List<kotlin.String?>"), p.setter.parameters.map { it.type.toString() })
        assertEquals("kotlin.Unit", p.setter.returnType.toString())

        try {
            p.setter.call()
            return "Fail: reflective call of a local delegated property setter should fail because it's not supported"
        } catch (e: UnsupportedOperationException) {  /* ok */ }
    }

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:41,725 [main:28] - Try №91 of 998
2021-03-11 20:23:41,747 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-11 20:23:41,747 [main:28] - Try №92 of 998
2021-03-11 20:23:41,755 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:23:41,755 [main:66] - Compilation checking started
2021-03-11 20:23:41,934 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Int)

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    assertEquals(-0.0F, minus0F)
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "OK"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:41,934 [main:28] - Try №93 of 998
2021-03-11 20:23:41,943 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:41,944 [main:66] - Compilation checking started
2021-03-11 20:23:42,113 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Int)

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: IC): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "OK"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:42,113 [main:28] - Try №94 of 998
2021-03-11 20:23:42,121 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:23:42,121 [main:66] - Compilation checking started
2021-03-11 20:23:42,292 [main:49] - Result = false
Text:
inline class InlinedInt()
inline class InlinedString(val simpleName: Int)

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun c(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "OK"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:42,292 [main:28] - Try №95 of 998
2021-03-11 20:23:42,304 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:23:42,305 [main:28] - Try №96 of 998
2021-03-11 20:23:42,310 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:42,310 [main:66] - Compilation checking started
2021-03-11 20:23:42,565 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Int)

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun T(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "OK"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:42,565 [main:28] - Try №97 of 998
2021-03-11 20:23:42,578 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:23:42,578 [main:28] - Try №98 of 998
2021-03-11 20:23:42,590 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-11 20:23:42,590 [main:66] - Compilation checking started
2021-03-11 20:23:42,773 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Int)

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun T(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "OK"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(listOf(1, 3, 5, 7, 9)))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:42,773 [main:28] - Try №99 of 998
2021-03-11 20:23:42,779 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:42,779 [main:66] - Compilation checking started
2021-03-11 20:23:42,951 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Int)

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): expectOrder {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun T(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "OK"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:42,951 [main:28] - Try №100 of 998
2021-03-11 20:23:42,967 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:42,967 [main:66] - Compilation checking started
2021-03-11 20:23:43,139 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Int)

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun T(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "OK"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.r != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:43,139 [main:28] - Try №101 of 998
2021-03-11 20:23:43,154 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 20:23:43,154 [main:28] - Try №102 of 998
2021-03-11 20:23:43,164 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:43,165 [main:66] - Compilation checking started
2021-03-11 20:23:43,352 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Int)

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun T(): String {
    var t = Throwable("O", Long("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "OK"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:43,353 [main:28] - Try №103 of 998
2021-03-11 20:23:43,366 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:23:43,367 [main:66] - Compilation checking started
2021-03-11 20:23:43,542 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Int)

suspend fun <T> foo(callback: () -> String): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun T(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "OK"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:43,543 [main:28] - Try №104 of 998
2021-03-11 20:23:43,559 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:23:43,559 [main:28] - Try №105 of 998
2021-03-11 20:23:43,580 [main:33] - Trying to replace Element(IF) on Element(IF)
2021-03-11 20:23:43,580 [main:66] - Compilation checking started
2021-03-11 20:23:43,756 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Int)

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun T(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "OK"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable("OK")
    if (S("abcdef")::xx.get() != "abcdef") throw AssertionError()

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:43,756 [main:28] - Try №106 of 998
2021-03-11 20:23:43,766 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:43,766 [main:28] - Try №107 of 998
2021-03-11 20:23:43,773 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:23:43,773 [main:66] - Compilation checking started
2021-03-11 20:23:43,938 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Int)

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun T(): String {
    var t = A()
    if (t.message != "OK" || t.cause?.message != "fail") return "OK"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:43,938 [main:28] - Try №108 of 998
2021-03-11 20:23:43,948 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:43,948 [main:66] - Compilation checking started
2021-03-11 20:23:44,122 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Int)

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun T(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "OK"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.Bar == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:44,122 [main:28] - Try №109 of 998
2021-03-11 20:23:44,129 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:44,129 [main:66] - Compilation checking started
2021-03-11 20:23:44,298 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Int)

suspend fun <T> foo(callback: String): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun T(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "OK"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:44,298 [main:28] - Try №110 of 998
2021-03-11 20:23:44,303 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-11 20:23:44,304 [main:66] - Compilation checking started
2021-03-11 20:23:44,482 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Int)

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun T(): String {
    var t = Throwable("O", Throwable("K"))
    if (t.message != "OK" || t.cause?.message != "fail") return "OK"

    t != Throwable(Throwable("OK"))
    if (0.0 / 0) return "OK"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:44,482 [main:28] - Try №111 of 998
2021-03-11 20:23:44,497 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 20:23:44,497 [main:66] - Compilation checking started
2021-03-11 20:23:44,754 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Int)

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun T(): String {
    var t = Throwable("O", Throwable("OK"))
    if (t.message != "OK" || t.cause?.message != "fail") return "OK"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:44,755 [main:28] - Try №112 of 998
2021-03-11 20:23:44,774 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 20:23:44,774 [main:66] - Compilation checking started
2021-03-11 20:23:44,949 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val simpleName: Int)

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun T(): String {
    var t = Throwable("O", Throwable("OK"))
    if (t.message != "OK" || t.cause?.message != "fail 2: ${test2()}") return "OK"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:44,950 [main:28] - Try №113 of 998
2021-03-11 20:23:44,966 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:23:44,967 [main:28] - Try №114 of 998
2021-03-11 20:23:44,975 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:23:44,975 [main:28] - Try №115 of 998
2021-03-11 20:23:44,986 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:23:44,986 [main:28] - Try №116 of 998
2021-03-11 20:23:44,990 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:44,990 [main:66] - Compilation checking started
2021-03-11 20:23:45,248 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val myEquals2: Int)

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun T(): String {
    var t = Throwable("O", Throwable("OK"))
    if (t.message != "OK" || t.cause?.message != "fail") return "OK"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:45,249 [main:28] - Try №117 of 998
2021-03-11 20:23:45,276 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-11 20:23:45,276 [main:66] - Compilation checking started
2021-03-11 20:23:45,457 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val myEquals2: Int)

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun T(): String {
    var t = Throwable("O", Throwable("OK"))
    if (t.message != "OK" || t.cause?.message != "fail") return "OK"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        ("test")?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:45,458 [main:28] - Try №118 of 998
2021-03-11 20:23:45,479 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-11 20:23:45,479 [main:28] - Try №119 of 998
2021-03-11 20:23:45,499 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-11 20:23:45,499 [main:28] - Try №120 of 998
2021-03-11 20:23:45,515 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:45,515 [main:66] - Compilation checking started
2021-03-11 20:23:45,719 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val myEquals2: Int)

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun T(): String {
    var t = Throwable("O", Throwable("OK"))
    if (t.message != "OK" || t.cause?.message != "fail") return "OK"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.helpers(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:45,720 [main:28] - Try №121 of 998
2021-03-11 20:23:45,726 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:23:45,726 [main:28] - Try №122 of 998
2021-03-11 20:23:45,742 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:23:45,742 [main:28] - Try №123 of 998
2021-03-11 20:23:45,749 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:23:45,750 [main:28] - Try №124 of 998
2021-03-11 20:23:45,755 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:45,756 [main:66] - Compilation checking started
2021-03-11 20:23:45,929 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val myEquals2: Int)

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun T(): String {
    var t = Throwable("O", Throwable("OK"))
    if (t.message != "OK" || t.cause?.message != "fail") return "OK"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable("OK")
    if (t.result != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:45,929 [main:28] - Try №125 of 998
2021-03-11 20:23:45,949 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:45,949 [main:66] - Compilation checking started
2021-03-11 20:23:46,129 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val myEquals2: Int)

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun T(): String {
    var t = Throwable("O", Throwable("OK"))
    if (t.String != "OK" || t.cause?.message != "fail") return "OK"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:46,129 [main:28] - Try №126 of 998
2021-03-11 20:23:46,139 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:46,139 [main:28] - Try №127 of 998
2021-03-11 20:23:46,152 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:23:46,152 [main:28] - Try №128 of 998
2021-03-11 20:23:46,161 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:23:46,161 [main:28] - Try №129 of 998
2021-03-11 20:23:46,174 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:23:46,174 [main:28] - Try №130 of 998
2021-03-11 20:23:46,187 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:46,187 [main:28] - Try №131 of 998
2021-03-11 20:23:46,200 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:23:46,200 [main:28] - Try №132 of 998
2021-03-11 20:23:46,204 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:23:46,205 [main:28] - Try №133 of 998
2021-03-11 20:23:46,212 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:23:46,213 [main:28] - Try №134 of 998
2021-03-11 20:23:46,227 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 20:23:46,227 [main:28] - Try №135 of 998
2021-03-11 20:23:46,244 [main:33] - Trying to replace Element(ENUM_ENTRY) on Element(ENUM_ENTRY)
2021-03-11 20:23:46,244 [main:28] - Try №136 of 998
2021-03-11 20:23:46,248 [main:33] - Trying to replace Element(PRIMARY_CONSTRUCTOR) on Element(PRIMARY_CONSTRUCTOR)
2021-03-11 20:23:46,248 [main:66] - Compilation checking started
2021-03-11 20:23:46,511 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: InlinedInt, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun T(): String {
    var t = Throwable("O", Throwable("OK"))
    if (t.message != "OK" || t.cause?.message != "fail") return "OK"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:46,511 [main:28] - Try №137 of 998
2021-03-11 20:23:46,528 [main:33] - Trying to replace Element(FUNCTION_TYPE) on Element(FUNCTION_TYPE)
2021-03-11 20:23:46,528 [main:28] - Try №138 of 998
2021-03-11 20:23:46,532 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:46,532 [main:66] - Compilation checking started
2021-03-11 20:23:46,799 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun T(): String {
    var t = Throwable("O", Throwable("OK"))
    if (t.message != "OK" || t.cause?.message != "fail") return "OK"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:46,799 [main:28] - Try №139 of 998
2021-03-11 20:23:46,804 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:23:46,805 [main:28] - Try №140 of 998
2021-03-11 20:23:46,818 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:23:46,818 [main:28] - Try №141 of 998
2021-03-11 20:23:46,822 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:23:46,823 [main:28] - Try №142 of 998
2021-03-11 20:23:46,833 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:23:46,834 [main:66] - Compilation checking started
2021-03-11 20:23:47,002 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): String {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun T(): String {
    var t = Throwable("O", Throwable("OK"))
    if (t.message != "OK" || t.cause?.message != "fail") return "OK"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:47,002 [main:28] - Try №143 of 998
2021-03-11 20:23:47,011 [main:33] - Trying to replace PsiElement(COMMA) on PsiElement(COMMA)
2021-03-11 20:23:47,011 [main:28] - Try №144 of 998
2021-03-11 20:23:47,024 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:23:47,024 [main:28] - Try №145 of 998
2021-03-11 20:23:47,041 [main:28] - Try №146 of 998
2021-03-11 20:23:47,044 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-11 20:23:47,044 [main:66] - Compilation checking started
2021-03-11 20:23:47,197 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun box(): String {
    // Only check that the compiler loads the class for J
    J::class

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:47,197 [main:28] - Try №147 of 998
2021-03-11 20:23:47,205 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:23:47,205 [main:66] - Compilation checking started
2021-03-11 20:23:47,381 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun T(): String {
    var t = Throwable("O", Throwable("OK"))
    if (t.message != "OK" || t.cause?.message != "fail") return "OK"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable("OK")
    if (t.message != "OK" || kotlin.coroutines != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:47,382 [main:28] - Try №148 of 998
2021-03-11 20:23:47,388 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:47,388 [main:66] - Compilation checking started
2021-03-11 20:23:47,560 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun T(): String {
    var t = Throwable("O", Throwable("OK"))
    if (t.message != "OK" || t.cause?.message != "fail") return "OK"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.AnnotatedElement != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:47,560 [main:28] - Try №149 of 998
2021-03-11 20:23:47,572 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 20:23:47,573 [main:28] - Try №150 of 998
2021-03-11 20:23:47,581 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:23:47,582 [main:28] - Try №151 of 998
2021-03-11 20:23:47,584 [main:33] - Trying to replace Element(IMPORT_LIST) on Element(IMPORT_LIST)
2021-03-11 20:23:47,584 [main:66] - Compilation checking started
2021-03-11 20:23:47,584 [main:68] - Already checked
2021-03-11 20:23:47,584 [main:28] - Try №152 of 998
2021-03-11 20:23:47,591 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:47,591 [main:66] - Compilation checking started
2021-03-11 20:23:47,759 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun T(): Byte? {
    var t = Throwable("O", Throwable("OK"))
    if (t.message != "OK" || t.cause?.message != "fail") return "OK"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:47,759 [main:28] - Try №153 of 998
2021-03-11 20:23:47,770 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-11 20:23:47,771 [main:66] - Compilation checking started
2021-03-11 20:23:47,960 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return "OK"
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun T(): String {
    var t = Throwable("O", Throwable("OK"))
    if (t.message != "OK" || t.cause?.message != "fail") return "OK"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:47,960 [main:28] - Try №154 of 998
2021-03-11 20:23:47,968 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:23:47,969 [main:28] - Try №155 of 998
2021-03-11 20:23:47,972 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:47,972 [main:66] - Compilation checking started
2021-03-11 20:23:48,224 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun T(): String {
    var t = Throwable("O", Throwable("OK"))
    if (t.message != "OK" || t.cause?.message != "fail") return "OK"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:48,225 [main:28] - Try №156 of 998
2021-03-11 20:23:48,235 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:23:48,235 [main:28] - Try №157 of 998
2021-03-11 20:23:48,250 [main:33] - Trying to replace Element(THEN) on Element(THEN)
2021-03-11 20:23:48,250 [main:28] - Try №158 of 998
2021-03-11 20:23:48,267 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-11 20:23:48,267 [main:28] - Try №159 of 998
2021-03-11 20:23:48,270 [main:33] - Trying to replace Element(CLASS) on Element(CLASS)
2021-03-11 20:23:48,270 [main:66] - Compilation checking started
2021-03-11 20:23:48,602 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class MyUIntArray(private val storage: IntArray) : Collection<MyUInt> {
    public override val size: Int get() = storage.size

    override operator fun iterator() = TODO()
    override fun contains(element: MyUInt): Boolean = storage.contains(element.x)
    override fun containsAll(elements: Collection<MyUInt>): Boolean = elements.all { storage.contains(it.x) }
    override fun isEmpty(): Boolean = TODO()
}

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun T(): String {
    var t = Throwable("O", Throwable("OK"))
    if (t.message != "OK" || t.cause?.message != "fail") return "OK"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:48,603 [main:28] - Try №160 of 998
2021-03-11 20:23:48,612 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:23:48,612 [main:28] - Try №161 of 998
2021-03-11 20:23:48,625 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-11 20:23:48,625 [main:28] - Try №162 of 998
2021-03-11 20:23:48,641 [main:28] - Try №163 of 998
2021-03-11 20:23:48,651 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 20:23:48,651 [main:66] - Compilation checking started
2021-03-11 20:23:48,862 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun T(): String {
    var t = Throwable("O", Throwable("OK"))
    if (t.message != "OK" || t.cause?.message != "fail") return "OK"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" != t.cause?.message != "OK") return "OK"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:48,862 [main:28] - Try №164 of 998
2021-03-11 20:23:48,877 [main:33] - Trying to replace Element(IF) on Element(IF)
2021-03-11 20:23:48,877 [main:66] - Compilation checking started
2021-03-11 20:23:49,091 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun T(): String {
    var t = Throwable("O", Throwable("OK"))
    if (t.message != "OK" || t.cause?.message != "fail") return "OK"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (res != 44) return "FAIL 3: $res"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:49,091 [main:28] - Try №165 of 998
2021-03-11 20:23:49,099 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:23:49,099 [main:28] - Try №166 of 998
2021-03-11 20:23:49,119 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-11 20:23:49,119 [main:28] - Try №167 of 998
2021-03-11 20:23:49,131 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:23:49,132 [main:66] - Compilation checking started
2021-03-11 20:23:49,339 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(val a: Int = 1, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun T(): String {
    var t = Throwable("O", Throwable("OK"))
    if (t.message != "OK" || t.cause?.message != "fail") return "OK"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:49,339 [main:28] - Try №168 of 998
2021-03-11 20:23:49,351 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:23:49,351 [main:66] - Compilation checking started
2021-03-11 20:23:49,553 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun T(): String {
    var t = Throwable("O", Throwable(9, 10))
    if (t.message != "OK" || t.cause?.message != "fail") return "OK"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable("OK")
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:49,554 [main:28] - Try №169 of 998
2021-03-11 20:23:49,571 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:23:49,571 [main:66] - Compilation checking started
2021-03-11 20:23:49,840 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun T(): String {
    var t = Throwable("O", Throwable("OK"))
    if (t.message != "OK" || t.cause?.message != "fail") return "OK"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable()
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(-42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:49,840 [main:28] - Try №170 of 998
2021-03-11 20:23:49,849 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 20:23:49,850 [main:66] - Compilation checking started
2021-03-11 20:23:50,146 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun T(): String {
    var t = Throwable("O", Throwable("OK"))
    if (t.message != "OK" || t.cause?.message != "fail") return "OK"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable()
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:50,146 [main:28] - Try №171 of 998
2021-03-11 20:23:50,164 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-11 20:23:50,164 [main:66] - Compilation checking started
2021-03-11 20:23:50,457 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun T(): String {
    var t = Throwable("O", Throwable("OK"))
    if (t.message != "OK" || t.cause?.message != "OK") return "OK"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable()
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:50,457 [main:28] - Try №172 of 998
2021-03-11 20:23:50,466 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:23:50,466 [main:28] - Try №173 of 998
2021-03-11 20:23:50,475 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:50,476 [main:66] - Compilation checking started
2021-03-11 20:23:50,664 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    value { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun T(): String {
    var t = Throwable("O", Throwable("OK"))
    if (t.message != "OK" || t.cause?.message != "OK") return "OK"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable()
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:50,664 [main:28] - Try №174 of 998
2021-03-11 20:23:50,667 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-11 20:23:50,667 [main:28] - Try №175 of 998
2021-03-11 20:23:50,677 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:50,677 [main:66] - Compilation checking started
2021-03-11 20:23:50,859 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun T(): String {
    var t = Throwable("O", Throwable("OK"))
    if (t.message != "OK" || t.cause?.message != "OK") return "OK"

    t != Throwable(Throwable("OK"))
    if (b.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable()
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:50,859 [main:28] - Try №176 of 998
2021-03-11 20:23:50,863 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:50,863 [main:66] - Compilation checking started
2021-03-11 20:23:51,036 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun T(): String {
    var t = Throwable("O", Throwable("OK"))
    if (t.message != "OK" || t.cause?.message != "OK") return "OK"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable()
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.intrinsics.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:51,036 [main:28] - Try №177 of 998
2021-03-11 20:23:51,045 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:23:51,045 [main:66] - Compilation checking started
2021-03-11 20:23:51,226 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

fun T(): String {
    var t = Throwable("O", Throwable("OK"))
    if (t.message != "OK" || t.cause?.message != "OK") return "OK"

    t != Throwable(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "OK"

    t = Throwable()
    if (t.message != "OK" || t.cause != null) return "fail 2: can't find sam wrapper"

    t = Throwable()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(+42)
        return "OK"
    } catch (val x: Any) {}
    return "OK"
}


2021-03-11 20:23:51,227 [main:28] - Try №178 of 998
2021-03-11 20:23:51,237 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:23:51,237 [main:28] - Try №179 of 998
2021-03-11 20:23:51,252 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 20:23:51,252 [main:28] - Try №180 of 998
2021-03-11 20:23:51,256 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-11 20:23:51,256 [main:66] - Compilation checking started
2021-03-11 20:23:51,534 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:51,534 [main:28] - Try №181 of 998
2021-03-11 20:23:51,542 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:23:51,542 [main:66] - Compilation checking started
2021-03-11 20:23:51,724 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:51,724 [main:28] - Try №182 of 998
2021-03-11 20:23:51,750 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:23:51,750 [main:28] - Try №183 of 998
2021-03-11 20:23:51,758 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-11 20:23:51,759 [main:28] - Try №184 of 998
2021-03-11 20:23:51,764 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:51,764 [main:28] - Try №185 of 998
2021-03-11 20:23:51,776 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:51,776 [main:28] - Try №186 of 998
2021-03-11 20:23:51,789 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:23:51,789 [main:28] - Try №187 of 998
2021-03-11 20:23:51,792 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:51,792 [main:66] - Compilation checking started
2021-03-11 20:23:51,970 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.String.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:51,970 [main:28] - Try №188 of 998
2021-03-11 20:23:51,980 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:51,980 [main:66] - Compilation checking started
2021-03-11 20:23:52,149 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    String("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:52,150 [main:28] - Try №189 of 998
2021-03-11 20:23:52,153 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:52,154 [main:28] - Try №190 of 998
2021-03-11 20:23:52,164 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:23:52,165 [main:66] - Compilation checking started
2021-03-11 20:23:52,326 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error(1, 2L, bar(3, 4L, 5.toByte(), "6"), 7.toByte())
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:52,327 [main:28] - Try №191 of 998
2021-03-11 20:23:52,330 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:52,330 [main:28] - Try №192 of 998
2021-03-11 20:23:52,340 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:52,340 [main:28] - Try №193 of 998
2021-03-11 20:23:52,350 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:52,350 [main:66] - Compilation checking started
2021-03-11 20:23:52,509 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return String()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:52,509 [main:28] - Try №194 of 998
2021-03-11 20:23:52,523 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:23:52,523 [main:28] - Try №195 of 998
2021-03-11 20:23:52,533 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:23:52,533 [main:28] - Try №196 of 998
2021-03-11 20:23:52,539 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:23:52,540 [main:66] - Compilation checking started
2021-03-11 20:23:52,708 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: (private val s: String) -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:52,708 [main:28] - Try №197 of 998
2021-03-11 20:23:52,712 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:52,712 [main:28] - Try №198 of 998
2021-03-11 20:23:52,723 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 20:23:52,723 [main:28] - Try №199 of 998
2021-03-11 20:23:52,733 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:52,733 [main:66] - Compilation checking started
2021-03-11 20:23:52,890 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    xs("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:52,891 [main:28] - Try №200 of 998
2021-03-11 20:23:52,909 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-11 20:23:52,910 [main:66] - Compilation checking started
2021-03-11 20:23:53,102 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString({ x++; A() }()::f)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:53,102 [main:28] - Try №201 of 998
2021-03-11 20:23:53,118 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:53,118 [main:66] - Compilation checking started
2021-03-11 20:23:53,268 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (x(4))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:53,268 [main:28] - Try №202 of 998
2021-03-11 20:23:53,279 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:53,279 [main:66] - Compilation checking started
2021-03-11 20:23:53,438 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { String }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:53,438 [main:28] - Try №203 of 998
2021-03-11 20:23:53,452 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:23:53,452 [main:28] - Try №204 of 998
2021-03-11 20:23:53,462 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:23:53,463 [main:66] - Compilation checking started
2021-03-11 20:23:53,641 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> String): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:53,641 [main:28] - Try №205 of 998
2021-03-11 20:23:53,651 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:53,651 [main:28] - Try №206 of 998
2021-03-11 20:23:53,660 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:53,660 [main:28] - Try №207 of 998
2021-03-11 20:23:53,671 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:23:53,671 [main:66] - Compilation checking started
2021-03-11 20:23:53,836 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): Int {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:53,836 [main:28] - Try №208 of 998
2021-03-11 20:23:53,851 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 20:23:53,851 [main:28] - Try №209 of 998
2021-03-11 20:23:53,854 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:53,855 [main:28] - Try №210 of 998
2021-03-11 20:23:53,858 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:53,858 [main:66] - Compilation checking started
2021-03-11 20:23:54,019 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> test): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:54,019 [main:28] - Try №211 of 998
2021-03-11 20:23:54,023 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:54,023 [main:66] - Compilation checking started
2021-03-11 20:23:54,181 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): int42 {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:54,181 [main:28] - Try №212 of 998
2021-03-11 20:23:54,194 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:23:54,194 [main:28] - Try №213 of 998
2021-03-11 20:23:54,204 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:54,204 [main:28] - Try №214 of 998
2021-03-11 20:23:54,214 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:23:54,214 [main:28] - Try №215 of 998
2021-03-11 20:23:54,230 [main:33] - Trying to replace PsiElement(ARROW) on PsiElement(ARROW)
2021-03-11 20:23:54,230 [main:28] - Try №216 of 998
2021-03-11 20:23:54,244 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:23:54,245 [main:28] - Try №217 of 998
2021-03-11 20:23:54,263 [main:33] - Trying to replace Element(LAMBDA_ARGUMENT) on Element(LAMBDA_ARGUMENT)
2021-03-11 20:23:54,263 [main:66] - Compilation checking started
2021-03-11 20:23:54,424 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { "BOOYA" }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:54,424 [main:28] - Try №218 of 998
2021-03-11 20:23:54,435 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:54,435 [main:28] - Try №219 of 998
2021-03-11 20:23:54,439 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:54,439 [main:66] - Compilation checking started
2021-03-11 20:23:54,599 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): byStringNullable {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:54,599 [main:28] - Try №220 of 998
2021-03-11 20:23:54,615 [main:33] - Trying to replace PsiElement(ARROW) on PsiElement(ARROW)
2021-03-11 20:23:54,616 [main:28] - Try №221 of 998
2021-03-11 20:23:54,623 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:23:54,623 [main:66] - Compilation checking started
2021-03-11 20:23:54,802 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    val params = f.parameters
    assertEquals(names, params.map { it.name })
    assertEquals(params.indices.toList(), params.map { it.index })
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:54,802 [main:28] - Try №222 of 998
2021-03-11 20:23:54,805 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:54,806 [main:28] - Try №223 of 998
2021-03-11 20:23:54,819 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:23:54,819 [main:28] - Try №224 of 998
2021-03-11 20:23:54,834 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:23:54,834 [main:28] - Try №225 of 998
2021-03-11 20:23:54,852 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-11 20:23:54,852 [main:66] - Compilation checking started
2021-03-11 20:23:54,853 [main:71] - Wrong syntax or breaks conditions
2021-03-11 20:23:54,853 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        ()?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:54,854 [main:28] - Try №226 of 998
2021-03-11 20:23:54,864 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:54,864 [main:66] - Compilation checking started
2021-03-11 20:23:55,016 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.value.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:55,016 [main:28] - Try №227 of 998
2021-03-11 20:23:55,020 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:55,020 [main:66] - Compilation checking started
2021-03-11 20:23:55,182 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <check> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun box912(): String {
    try {
        (InlinedInt(4))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:55,182 [main:28] - Try №228 of 998
2021-03-11 20:23:55,194 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:23:55,195 [main:28] - Try №229 of 998
2021-03-11 20:23:55,200 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:55,200 [main:66] - Compilation checking started
2021-03-11 20:23:55,451 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(4))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:55,452 [main:28] - Try №230 of 998
2021-03-11 20:23:55,468 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:55,468 [main:28] - Try №231 of 998
2021-03-11 20:23:55,483 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 20:23:55,483 [main:28] - Try №232 of 998
2021-03-11 20:23:55,494 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:55,494 [main:28] - Try №233 of 998
2021-03-11 20:23:55,496 [main:33] - Trying to replace Element(PACKAGE_DIRECTIVE) on Element(PACKAGE_DIRECTIVE)
2021-03-11 20:23:55,496 [main:66] - Compilation checking started
2021-03-11 20:23:55,496 [main:68] - Already checked
2021-03-11 20:23:55,496 [main:28] - Try №234 of 998
2021-03-11 20:23:55,499 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:55,500 [main:66] - Compilation checking started
2021-03-11 20:23:55,660 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(4))?.toLong.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:55,660 [main:28] - Try №235 of 998
2021-03-11 20:23:55,667 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:55,668 [main:28] - Try №236 of 998
2021-03-11 20:23:55,683 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:23:55,683 [main:28] - Try №237 of 998
2021-03-11 20:23:55,692 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:23:55,693 [main:28] - Try №238 of 998
2021-03-11 20:23:55,706 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:23:55,707 [main:28] - Try №239 of 998
2021-03-11 20:23:55,722 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:23:55,723 [main:66] - Compilation checking started
2021-03-11 20:23:55,890 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: String) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(4))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:55,890 [main:28] - Try №240 of 998
2021-03-11 20:23:55,902 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:23:55,902 [main:28] - Try №241 of 998
2021-03-11 20:23:55,912 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:55,912 [main:28] - Try №242 of 998
2021-03-11 20:23:55,923 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:23:55,923 [main:28] - Try №243 of 998
2021-03-11 20:23:55,937 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:55,937 [main:28] - Try №244 of 998
2021-03-11 20:23:55,956 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 20:23:55,956 [main:28] - Try №245 of 998
2021-03-11 20:23:55,968 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 20:23:55,968 [main:28] - Try №246 of 998
2021-03-11 20:23:55,975 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:23:55,975 [main:28] - Try №247 of 998
2021-03-11 20:23:55,989 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 20:23:55,989 [main:28] - Try №248 of 998
2021-03-11 20:23:55,996 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:23:55,997 [main:66] - Compilation checking started
2021-03-11 20:23:56,200 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    val s = a + "1" + "2" + 3 + 4L + b + 5.0 + 6F + '7' + A() + true + false + 3147483647u

    a.plus(b)
    b?.plus(a)
    val ref1 = a::plus
    val ref2 = b::plus

    test("123"::plus)
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(4))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:56,200 [main:28] - Try №249 of 998
2021-03-11 20:23:56,210 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:56,210 [main:28] - Try №250 of 998
2021-03-11 20:23:56,227 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:23:56,227 [main:28] - Try №251 of 998
2021-03-11 20:23:56,234 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:23:56,234 [main:28] - Try №252 of 998
2021-03-11 20:23:56,241 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:23:56,241 [main:28] - Try №253 of 998
2021-03-11 20:23:56,271 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:56,271 [main:28] - Try №254 of 998
2021-03-11 20:23:56,275 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:56,275 [main:28] - Try №255 of 998
2021-03-11 20:23:56,289 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 20:23:56,289 [main:28] - Try №256 of 998
2021-03-11 20:23:56,302 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 20:23:56,302 [main:28] - Try №257 of 998
2021-03-11 20:23:56,306 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:23:56,307 [main:28] - Try №258 of 998
2021-03-11 20:23:56,316 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:56,316 [main:28] - Try №259 of 998
2021-03-11 20:23:56,324 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:23:56,324 [main:28] - Try №260 of 998
2021-03-11 20:23:56,337 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:23:56,337 [main:28] - Try №261 of 998
2021-03-11 20:23:56,345 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:23:56,345 [main:28] - Try №262 of 998
2021-03-11 20:23:56,349 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:56,349 [main:66] - Compilation checking started
2021-03-11 20:23:56,505 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> String): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(4))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:56,505 [main:28] - Try №263 of 998
2021-03-11 20:23:56,524 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 20:23:56,525 [main:28] - Try №264 of 998
2021-03-11 20:23:56,533 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:23:56,533 [main:66] - Compilation checking started
2021-03-11 20:23:56,534 [main:71] - Wrong syntax or breaks conditions
2021-03-11 20:23:56,535 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: x -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(4))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:56,535 [main:28] - Try №265 of 998
2021-03-11 20:23:56,552 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-11 20:23:56,552 [main:28] - Try №266 of 998
2021-03-11 20:23:56,567 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 20:23:56,567 [main:28] - Try №267 of 998
2021-03-11 20:23:56,581 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:23:56,581 [main:28] - Try №268 of 998
2021-03-11 20:23:56,591 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:56,591 [main:28] - Try №269 of 998
2021-03-11 20:23:56,600 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:23:56,600 [main:66] - Compilation checking started
2021-03-11 20:23:56,760 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    fn()
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(4))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:56,760 [main:28] - Try №270 of 998
2021-03-11 20:23:56,778 [main:33] - Trying to replace PsiElement(INTEGER_LITERAL) on PsiElement(INTEGER_LITERAL)
2021-03-11 20:23:56,778 [main:66] - Compilation checking started
2021-03-11 20:23:57,021 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(0))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:57,022 [main:28] - Try №271 of 998
2021-03-11 20:23:57,036 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:57,037 [main:28] - Try №272 of 998
2021-03-11 20:23:57,050 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:23:57,050 [main:28] - Try №273 of 998
2021-03-11 20:23:57,066 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 20:23:57,066 [main:28] - Try №274 of 998
2021-03-11 20:23:57,079 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:23:57,079 [main:28] - Try №275 of 998
2021-03-11 20:23:57,096 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:23:57,097 [main:66] - Compilation checking started
2021-03-11 20:23:57,273 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback(key, value)
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(0))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:57,273 [main:28] - Try №276 of 998
2021-03-11 20:23:57,281 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:23:57,282 [main:28] - Try №277 of 998
2021-03-11 20:23:57,295 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-11 20:23:57,295 [main:28] - Try №278 of 998
2021-03-11 20:23:57,306 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:23:57,307 [main:66] - Compilation checking started
2021-03-11 20:23:57,462 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): Int {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(0))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:57,463 [main:28] - Try №279 of 998
2021-03-11 20:23:57,477 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:57,478 [main:28] - Try №280 of 998
2021-03-11 20:23:57,485 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-11 20:23:57,485 [main:28] - Try №281 of 998
2021-03-11 20:23:57,492 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:23:57,492 [main:28] - Try №282 of 998
2021-03-11 20:23:57,499 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-11 20:23:57,499 [main:28] - Try №283 of 998
2021-03-11 20:23:57,516 [main:33] - Trying to replace PsiElement(ARROW) on PsiElement(ARROW)
2021-03-11 20:23:57,516 [main:28] - Try №284 of 998
2021-03-11 20:23:57,529 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:23:57,530 [main:28] - Try №285 of 998
2021-03-11 20:23:57,535 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:23:57,535 [main:28] - Try №286 of 998
2021-03-11 20:23:57,544 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:23:57,544 [main:66] - Compilation checking started
2021-03-11 20:23:57,719 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(0))?.internal.toString(+42)
        return "OK"
    } catch (index: Int) {}
    return "OK"
}


2021-03-11 20:23:57,719 [main:28] - Try №287 of 998
2021-03-11 20:23:57,740 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:23:57,740 [main:28] - Try №288 of 998
2021-03-11 20:23:57,758 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-11 20:23:57,758 [main:28] - Try №289 of 998
2021-03-11 20:23:57,768 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:57,768 [main:28] - Try №290 of 998
2021-03-11 20:23:57,778 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:23:57,778 [main:28] - Try №291 of 998
2021-03-11 20:23:57,788 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 20:23:57,788 [main:28] - Try №292 of 998
2021-03-11 20:23:57,805 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:23:57,805 [main:66] - Compilation checking started
2021-03-11 20:23:57,979 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz {
        it.members.map(Any::toString)
    }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(0))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:57,979 [main:28] - Try №293 of 998
2021-03-11 20:23:57,985 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:57,986 [main:28] - Try №294 of 998
2021-03-11 20:23:57,999 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:23:57,999 [main:28] - Try №295 of 998
2021-03-11 20:23:58,008 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:58,009 [main:28] - Try №296 of 998
2021-03-11 20:23:58,013 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:23:58,013 [main:28] - Try №297 of 998
2021-03-11 20:23:58,017 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:58,017 [main:66] - Compilation checking started
2021-03-11 20:23:58,200 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun s(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(0))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:58,200 [main:28] - Try №298 of 998
2021-03-11 20:23:58,211 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-11 20:23:58,211 [main:28] - Try №299 of 998
2021-03-11 20:23:58,222 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:23:58,222 [main:28] - Try №300 of 998
2021-03-11 20:23:58,225 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:58,225 [main:28] - Try №301 of 998
2021-03-11 20:23:58,232 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:58,233 [main:28] - Try №302 of 998
2021-03-11 20:23:58,243 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:23:58,243 [main:66] - Compilation checking started
2021-03-11 20:23:58,404 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return c_y()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(0))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:58,405 [main:28] - Try №303 of 998
2021-03-11 20:23:58,411 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:23:58,411 [main:66] - Compilation checking started
2021-03-11 20:23:58,610 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    f(this)
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(0))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:58,611 [main:28] - Try №304 of 998
2021-03-11 20:23:58,624 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:23:58,624 [main:66] - Compilation checking started
2021-03-11 20:23:58,777 [main:49] - Result = false
Text:
inline class InlinedInt(id: T)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(0))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:58,777 [main:28] - Try №305 of 998
2021-03-11 20:23:58,787 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 20:23:58,787 [main:28] - Try №306 of 998
2021-03-11 20:23:58,791 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:58,791 [main:28] - Try №307 of 998
2021-03-11 20:23:58,804 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-11 20:23:58,804 [main:28] - Try №308 of 998
2021-03-11 20:23:58,810 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:23:58,810 [main:28] - Try №309 of 998
2021-03-11 20:23:58,818 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:23:58,818 [main:28] - Try №310 of 998
2021-03-11 20:23:58,830 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-11 20:23:58,830 [main:28] - Try №311 of 998
2021-03-11 20:23:58,834 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:58,835 [main:28] - Try №312 of 998
2021-03-11 20:23:58,847 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-11 20:23:58,847 [main:28] - Try №313 of 998
2021-03-11 20:23:58,864 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:23:58,864 [main:66] - Compilation checking started
2021-03-11 20:23:59,051 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz {
                        if (((i % 2) == 0))
                        {
                            System.out?.print((i.toString() + ","))
                        }

                    }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(0))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:59,051 [main:28] - Try №314 of 998
2021-03-11 20:23:59,064 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:23:59,064 [main:28] - Try №315 of 998
2021-03-11 20:23:59,069 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:59,069 [main:28] - Try №316 of 998
2021-03-11 20:23:59,080 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-11 20:23:59,081 [main:28] - Try №317 of 998
2021-03-11 20:23:59,098 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-11 20:23:59,098 [main:66] - Compilation checking started
2021-03-11 20:23:59,099 [main:71] - Wrong syntax or breaks conditions
2021-03-11 20:23:59,099 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        ()?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:59,099 [main:28] - Try №318 of 998
2021-03-11 20:23:59,105 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:23:59,106 [main:66] - Compilation checking started
2021-03-11 20:23:59,273 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: String): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(0))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:59,273 [main:28] - Try №319 of 998
2021-03-11 20:23:59,289 [main:33] - Trying to replace Element(FUNCTION_TYPE) on Element(FUNCTION_TYPE)
2021-03-11 20:23:59,289 [main:66] - Compilation checking started
2021-03-11 20:23:59,444 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> String): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

public fun JvmMultifileClass() {}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(0))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:59,445 [main:28] - Try №320 of 998
2021-03-11 20:23:59,447 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-11 20:23:59,448 [main:66] - Compilation checking started
2021-03-11 20:23:59,794 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(0))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:23:59,794 [main:28] - Try №321 of 998
2021-03-11 20:23:59,802 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:23:59,803 [main:28] - Try №322 of 998
2021-03-11 20:23:59,818 [main:33] - Trying to replace Element(THEN) on Element(THEN)
2021-03-11 20:23:59,818 [main:28] - Try №323 of 998
2021-03-11 20:23:59,822 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:23:59,822 [main:66] - Compilation checking started
2021-03-11 20:24:00,049 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): E {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(0))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:24:00,050 [main:28] - Try №324 of 998
2021-03-11 20:24:00,059 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:00,060 [main:28] - Try №325 of 998
2021-03-11 20:24:00,063 [main:33] - Trying to replace Element(CLASS) on Element(CLASS)
2021-03-11 20:24:00,063 [main:66] - Compilation checking started
2021-03-11 20:24:00,256 [main:49] - Result = false
Text:
class B
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(0))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:24:00,257 [main:28] - Try №326 of 998
2021-03-11 20:24:00,264 [main:33] - Trying to replace Element(TYPE_PARAMETER) on Element(TYPE_PARAMETER)
2021-03-11 20:24:00,264 [main:66] - Compilation checking started
2021-03-11 20:24:00,464 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T2> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(0))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:24:00,464 [main:28] - Try №327 of 998
2021-03-11 20:24:00,481 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-11 20:24:00,482 [main:28] - Try №328 of 998
2021-03-11 20:24:00,492 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:24:00,493 [main:66] - Compilation checking started
2021-03-11 20:24:00,676 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> NullPointerException): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(0))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "OK"
}


2021-03-11 20:24:00,676 [main:28] - Try №329 of 998
2021-03-11 20:24:00,680 [main:33] - Trying to replace Element(TYPE_PARAMETER_LIST) on Element(TYPE_PARAMETER_LIST)
2021-03-11 20:24:00,681 [main:28] - Try №330 of 998
2021-03-11 20:24:00,695 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 20:24:00,695 [main:28] - Try №331 of 998
2021-03-11 20:24:00,708 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-11 20:24:00,709 [main:66] - Compilation checking started
2021-03-11 20:24:00,992 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(0))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:00,992 [main:28] - Try №332 of 998
2021-03-11 20:24:01,001 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:01,001 [main:28] - Try №333 of 998
2021-03-11 20:24:01,012 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:24:01,012 [main:28] - Try №334 of 998
2021-03-11 20:24:01,022 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:01,022 [main:28] - Try №335 of 998
2021-03-11 20:24:01,034 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:01,034 [main:28] - Try №336 of 998
2021-03-11 20:24:01,044 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:24:01,044 [main:66] - Compilation checking started
2021-03-11 20:24:01,216 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
         return "Hello to all the $num!"
    } catch (e: NullPointerException) {}
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:01,216 [main:28] - Try №337 of 998
2021-03-11 20:24:01,238 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-11 20:24:01,239 [main:28] - Try №338 of 998
2021-03-11 20:24:01,248 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:24:01,249 [main:66] - Compilation checking started
2021-03-11 20:24:01,449 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: String)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(0))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:01,449 [main:28] - Try №339 of 998
2021-03-11 20:24:01,462 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-11 20:24:01,463 [main:28] - Try №340 of 998
2021-03-11 20:24:01,475 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 20:24:01,476 [main:28] - Try №341 of 998
2021-03-11 20:24:01,479 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:01,479 [main:28] - Try №342 of 998
2021-03-11 20:24:01,492 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-11 20:24:01,493 [main:28] - Try №343 of 998
2021-03-11 20:24:01,510 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-11 20:24:01,510 [main:66] - Compilation checking started
2021-03-11 20:24:01,692 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { it.name == B::foo.name }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(0))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:01,692 [main:28] - Try №344 of 998
2021-03-11 20:24:01,713 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-11 20:24:01,714 [main:28] - Try №345 of 998
2021-03-11 20:24:01,720 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:01,721 [main:28] - Try №346 of 998
2021-03-11 20:24:01,726 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:24:01,726 [main:28] - Try №347 of 998
2021-03-11 20:24:01,737 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:01,738 [main:66] - Compilation checking started
2021-03-11 20:24:01,919 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun <T> box(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (Boolean(0))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:01,919 [main:28] - Try №348 of 998
2021-03-11 20:24:01,924 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:24:01,924 [main:28] - Try №349 of 998
2021-03-11 20:24:01,937 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:24:01,937 [main:28] - Try №350 of 998
2021-03-11 20:24:01,940 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-11 20:24:01,940 [main:66] - Compilation checking started
2021-03-11 20:24:02,244 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(0))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:02,245 [main:28] - Try №351 of 998
2021-03-11 20:24:02,254 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:02,254 [main:28] - Try №352 of 998
2021-03-11 20:24:02,263 [main:33] - Trying to replace PsiElement(COMMA) on PsiElement(COMMA)
2021-03-11 20:24:02,263 [main:28] - Try №353 of 998
2021-03-11 20:24:02,269 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:02,269 [main:66] - Compilation checking started
2021-03-11 20:24:02,473 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(0))?.xs.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:02,473 [main:28] - Try №354 of 998
2021-03-11 20:24:02,480 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:24:02,480 [main:28] - Try №355 of 998
2021-03-11 20:24:02,482 [main:33] - Trying to replace Element(PACKAGE_DIRECTIVE) on Element(PACKAGE_DIRECTIVE)
2021-03-11 20:24:02,482 [main:66] - Compilation checking started
2021-03-11 20:24:02,482 [main:68] - Already checked
2021-03-11 20:24:02,482 [main:28] - Try №356 of 998
2021-03-11 20:24:02,495 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:24:02,495 [main:28] - Try №357 of 998
2021-03-11 20:24:02,508 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:24:02,509 [main:28] - Try №358 of 998
2021-03-11 20:24:02,518 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:02,518 [main:28] - Try №359 of 998
2021-03-11 20:24:02,531 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-11 20:24:02,532 [main:28] - Try №360 of 998
2021-03-11 20:24:02,539 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:24:02,539 [main:28] - Try №361 of 998
2021-03-11 20:24:02,555 [main:28] - Try №362 of 998
2021-03-11 20:24:02,568 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:24:02,568 [main:28] - Try №363 of 998
2021-03-11 20:24:02,578 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:02,578 [main:28] - Try №364 of 998
2021-03-11 20:24:02,587 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:02,588 [main:28] - Try №365 of 998
2021-03-11 20:24:02,597 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 20:24:02,597 [main:28] - Try №366 of 998
2021-03-11 20:24:02,602 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:24:02,602 [main:28] - Try №367 of 998
2021-03-11 20:24:02,610 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:24:02,610 [main:28] - Try №368 of 998
2021-03-11 20:24:02,619 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:02,619 [main:28] - Try №369 of 998
2021-03-11 20:24:02,628 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:24:02,628 [main:28] - Try №370 of 998
2021-03-11 20:24:02,633 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-11 20:24:02,633 [main:28] - Try №371 of 998
2021-03-11 20:24:02,642 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-11 20:24:02,642 [main:28] - Try №372 of 998
2021-03-11 20:24:02,662 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 20:24:02,662 [main:28] - Try №373 of 998
2021-03-11 20:24:02,671 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-11 20:24:02,671 [main:28] - Try №374 of 998
2021-03-11 20:24:02,676 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-11 20:24:02,676 [main:28] - Try №375 of 998
2021-03-11 20:24:02,684 [main:33] - Trying to replace Element(MODIFIER_LIST) on Element(MODIFIER_LIST)
2021-03-11 20:24:02,684 [main:28] - Try №376 of 998
2021-03-11 20:24:02,694 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:02,694 [main:66] - Compilation checking started
2021-03-11 20:24:02,872 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

inline fun bar(callback: () -> String): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(0))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:02,872 [main:28] - Try №377 of 998
2021-03-11 20:24:02,896 [main:28] - Try №378 of 998
2021-03-11 20:24:02,901 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:02,901 [main:28] - Try №379 of 998
2021-03-11 20:24:02,906 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:24:02,906 [main:28] - Try №380 of 998
2021-03-11 20:24:02,923 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:24:02,923 [main:28] - Try №381 of 998
2021-03-11 20:24:02,938 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:02,938 [main:28] - Try №382 of 998
2021-03-11 20:24:02,953 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 20:24:02,953 [main:28] - Try №383 of 998
2021-03-11 20:24:02,957 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:02,957 [main:28] - Try №384 of 998
2021-03-11 20:24:02,969 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:24:02,969 [main:66] - Compilation checking started
2021-03-11 20:24:03,170 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

inline fun bar(callback: () -> Unit): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(0))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:03,170 [main:28] - Try №385 of 998
2021-03-11 20:24:03,184 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 20:24:03,185 [main:28] - Try №386 of 998
2021-03-11 20:24:03,188 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:03,188 [main:28] - Try №387 of 998
2021-03-11 20:24:03,192 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:03,192 [main:28] - Try №388 of 998
2021-03-11 20:24:03,208 [main:33] - Trying to replace Element(FUNCTION_TYPE) on Element(FUNCTION_TYPE)
2021-03-11 20:24:03,209 [main:66] - Compilation checking started
2021-03-11 20:24:03,209 [main:68] - Already checked
2021-03-11 20:24:03,209 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

inline fun bar(callback: () -> String): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(0))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:03,209 [main:28] - Try №389 of 998
2021-03-11 20:24:03,227 [main:33] - Trying to replace Element(ENUM_ENTRY) on Element(ENUM_ENTRY)
2021-03-11 20:24:03,227 [main:28] - Try №390 of 998
2021-03-11 20:24:03,232 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:24:03,232 [main:28] - Try №391 of 998
2021-03-11 20:24:03,242 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 20:24:03,242 [main:28] - Try №392 of 998
2021-03-11 20:24:03,255 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:24:03,256 [main:28] - Try №393 of 998
2021-03-11 20:24:03,262 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:24:03,262 [main:66] - Compilation checking started
2021-03-11 20:24:03,466 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return Implementation()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(0))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:03,466 [main:28] - Try №394 of 998
2021-03-11 20:24:03,480 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:24:03,480 [main:28] - Try №395 of 998
2021-03-11 20:24:03,485 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:24:03,485 [main:66] - Compilation checking started
2021-03-11 20:24:03,696 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(String) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(0))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:03,696 [main:28] - Try №396 of 998
2021-03-11 20:24:03,712 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:03,713 [main:66] - Compilation checking started
2021-03-11 20:24:03,897 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(0))?.JsonParser.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:03,897 [main:28] - Try №397 of 998
2021-03-11 20:24:03,910 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-11 20:24:03,911 [main:66] - Compilation checking started
2021-03-11 20:24:04,108 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(0))?.internal.toString(+42)
        return (t.foo() as X).x!!.toString() + (t2.bar() as X).x!!.toString()
    } catch (e: NullPointerException) {}
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:04,108 [main:28] - Try №398 of 998
2021-03-11 20:24:04,118 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 20:24:04,118 [main:28] - Try №399 of 998
2021-03-11 20:24:04,132 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 20:24:04,133 [main:28] - Try №400 of 998
2021-03-11 20:24:04,142 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:24:04,143 [main:28] - Try №401 of 998
2021-03-11 20:24:04,157 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 20:24:04,157 [main:28] - Try №402 of 998
2021-03-11 20:24:04,164 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:24:04,164 [main:28] - Try №403 of 998
2021-03-11 20:24:04,176 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-11 20:24:04,177 [main:28] - Try №404 of 998
2021-03-11 20:24:04,185 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:24:04,185 [main:28] - Try №405 of 998
2021-03-11 20:24:04,200 [main:33] - Trying to replace Element(THEN) on Element(THEN)
2021-03-11 20:24:04,200 [main:28] - Try №406 of 998
2021-03-11 20:24:04,206 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-11 20:24:04,206 [main:28] - Try №407 of 998
2021-03-11 20:24:04,224 [main:28] - Try №408 of 998
2021-03-11 20:24:04,228 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:04,228 [main:28] - Try №409 of 998
2021-03-11 20:24:04,233 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-11 20:24:04,233 [main:28] - Try №410 of 998
2021-03-11 20:24:04,239 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-11 20:24:04,239 [main:28] - Try №411 of 998
2021-03-11 20:24:04,246 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:24:04,246 [main:28] - Try №412 of 998
2021-03-11 20:24:04,250 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:04,250 [main:28] - Try №413 of 998
2021-03-11 20:24:04,259 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:04,260 [main:28] - Try №414 of 998
2021-03-11 20:24:04,264 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:24:04,264 [main:28] - Try №415 of 998
2021-03-11 20:24:04,267 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:04,267 [main:28] - Try №416 of 998
2021-03-11 20:24:04,275 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:24:04,275 [main:28] - Try №417 of 998
2021-03-11 20:24:04,279 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:04,279 [main:28] - Try №418 of 998
2021-03-11 20:24:04,292 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-11 20:24:04,292 [main:28] - Try №419 of 998
2021-03-11 20:24:04,306 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 20:24:04,306 [main:28] - Try №420 of 998
2021-03-11 20:24:04,313 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:24:04,313 [main:28] - Try №421 of 998
2021-03-11 20:24:04,324 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-11 20:24:04,325 [main:66] - Compilation checking started
2021-03-11 20:24:04,506 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return same.run() + inlined.run()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(0))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:04,506 [main:28] - Try №422 of 998
2021-03-11 20:24:04,514 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:24:04,514 [main:28] - Try №423 of 998
2021-03-11 20:24:04,520 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-11 20:24:04,520 [main:28] - Try №424 of 998
2021-03-11 20:24:04,529 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:24:04,529 [main:28] - Try №425 of 998
2021-03-11 20:24:04,539 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:04,539 [main:66] - Compilation checking started
2021-03-11 20:24:04,708 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (assertEquals(0))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:04,709 [main:28] - Try №426 of 998
2021-03-11 20:24:04,714 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:24:04,714 [main:28] - Try №427 of 998
2021-03-11 20:24:04,727 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-11 20:24:04,727 [main:28] - Try №428 of 998
2021-03-11 20:24:04,734 [main:33] - Trying to replace Element(MODIFIER_LIST) on Element(MODIFIER_LIST)
2021-03-11 20:24:04,735 [main:28] - Try №429 of 998
2021-03-11 20:24:04,744 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:24:04,745 [main:28] - Try №430 of 998
2021-03-11 20:24:04,754 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:04,754 [main:28] - Try №431 of 998
2021-03-11 20:24:04,767 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:24:04,767 [main:28] - Try №432 of 998
2021-03-11 20:24:04,775 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:24:04,775 [main:28] - Try №433 of 998
2021-03-11 20:24:04,781 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:24:04,781 [main:28] - Try №434 of 998
2021-03-11 20:24:04,785 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:04,785 [main:66] - Compilation checking started
2021-03-11 20:24:04,953 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> Inner2): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(0))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:04,954 [main:28] - Try №435 of 998
2021-03-11 20:24:04,963 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:04,963 [main:28] - Try №436 of 998
2021-03-11 20:24:04,976 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:24:04,976 [main:28] - Try №437 of 998
2021-03-11 20:24:04,997 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-11 20:24:04,997 [main:28] - Try №438 of 998
2021-03-11 20:24:05,018 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 20:24:05,018 [main:28] - Try №439 of 998
2021-03-11 20:24:05,039 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:24:05,039 [main:28] - Try №440 of 998
2021-03-11 20:24:05,044 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-11 20:24:05,044 [main:28] - Try №441 of 998
2021-03-11 20:24:05,052 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:24:05,052 [main:28] - Try №442 of 998
2021-03-11 20:24:05,056 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:05,056 [main:66] - Compilation checking started
2021-03-11 20:24:05,222 [main:49] - Result = false
Text:
inline class InlinedInt(val RuntimeException: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(0))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:05,222 [main:28] - Try №443 of 998
2021-03-11 20:24:05,231 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:05,231 [main:66] - Compilation checking started
2021-03-11 20:24:05,410 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return test()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class Inner {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(0))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:05,410 [main:28] - Try №444 of 998
2021-03-11 20:24:05,419 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:24:05,419 [main:28] - Try №445 of 998
2021-03-11 20:24:05,424 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:05,424 [main:28] - Try №446 of 998
2021-03-11 20:24:05,427 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:05,427 [main:66] - Compilation checking started
2021-03-11 20:24:05,701 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(0))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:05,701 [main:28] - Try №447 of 998
2021-03-11 20:24:05,706 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-11 20:24:05,706 [main:28] - Try №448 of 998
2021-03-11 20:24:05,715 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:24:05,715 [main:28] - Try №449 of 998
2021-03-11 20:24:05,729 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 20:24:05,730 [main:28] - Try №450 of 998
2021-03-11 20:24:05,733 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:05,734 [main:28] - Try №451 of 998
2021-03-11 20:24:05,739 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-11 20:24:05,739 [main:28] - Try №452 of 998
2021-03-11 20:24:05,747 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:24:05,747 [main:28] - Try №453 of 998
2021-03-11 20:24:05,754 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:24:05,754 [main:28] - Try №454 of 998
2021-03-11 20:24:05,770 [main:33] - Trying to replace PsiElement(ARROW) on PsiElement(ARROW)
2021-03-11 20:24:05,770 [main:28] - Try №455 of 998
2021-03-11 20:24:05,781 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:24:05,781 [main:28] - Try №456 of 998
2021-03-11 20:24:05,787 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-11 20:24:05,787 [main:28] - Try №457 of 998
2021-03-11 20:24:05,799 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 20:24:05,799 [main:28] - Try №458 of 998
2021-03-11 20:24:05,807 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:24:05,807 [main:28] - Try №459 of 998
2021-03-11 20:24:05,812 [main:33] - Trying to replace Element(MODIFIER_LIST) on Element(MODIFIER_LIST)
2021-03-11 20:24:05,812 [main:66] - Compilation checking started
2021-03-11 20:24:06,095 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(0))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:06,095 [main:28] - Try №460 of 998
2021-03-11 20:24:06,103 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-11 20:24:06,103 [main:28] - Try №461 of 998
2021-03-11 20:24:06,114 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-11 20:24:06,114 [main:28] - Try №462 of 998
2021-03-11 20:24:06,118 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:06,119 [main:28] - Try №463 of 998
2021-03-11 20:24:06,130 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:06,130 [main:66] - Compilation checking started
2021-03-11 20:24:06,319 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> s): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(0))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:06,320 [main:28] - Try №464 of 998
2021-03-11 20:24:06,323 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:06,323 [main:66] - Compilation checking started
2021-03-11 20:24:06,496 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return J()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(0))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:06,496 [main:28] - Try №465 of 998
2021-03-11 20:24:06,504 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:24:06,505 [main:28] - Try №466 of 998
2021-03-11 20:24:06,518 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:24:06,519 [main:28] - Try №467 of 998
2021-03-11 20:24:06,522 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:06,522 [main:66] - Compilation checking started
2021-03-11 20:24:06,705 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(box: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(0))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:06,705 [main:28] - Try №468 of 998
2021-03-11 20:24:06,720 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 20:24:06,720 [main:28] - Try №469 of 998
2021-03-11 20:24:06,731 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-11 20:24:06,731 [main:66] - Compilation checking started
2021-03-11 20:24:06,918 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return foo() + foo("K")
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(0))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:06,919 [main:28] - Try №470 of 998
2021-03-11 20:24:06,927 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:24:06,928 [main:66] - Compilation checking started
2021-03-11 20:24:07,104 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(0))?.internal.toString(+42)
        return "OK"
    } catch (crossinline x: () -> Unit) {}
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:07,104 [main:28] - Try №471 of 998
2021-03-11 20:24:07,114 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 20:24:07,114 [main:28] - Try №472 of 998
2021-03-11 20:24:07,121 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:24:07,121 [main:66] - Compilation checking started
2021-03-11 20:24:07,296 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(0))?.internal.resume("OK")
        return "OK"
    } catch (e: NullPointerException) {}
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:07,297 [main:28] - Try №473 of 998
2021-03-11 20:24:07,300 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:07,301 [main:28] - Try №474 of 998
2021-03-11 20:24:07,304 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:07,304 [main:28] - Try №475 of 998
2021-03-11 20:24:07,317 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:24:07,317 [main:28] - Try №476 of 998
2021-03-11 20:24:07,323 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-11 20:24:07,324 [main:28] - Try №477 of 998
2021-03-11 20:24:07,336 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 20:24:07,336 [main:28] - Try №478 of 998
2021-03-11 20:24:07,345 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:24:07,345 [main:28] - Try №479 of 998
2021-03-11 20:24:07,353 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:24:07,353 [main:28] - Try №480 of 998
2021-03-11 20:24:07,363 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:07,363 [main:66] - Compilation checking started
2021-03-11 20:24:07,533 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): a {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(0))?.internal.toString(+42)
        return "OK"
    } catch (e: NullPointerException) {}
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:07,534 [main:28] - Try №481 of 998
2021-03-11 20:24:07,543 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:07,543 [main:66] - Compilation checking started
2021-03-11 20:24:07,723 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        (InlinedInt(0))?.internal.toString(+42)
        return "OK"
    } catch (e: String) {}
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:07,723 [main:28] - Try №482 of 998
2021-03-11 20:24:07,744 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:24:07,744 [main:28] - Try №483 of 998
2021-03-11 20:24:07,754 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:24:07,754 [main:28] - Try №484 of 998
2021-03-11 20:24:07,758 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:07,758 [main:28] - Try №485 of 998
2021-03-11 20:24:07,774 [main:33] - Trying to replace PsiElement(INTEGER_LITERAL) on PsiElement(INTEGER_LITERAL)
2021-03-11 20:24:07,774 [main:28] - Try №486 of 998
2021-03-11 20:24:07,788 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:24:07,788 [main:28] - Try №487 of 998
2021-03-11 20:24:07,797 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:24:07,797 [main:66] - Compilation checking started
2021-03-11 20:24:08,051 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: NullPointerException) {}
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:08,051 [main:28] - Try №488 of 998
2021-03-11 20:24:08,059 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:24:08,059 [main:28] - Try №489 of 998
2021-03-11 20:24:08,068 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:08,069 [main:66] - Compilation checking started
2021-03-11 20:24:08,233 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): String {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: NullPointerException) {}
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:08,233 [main:28] - Try №490 of 998
2021-03-11 20:24:08,243 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:24:08,243 [main:28] - Try №491 of 998
2021-03-11 20:24:08,253 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:08,253 [main:28] - Try №492 of 998
2021-03-11 20:24:08,259 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:24:08,259 [main:28] - Try №493 of 998
2021-03-11 20:24:08,263 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:08,264 [main:66] - Compilation checking started
2021-03-11 20:24:08,517 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (f: NullPointerException) {}
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:08,518 [main:28] - Try №494 of 998
2021-03-11 20:24:08,532 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 20:24:08,532 [main:28] - Try №495 of 998
2021-03-11 20:24:08,542 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 20:24:08,542 [main:28] - Try №496 of 998
2021-03-11 20:24:08,545 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:08,546 [main:28] - Try №497 of 998
2021-03-11 20:24:08,550 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:08,550 [main:28] - Try №498 of 998
2021-03-11 20:24:08,563 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-11 20:24:08,563 [main:28] - Try №499 of 998
2021-03-11 20:24:08,568 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:24:08,568 [main:66] - Compilation checking started
2021-03-11 20:24:08,569 [main:71] - Wrong syntax or breaks conditions
2021-03-11 20:24:08,569 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch () {}
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:08,569 [main:28] - Try №500 of 998
2021-03-11 20:24:08,576 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:24:08,577 [main:28] - Try №501 of 998
2021-03-11 20:24:08,589 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-11 20:24:08,589 [main:28] - Try №502 of 998
2021-03-11 20:24:08,602 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-11 20:24:08,602 [main:28] - Try №503 of 998
2021-03-11 20:24:08,616 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:24:08,617 [main:28] - Try №504 of 998
2021-03-11 20:24:08,623 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:24:08,623 [main:28] - Try №505 of 998
2021-03-11 20:24:08,641 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:24:08,641 [main:28] - Try №506 of 998
2021-03-11 20:24:08,660 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:24:08,660 [main:28] - Try №507 of 998
2021-03-11 20:24:08,665 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:24:08,665 [main:66] - Compilation checking started
2021-03-11 20:24:08,828 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (s: String) {}
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:08,829 [main:28] - Try №508 of 998
2021-03-11 20:24:08,835 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:24:08,835 [main:28] - Try №509 of 998
2021-03-11 20:24:08,839 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:08,839 [main:28] - Try №510 of 998
2021-03-11 20:24:08,853 [main:33] - Trying to replace Element(THEN) on Element(THEN)
2021-03-11 20:24:08,853 [main:28] - Try №511 of 998
2021-03-11 20:24:08,867 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 20:24:08,867 [main:28] - Try №512 of 998
2021-03-11 20:24:08,877 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:08,877 [main:28] - Try №513 of 998
2021-03-11 20:24:08,888 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 20:24:08,888 [main:28] - Try №514 of 998
2021-03-11 20:24:08,895 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:24:08,895 [main:28] - Try №515 of 998
2021-03-11 20:24:08,900 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:24:08,901 [main:66] - Compilation checking started
2021-03-11 20:24:08,901 [main:71] - Wrong syntax or breaks conditions
2021-03-11 20:24:08,902 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: a -> InlinedString): InlinedString {
    return callback()
}

fun M(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (f: NullPointerException) {}
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:08,902 [main:28] - Try №516 of 998
2021-03-11 20:24:08,911 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:08,911 [main:28] - Try №517 of 998
2021-03-11 20:24:08,915 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:08,916 [main:66] - Compilation checking started
2021-03-11 20:24:09,184 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (f: NullPointerException) {}
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:09,184 [main:28] - Try №518 of 998
2021-03-11 20:24:09,188 [main:33] - Trying to replace Element(TYPE_PARAMETER_LIST) on Element(TYPE_PARAMETER_LIST)
2021-03-11 20:24:09,188 [main:28] - Try №519 of 998
2021-03-11 20:24:09,197 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:09,198 [main:28] - Try №520 of 998
2021-03-11 20:24:09,205 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:24:09,205 [main:28] - Try №521 of 998
2021-03-11 20:24:09,219 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 20:24:09,219 [main:28] - Try №522 of 998
2021-03-11 20:24:09,223 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:09,223 [main:28] - Try №523 of 998
2021-03-11 20:24:09,232 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:24:09,232 [main:66] - Compilation checking started
2021-03-11 20:24:09,394 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (val x: Int) {}
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:09,394 [main:28] - Try №524 of 998
2021-03-11 20:24:09,399 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:09,399 [main:28] - Try №525 of 998
2021-03-11 20:24:09,403 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:24:09,403 [main:28] - Try №526 of 998
2021-03-11 20:24:09,413 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:09,413 [main:28] - Try №527 of 998
2021-03-11 20:24:09,426 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-11 20:24:09,426 [main:28] - Try №528 of 998
2021-03-11 20:24:09,438 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:24:09,438 [main:28] - Try №529 of 998
2021-03-11 20:24:09,441 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:09,442 [main:66] - Compilation checking started
2021-03-11 20:24:09,605 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return bar()
}

fun Boolean(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (f: NullPointerException) {}
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:09,606 [main:28] - Try №530 of 998
2021-03-11 20:24:09,615 [main:33] - Trying to replace PsiElement(COMMA) on PsiElement(COMMA)
2021-03-11 20:24:09,615 [main:28] - Try №531 of 998
2021-03-11 20:24:09,619 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:09,619 [main:66] - Compilation checking started
2021-03-11 20:24:09,785 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(i: String, message: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (f: NullPointerException) {}
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:09,785 [main:28] - Try №532 of 998
2021-03-11 20:24:09,792 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:24:09,792 [main:66] - Compilation checking started
2021-03-11 20:24:09,962 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return single()
}

fun Boolean(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (f: NullPointerException) {}
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:09,962 [main:28] - Try №533 of 998
2021-03-11 20:24:09,977 [main:33] - Trying to replace Element(CONDITION) on Element(CONDITION)
2021-03-11 20:24:09,977 [main:28] - Try №534 of 998
2021-03-11 20:24:09,993 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:24:09,993 [main:28] - Try №535 of 998
2021-03-11 20:24:10,011 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-11 20:24:10,012 [main:66] - Compilation checking started
2021-03-11 20:24:10,175 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz {a, b -> a + b}
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (f: NullPointerException) {}
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:10,175 [main:28] - Try №536 of 998
2021-03-11 20:24:10,190 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 20:24:10,190 [main:28] - Try №537 of 998
2021-03-11 20:24:10,195 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:10,195 [main:28] - Try №538 of 998
2021-03-11 20:24:10,212 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-11 20:24:10,213 [main:66] - Compilation checking started
2021-03-11 20:24:10,399 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz {
        xz = Z(42)
        xl = L(1234L)
        xs = Str("abc")
        xo = Obj("def")
    }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (f: NullPointerException) {}
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:10,399 [main:28] - Try №539 of 998
2021-03-11 20:24:10,405 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:24:10,406 [main:66] - Compilation checking started
2021-03-11 20:24:10,570 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    toString()
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (f: NullPointerException) {}
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:10,570 [main:28] - Try №540 of 998
2021-03-11 20:24:10,583 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 20:24:10,583 [main:28] - Try №541 of 998
2021-03-11 20:24:10,590 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:24:10,590 [main:28] - Try №542 of 998
2021-03-11 20:24:10,595 [main:33] - Trying to replace Element(MODIFIER_LIST) on Element(MODIFIER_LIST)
2021-03-11 20:24:10,596 [main:28] - Try №543 of 998
2021-03-11 20:24:10,601 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:24:10,602 [main:66] - Compilation checking started
2021-03-11 20:24:10,768 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(i: String, s: B) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (f: NullPointerException) {}
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:10,768 [main:28] - Try №544 of 998
2021-03-11 20:24:10,786 [main:33] - Trying to replace Element(TRY) on Element(TRY)
2021-03-11 20:24:10,786 [main:66] - Compilation checking started
2021-03-11 20:24:10,953 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        Color.valueOf("GREEN")
        return false
    }
    catch (e: Exception) {
        return true
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:10,953 [main:28] - Try №545 of 998
2021-03-11 20:24:10,967 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 20:24:10,967 [main:28] - Try №546 of 998
2021-03-11 20:24:10,977 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:10,977 [main:28] - Try №547 of 998
2021-03-11 20:24:10,992 [main:28] - Try №548 of 998
2021-03-11 20:24:11,001 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:11,002 [main:28] - Try №549 of 998
2021-03-11 20:24:11,013 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:24:11,013 [main:28] - Try №550 of 998
2021-03-11 20:24:11,017 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:11,017 [main:28] - Try №551 of 998
2021-03-11 20:24:11,021 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:11,021 [main:28] - Try №552 of 998
2021-03-11 20:24:11,030 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:11,030 [main:28] - Try №553 of 998
2021-03-11 20:24:11,046 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:11,046 [main:28] - Try №554 of 998
2021-03-11 20:24:11,060 [main:33] - Trying to replace Element(IF) on Element(IF)
2021-03-11 20:24:11,060 [main:28] - Try №555 of 998
2021-03-11 20:24:11,066 [main:33] - Trying to replace Element(MODIFIER_LIST) on Element(MODIFIER_LIST)
2021-03-11 20:24:11,066 [main:66] - Compilation checking started
2021-03-11 20:24:11,231 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inner fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (f: NullPointerException) {}
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:11,231 [main:28] - Try №556 of 998
2021-03-11 20:24:11,240 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:11,241 [main:28] - Try №557 of 998
2021-03-11 20:24:11,259 [main:33] - Trying to replace Element(SAFE_ACCESS_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 20:24:11,259 [main:28] - Try №558 of 998
2021-03-11 20:24:11,261 [main:33] - Trying to replace Element(CLASS) on Element(CLASS)
2021-03-11 20:24:11,262 [main:66] - Compilation checking started
2021-03-11 20:24:11,428 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
abstract class A {
    public open suspend fun public() {}
    protected open suspend fun protected() {}
    internal open suspend fun internal() {}
}

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (f: NullPointerException) {}
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:11,428 [main:28] - Try №559 of 998
2021-03-11 20:24:11,433 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:24:11,433 [main:66] - Compilation checking started
2021-03-11 20:24:11,599 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: (initializer: T) -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (f: NullPointerException) {}
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:11,599 [main:28] - Try №560 of 998
2021-03-11 20:24:11,603 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:11,603 [main:28] - Try №561 of 998
2021-03-11 20:24:11,609 [main:33] - Trying to replace Element(MODIFIER_LIST) on Element(MODIFIER_LIST)
2021-03-11 20:24:11,609 [main:28] - Try №562 of 998
2021-03-11 20:24:11,623 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:24:11,623 [main:28] - Try №563 of 998
2021-03-11 20:24:11,633 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:11,633 [main:28] - Try №564 of 998
2021-03-11 20:24:11,638 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:11,638 [main:28] - Try №565 of 998
2021-03-11 20:24:11,655 [main:33] - Trying to replace Element(CATCH) on Element(CATCH)
2021-03-11 20:24:11,656 [main:66] - Compilation checking started
2021-03-11 20:24:11,924 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:11,924 [main:28] - Try №566 of 998
2021-03-11 20:24:11,932 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:24:11,932 [main:28] - Try №567 of 998
2021-03-11 20:24:11,945 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 20:24:11,945 [main:28] - Try №568 of 998
2021-03-11 20:24:11,956 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:11,956 [main:28] - Try №569 of 998
2021-03-11 20:24:11,961 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:24:11,962 [main:66] - Compilation checking started
2021-03-11 20:24:12,133 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean() {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:12,133 [main:28] - Try №570 of 998
2021-03-11 20:24:12,143 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 20:24:12,143 [main:28] - Try №571 of 998
2021-03-11 20:24:12,153 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:24:12,154 [main:28] - Try №572 of 998
2021-03-11 20:24:12,162 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:24:12,162 [main:28] - Try №573 of 998
2021-03-11 20:24:12,174 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-11 20:24:12,174 [main:28] - Try №574 of 998
2021-03-11 20:24:12,186 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 20:24:12,187 [main:28] - Try №575 of 998
2021-03-11 20:24:12,203 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:24:12,203 [main:28] - Try №576 of 998
2021-03-11 20:24:12,219 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:24:12,219 [main:66] - Compilation checking started
2021-03-11 20:24:12,392 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { getO() + getK() }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:12,392 [main:28] - Try №577 of 998
2021-03-11 20:24:12,404 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:24:12,404 [main:28] - Try №578 of 998
2021-03-11 20:24:12,416 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-11 20:24:12,416 [main:28] - Try №579 of 998
2021-03-11 20:24:12,426 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 20:24:12,426 [main:28] - Try №580 of 998
2021-03-11 20:24:12,437 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:12,437 [main:66] - Compilation checking started
2021-03-11 20:24:12,629 [main:49] - Result = false
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): x {
    return callback()
}

fun Boolean(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:12,629 [main:28] - Try №581 of 998
2021-03-11 20:24:12,632 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:12,632 [main:28] - Try №582 of 998
2021-03-11 20:24:12,642 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:12,642 [main:28] - Try №583 of 998
2021-03-11 20:24:12,646 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:12,646 [main:28] - Try №584 of 998
2021-03-11 20:24:12,663 [main:33] - Trying to replace Element(CONDITION) on Element(CONDITION)
2021-03-11 20:24:12,663 [main:28] - Try №585 of 998
2021-03-11 20:24:12,667 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:12,667 [main:28] - Try №586 of 998
2021-03-11 20:24:12,671 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:12,671 [main:28] - Try №587 of 998
2021-03-11 20:24:12,675 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:12,675 [main:28] - Try №588 of 998
2021-03-11 20:24:12,685 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:24:12,685 [main:28] - Try №589 of 998
2021-03-11 20:24:12,696 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:24:12,696 [main:28] - Try №590 of 998
2021-03-11 20:24:12,704 [main:33] - Trying to replace Element(TYPE_PARAMETER) on Element(TYPE_PARAMETER)
2021-03-11 20:24:12,704 [main:28] - Try №591 of 998
2021-03-11 20:24:12,717 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-11 20:24:12,717 [main:28] - Try №592 of 998
2021-03-11 20:24:12,724 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:24:12,724 [main:28] - Try №593 of 998
2021-03-11 20:24:12,736 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 20:24:12,736 [main:28] - Try №594 of 998
2021-03-11 20:24:12,745 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:12,746 [main:28] - Try №595 of 998
2021-03-11 20:24:12,749 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:12,749 [main:66] - Compilation checking started
2021-03-11 20:24:13,004 [main:53] - Result = true
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:13,004 [main:28] - Try №596 of 998
2021-03-11 20:24:13,021 [main:33] - Trying to replace Element(FUNCTION_TYPE) on Element(FUNCTION_TYPE)
2021-03-11 20:24:13,021 [main:28] - Try №597 of 998
2021-03-11 20:24:13,031 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:13,031 [main:28] - Try №598 of 998
2021-03-11 20:24:13,035 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:13,035 [main:28] - Try №599 of 998
2021-03-11 20:24:13,044 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:13,044 [main:28] - Try №600 of 998
2021-03-11 20:24:13,058 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:24:13,058 [main:28] - Try №601 of 998
2021-03-11 20:24:13,070 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 20:24:13,070 [main:28] - Try №602 of 998
2021-03-11 20:24:13,081 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:24:13,081 [main:28] - Try №603 of 998
2021-03-11 20:24:13,087 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-11 20:24:13,087 [main:28] - Try №604 of 998
2021-03-11 20:24:13,099 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 20:24:13,099 [main:28] - Try №605 of 998
2021-03-11 20:24:13,111 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 20:24:13,111 [main:28] - Try №606 of 998
2021-03-11 20:24:13,116 [main:33] - Trying to replace Element(MODIFIER_LIST) on Element(MODIFIER_LIST)
2021-03-11 20:24:13,116 [main:28] - Try №607 of 998
2021-03-11 20:24:13,127 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:24:13,127 [main:28] - Try №608 of 998
2021-03-11 20:24:13,136 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:24:13,137 [main:66] - Compilation checking started
2021-03-11 20:24:13,301 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(i: String, a: Int) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:13,302 [main:28] - Try №609 of 998
2021-03-11 20:24:13,312 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 20:24:13,312 [main:28] - Try №610 of 998
2021-03-11 20:24:13,322 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:13,322 [main:28] - Try №611 of 998
2021-03-11 20:24:13,331 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:24:13,331 [main:28] - Try №612 of 998
2021-03-11 20:24:13,344 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:24:13,345 [main:28] - Try №613 of 998
2021-03-11 20:24:13,358 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:24:13,358 [main:28] - Try №614 of 998
2021-03-11 20:24:13,373 [main:33] - Trying to replace Element(CONDITION) on Element(CONDITION)
2021-03-11 20:24:13,373 [main:28] - Try №615 of 998
2021-03-11 20:24:13,377 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:13,377 [main:28] - Try №616 of 998
2021-03-11 20:24:13,380 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:13,380 [main:66] - Compilation checking started
2021-03-11 20:24:13,548 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return Delegate()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:13,548 [main:28] - Try №617 of 998
2021-03-11 20:24:13,555 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:24:13,555 [main:28] - Try №618 of 998
2021-03-11 20:24:13,571 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:24:13,571 [main:66] - Compilation checking started
2021-03-11 20:24:13,743 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz {
        a += A("K")
    }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:13,744 [main:28] - Try №619 of 998
2021-03-11 20:24:13,747 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:13,747 [main:28] - Try №620 of 998
2021-03-11 20:24:13,751 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:13,751 [main:28] - Try №621 of 998
2021-03-11 20:24:13,755 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:13,755 [main:28] - Try №622 of 998
2021-03-11 20:24:13,764 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:24:13,764 [main:66] - Compilation checking started
2021-03-11 20:24:13,936 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(val x: T): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(i: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:13,936 [main:28] - Try №623 of 998
2021-03-11 20:24:13,950 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:24:13,950 [main:28] - Try №624 of 998
2021-03-11 20:24:13,953 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-11 20:24:13,953 [main:28] - Try №625 of 998
2021-03-11 20:24:13,963 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 20:24:13,964 [main:28] - Try №626 of 998
2021-03-11 20:24:13,976 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 20:24:13,976 [main:28] - Try №627 of 998
2021-03-11 20:24:13,992 [main:33] - Trying to replace Element(LAMBDA_ARGUMENT) on Element(LAMBDA_ARGUMENT)
2021-03-11 20:24:13,992 [main:28] - Try №628 of 998
2021-03-11 20:24:14,000 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:24:14,000 [main:28] - Try №629 of 998
2021-03-11 20:24:14,006 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:24:14,006 [main:66] - Compilation checking started
2021-03-11 20:24:14,185 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(i: String, s: String) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:14,185 [main:28] - Try №630 of 998
2021-03-11 20:24:14,189 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:14,189 [main:28] - Try №631 of 998
2021-03-11 20:24:14,198 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:14,198 [main:28] - Try №632 of 998
2021-03-11 20:24:14,204 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:24:14,204 [main:28] - Try №633 of 998
2021-03-11 20:24:14,208 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:14,208 [main:66] - Compilation checking started
2021-03-11 20:24:14,463 [main:53] - Result = true
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(a: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:14,463 [main:28] - Try №634 of 998
2021-03-11 20:24:14,466 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:14,466 [main:28] - Try №635 of 998
2021-03-11 20:24:14,480 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:24:14,481 [main:28] - Try №636 of 998
2021-03-11 20:24:14,494 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-11 20:24:14,494 [main:28] - Try №637 of 998
2021-03-11 20:24:14,504 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:14,504 [main:28] - Try №638 of 998
2021-03-11 20:24:14,514 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:14,514 [main:28] - Try №639 of 998
2021-03-11 20:24:14,520 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:24:14,521 [main:28] - Try №640 of 998
2021-03-11 20:24:14,526 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-11 20:24:14,526 [main:28] - Try №641 of 998
2021-03-11 20:24:14,538 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 20:24:14,538 [main:28] - Try №642 of 998
2021-03-11 20:24:14,542 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:14,542 [main:28] - Try №643 of 998
2021-03-11 20:24:14,552 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 20:24:14,552 [main:28] - Try №644 of 998
2021-03-11 20:24:14,563 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:14,563 [main:28] - Try №645 of 998
2021-03-11 20:24:14,570 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:14,571 [main:28] - Try №646 of 998
2021-03-11 20:24:14,585 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 20:24:14,585 [main:28] - Try №647 of 998
2021-03-11 20:24:14,589 [main:33] - Trying to replace Element(CLASS_BODY) on Element(CLASS_BODY)
2021-03-11 20:24:14,590 [main:66] - Compilation checking started
2021-03-11 20:24:14,591 [main:71] - Wrong syntax or breaks conditions
2021-03-11 20:24:14,591 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(a: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    var result: String = "fail"

    operator fun get(name: String, type: String = "none") = name + inc + type

    operator fun set(name: String, s: String) {
        result = name + s;
    }
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:14,591 [main:28] - Try №648 of 998
2021-03-11 20:24:14,602 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 20:24:14,603 [main:28] - Try №649 of 998
2021-03-11 20:24:14,621 [main:33] - Trying to replace Element(SAFE_ACCESS_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 20:24:14,621 [main:28] - Try №650 of 998
2021-03-11 20:24:14,634 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:24:14,634 [main:28] - Try №651 of 998
2021-03-11 20:24:14,643 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:24:14,643 [main:28] - Try №652 of 998
2021-03-11 20:24:14,660 [main:33] - Trying to replace Element(TRY) on Element(TRY)
2021-03-11 20:24:14,660 [main:66] - Compilation checking started
2021-03-11 20:24:14,827 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(a: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        obj.wait(1)
        return "Fail: exception should have been thrown"
    }
    catch (e: IllegalMonitorStateException) {
        // OK
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:14,827 [main:28] - Try №653 of 998
2021-03-11 20:24:14,831 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:14,831 [main:28] - Try №654 of 998
2021-03-11 20:24:14,841 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:24:14,841 [main:66] - Compilation checking started
2021-03-11 20:24:15,013 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): JavaInterface {
    return callback()
}

fun Boolean(a: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:15,013 [main:28] - Try №655 of 998
2021-03-11 20:24:15,022 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:24:15,022 [main:28] - Try №656 of 998
2021-03-11 20:24:15,032 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:15,032 [main:28] - Try №657 of 998
2021-03-11 20:24:15,042 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:24:15,042 [main:28] - Try №658 of 998
2021-03-11 20:24:15,057 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 20:24:15,057 [main:28] - Try №659 of 998
2021-03-11 20:24:15,074 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-11 20:24:15,074 [main:28] - Try №660 of 998
2021-03-11 20:24:15,084 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:15,084 [main:66] - Compilation checking started
2021-03-11 20:24:15,251 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(a: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    Unit { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:15,251 [main:28] - Try №661 of 998
2021-03-11 20:24:15,271 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 20:24:15,271 [main:28] - Try №662 of 998
2021-03-11 20:24:15,288 [main:33] - Trying to replace Element(SAFE_ACCESS_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 20:24:15,289 [main:28] - Try №663 of 998
2021-03-11 20:24:15,304 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:24:15,304 [main:28] - Try №664 of 998
2021-03-11 20:24:15,319 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 20:24:15,320 [main:28] - Try №665 of 998
2021-03-11 20:24:15,332 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:24:15,332 [main:28] - Try №666 of 998
2021-03-11 20:24:15,335 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:15,335 [main:28] - Try №667 of 998
2021-03-11 20:24:15,340 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:24:15,341 [main:28] - Try №668 of 998
2021-03-11 20:24:15,347 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:24:15,347 [main:66] - Compilation checking started
2021-03-11 20:24:15,517 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: C): InlinedString {
    return callback()
}

fun Boolean(a: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:15,517 [main:28] - Try №669 of 998
2021-03-11 20:24:15,529 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-11 20:24:15,530 [main:66] - Compilation checking started
2021-03-11 20:24:15,701 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return "OK"
}

fun Boolean(a: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:15,701 [main:28] - Try №670 of 998
2021-03-11 20:24:15,706 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:24:15,706 [main:28] - Try №671 of 998
2021-03-11 20:24:15,711 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-11 20:24:15,712 [main:28] - Try №672 of 998
2021-03-11 20:24:15,719 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:24:15,720 [main:28] - Try №673 of 998
2021-03-11 20:24:15,725 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-11 20:24:15,725 [main:28] - Try №674 of 998
2021-03-11 20:24:15,731 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:24:15,732 [main:28] - Try №675 of 998
2021-03-11 20:24:15,738 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:24:15,738 [main:66] - Compilation checking started
2021-03-11 20:24:15,910 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> String): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(a: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:15,910 [main:28] - Try №676 of 998
2021-03-11 20:24:15,920 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:15,920 [main:28] - Try №677 of 998
2021-03-11 20:24:15,929 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:15,929 [main:28] - Try №678 of 998
2021-03-11 20:24:15,972 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(PARENTHESIZED)
2021-03-11 20:24:15,972 [main:28] - Try №679 of 998
2021-03-11 20:24:15,986 [main:33] - Trying to replace Element(CONDITION) on Element(CONDITION)
2021-03-11 20:24:15,986 [main:28] - Try №680 of 998
2021-03-11 20:24:15,992 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:24:15,992 [main:28] - Try №681 of 998
2021-03-11 20:24:15,999 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:24:15,999 [main:28] - Try №682 of 998
2021-03-11 20:24:16,008 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:16,008 [main:28] - Try №683 of 998
2021-03-11 20:24:16,020 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:24:16,021 [main:28] - Try №684 of 998
2021-03-11 20:24:16,027 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:24:16,027 [main:66] - Compilation checking started
2021-03-11 20:24:16,196 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
            return Some(v)
        }

fun Boolean(a: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:16,196 [main:28] - Try №685 of 998
2021-03-11 20:24:16,199 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:16,199 [main:28] - Try №686 of 998
2021-03-11 20:24:16,206 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-11 20:24:16,206 [main:28] - Try №687 of 998
2021-03-11 20:24:16,219 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:24:16,219 [main:28] - Try №688 of 998
2021-03-11 20:24:16,229 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 20:24:16,229 [main:28] - Try №689 of 998
2021-03-11 20:24:16,245 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:24:16,245 [main:28] - Try №690 of 998
2021-03-11 20:24:16,249 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:16,249 [main:66] - Compilation checking started
2021-03-11 20:24:16,415 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> zeroSlot): InlinedString {
    return callback()
}

fun Boolean(a: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:16,416 [main:28] - Try №691 of 998
2021-03-11 20:24:16,419 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:16,419 [main:28] - Try №692 of 998
2021-03-11 20:24:16,428 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:24:16,428 [main:28] - Try №693 of 998
2021-03-11 20:24:16,441 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:24:16,441 [main:28] - Try №694 of 998
2021-03-11 20:24:16,455 [main:33] - Trying to replace PsiElement(COMMA) on PsiElement(COMMA)
2021-03-11 20:24:16,455 [main:28] - Try №695 of 998
2021-03-11 20:24:16,460 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:16,460 [main:28] - Try №696 of 998
2021-03-11 20:24:16,480 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-11 20:24:16,480 [main:28] - Try №697 of 998
2021-03-11 20:24:16,494 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:24:16,494 [main:28] - Try №698 of 998
2021-03-11 20:24:16,510 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-11 20:24:16,510 [main:66] - Compilation checking started
2021-03-11 20:24:16,681 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(a: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz {
        val value = generate().value
    }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:16,681 [main:28] - Try №699 of 998
2021-03-11 20:24:16,685 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:16,686 [main:66] - Compilation checking started
2021-03-11 20:24:16,857 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(a: String, Z: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:16,857 [main:28] - Try №700 of 998
2021-03-11 20:24:16,867 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 20:24:16,867 [main:28] - Try №701 of 998
2021-03-11 20:24:16,877 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 20:24:16,878 [main:28] - Try №702 of 998
2021-03-11 20:24:16,884 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:24:16,884 [main:28] - Try №703 of 998
2021-03-11 20:24:16,894 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:24:16,894 [main:28] - Try №704 of 998
2021-03-11 20:24:16,905 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:24:16,905 [main:28] - Try №705 of 998
2021-03-11 20:24:16,920 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-11 20:24:16,920 [main:28] - Try №706 of 998
2021-03-11 20:24:16,928 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:24:16,928 [main:28] - Try №707 of 998
2021-03-11 20:24:16,932 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:16,932 [main:28] - Try №708 of 998
2021-03-11 20:24:16,945 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-11 20:24:16,945 [main:28] - Try №709 of 998
2021-03-11 20:24:16,950 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-11 20:24:16,951 [main:28] - Try №710 of 998
2021-03-11 20:24:16,964 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 20:24:16,965 [main:28] - Try №711 of 998
2021-03-11 20:24:16,969 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:24:16,969 [main:28] - Try №712 of 998
2021-03-11 20:24:16,985 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:24:16,986 [main:66] - Compilation checking started
2021-03-11 20:24:17,151 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(a: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:17,152 [main:28] - Try №713 of 998
2021-03-11 20:24:17,162 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 20:24:17,162 [main:28] - Try №714 of 998
2021-03-11 20:24:17,169 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:24:17,169 [main:28] - Try №715 of 998
2021-03-11 20:24:17,228 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:24:17,228 [main:66] - Compilation checking started
2021-03-11 20:24:17,228 [main:68] - Already checked
2021-03-11 20:24:17,228 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> String): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(a: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:17,228 [main:28] - Try №716 of 998
2021-03-11 20:24:17,242 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-11 20:24:17,243 [main:28] - Try №717 of 998
2021-03-11 20:24:17,249 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:24:17,249 [main:66] - Compilation checking started
2021-03-11 20:24:17,415 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): T {
    return callback()
}

fun Boolean(a: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:17,415 [main:28] - Try №718 of 998
2021-03-11 20:24:17,419 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:17,419 [main:28] - Try №719 of 998
2021-03-11 20:24:17,430 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:24:17,430 [main:28] - Try №720 of 998
2021-03-11 20:24:17,435 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:24:17,435 [main:28] - Try №721 of 998
2021-03-11 20:24:17,439 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:17,439 [main:66] - Compilation checking started
2021-03-11 20:24:17,698 [main:53] - Result = true
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun Int(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(a: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:17,698 [main:28] - Try №722 of 998
2021-03-11 20:24:17,731 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:24:17,732 [main:28] - Try №723 of 998
2021-03-11 20:24:17,745 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:24:17,745 [main:28] - Try №724 of 998
2021-03-11 20:24:17,751 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:24:17,752 [main:28] - Try №725 of 998
2021-03-11 20:24:17,761 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 20:24:17,762 [main:28] - Try №726 of 998
2021-03-11 20:24:17,772 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:24:17,772 [main:28] - Try №727 of 998
2021-03-11 20:24:17,785 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-11 20:24:17,785 [main:28] - Try №728 of 998
2021-03-11 20:24:17,796 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-11 20:24:17,797 [main:28] - Try №729 of 998
2021-03-11 20:24:17,800 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:17,800 [main:28] - Try №730 of 998
2021-03-11 20:24:17,809 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:17,809 [main:66] - Compilation checking started
2021-03-11 20:24:17,975 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun Int(callback: () -> InlinedInt): InlinedString {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(a: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:17,975 [main:28] - Try №731 of 998
2021-03-11 20:24:17,984 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:24:17,984 [main:28] - Try №732 of 998
2021-03-11 20:24:17,994 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:17,994 [main:28] - Try №733 of 998
2021-03-11 20:24:18,001 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:24:18,001 [main:28] - Try №734 of 998
2021-03-11 20:24:18,015 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-11 20:24:18,015 [main:28] - Try №735 of 998
2021-03-11 20:24:18,018 [main:33] - Trying to replace Element(CLASS) on Element(CLASS)
2021-03-11 20:24:18,019 [main:66] - Compilation checking started
2021-03-11 20:24:18,021 [main:71] - Wrong syntax or breaks conditions
2021-03-11 20:24:18,021 [main:49] - Result = false
Text:
public class JOuter<O1, O2> {

    public O1 o1;
    public O2 o2;

    public JOuter(O1 a1, O2 a2) {
        this.o1 = a1;
        this.o2 = a2;
    }

    public JInner<Box<O1>, ?> instance(O1 s1, O2 s2) {
        return new JInner<Box<O1>, O2>(new Box(s1), s2);
    }

    public JStatic<?, Box<O2>> staticInstance() {
        return new JStatic<O1, Box<O2>>(o1, new Box(o2));
    }

    public class JInner<I1, I2> {

        public I1 i1;
        public I2 i2;

        public JInner(I1 a1, I2 a2) {
            this.i1 = a1;
            this.i2 = a2;
        }

        public String getFoo() {
            String s1 = (String)o1;
            String s2 = ((Box<String>)i1).f;
            return s1 + s2;
        }

        public String getBar() {
            String s1 = (String)o2;
            String s2 = (String)i2;
            return s1 + s2;
        }
    }

    public static class JStatic<S1, S2> {
        public S1 ss1;
        public S2 ss2;

        public JStatic(S1 a1, S2 a2) {
            this.ss1 = a1;
            this.ss2 = a2;
        }

        public String getQux() {
            String s1 = (String)ss1;
            String s2 = ((Box<String>)ss2).f;
            return s1 + s2;
        }
    }
}
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun Int(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(a: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:18,021 [main:28] - Try №736 of 998
2021-03-11 20:24:18,027 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:18,027 [main:28] - Try №737 of 998
2021-03-11 20:24:18,040 [main:33] - Trying to replace Element(PROPERTY) on Element(PROPERTY)
2021-03-11 20:24:18,040 [main:28] - Try №738 of 998
2021-03-11 20:24:18,050 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:18,050 [main:28] - Try №739 of 998
2021-03-11 20:24:18,062 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-11 20:24:18,062 [main:28] - Try №740 of 998
2021-03-11 20:24:18,066 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:18,066 [main:28] - Try №741 of 998
2021-03-11 20:24:18,070 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:18,070 [main:28] - Try №742 of 998
2021-03-11 20:24:18,079 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:18,079 [main:28] - Try №743 of 998
2021-03-11 20:24:18,082 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:18,083 [main:28] - Try №744 of 998
2021-03-11 20:24:18,089 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:24:18,090 [main:66] - Compilation checking started
2021-03-11 20:24:18,091 [main:71] - Wrong syntax or breaks conditions
2021-03-11 20:24:18,091 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun Int(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(a: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try s catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:18,091 [main:28] - Try №745 of 998
2021-03-11 20:24:18,096 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:18,096 [main:28] - Try №746 of 998
2021-03-11 20:24:18,110 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:24:18,110 [main:28] - Try №747 of 998
2021-03-11 20:24:18,115 [main:33] - Trying to replace Element(MODIFIER_LIST) on Element(MODIFIER_LIST)
2021-03-11 20:24:18,115 [main:28] - Try №748 of 998
2021-03-11 20:24:18,122 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:24:18,122 [main:28] - Try №749 of 998
2021-03-11 20:24:18,135 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:24:18,135 [main:28] - Try №750 of 998
2021-03-11 20:24:18,152 [main:33] - Trying to replace PsiElement(ARROW) on PsiElement(ARROW)
2021-03-11 20:24:18,152 [main:28] - Try №751 of 998
2021-03-11 20:24:18,159 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:24:18,159 [main:28] - Try №752 of 998
2021-03-11 20:24:18,162 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:18,162 [main:28] - Try №753 of 998
2021-03-11 20:24:18,175 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-11 20:24:18,175 [main:28] - Try №754 of 998
2021-03-11 20:24:18,185 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:24:18,185 [main:28] - Try №755 of 998
2021-03-11 20:24:18,190 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:18,190 [main:28] - Try №756 of 998
2021-03-11 20:24:18,204 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:24:18,204 [main:28] - Try №757 of 998
2021-03-11 20:24:18,208 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:24:18,208 [main:28] - Try №758 of 998
2021-03-11 20:24:18,215 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:24:18,215 [main:66] - Compilation checking started
2021-03-11 20:24:18,380 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun Int(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(a: String, s: Char) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:18,380 [main:28] - Try №759 of 998
2021-03-11 20:24:18,395 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 20:24:18,395 [main:28] - Try №760 of 998
2021-03-11 20:24:18,404 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:18,404 [main:28] - Try №761 of 998
2021-03-11 20:24:18,408 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:18,408 [main:28] - Try №762 of 998
2021-03-11 20:24:18,411 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:18,411 [main:28] - Try №763 of 998
2021-03-11 20:24:18,418 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:24:18,418 [main:28] - Try №764 of 998
2021-03-11 20:24:18,422 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:18,422 [main:28] - Try №765 of 998
2021-03-11 20:24:18,436 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:24:18,436 [main:28] - Try №766 of 998
2021-03-11 20:24:18,442 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:24:18,442 [main:28] - Try №767 of 998
2021-03-11 20:24:18,455 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:24:18,455 [main:28] - Try №768 of 998
2021-03-11 20:24:18,459 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:18,459 [main:66] - Compilation checking started
2021-03-11 20:24:18,628 [main:49] - Result = false
Text:
inline class e(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun Int(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(a: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:18,628 [main:28] - Try №769 of 998
2021-03-11 20:24:18,634 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:24:18,635 [main:28] - Try №770 of 998
2021-03-11 20:24:18,647 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:24:18,647 [main:28] - Try №771 of 998
2021-03-11 20:24:18,655 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:24:18,656 [main:28] - Try №772 of 998
2021-03-11 20:24:18,668 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 20:24:18,668 [main:28] - Try №773 of 998
2021-03-11 20:24:18,678 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:24:18,678 [main:28] - Try №774 of 998
2021-03-11 20:24:18,692 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:24:18,692 [main:28] - Try №775 of 998
2021-03-11 20:24:18,701 [main:33] - Trying to replace PsiElement(COMMA) on PsiElement(COMMA)
2021-03-11 20:24:18,701 [main:28] - Try №776 of 998
2021-03-11 20:24:18,706 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:24:18,706 [main:28] - Try №777 of 998
2021-03-11 20:24:18,713 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:24:18,714 [main:28] - Try №778 of 998
2021-03-11 20:24:18,717 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:18,717 [main:66] - Compilation checking started
2021-03-11 20:24:18,892 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun Int(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(a: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    String { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:18,892 [main:28] - Try №779 of 998
2021-03-11 20:24:18,910 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:24:18,910 [main:28] - Try №780 of 998
2021-03-11 20:24:18,924 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:24:18,924 [main:28] - Try №781 of 998
2021-03-11 20:24:18,930 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:24:18,930 [main:66] - Compilation checking started
2021-03-11 20:24:19,098 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun Int(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(a: String, s: Int) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:19,098 [main:28] - Try №782 of 998
2021-03-11 20:24:19,104 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-11 20:24:19,104 [main:28] - Try №783 of 998
2021-03-11 20:24:19,118 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 20:24:19,119 [main:28] - Try №784 of 998
2021-03-11 20:24:19,126 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:24:19,127 [main:28] - Try №785 of 998
2021-03-11 20:24:19,136 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:19,137 [main:28] - Try №786 of 998
2021-03-11 20:24:19,142 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-11 20:24:19,142 [main:28] - Try №787 of 998
2021-03-11 20:24:19,146 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:24:19,146 [main:28] - Try №788 of 998
2021-03-11 20:24:19,149 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:19,150 [main:28] - Try №789 of 998
2021-03-11 20:24:19,159 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:19,159 [main:66] - Compilation checking started
2021-03-11 20:24:19,325 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun Int(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): JvmMultifileClass {
    return callback()
}

fun Boolean(a: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class i {
    OK
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:19,325 [main:28] - Try №790 of 998
2021-03-11 20:24:19,331 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:24:19,331 [main:28] - Try №791 of 998
2021-03-11 20:24:19,335 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:24:19,336 [main:28] - Try №792 of 998
2021-03-11 20:24:19,349 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:24:19,349 [main:28] - Try №793 of 998
2021-03-11 20:24:19,362 [main:33] - Trying to replace Element(IF) on Element(IF)
2021-03-11 20:24:19,362 [main:28] - Try №794 of 998
2021-03-11 20:24:19,364 [main:33] - Trying to replace Element(CLASS) on Element(CLASS)
2021-03-11 20:24:19,365 [main:66] - Compilation checking started
2021-03-11 20:24:19,638 [main:53] - Result = true
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun Int(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(a: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class E {
    ENTRY
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:19,638 [main:28] - Try №795 of 998
2021-03-11 20:24:19,647 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:19,648 [main:66] - Compilation checking started
2021-03-11 20:24:19,814 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun Int(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> c): InlinedString {
    return callback()
}

fun Boolean(a: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class E {
    ENTRY
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:19,814 [main:28] - Try №796 of 998
2021-03-11 20:24:19,823 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:24:19,823 [main:28] - Try №797 of 998
2021-03-11 20:24:19,829 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:24:19,830 [main:28] - Try №798 of 998
2021-03-11 20:24:19,835 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-11 20:24:19,835 [main:28] - Try №799 of 998
2021-03-11 20:24:19,840 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:24:19,840 [main:28] - Try №800 of 998
2021-03-11 20:24:19,847 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:24:19,847 [main:28] - Try №801 of 998
2021-03-11 20:24:19,850 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:19,851 [main:28] - Try №802 of 998
2021-03-11 20:24:19,860 [main:33] - Trying to replace PsiElement(COMMA) on PsiElement(COMMA)
2021-03-11 20:24:19,860 [main:28] - Try №803 of 998
2021-03-11 20:24:19,877 [main:28] - Try №804 of 998
2021-03-11 20:24:19,881 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:19,881 [main:28] - Try №805 of 998
2021-03-11 20:24:19,892 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-11 20:24:19,892 [main:28] - Try №806 of 998
2021-03-11 20:24:19,906 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 20:24:19,907 [main:28] - Try №807 of 998
2021-03-11 20:24:19,916 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:19,916 [main:28] - Try №808 of 998
2021-03-11 20:24:19,931 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:24:19,931 [main:28] - Try №809 of 998
2021-03-11 20:24:19,946 [main:33] - Trying to replace Element(FUNCTION_TYPE) on Element(FUNCTION_TYPE)
2021-03-11 20:24:19,947 [main:28] - Try №810 of 998
2021-03-11 20:24:19,956 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 20:24:19,956 [main:28] - Try №811 of 998
2021-03-11 20:24:19,969 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:24:19,969 [main:28] - Try №812 of 998
2021-03-11 20:24:19,975 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:24:19,975 [main:28] - Try №813 of 998
2021-03-11 20:24:19,984 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:24:19,984 [main:28] - Try №814 of 998
2021-03-11 20:24:19,987 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:19,987 [main:28] - Try №815 of 998
2021-03-11 20:24:20,003 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 20:24:20,003 [main:28] - Try №816 of 998
2021-03-11 20:24:20,008 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:24:20,008 [main:66] - Compilation checking started
2021-03-11 20:24:20,188 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun Int(): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(a: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class E {
    ENTRY
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:20,188 [main:28] - Try №817 of 998
2021-03-11 20:24:20,192 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:20,192 [main:28] - Try №818 of 998
2021-03-11 20:24:20,202 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 20:24:20,202 [main:28] - Try №819 of 998
2021-03-11 20:24:20,209 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:24:20,210 [main:28] - Try №820 of 998
2021-03-11 20:24:20,226 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-11 20:24:20,226 [main:28] - Try №821 of 998
2021-03-11 20:24:20,234 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:24:20,234 [main:28] - Try №822 of 998
2021-03-11 20:24:20,240 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:24:20,240 [main:28] - Try №823 of 998
2021-03-11 20:24:20,244 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:20,244 [main:66] - Compilation checking started
2021-03-11 20:24:20,426 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int)
inline class assertEquals(val str: String = "OK")

suspend fun main() {}

suspend fun Int(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(a: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class E {
    ENTRY
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:20,426 [main:28] - Try №824 of 998
2021-03-11 20:24:20,435 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:20,435 [main:28] - Try №825 of 998
2021-03-11 20:24:20,442 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:24:20,442 [main:66] - Compilation checking started
2021-03-11 20:24:20,606 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun Int(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return init()
}

fun Boolean(a: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class E {
    ENTRY
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:20,606 [main:28] - Try №826 of 998
2021-03-11 20:24:20,623 [main:28] - Try №827 of 998
2021-03-11 20:24:20,632 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:20,632 [main:66] - Compilation checking started
2021-03-11 20:24:20,799 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun Int(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): message {
    return callback()
}

fun Boolean(a: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class E {
    ENTRY
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:20,799 [main:28] - Try №828 of 998
2021-03-11 20:24:20,809 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:20,809 [main:28] - Try №829 of 998
2021-03-11 20:24:20,827 [main:33] - Trying to replace Element(SAFE_ACCESS_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 20:24:20,827 [main:28] - Try №830 of 998
2021-03-11 20:24:20,836 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:24:20,836 [main:28] - Try №831 of 998
2021-03-11 20:24:20,841 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:24:20,841 [main:28] - Try №832 of 998
2021-03-11 20:24:20,854 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:24:20,854 [main:28] - Try №833 of 998
2021-03-11 20:24:20,864 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:24:20,865 [main:28] - Try №834 of 998
2021-03-11 20:24:20,881 [main:33] - Trying to replace PsiElement(ARROW) on PsiElement(ARROW)
2021-03-11 20:24:20,881 [main:28] - Try №835 of 998
2021-03-11 20:24:20,894 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:24:20,894 [main:28] - Try №836 of 998
2021-03-11 20:24:20,897 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-11 20:24:20,897 [main:66] - Compilation checking started
2021-03-11 20:24:21,096 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun Int(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

fun testUIntProgressionForEach() {
    var s = 0
    (5u downTo 1u).forEach {
        s = s * 10 + it.toInt()
    }
    if (s != 54321) throw AssertionError("$s")
}

fun Boolean(a: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class E {
    ENTRY
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:21,096 [main:28] - Try №837 of 998
2021-03-11 20:24:21,103 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:24:21,103 [main:66] - Compilation checking started
2021-03-11 20:24:21,271 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun Int(callback: () -> InlinedInt): String {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(a: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class E {
    ENTRY
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:21,271 [main:28] - Try №838 of 998
2021-03-11 20:24:21,282 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:24:21,283 [main:28] - Try №839 of 998
2021-03-11 20:24:21,299 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:24:21,299 [main:66] - Compilation checking started
2021-03-11 20:24:21,479 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun Int(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(a: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz {it}
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class E {
    ENTRY
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:21,479 [main:28] - Try №840 of 998
2021-03-11 20:24:21,491 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:21,491 [main:28] - Try №841 of 998
2021-03-11 20:24:21,493 [main:33] - Trying to replace Element(IMPORT_LIST) on Element(IMPORT_LIST)
2021-03-11 20:24:21,493 [main:66] - Compilation checking started
2021-03-11 20:24:21,494 [main:68] - Already checked
2021-03-11 20:24:21,494 [main:28] - Try №842 of 998
2021-03-11 20:24:21,496 [main:33] - Trying to replace Element(FUN) on Element(FUN)
2021-03-11 20:24:21,497 [main:28] - Try №843 of 998
2021-03-11 20:24:21,507 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 20:24:21,507 [main:28] - Try №844 of 998
2021-03-11 20:24:21,518 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:24:21,518 [main:28] - Try №845 of 998
2021-03-11 20:24:21,528 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 20:24:21,528 [main:28] - Try №846 of 998
2021-03-11 20:24:21,535 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:24:21,535 [main:28] - Try №847 of 998
2021-03-11 20:24:21,540 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:24:21,540 [main:66] - Compilation checking started
2021-03-11 20:24:21,718 [main:49] - Result = false
Text:
inline class InlinedInt()
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun Int(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(a: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class E {
    ENTRY
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:21,718 [main:28] - Try №848 of 998
2021-03-11 20:24:21,722 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:21,722 [main:28] - Try №849 of 998
2021-03-11 20:24:21,727 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:21,727 [main:28] - Try №850 of 998
2021-03-11 20:24:21,744 [main:33] - Trying to replace Element(LAMBDA_ARGUMENT) on Element(LAMBDA_ARGUMENT)
2021-03-11 20:24:21,744 [main:28] - Try №851 of 998
2021-03-11 20:24:21,754 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:24:21,754 [main:28] - Try №852 of 998
2021-03-11 20:24:21,758 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:21,758 [main:28] - Try №853 of 998
2021-03-11 20:24:21,766 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:24:21,766 [main:28] - Try №854 of 998
2021-03-11 20:24:21,785 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-11 20:24:21,785 [main:28] - Try №855 of 998
2021-03-11 20:24:21,799 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:24:21,799 [main:28] - Try №856 of 998
2021-03-11 20:24:21,804 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-11 20:24:21,805 [main:28] - Try №857 of 998
2021-03-11 20:24:21,814 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:21,814 [main:28] - Try №858 of 998
2021-03-11 20:24:21,820 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:24:21,820 [main:28] - Try №859 of 998
2021-03-11 20:24:21,831 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:24:21,831 [main:28] - Try №860 of 998
2021-03-11 20:24:21,835 [main:33] - Trying to replace Element(PRIMARY_CONSTRUCTOR) on Element(PRIMARY_CONSTRUCTOR)
2021-03-11 20:24:21,835 [main:28] - Try №861 of 998
2021-03-11 20:24:21,839 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:21,839 [main:28] - Try №862 of 998
2021-03-11 20:24:21,847 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:24:21,848 [main:28] - Try №863 of 998
2021-03-11 20:24:21,851 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:21,851 [main:28] - Try №864 of 998
2021-03-11 20:24:21,855 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:21,855 [main:28] - Try №865 of 998
2021-03-11 20:24:21,865 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:24:21,865 [main:28] - Try №866 of 998
2021-03-11 20:24:21,875 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:21,875 [main:28] - Try №867 of 998
2021-03-11 20:24:21,888 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:24:21,889 [main:28] - Try №868 of 998
2021-03-11 20:24:21,893 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:24:21,893 [main:28] - Try №869 of 998
2021-03-11 20:24:21,901 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:24:21,901 [main:28] - Try №870 of 998
2021-03-11 20:24:21,904 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:21,904 [main:66] - Compilation checking started
2021-03-11 20:24:22,077 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun Int(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun box(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(a: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class E {
    ENTRY
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:22,077 [main:28] - Try №871 of 998
2021-03-11 20:24:22,081 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:22,081 [main:28] - Try №872 of 998
2021-03-11 20:24:22,084 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:22,084 [main:66] - Compilation checking started
2021-03-11 20:24:22,084 [main:68] - Already checked
2021-03-11 20:24:22,084 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun Int(callback: () -> InlinedInt): String {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(a: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class E {
    ENTRY
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:22,084 [main:28] - Try №873 of 998
2021-03-11 20:24:22,096 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 20:24:22,097 [main:28] - Try №874 of 998
2021-03-11 20:24:22,108 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:24:22,108 [main:28] - Try №875 of 998
2021-03-11 20:24:22,120 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:24:22,120 [main:28] - Try №876 of 998
2021-03-11 20:24:22,132 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:24:22,133 [main:28] - Try №877 of 998
2021-03-11 20:24:22,143 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:24:22,143 [main:28] - Try №878 of 998
2021-03-11 20:24:22,150 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:24:22,150 [main:28] - Try №879 of 998
2021-03-11 20:24:22,154 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:22,154 [main:28] - Try №880 of 998
2021-03-11 20:24:22,157 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:22,158 [main:28] - Try №881 of 998
2021-03-11 20:24:22,162 [main:33] - Trying to replace PsiElement(COLON) on PsiElement(COLON)
2021-03-11 20:24:22,162 [main:28] - Try №882 of 998
2021-03-11 20:24:22,171 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:22,172 [main:28] - Try №883 of 998
2021-03-11 20:24:22,184 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:24:22,184 [main:28] - Try №884 of 998
2021-03-11 20:24:22,190 [main:33] - Trying to replace Element(MODIFIER_LIST) on Element(MODIFIER_LIST)
2021-03-11 20:24:22,190 [main:28] - Try №885 of 998
2021-03-11 20:24:22,194 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:22,194 [main:28] - Try №886 of 998
2021-03-11 20:24:22,208 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-11 20:24:22,208 [main:28] - Try №887 of 998
2021-03-11 20:24:22,220 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 20:24:22,220 [main:28] - Try №888 of 998
2021-03-11 20:24:22,228 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:24:22,228 [main:28] - Try №889 of 998
2021-03-11 20:24:22,233 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-11 20:24:22,233 [main:28] - Try №890 of 998
2021-03-11 20:24:22,246 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:24:22,246 [main:28] - Try №891 of 998
2021-03-11 20:24:22,262 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:24:22,262 [main:28] - Try №892 of 998
2021-03-11 20:24:22,270 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:24:22,270 [main:28] - Try №893 of 998
2021-03-11 20:24:22,274 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:22,275 [main:66] - Compilation checking started
2021-03-11 20:24:22,441 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun Int(callback: () -> AssertionError): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(a: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class E {
    ENTRY
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:22,441 [main:28] - Try №894 of 998
2021-03-11 20:24:22,448 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:24:22,448 [main:66] - Compilation checking started
2021-03-11 20:24:22,623 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun Int(callback: () -> String): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(a: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class E {
    ENTRY
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:22,623 [main:28] - Try №895 of 998
2021-03-11 20:24:22,631 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:24:22,631 [main:28] - Try №896 of 998
2021-03-11 20:24:22,644 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-11 20:24:22,644 [main:28] - Try №897 of 998
2021-03-11 20:24:22,649 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:24:22,649 [main:28] - Try №898 of 998
2021-03-11 20:24:22,665 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 20:24:22,666 [main:28] - Try №899 of 998
2021-03-11 20:24:22,675 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:22,675 [main:28] - Try №900 of 998
2021-03-11 20:24:22,687 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:24:22,688 [main:28] - Try №901 of 998
2021-03-11 20:24:22,699 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-11 20:24:22,699 [main:28] - Try №902 of 998
2021-03-11 20:24:22,712 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:24:22,712 [main:28] - Try №903 of 998
2021-03-11 20:24:22,716 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:22,716 [main:28] - Try №904 of 998
2021-03-11 20:24:22,723 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:24:22,723 [main:28] - Try №905 of 998
2021-03-11 20:24:22,729 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:24:22,729 [main:28] - Try №906 of 998
2021-03-11 20:24:22,738 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:22,739 [main:66] - Compilation checking started
2021-03-11 20:24:22,904 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun Int(callback: () -> a): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(a: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class E {
    ENTRY
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:22,904 [main:28] - Try №907 of 998
2021-03-11 20:24:22,911 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:24:22,911 [main:28] - Try №908 of 998
2021-03-11 20:24:22,918 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:24:22,918 [main:66] - Compilation checking started
2021-03-11 20:24:23,084 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun Int(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(a: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class E {
    ENTRY
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): () -> Unit {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:23,085 [main:28] - Try №909 of 998
2021-03-11 20:24:23,091 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:24:23,091 [main:66] - Compilation checking started
2021-03-11 20:24:23,264 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun Int(callback: () -> Int): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(a: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class E {
    ENTRY
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:23,264 [main:28] - Try №910 of 998
2021-03-11 20:24:23,277 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 20:24:23,277 [main:28] - Try №911 of 998
2021-03-11 20:24:23,284 [main:33] - Trying to replace Element(TYPE_PARAMETER) on Element(TYPE_PARAMETER)
2021-03-11 20:24:23,284 [main:28] - Try №912 of 998
2021-03-11 20:24:23,297 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:24:23,297 [main:28] - Try №913 of 998
2021-03-11 20:24:23,307 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:23,307 [main:28] - Try №914 of 998
2021-03-11 20:24:23,315 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:24:23,316 [main:28] - Try №915 of 998
2021-03-11 20:24:23,322 [main:33] - Trying to replace Element(MODIFIER_LIST) on Element(MODIFIER_LIST)
2021-03-11 20:24:23,322 [main:28] - Try №916 of 998
2021-03-11 20:24:23,331 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:23,331 [main:28] - Try №917 of 998
2021-03-11 20:24:23,343 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 20:24:23,343 [main:28] - Try №918 of 998
2021-03-11 20:24:23,357 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-11 20:24:23,357 [main:28] - Try №919 of 998
2021-03-11 20:24:23,365 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:24:23,365 [main:28] - Try №920 of 998
2021-03-11 20:24:23,372 [main:33] - Trying to replace BLOCK on BLOCK
2021-03-11 20:24:23,372 [main:28] - Try №921 of 998
2021-03-11 20:24:23,378 [main:33] - Trying to replace Element(MODIFIER_LIST) on Element(MODIFIER_LIST)
2021-03-11 20:24:23,378 [main:28] - Try №922 of 998
2021-03-11 20:24:23,391 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:24:23,391 [main:28] - Try №923 of 998
2021-03-11 20:24:23,401 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:24:23,402 [main:28] - Try №924 of 998
2021-03-11 20:24:23,415 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:24:23,415 [main:28] - Try №925 of 998
2021-03-11 20:24:23,419 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:23,419 [main:28] - Try №926 of 998
2021-03-11 20:24:23,430 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:24:23,430 [main:28] - Try №927 of 998
2021-03-11 20:24:23,443 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:24:23,443 [main:28] - Try №928 of 998
2021-03-11 20:24:23,452 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:23,453 [main:28] - Try №929 of 998
2021-03-11 20:24:23,459 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:24:23,459 [main:66] - Compilation checking started
2021-03-11 20:24:23,629 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun Int(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(a: String, s: InlinedString) {
    foo(r)
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class E {
    ENTRY
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "Fail: exception class should be NPE: "
}


2021-03-11 20:24:23,630 [main:28] - Try №930 of 998
2021-03-11 20:24:23,642 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 20:24:23,642 [main:66] - Compilation checking started
2021-03-11 20:24:23,903 [main:53] - Result = true
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun Int(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(a: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class E {
    ENTRY
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "OK"
}


2021-03-11 20:24:23,903 [main:28] - Try №931 of 998
2021-03-11 20:24:23,908 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:23,909 [main:28] - Try №932 of 998
2021-03-11 20:24:23,922 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:24:23,922 [main:28] - Try №933 of 998
2021-03-11 20:24:23,927 [main:33] - Trying to replace Element(CLASS) on Element(CLASS)
2021-03-11 20:24:23,927 [main:28] - Try №934 of 998
2021-03-11 20:24:23,947 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:24:23,947 [main:28] - Try №935 of 998
2021-03-11 20:24:23,958 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:24:23,959 [main:28] - Try №936 of 998
2021-03-11 20:24:23,962 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:23,962 [main:28] - Try №937 of 998
2021-03-11 20:24:23,976 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:24:23,976 [main:28] - Try №938 of 998
2021-03-11 20:24:23,986 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:24:23,986 [main:28] - Try №939 of 998
2021-03-11 20:24:23,991 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-11 20:24:23,992 [main:28] - Try №940 of 998
2021-03-11 20:24:24,001 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:24,001 [main:28] - Try №941 of 998
2021-03-11 20:24:24,005 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:24,005 [main:28] - Try №942 of 998
2021-03-11 20:24:24,010 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:24:24,010 [main:66] - Compilation checking started
2021-03-11 20:24:24,180 [main:49] - Result = false
Text:
inline class InlinedInt(x: String)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun Int(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(a: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class E {
    ENTRY
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "OK"
}


2021-03-11 20:24:24,180 [main:28] - Try №943 of 998
2021-03-11 20:24:24,189 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:24,190 [main:66] - Compilation checking started
2021-03-11 20:24:24,365 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun Int(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): s {
    return callback()
}

fun Boolean(a: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class E {
    ENTRY
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "OK"
}


2021-03-11 20:24:24,366 [main:28] - Try №944 of 998
2021-03-11 20:24:24,375 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 20:24:24,375 [main:28] - Try №945 of 998
2021-03-11 20:24:24,392 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:24:24,392 [main:28] - Try №946 of 998
2021-03-11 20:24:24,409 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:24:24,409 [main:28] - Try №947 of 998
2021-03-11 20:24:24,419 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:24:24,419 [main:28] - Try №948 of 998
2021-03-11 20:24:24,423 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:24,423 [main:28] - Try №949 of 998
2021-03-11 20:24:24,427 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:24,427 [main:28] - Try №950 of 998
2021-03-11 20:24:24,439 [main:33] - Trying to replace PsiElement(OPEN_QUOTE) on PsiElement(OPEN_QUOTE)
2021-03-11 20:24:24,439 [main:28] - Try №951 of 998
2021-03-11 20:24:24,449 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:24,449 [main:28] - Try №952 of 998
2021-03-11 20:24:24,455 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:24:24,455 [main:28] - Try №953 of 998
2021-03-11 20:24:24,465 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:24:24,466 [main:28] - Try №954 of 998
2021-03-11 20:24:24,475 [main:33] - Trying to replace Element(USER_TYPE) on Element(USER_TYPE)
2021-03-11 20:24:24,476 [main:28] - Try №955 of 998
2021-03-11 20:24:24,487 [main:33] - Trying to replace Element(RETURN) on Element(RETURN)
2021-03-11 20:24:24,487 [main:28] - Try №956 of 998
2021-03-11 20:24:24,495 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:24:24,495 [main:28] - Try №957 of 998
2021-03-11 20:24:24,507 [main:33] - Trying to replace Element(VALUE_ARGUMENT) on Element(VALUE_ARGUMENT)
2021-03-11 20:24:24,507 [main:28] - Try №958 of 998
2021-03-11 20:24:24,514 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:24:24,514 [main:28] - Try №959 of 998
2021-03-11 20:24:24,523 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:24,523 [main:28] - Try №960 of 998
2021-03-11 20:24:24,533 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 20:24:24,533 [main:28] - Try №961 of 998
2021-03-11 20:24:24,541 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:24:24,542 [main:28] - Try №962 of 998
2021-03-11 20:24:24,548 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:24:24,548 [main:28] - Try №963 of 998
2021-03-11 20:24:24,559 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 20:24:24,559 [main:28] - Try №964 of 998
2021-03-11 20:24:24,567 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:24:24,567 [main:28] - Try №965 of 998
2021-03-11 20:24:24,576 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:24,576 [main:28] - Try №966 of 998
2021-03-11 20:24:24,584 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:24:24,585 [main:28] - Try №967 of 998
2021-03-11 20:24:24,588 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:24,588 [main:28] - Try №968 of 998
2021-03-11 20:24:24,599 [main:33] - Trying to replace Element(VALUE_ARGUMENT_LIST) on Element(VALUE_ARGUMENT_LIST)
2021-03-11 20:24:24,599 [main:28] - Try №969 of 998
2021-03-11 20:24:24,603 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:24,603 [main:28] - Try №970 of 998
2021-03-11 20:24:24,616 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:24:24,616 [main:28] - Try №971 of 998
2021-03-11 20:24:24,629 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:24:24,629 [main:28] - Try №972 of 998
2021-03-11 20:24:24,637 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:24:24,637 [main:28] - Try №973 of 998
2021-03-11 20:24:24,646 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:24,647 [main:28] - Try №974 of 998
2021-03-11 20:24:24,656 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:24,656 [main:28] - Try №975 of 998
2021-03-11 20:24:24,665 [main:33] - Trying to replace PsiElement(COMMA) on PsiElement(COMMA)
2021-03-11 20:24:24,665 [main:28] - Try №976 of 998
2021-03-11 20:24:24,681 [main:28] - Try №977 of 998
2021-03-11 20:24:24,690 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 20:24:24,690 [main:28] - Try №978 of 998
2021-03-11 20:24:24,698 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:24:24,698 [main:28] - Try №979 of 998
2021-03-11 20:24:24,708 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 20:24:24,708 [main:28] - Try №980 of 998
2021-03-11 20:24:24,725 [main:33] - Trying to replace Element(ENUM_ENTRY) on Element(ENUM_ENTRY)
2021-03-11 20:24:24,725 [main:28] - Try №981 of 998
2021-03-11 20:24:24,734 [main:33] - Trying to replace PsiElement(LBRACE) on PsiElement(LBRACE)
2021-03-11 20:24:24,734 [main:28] - Try №982 of 998
2021-03-11 20:24:24,738 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:24,738 [main:28] - Try №983 of 998
2021-03-11 20:24:24,743 [main:33] - Trying to replace Element(VALUE_PARAMETER_LIST) on Element(VALUE_PARAMETER_LIST)
2021-03-11 20:24:24,743 [main:28] - Try №984 of 998
2021-03-11 20:24:24,757 [main:33] - Trying to replace PsiElement(REGULAR_STRING_PART) on PsiElement(REGULAR_STRING_PART)
2021-03-11 20:24:24,757 [main:28] - Try №985 of 998
2021-03-11 20:24:24,774 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-11 20:24:24,774 [main:66] - Compilation checking started
2021-03-11 20:24:24,947 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun Int(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(a: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class E {
    ENTRY
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "OK"
}


2021-03-11 20:24:24,947 [main:28] - Try №986 of 998
2021-03-11 20:24:24,957 [main:33] - Trying to replace Element(OPERATION_REFERENCE) on Element(OPERATION_REFERENCE)
2021-03-11 20:24:24,957 [main:28] - Try №987 of 998
2021-03-11 20:24:24,961 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:24,961 [main:28] - Try №988 of 998
2021-03-11 20:24:24,974 [main:33] - Trying to replace PsiElement(CLOSING_QUOTE) on PsiElement(CLOSING_QUOTE)
2021-03-11 20:24:24,974 [main:28] - Try №989 of 998
2021-03-11 20:24:24,978 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:24,978 [main:66] - Compilation checking started
2021-03-11 20:24:25,151 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun Int(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> downTo): InlinedString {
    return callback()
}

fun Boolean(a: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class E {
    ENTRY
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "OK"
}


2021-03-11 20:24:25,151 [main:28] - Try №990 of 998
2021-03-11 20:24:25,156 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:25,157 [main:28] - Try №991 of 998
2021-03-11 20:24:25,160 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:25,160 [main:28] - Try №992 of 998
2021-03-11 20:24:25,170 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:25,170 [main:28] - Try №993 of 998
2021-03-11 20:24:25,186 [main:33] - Trying to replace Element(FUNCTION_LITERAL) on Element(FUNCTION_LITERAL)
2021-03-11 20:24:25,186 [main:28] - Try №994 of 998
2021-03-11 20:24:25,194 [main:33] - Trying to replace Element(TYPE_REFERENCE) on Element(TYPE_REFERENCE)
2021-03-11 20:24:25,194 [main:28] - Try №995 of 998
2021-03-11 20:24:25,208 [main:33] - Trying to replace Element(LITERAL_STRING_TEMPLATE_ENTRY) on Element(LITERAL_STRING_TEMPLATE_ENTRY)
2021-03-11 20:24:25,209 [main:28] - Try №996 of 998
2021-03-11 20:24:25,217 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:24:25,217 [main:28] - Try №997 of 998
2021-03-11 20:24:25,224 [main:33] - Trying to replace PsiElement(IDENTIFIER) on PsiElement(IDENTIFIER)
2021-03-11 20:24:25,224 [main:28] - Try №998 of 998
2021-03-11 20:24:25,232 [main:33] - Trying to replace PsiElement(RBRACE) on PsiElement(RBRACE)
2021-03-11 20:24:25,313 [main:302] - generating value of type = Function0<InlinedInt> false depth = 0
2021-03-11 20:24:25,313 [main:302] - generating value of type = InlinedInt false depth = 1
2021-03-11 20:24:25,313 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:24:25,380 [main:194] - Type params = []
2021-03-11 20:24:25,445 [main:302] - generating value of type = Int true depth = 3
2021-03-11 20:24:25,446 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:24:25,446 [main:66] - Compilation checking started
2021-03-11 20:24:25,712 [main:53] - Result = true
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun Int(callback: () -> InlinedInt = { InlinedInt(-908975145)}): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun Boolean(a: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class E {
    ENTRY
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "OK"
}


2021-03-11 20:24:25,712 [main:302] - generating value of type = Function0<InlinedString> false depth = 0
2021-03-11 20:24:25,713 [main:302] - generating value of type = InlinedString false depth = 1
2021-03-11 20:24:25,713 [main:112] - generating klass InlinedString text = inline class InlinedString(val internal: String)
2021-03-11 20:24:25,780 [main:194] - Type params = []
2021-03-11 20:24:25,847 [main:302] - generating value of type = String true depth = 3
2021-03-11 20:24:25,847 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:24:25,847 [main:66] - Compilation checking started
2021-03-11 20:24:26,113 [main:53] - Result = true
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun Int(callback: () -> InlinedInt = { InlinedInt(-908975145)}): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString = { InlinedString("xzsbj")}): InlinedString {
    return callback()
}

fun Boolean(a: String, s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class E {
    ENTRY
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "OK"
}


2021-03-11 20:24:26,113 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:24:26,113 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:24:26,113 [main:66] - Compilation checking started
2021-03-11 20:24:26,392 [main:53] - Result = true
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun Int(callback: () -> InlinedInt = { InlinedInt(-908975145)}): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString = { InlinedString("xzsbj")}): InlinedString {
    return callback()
}

fun Boolean(a: String = "kdxmj", s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class E {
    ENTRY
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "OK"
}


2021-03-11 20:24:26,392 [main:50] - replacing s: InlinedString InlinedString
2021-03-11 20:24:26,393 [main:54] - Getting value of type InlinedString
2021-03-11 20:24:26,487 [main:302] - generating value of type = InlinedString false depth = 0
2021-03-11 20:24:26,487 [main:112] - generating klass InlinedString text = inline class InlinedString(val str: String = "OK")
2021-03-11 20:24:26,562 [main:194] - Type params = []
2021-03-11 20:24:26,637 [main:302] - generating value of type = String true depth = 2
2021-03-11 20:24:26,638 [main:58] - GENERATED VALUE OF TYPE InlinedString = InlinedString("tdamf")
2021-03-11 20:24:26,638 [main:61] - GENERATED IS CALL =true
2021-03-11 20:24:26,877 [main:67] - randomType = Set<List<InlinedString>>
2021-03-11 20:24:26,878 [main:106] - GETTING InlinedString from String
2021-03-11 20:24:26,908 [main:106] - GETTING InlinedString from Function0<InlinedString>
2021-03-11 20:24:26,920 [main:113] - Case = [public abstract operator fun invoke(): InlinedString defined in kotlin.Function0[FunctionInvokeDescriptor@70a73b55]]
2021-03-11 20:24:26,920 [main:149] - GENERATING call of type public abstract operator fun invoke(): InlinedString defined in kotlin.Function0[FunctionInvokeDescriptor@70a73b55]
2021-03-11 20:24:26,921 [main:117] - GENERATED CALL = (callback).invoke()
2021-03-11 20:24:26,921 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:24:26,921 [main:66] - Compilation checking started
2021-03-11 20:24:27,108 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun Int(callback: () -> InlinedInt = { InlinedInt(-908975145)}): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString = { InlinedString("xzsbj")}): InlinedString {
    return callback()
}

fun Boolean(a: String = "kdxmj", s: InlinedString = (callback).invoke()) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class E {
    ENTRY
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "OK"
}


2021-03-11 20:24:27,108 [main:302] - generating value of type = Double true depth = 0
2021-03-11 20:24:27,109 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:24:27,109 [main:66] - Compilation checking started
2021-03-11 20:24:27,381 [main:53] - Result = true
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun Int(callback: () -> InlinedInt = { InlinedInt(-908975145)}): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString = { InlinedString("xzsbj")}): InlinedString {
    return callback()
}

fun Boolean(a: String = "kdxmj", s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class E {
    ENTRY
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double = 0.5472487003729948): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "OK"
}


2021-03-11 20:24:27,381 [main:50] - replacing val z: Int Int
2021-03-11 20:24:27,381 [main:54] - Getting value of type Int
2021-03-11 20:24:27,455 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:24:27,455 [main:58] - GENERATED VALUE OF TYPE Int = 626974774
2021-03-11 20:24:27,456 [main:61] - GENERATED IS CALL =false
2021-03-11 20:24:27,456 [main:67] - randomType = Int
2021-03-11 20:24:27,542 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:24:27,577 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@25850671]
2021-03-11 20:24:27,649 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:24:27,650 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1320fd4d]
2021-03-11 20:24:27,722 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:24:27,723 [main:78] - Generated call from random type = (-188438621).compareTo(1111213259).times(-4)
2021-03-11 20:24:27,724 [main:106] - GETTING Int from Function0<InlinedString>
2021-03-11 20:24:27,732 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@3ced033], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1bdbc878]]
2021-03-11 20:24:27,732 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@3ced033]
2021-03-11 20:24:27,805 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1bdbc878]
2021-03-11 20:24:27,878 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:24:27,878 [main:117] - GENERATED CALL = (callback).equals(null).compareTo(true)
2021-03-11 20:24:27,879 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:24:27,879 [main:66] - Compilation checking started
2021-03-11 20:24:28,058 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int = (callback).equals(null).compareTo(true))
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun Int(callback: () -> InlinedInt = { InlinedInt(-908975145)}): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString = { InlinedString("xzsbj")}): InlinedString {
    return callback()
}

fun Boolean(a: String = "kdxmj", s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class E {
    ENTRY
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double = 0.5472487003729948): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "OK"
}


2021-03-11 20:24:28,058 [main:50] - replacing val str: String = "OK" String
2021-03-11 20:24:28,059 [main:54] - Getting value of type String
2021-03-11 20:24:28,131 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:24:28,132 [main:58] - GENERATED VALUE OF TYPE String = "tjvbl"
2021-03-11 20:24:28,132 [main:61] - GENERATED IS CALL =false
2021-03-11 20:24:28,208 [main:67] - randomType = E
2021-03-11 20:24:28,282 [main:302] - generating value of type = E false depth = 0
2021-03-11 20:24:28,282 [main:112] - generating klass E text = enum class E {
    ENTRY
}
2021-03-11 20:24:28,301 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61c03bf5]
2021-03-11 20:24:28,374 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 20:24:28,378 [main:78] - Generated call from random type = (E.ENTRY).name.removeSurrounding("kdhmi")
2021-03-11 20:24:28,378 [main:106] - GETTING String from String
2021-03-11 20:24:28,398 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4139bfa6]]
2021-03-11 20:24:28,398 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4139bfa6]
2021-03-11 20:24:28,471 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:24:28,471 [main:117] - GENERATED CALL = (a).replaceBefore('?', s, a)
2021-03-11 20:24:28,472 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1700d8a1]]
2021-03-11 20:24:28,472 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1700d8a1]
2021-03-11 20:24:28,560 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:24:28,560 [main:117] - GENERATED CALL = (a).substringBeforeLast('鼠', s)
2021-03-11 20:24:28,561 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71479779]]
2021-03-11 20:24:28,561 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71479779]
2021-03-11 20:24:28,637 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:24:28,637 [main:117] - GENERATED CALL = (a).padEnd(z, 'ᗃ')
2021-03-11 20:24:28,638 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3477cd10]]
2021-03-11 20:24:28,638 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3477cd10]
2021-03-11 20:24:28,721 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 20:24:28,725 [main:117] - GENERATED CALL = (a).replaceRange(z, z, "nxzcw")
2021-03-11 20:24:28,725 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53436e8b]]
2021-03-11 20:24:28,725 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53436e8b]
2021-03-11 20:24:28,725 [main:117] - GENERATED CALL = (a).take(z)
2021-03-11 20:24:28,725 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2be08794]]
2021-03-11 20:24:28,725 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2be08794]
2021-03-11 20:24:28,725 [main:117] - GENERATED CALL = (a).dropLast(z)
2021-03-11 20:24:28,725 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@747d22cc]]
2021-03-11 20:24:28,725 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@747d22cc]
2021-03-11 20:24:28,725 [main:117] - GENERATED CALL = (a).toUpperCase()
2021-03-11 20:24:28,725 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3999a215]]
2021-03-11 20:24:28,725 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3999a215]
2021-03-11 20:24:28,799 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:24:28,800 [main:117] - GENERATED CALL = (a).prependIndent("ubsfd")
2021-03-11 20:24:28,800 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b92e35]]
2021-03-11 20:24:28,800 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b92e35]
2021-03-11 20:24:28,874 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:24:28,875 [main:117] - GENERATED CALL = (a).padStart(z, '넗')
2021-03-11 20:24:28,875 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61c03bf5]]
2021-03-11 20:24:28,875 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61c03bf5]
2021-03-11 20:24:28,949 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 20:24:29,026 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 20:24:29,027 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 20:24:29,179 [main:302] - generating value of type = String true depth = 3
2021-03-11 20:24:29,179 [main:95] - GENERATED = StringBuilder("odwfc")
2021-03-11 20:24:29,180 [main:117] - GENERATED CALL = (a).removeSurrounding(StringBuilder("odwfc"))
2021-03-11 20:24:29,180 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:24:29,180 [main:66] - Compilation checking started
2021-03-11 20:24:29,353 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String  = (a).dropLast(z))

suspend fun main() {}

suspend fun Int(callback: () -> InlinedInt = { InlinedInt(-908975145)}): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString = { InlinedString("xzsbj")}): InlinedString {
    return callback()
}

fun Boolean(a: String = "kdxmj", s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class E {
    ENTRY
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double = 0.5472487003729948): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException) {
        return e.message ?: "Fail no message"
    }
    return "OK"
}


2021-03-11 20:24:29,353 [main:302] - generating value of type = IllegalStateException false depth = 0
2021-03-11 20:24:29,422 [main:43] - GENERATING CALL OF fun IllegalStateException(message: kotlin.String?): IllegalStateException = TODO()
2021-03-11 20:24:29,423 [main:61] - WITHOUT TYPE PARAMS = fun IllegalStateException(message: kotlin.String?): IllegalStateException = TODO()
2021-03-11 20:24:29,629 [main:302] - generating value of type = String true depth = 3
2021-03-11 20:24:29,629 [main:95] - GENERATED = IllegalStateException("bptsx")
2021-03-11 20:24:29,629 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:24:29,630 [main:66] - Compilation checking started
2021-03-11 20:24:29,801 [main:49] - Result = false
Text:
inline class InlinedInt(val z: Int)
inline class InlinedString(val str: String = "OK")

suspend fun main() {}

suspend fun Int(callback: () -> InlinedInt = { InlinedInt(-908975145)}): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString = { InlinedString("xzsbj")}): InlinedString {
    return callback()
}

fun Boolean(a: String = "kdxmj", s: InlinedString) {
    error("java.lang.Object? (Kotlin reflection is not available)")
    RuntimeException()

    AssertionError()
    baz { s }
}

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0].toShort()
    if (x != 1.toShort()) return "Fail: $x}"
    return "OK"
}

enum class E {
    ENTRY
}

inline fun <T: Comparable<Double>> equalsGeneric(a: T, b: Double = 0.5472487003729948): Boolean {
    return a == b
}

fun test(s: String ="OK"): String {
        return s
    }

fun createType(): String {
    try {
        AnnotationRetention.SOURCE
        return "OK"
    } catch (e: IllegalStateException = IllegalStateException("bptsx")) {
        return e.message ?: "Fail no message"
    }
    return "OK"
}


2021-03-11 20:24:29,942 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:24:30,008 [main:194] - Type params = []
2021-03-11 20:24:30,075 [main:302] - generating value of type = Int true depth = 1
2021-03-11 20:24:30,076 [main:112] - generating klass InlinedString text = inline class InlinedString(val internal: String)
2021-03-11 20:24:30,142 [main:194] - Type params = []
2021-03-11 20:24:30,209 [main:302] - generating value of type = String true depth = 1
2021-03-11 20:24:30,347 [main:43] - GENERATING CALL OF inline fun <T> foo(callback: () -> T): T {
    return callback()
}
2021-03-11 20:24:30,349 [main:61] - WITHOUT TYPE PARAMS = inline fun <T> foo(callback: () -> InlinedString): InlinedString {
    return callback()
}
2021-03-11 20:24:30,486 [main:302] - generating value of type = Function0<InlinedString> false depth = 1
2021-03-11 20:24:30,486 [main:302] - generating value of type = InlinedString false depth = 2
2021-03-11 20:24:30,487 [main:112] - generating klass InlinedString text = inline class InlinedString(val internal: String)
2021-03-11 20:24:30,553 [main:194] - Type params = []
2021-03-11 20:24:30,658 [main:302] - generating value of type = String true depth = 4
2021-03-11 20:24:30,658 [main:95] - GENERATED = foo<InlinedString>({ InlinedString("egswj")})
2021-03-11 20:24:30,728 [main:43] - GENERATING CALL OF inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return InlinedInt(1903386470)
}
2021-03-11 20:24:30,728 [main:61] - WITHOUT TYPE PARAMS = inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return InlinedInt(1903386470)
}
2021-03-11 20:24:30,891 [main:302] - generating value of type = Function0<InlinedInt> false depth = 1
2021-03-11 20:24:30,892 [main:302] - generating value of type = InlinedInt false depth = 2
2021-03-11 20:24:30,892 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:24:30,972 [main:194] - Type params = []
2021-03-11 20:24:31,038 [main:302] - generating value of type = Int true depth = 4
2021-03-11 20:24:31,039 [main:95] - GENERATED = bar({ InlinedInt(-365570261)})
2021-03-11 20:24:31,106 [main:43] - GENERATING CALL OF inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}
2021-03-11 20:24:31,106 [main:61] - WITHOUT TYPE PARAMS = inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}
2021-03-11 20:24:31,244 [main:302] - generating value of type = Function0<InlinedString> false depth = 1
2021-03-11 20:24:31,245 [main:302] - generating value of type = InlinedString false depth = 2
2021-03-11 20:24:31,245 [main:112] - generating klass InlinedString text = inline class InlinedString(val internal: String)
2021-03-11 20:24:31,311 [main:194] - Type params = []
2021-03-11 20:24:31,378 [main:302] - generating value of type = String true depth = 4
2021-03-11 20:24:31,379 [main:95] - GENERATED = baz({ InlinedString("tsepv")})
2021-03-11 20:24:31,478 [main:43] - GENERATING CALL OF fun test(i: InlinedInt, s: InlinedString) {
    foo { InlinedInt(InlinedInt(-989664132).internal)}
    bar({ InlinedInt(-1634120613)})

    foo { InlinedString("wwvlb")}
    baz { InlinedString("xsyqa")}
}
2021-03-11 20:24:31,478 [main:61] - WITHOUT TYPE PARAMS = fun test(i: InlinedInt, s: InlinedString) {
    foo { InlinedInt(InlinedInt(-989664132).internal)}
    bar({ InlinedInt(-1634120613)})

    foo { InlinedString("wwvlb")}
    baz { InlinedString("xsyqa")}
}
2021-03-11 20:24:31,551 [main:302] - generating value of type = InlinedInt false depth = 1
2021-03-11 20:24:31,551 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:24:31,630 [main:194] - Type params = []
2021-03-11 20:24:31,699 [main:302] - generating value of type = Int true depth = 3
2021-03-11 20:24:31,700 [main:302] - generating value of type = InlinedString false depth = 1
2021-03-11 20:24:31,700 [main:112] - generating klass InlinedString text = inline class InlinedString(val internal: String)
2021-03-11 20:24:31,767 [main:194] - Type params = []
2021-03-11 20:24:31,834 [main:302] - generating value of type = String true depth = 3
2021-03-11 20:24:31,834 [main:95] - GENERATED = test(InlinedInt(1463868542), InlinedString("ofxgj"))
2021-03-11 20:24:31,905 [main:45] - Trying to change 26 nodes
2021-03-11 20:24:31,905 [main:53] - replacing (callback, Function0<T>)
2021-03-11 20:24:31,905 [main:50] - replacing callback Function0<T>
2021-03-11 20:24:31,905 [main:54] - Getting value of type Function0<T>
2021-03-11 20:24:31,971 [main:302] - generating value of type = Function0<T> false depth = 0
2021-03-11 20:24:31,972 [main:302] - generating value of type = T false depth = 1
2021-03-11 20:24:32,042 [main:43] - GENERATING CALL OF fun <T> minOf(a: ULong, b: ULong): T = TODO()
2021-03-11 20:24:32,043 [main:61] - WITHOUT TYPE PARAMS = fun <T> minOf(a: ULong, b: ULong): T = TODO()
2021-03-11 20:24:32,113 [main:302] - generating value of type = ULong true depth = 4
2021-03-11 20:24:32,113 [main:302] - generating value of type = ULong true depth = 4
2021-03-11 20:24:32,114 [main:95] - GENERATED = minOf<ULong>(4485979310880798008.toULong(), 1175190734207766829.toULong())
2021-03-11 20:24:32,114 [main:58] - GENERATED VALUE OF TYPE Function0<T> = { minOf<ULong>(4485979310880798008.toULong(), 1175190734207766829.toULong())}
2021-03-11 20:24:32,114 [main:61] - GENERATED IS CALL =false
2021-03-11 20:24:32,115 [main:67] - randomType = InlinedInt
2021-03-11 20:24:32,181 [main:302] - generating value of type = InlinedInt false depth = 0
2021-03-11 20:24:32,181 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:24:32,269 [main:194] - Type params = []
2021-03-11 20:24:32,341 [main:302] - generating value of type = Int true depth = 2
2021-03-11 20:24:32,350 [main:106] - GETTING Function0<T> from InlinedInt
2021-03-11 20:24:32,357 [main:106] - GETTING Function0<T> from InlinedString
2021-03-11 20:24:32,365 [main:106] - GETTING Function0<T> from String
2021-03-11 20:24:32,385 [main:106] - GETTING Function0<T> from InlinedString
2021-03-11 20:24:32,386 [main:106] - GETTING Function0<T> from Int
2021-03-11 20:24:32,436 [main:106] - GETTING Function0<T> from Function0<T>
2021-03-11 20:24:32,449 [main:61] - replacement of callback of type Function0<T> is callback
2021-03-11 20:24:32,517 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:32,518 [main:53] - replacing ({ InlinedString("xsyqa")}, Function0<InlinedString>)
2021-03-11 20:24:32,518 [main:50] - replacing { InlinedString("xsyqa")} Function0<InlinedString>
2021-03-11 20:24:32,518 [main:54] - Getting value of type Function0<InlinedString>
2021-03-11 20:24:32,585 [main:302] - generating value of type = Function0<InlinedString> false depth = 0
2021-03-11 20:24:32,585 [main:302] - generating value of type = InlinedString false depth = 1
2021-03-11 20:24:32,586 [main:112] - generating klass InlinedString text = inline class InlinedString(val internal: String)
2021-03-11 20:24:32,653 [main:194] - Type params = []
2021-03-11 20:24:32,719 [main:302] - generating value of type = String true depth = 3
2021-03-11 20:24:32,720 [main:58] - GENERATED VALUE OF TYPE Function0<InlinedString> = { InlinedString("tyhyr")}
2021-03-11 20:24:32,720 [main:61] - GENERATED IS CALL =false
2021-03-11 20:24:32,861 [main:67] - randomType = Map<Long, InlinedInt>
2021-03-11 20:24:32,862 [main:106] - GETTING Function0<InlinedString> from Int
2021-03-11 20:24:32,898 [main:106] - GETTING Function0<InlinedString> from InlinedInt
2021-03-11 20:24:32,903 [main:106] - GETTING Function0<InlinedString> from InlinedString
2021-03-11 20:24:32,908 [main:106] - GETTING Function0<InlinedString> from String
2021-03-11 20:24:32,924 [main:106] - GETTING Function0<InlinedString> from InlinedString
2021-03-11 20:24:32,925 [main:106] - GETTING Function0<InlinedString> from InlinedInt
2021-03-11 20:24:32,926 [main:106] - GETTING Function0<InlinedString> from InlinedString
2021-03-11 20:24:32,926 [main:61] - replacement of { InlinedString("xsyqa")} of type Function0<InlinedString> is { InlinedString("tyhyr")}
2021-03-11 20:24:32,992 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:24:32,993 [main:66] - Compilation checking started
2021-03-11 20:24:33,157 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return InlinedInt(1903386470)
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { InlinedInt(InlinedInt(-989664132).internal)}
    bar({ InlinedInt(-1634120613)})

    foo { InlinedString("wwvlb")}
    baz { InlinedString("tyhyr")}
}


2021-03-11 20:24:33,158 [main:53] - replacing ("wwvlb", String)
2021-03-11 20:24:33,158 [main:50] - replacing "wwvlb" String
2021-03-11 20:24:33,158 [main:54] - Getting value of type String
2021-03-11 20:24:33,225 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:24:33,225 [main:58] - GENERATED VALUE OF TYPE String = "kkyoo"
2021-03-11 20:24:33,225 [main:61] - GENERATED IS CALL =false
2021-03-11 20:24:33,308 [main:67] - randomType = LinkedHashSet<InlinedString>
2021-03-11 20:24:33,393 [main:302] - generating value of type = LinkedHashSet<InlinedString> false depth = 0
2021-03-11 20:24:33,464 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: InlinedString): LkedHashSet<InledStrg> = TODO()
2021-03-11 20:24:33,464 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: InlinedString): LkedHashSet<InledStrg> = TODO()
2021-03-11 20:24:33,533 [main:302] - generating value of type = InlinedString false depth = 3
2021-03-11 20:24:33,533 [main:112] - generating klass InlinedString text = inline class InlinedString(val internal: String)
2021-03-11 20:24:33,600 [main:194] - Type params = []
2021-03-11 20:24:33,667 [main:302] - generating value of type = String true depth = 5
2021-03-11 20:24:33,667 [main:95] - GENERATED = linkedSetOf<InlinedString>(InlinedString("ittpz"))
2021-03-11 20:24:33,784 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]
2021-03-11 20:24:33,784 [main:78] - Generated call from random type = (linkedSetOf<InlinedString>(InlinedString("ittpz"))).size.toString(InlinedInt(1381210728).internal)
2021-03-11 20:24:33,784 [main:61] - replacement of "wwvlb" of type String is (linkedSetOf<InlinedString>(InlinedString("ittpz"))).size.toString(InlinedInt(1381210728).internal)
2021-03-11 20:24:33,851 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:24:33,851 [main:66] - Compilation checking started
2021-03-11 20:24:34,089 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return InlinedInt(1903386470)
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { InlinedInt(InlinedInt(-989664132).internal)}
    bar({ InlinedInt(-1634120613)})

    foo { InlinedString((linkedSetOf<InlinedString>(InlinedString("ittpz"))).size.toString(InlinedInt(1381210728).internal))}
    baz { InlinedString("tyhyr")}
}


2021-03-11 20:24:34,089 [main:53] - replacing (InlinedInt(1903386470), InlinedInt)
2021-03-11 20:24:34,089 [main:50] - replacing InlinedInt(1903386470) InlinedInt
2021-03-11 20:24:34,089 [main:54] - Getting value of type InlinedInt
2021-03-11 20:24:34,167 [main:302] - generating value of type = InlinedInt false depth = 0
2021-03-11 20:24:34,167 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:24:34,244 [main:194] - Type params = []
2021-03-11 20:24:34,320 [main:302] - generating value of type = Int true depth = 2
2021-03-11 20:24:34,321 [main:58] - GENERATED VALUE OF TYPE InlinedInt = InlinedInt(-1644214759)
2021-03-11 20:24:34,321 [main:61] - GENERATED IS CALL =true
2021-03-11 20:24:34,495 [main:67] - randomType = Function2<InlinedString, InlinedString, Int?>
2021-03-11 20:24:34,496 [main:106] - GETTING InlinedInt from InlinedString
2021-03-11 20:24:34,503 [main:106] - GETTING InlinedInt from Function0<InlinedInt>
2021-03-11 20:24:34,515 [main:113] - Case = [public abstract operator fun invoke(): InlinedInt defined in kotlin.Function0[FunctionInvokeDescriptor@7434e735]]
2021-03-11 20:24:34,515 [main:149] - GENERATING call of type public abstract operator fun invoke(): InlinedInt defined in kotlin.Function0[FunctionInvokeDescriptor@7434e735]
2021-03-11 20:24:34,515 [main:117] - GENERATED CALL = (callback).invoke()
2021-03-11 20:24:34,515 [main:61] - replacement of InlinedInt(1903386470) of type InlinedInt is (callback).invoke()
2021-03-11 20:24:34,586 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:24:34,586 [main:66] - Compilation checking started
2021-03-11 20:24:34,815 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return (callback).invoke()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { InlinedInt(InlinedInt(-989664132).internal)}
    bar({ InlinedInt(-1634120613)})

    foo { InlinedString((linkedSetOf<InlinedString>(InlinedString("ittpz"))).size.toString(InlinedInt(1381210728).internal))}
    baz { InlinedString("tyhyr")}
}


2021-03-11 20:24:34,815 [main:53] - replacing (InlinedInt(-1634120613), InlinedInt)
2021-03-11 20:24:34,816 [main:50] - replacing InlinedInt(-1634120613) InlinedInt
2021-03-11 20:24:34,816 [main:54] - Getting value of type InlinedInt
2021-03-11 20:24:34,888 [main:302] - generating value of type = InlinedInt false depth = 0
2021-03-11 20:24:34,888 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:24:34,960 [main:194] - Type params = []
2021-03-11 20:24:35,031 [main:302] - generating value of type = Int true depth = 2
2021-03-11 20:24:35,032 [main:58] - GENERATED VALUE OF TYPE InlinedInt = InlinedInt(1811925212)
2021-03-11 20:24:35,032 [main:61] - GENERATED IS CALL =true
2021-03-11 20:24:35,110 [main:67] - randomType = LinkedHashSet<Int>
2021-03-11 20:24:35,180 [main:302] - generating value of type = LinkedHashSet<Int> false depth = 0
2021-03-11 20:24:35,257 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(elements: kotlin.collections.Collection<Int>): LinkedHashSet<Int> = TODO()
2021-03-11 20:24:35,258 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(elements: kotlin.collections.Collection<Int>): LinkedHashSet<Int> = TODO()
2021-03-11 20:24:35,411 [main:302] - generating value of type = Collection<Int> false depth = 3
2021-03-11 20:24:35,488 [main:43] - GENERATING CALL OF fun <T> List(size: kotlin.Int, init: (index: kotlin.Int)->Int): Collection<Int> = TODO()
2021-03-11 20:24:35,489 [main:61] - WITHOUT TYPE PARAMS = fun <T> List(size: kotlin.Int, init: (index: kotlin.Int)->Int): Collection<Int> = TODO()
2021-03-11 20:24:35,741 [main:302] - generating value of type = Int true depth = 6
2021-03-11 20:24:35,741 [main:302] - generating value of type = Function1<[@kotlin.ParameterName] Int, Int> false depth = 6
2021-03-11 20:24:35,742 [main:302] - generating value of type = Int true depth = 7
2021-03-11 20:24:35,742 [main:95] - GENERATED = List<Int>(1451528974, {a: Int -> -909073409})
2021-03-11 20:24:35,742 [main:95] - GENERATED = LinkedHashSet<Int>(List<Int>(1451528974, {a: Int -> -909073409}))
2021-03-11 20:24:35,875 [main:106] - GETTING InlinedInt from InlinedString
2021-03-11 20:24:35,880 [main:106] - GETTING InlinedInt from InlinedInt
2021-03-11 20:24:35,886 [main:61] - replacement of InlinedInt(-1634120613) of type InlinedInt is i
2021-03-11 20:24:35,957 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:24:35,957 [main:66] - Compilation checking started
2021-03-11 20:24:36,162 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return (callback).invoke()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { InlinedInt(InlinedInt(-989664132).internal)}
    bar({ i})

    foo { InlinedString((linkedSetOf<InlinedString>(InlinedString("ittpz"))).size.toString(InlinedInt(1381210728).internal))}
    baz { InlinedString("tyhyr")}
}


2021-03-11 20:24:36,163 [main:53] - replacing ({ InlinedInt(InlinedInt(-989664132).internal)}, Function0<InlinedInt>)
2021-03-11 20:24:36,163 [main:50] - replacing { InlinedInt(InlinedInt(-989664132).internal)} Function0<InlinedInt>
2021-03-11 20:24:36,163 [main:54] - Getting value of type Function0<InlinedInt>
2021-03-11 20:24:36,234 [main:302] - generating value of type = Function0<InlinedInt> false depth = 0
2021-03-11 20:24:36,234 [main:302] - generating value of type = InlinedInt false depth = 1
2021-03-11 20:24:36,235 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:24:36,306 [main:194] - Type params = []
2021-03-11 20:24:36,375 [main:302] - generating value of type = Int true depth = 3
2021-03-11 20:24:36,375 [main:58] - GENERATED VALUE OF TYPE Function0<InlinedInt> = { InlinedInt(1868503123)}
2021-03-11 20:24:36,375 [main:61] - GENERATED IS CALL =false
2021-03-11 20:24:36,376 [main:67] - randomType = InlinedString
2021-03-11 20:24:36,446 [main:302] - generating value of type = InlinedString false depth = 0
2021-03-11 20:24:36,446 [main:112] - generating klass InlinedString text = inline class InlinedString(val internal: String)
2021-03-11 20:24:36,516 [main:194] - Type params = []
2021-03-11 20:24:36,585 [main:302] - generating value of type = String true depth = 2
2021-03-11 20:24:36,592 [main:106] - GETTING Function0<InlinedInt> from InlinedString
2021-03-11 20:24:36,597 [main:106] - GETTING Function0<InlinedInt> from InlinedInt
2021-03-11 20:24:36,604 [main:106] - GETTING Function0<InlinedInt> from String
2021-03-11 20:24:36,626 [main:106] - GETTING Function0<InlinedInt> from InlinedString
2021-03-11 20:24:36,627 [main:106] - GETTING Function0<InlinedInt> from Int
2021-03-11 20:24:36,665 [main:106] - GETTING Function0<InlinedInt> from InlinedString
2021-03-11 20:24:36,666 [main:106] - GETTING Function0<InlinedInt> from InlinedInt
2021-03-11 20:24:36,666 [main:61] - replacement of { InlinedInt(InlinedInt(-989664132).internal)} of type Function0<InlinedInt> is { InlinedInt(1868503123)}
2021-03-11 20:24:36,742 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:24:36,742 [main:66] - Compilation checking started
2021-03-11 20:24:36,978 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return (callback).invoke()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { InlinedInt(1868503123)}
    bar({ i})

    foo { InlinedString((linkedSetOf<InlinedString>(InlinedString("ittpz"))).size.toString(InlinedInt(1381210728).internal))}
    baz { InlinedString("tyhyr")}
}


2021-03-11 20:24:36,978 [main:53] - replacing (-989664132, Int)
2021-03-11 20:24:36,978 [main:50] - replacing -989664132 Int
2021-03-11 20:24:36,978 [main:54] - Getting value of type Int
2021-03-11 20:24:37,049 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:24:37,049 [main:58] - GENERATED VALUE OF TYPE Int = -182749272
2021-03-11 20:24:37,050 [main:61] - GENERATED IS CALL =false
2021-03-11 20:24:37,197 [main:67] - randomType = Set<InlinedString?>
2021-03-11 20:24:37,198 [main:106] - GETTING Int from String
2021-03-11 20:24:37,219 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@193ae7ca], public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f964108]]
2021-03-11 20:24:37,219 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@193ae7ca]
2021-03-11 20:24:37,288 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:24:37,288 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f964108]
2021-03-11 20:24:37,357 [main:302] - generating value of type = CharArray false depth = 0
2021-03-11 20:24:37,430 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 20:24:37,431 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 20:24:37,503 [main:302] - generating value of type = Char true depth = 3
2021-03-11 20:24:37,503 [main:95] - GENERATED = charArrayOf('﫯')
2021-03-11 20:24:37,573 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:24:37,573 [main:117] - GENERATED CALL = (InlinedString("sqpvl").internal).subSequence(InlinedInt(1381210728).internal, 1597408191).indexOfAny(charArrayOf('﫯'), InlinedInt(1381210728).internal, false)
2021-03-11 20:24:37,574 [main:113] - Case = [public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e40162d]]
2021-03-11 20:24:37,574 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e40162d]
2021-03-11 20:24:37,642 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:24:37,711 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:24:37,712 [main:117] - GENERATED CALL = (InlinedString("sqpvl").internal).indexOf('ꦓ', InlinedInt(1381210728).internal, true)
2021-03-11 20:24:37,712 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@193ae7ca], public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e40162d]]
2021-03-11 20:24:37,712 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@193ae7ca]
2021-03-11 20:24:37,712 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e40162d]
2021-03-11 20:24:37,781 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:24:37,851 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:24:37,851 [main:117] - GENERATED CALL = (InlinedString("sqpvl").internal).subSequence(InlinedInt(1381210728).internal, InlinedInt(1381210728).internal).indexOf('헰', InlinedInt(1381210728).internal, true)
2021-03-11 20:24:37,851 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@103a0cf8], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1c6dfdb1]]
2021-03-11 20:24:37,851 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@103a0cf8]
2021-03-11 20:24:37,851 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1c6dfdb1]
2021-03-11 20:24:37,852 [main:117] - GENERATED CALL = (InlinedString("sqpvl").internal).compareTo(InlinedString("sqpvl").internal).coerceAtMost(InlinedInt(1381210728).internal)
2021-03-11 20:24:37,852 [main:113] - Case = [public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f964108]]
2021-03-11 20:24:37,852 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f964108]
2021-03-11 20:24:37,941 [main:302] - generating value of type = CharArray false depth = 0
2021-03-11 20:24:38,019 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 20:24:38,020 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 20:24:38,105 [main:302] - generating value of type = Char true depth = 3
2021-03-11 20:24:38,106 [main:95] - GENERATED = charArrayOf('機')
2021-03-11 20:24:38,180 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:24:38,181 [main:117] - GENERATED CALL = (InlinedString("sqpvl").internal).indexOfAny(charArrayOf('機'), InlinedInt(1381210728).internal, true)
2021-03-11 20:24:38,181 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@70abc6d1], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4fe258f2]]
2021-03-11 20:24:38,181 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4fe258f2]
2021-03-11 20:24:38,253 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:24:38,253 [main:117] - GENERATED CALL = (InlinedString("sqpvl").internal).length.div(104)
2021-03-11 20:24:38,254 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@193ae7ca], public abstract val length: kotlin.Int defined in kotlin.CharSequence[DeserializedPropertyDescriptor@3def229f]]
2021-03-11 20:24:38,254 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@193ae7ca]
2021-03-11 20:24:38,324 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:24:38,325 [main:117] - GENERATED CALL = (InlinedString("sqpvl").internal).subSequence(InlinedInt(1381210728).internal, -509151029).length
2021-03-11 20:24:38,325 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@39c0684e], public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@54f1c59c]]
2021-03-11 20:24:38,325 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@39c0684e]
2021-03-11 20:24:38,325 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@54f1c59c]
2021-03-11 20:24:38,395 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:24:38,396 [main:117] - GENERATED CALL = (InlinedString("sqpvl").internal).get(InlinedInt(1381210728).internal).minus('錟')
2021-03-11 20:24:38,396 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@70abc6d1]]
2021-03-11 20:24:38,396 [main:117] - GENERATED CALL = (InlinedString("sqpvl").internal).length
2021-03-11 20:24:38,396 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@103a0cf8], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2b67e627]]
2021-03-11 20:24:38,396 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@103a0cf8]
2021-03-11 20:24:38,396 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2b67e627]
2021-03-11 20:24:38,396 [main:117] - GENERATED CALL = (InlinedString("sqpvl").internal).compareTo(InlinedString("sqpvl").internal).takeLowestOneBit()
2021-03-11 20:24:38,396 [main:61] - replacement of -989664132 of type Int is (InlinedString("sqpvl").internal).get(InlinedInt(1381210728).internal).minus('錟')
2021-03-11 20:24:38,466 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:24:38,466 [main:53] - replacing ({ InlinedString("xsyqa")}, Function0<InlinedString>)
2021-03-11 20:24:38,466 [main:50] - replacing { InlinedString("xsyqa")} Function0<InlinedString>
2021-03-11 20:24:38,467 [main:54] - Getting value of type Function0<InlinedString>
2021-03-11 20:24:38,536 [main:302] - generating value of type = Function0<InlinedString> false depth = 0
2021-03-11 20:24:38,537 [main:302] - generating value of type = InlinedString false depth = 1
2021-03-11 20:24:38,537 [main:112] - generating klass InlinedString text = inline class InlinedString(val internal: String)
2021-03-11 20:24:38,606 [main:194] - Type params = []
2021-03-11 20:24:38,675 [main:302] - generating value of type = String true depth = 3
2021-03-11 20:24:38,676 [main:58] - GENERATED VALUE OF TYPE Function0<InlinedString> = { InlinedString("xtolx")}
2021-03-11 20:24:38,676 [main:61] - GENERATED IS CALL =false
2021-03-11 20:24:38,749 [main:67] - randomType = Long
2021-03-11 20:24:38,820 [main:302] - generating value of type = Long true depth = 0
2021-03-11 20:24:38,865 [main:106] - GETTING Function0<InlinedString> from String
2021-03-11 20:24:38,890 [main:106] - GETTING Function0<InlinedString> from InlinedString
2021-03-11 20:24:38,896 [main:106] - GETTING Function0<InlinedString> from InlinedString
2021-03-11 20:24:38,897 [main:106] - GETTING Function0<InlinedString> from Int
2021-03-11 20:24:38,940 [main:106] - GETTING Function0<InlinedString> from InlinedInt
2021-03-11 20:24:38,945 [main:61] - replacement of { InlinedString("xsyqa")} of type Function0<InlinedString> is { InlinedString("xtolx")}
2021-03-11 20:24:39,052 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:24:39,053 [main:53] - replacing (InlinedInt(InlinedInt((InlinedString("sqpvl").internal).get(InlinedInt(1381210728).internal).minus('錟')).internal), InlinedInt)
2021-03-11 20:24:39,053 [main:50] - replacing InlinedInt(InlinedInt((InlinedString("sqpvl").internal).get(InlinedInt(1381210728).internal).minus('錟')).internal) InlinedInt
2021-03-11 20:24:39,053 [main:54] - Getting value of type InlinedInt
2021-03-11 20:24:39,133 [main:302] - generating value of type = InlinedInt false depth = 0
2021-03-11 20:24:39,133 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:24:39,250 [main:194] - Type params = []
2021-03-11 20:24:39,323 [main:302] - generating value of type = Int true depth = 2
2021-03-11 20:24:39,324 [main:58] - GENERATED VALUE OF TYPE InlinedInt = InlinedInt(1765082048)
2021-03-11 20:24:39,324 [main:61] - GENERATED IS CALL =true
2021-03-11 20:24:39,627 [main:67] - randomType = HashMap<Byte?, UInt>
2021-03-11 20:24:39,696 [main:302] - generating value of type = HashMap<Byte?, UInt> false depth = 0
2021-03-11 20:24:39,770 [main:43] - GENERATING CALL OF fun <K, V> HashMap(): HashMap<Byte?, UInt> = TODO()
2021-03-11 20:24:39,771 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> HashMap(): HashMap<Byte?, UInt> = TODO()
2021-03-11 20:24:39,842 [main:95] - GENERATED = HashMap<Byte?, UInt>()
2021-03-11 20:24:39,939 [main:106] - GETTING InlinedInt from InlinedString
2021-03-11 20:24:39,943 [main:106] - GETTING InlinedInt from String
2021-03-11 20:24:39,959 [main:106] - GETTING InlinedInt from InlinedString
2021-03-11 20:24:39,960 [main:106] - GETTING InlinedInt from Int
2021-03-11 20:24:39,988 [main:106] - GETTING InlinedInt from InlinedInt
2021-03-11 20:24:39,993 [main:61] - replacement of InlinedInt(InlinedInt((InlinedString("sqpvl").internal).get(InlinedInt(1381210728).internal).minus('錟')).internal) of type InlinedInt is bar({ InlinedInt(-365570261)})
2021-03-11 20:24:40,082 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:24:40,082 [main:53] - replacing ({ bar({ InlinedInt(-365570261)})}, Function0<InlinedInt>)
2021-03-11 20:24:40,082 [main:50] - replacing { bar({ InlinedInt(-365570261)})} Function0<InlinedInt>
2021-03-11 20:24:40,082 [main:54] - Getting value of type Function0<InlinedInt>
2021-03-11 20:24:40,157 [main:302] - generating value of type = Function0<InlinedInt> false depth = 0
2021-03-11 20:24:40,157 [main:302] - generating value of type = InlinedInt false depth = 1
2021-03-11 20:24:40,158 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:24:40,267 [main:194] - Type params = []
2021-03-11 20:24:40,338 [main:302] - generating value of type = Int true depth = 3
2021-03-11 20:24:40,339 [main:58] - GENERATED VALUE OF TYPE Function0<InlinedInt> = { InlinedInt(308091796)}
2021-03-11 20:24:40,339 [main:61] - GENERATED IS CALL =false
2021-03-11 20:24:40,412 [main:67] - randomType = Byte
2021-03-11 20:24:40,481 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:24:40,513 [main:106] - GETTING Function0<InlinedInt> from Int
2021-03-11 20:24:40,542 [main:106] - GETTING Function0<InlinedInt> from InlinedInt
2021-03-11 20:24:40,547 [main:106] - GETTING Function0<InlinedInt> from InlinedString
2021-03-11 20:24:40,552 [main:106] - GETTING Function0<InlinedInt> from String
2021-03-11 20:24:40,568 [main:106] - GETTING Function0<InlinedInt> from InlinedString
2021-03-11 20:24:40,568 [main:61] - replacement of { bar({ InlinedInt(-365570261)})} of type Function0<InlinedInt> is { InlinedInt(308091796)}
2021-03-11 20:24:40,637 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:24:40,638 [main:53] - replacing (baz { InlinedString("tyhyr")}, InlinedString)
2021-03-11 20:24:40,638 [main:50] - replacing baz { InlinedString("tyhyr")} InlinedString
2021-03-11 20:24:40,638 [main:54] - Getting value of type InlinedString
2021-03-11 20:24:40,707 [main:302] - generating value of type = InlinedString false depth = 0
2021-03-11 20:24:40,707 [main:112] - generating klass InlinedString text = inline class InlinedString(val internal: String)
2021-03-11 20:24:40,777 [main:194] - Type params = []
2021-03-11 20:24:40,846 [main:302] - generating value of type = String true depth = 2
2021-03-11 20:24:40,847 [main:58] - GENERATED VALUE OF TYPE InlinedString = InlinedString("ocxeg")
2021-03-11 20:24:40,847 [main:61] - GENERATED IS CALL =true
2021-03-11 20:24:40,848 [main:67] - randomType = InlinedString
2021-03-11 20:24:40,917 [main:302] - generating value of type = InlinedString false depth = 0
2021-03-11 20:24:40,918 [main:112] - generating klass InlinedString text = inline class InlinedString(val internal: String)
2021-03-11 20:24:40,987 [main:194] - Type params = []
2021-03-11 20:24:41,078 [main:302] - generating value of type = String true depth = 2
2021-03-11 20:24:41,085 [main:106] - GETTING InlinedString from InlinedInt
2021-03-11 20:24:41,092 [main:106] - GETTING InlinedString from Int
2021-03-11 20:24:41,128 [main:106] - GETTING InlinedString from InlinedString
2021-03-11 20:24:41,132 [main:61] - replacement of baz { InlinedString("tyhyr")} of type InlinedString is foo<InlinedString>({ InlinedString("egswj")})
2021-03-11 20:24:41,215 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:24:41,215 [main:66] - Compilation checking started
2021-03-11 20:24:41,431 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return (callback).invoke()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { InlinedInt(1868503123)}
    bar({ i})

    foo { InlinedString((linkedSetOf<InlinedString>(InlinedString("ittpz"))).size.toString(InlinedInt(1381210728).internal))}
    foo<InlinedString>({ InlinedString("egswj")})
}


2021-03-11 20:24:41,431 [main:53] - replacing (callback, Function0<InlinedString>)
2021-03-11 20:24:41,431 [main:50] - replacing callback Function0<InlinedString>
2021-03-11 20:24:41,431 [main:54] - Getting value of type Function0<InlinedString>
2021-03-11 20:24:41,517 [main:302] - generating value of type = Function0<InlinedString> false depth = 0
2021-03-11 20:24:41,518 [main:302] - generating value of type = InlinedString false depth = 1
2021-03-11 20:24:41,518 [main:112] - generating klass InlinedString text = inline class InlinedString(val internal: String)
2021-03-11 20:24:41,600 [main:194] - Type params = []
2021-03-11 20:24:41,679 [main:302] - generating value of type = String true depth = 3
2021-03-11 20:24:41,680 [main:58] - GENERATED VALUE OF TYPE Function0<InlinedString> = { InlinedString("afpcr")}
2021-03-11 20:24:41,680 [main:61] - GENERATED IS CALL =false
2021-03-11 20:24:41,753 [main:67] - randomType = Array<InlinedInt>
2021-03-11 20:24:41,823 [main:302] - generating value of type = Array<InlinedInt> false depth = 0
2021-03-11 20:24:41,896 [main:43] - GENERATING CALL OF fun <T> arrayOfNulls(size: kotlin.Int): Array<InledInt> = TODO()
2021-03-11 20:24:41,897 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOfNulls(size: kotlin.Int): Array<InledInt> = TODO()
2021-03-11 20:24:42,039 [main:302] - generating value of type = Int true depth = 3
2021-03-11 20:24:42,039 [main:95] - GENERATED = arrayOfNulls<InlinedInt>(-1048599986)
2021-03-11 20:24:42,051 [main:106] - GETTING Function0<InlinedString> from String
2021-03-11 20:24:42,070 [main:106] - GETTING Function0<InlinedString> from InlinedInt
2021-03-11 20:24:42,075 [main:106] - GETTING Function0<InlinedString> from Int
2021-03-11 20:24:42,103 [main:106] - GETTING Function0<InlinedString> from Function0<InlinedString>
2021-03-11 20:24:42,111 [main:61] - replacement of callback of type Function0<InlinedString> is { InlinedString("afpcr")}
2021-03-11 20:24:42,180 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 20:24:42,180 [main:66] - Compilation checking started
2021-03-11 20:24:42,414 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return (callback).invoke()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return { InlinedString("afpcr")}()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { InlinedInt(1868503123)}
    bar({ i})

    foo { InlinedString((linkedSetOf<InlinedString>(InlinedString("ittpz"))).size.toString(InlinedInt(1381210728).internal))}
    foo<InlinedString>({ InlinedString("egswj")})
}


2021-03-11 20:24:42,415 [main:53] - replacing ({ i}, Function0<InlinedInt>)
2021-03-11 20:24:42,415 [main:50] - replacing { i} Function0<InlinedInt>
2021-03-11 20:24:42,415 [main:54] - Getting value of type Function0<InlinedInt>
2021-03-11 20:24:42,486 [main:302] - generating value of type = Function0<InlinedInt> false depth = 0
2021-03-11 20:24:42,487 [main:302] - generating value of type = InlinedInt false depth = 1
2021-03-11 20:24:42,487 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:24:42,559 [main:194] - Type params = []
2021-03-11 20:24:42,631 [main:302] - generating value of type = Int true depth = 3
2021-03-11 20:24:42,632 [main:58] - GENERATED VALUE OF TYPE Function0<InlinedInt> = { InlinedInt(1482976080)}
2021-03-11 20:24:42,632 [main:61] - GENERATED IS CALL =false
2021-03-11 20:24:42,633 [main:67] - randomType = InlinedString
2021-03-11 20:24:42,705 [main:302] - generating value of type = InlinedString false depth = 0
2021-03-11 20:24:42,706 [main:112] - generating klass InlinedString text = inline class InlinedString(val internal: String)
2021-03-11 20:24:42,777 [main:194] - Type params = []
2021-03-11 20:24:42,846 [main:302] - generating value of type = String true depth = 2
2021-03-11 20:24:42,852 [main:106] - GETTING Function0<InlinedInt> from InlinedString
2021-03-11 20:24:42,858 [main:106] - GETTING Function0<InlinedInt> from InlinedString
2021-03-11 20:24:42,860 [main:106] - GETTING Function0<InlinedInt> from String
2021-03-11 20:24:42,877 [main:106] - GETTING Function0<InlinedInt> from InlinedInt
2021-03-11 20:24:42,882 [main:106] - GETTING Function0<InlinedInt> from InlinedString
2021-03-11 20:24:42,883 [main:106] - GETTING Function0<InlinedInt> from Int
2021-03-11 20:24:42,913 [main:106] - GETTING Function0<InlinedInt> from InlinedInt
2021-03-11 20:24:42,913 [main:61] - replacement of { i} of type Function0<InlinedInt> is { InlinedInt(1482976080)}
2021-03-11 20:24:42,983 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:24:42,983 [main:66] - Compilation checking started
2021-03-11 20:24:43,188 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return (callback).invoke()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return { InlinedString("afpcr")}()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { InlinedInt(1868503123)}
    bar({ InlinedInt(1482976080)})

    foo { InlinedString((linkedSetOf<InlinedString>(InlinedString("ittpz"))).size.toString(InlinedInt(1381210728).internal))}
    foo<InlinedString>({ InlinedString("egswj")})
}


2021-03-11 20:24:43,189 [main:53] - replacing (InlinedString((linkedSetOf<InlinedString>(InlinedString("ittpz"))).size.toString(InlinedInt(1381210728).internal)), InlinedString)
2021-03-11 20:24:43,189 [main:50] - replacing InlinedString((linkedSetOf<InlinedString>(InlinedString("ittpz"))).size.toString(InlinedInt(1381210728).internal)) InlinedString
2021-03-11 20:24:43,189 [main:54] - Getting value of type InlinedString
2021-03-11 20:24:43,261 [main:302] - generating value of type = InlinedString false depth = 0
2021-03-11 20:24:43,261 [main:112] - generating klass InlinedString text = inline class InlinedString(val internal: String)
2021-03-11 20:24:43,330 [main:194] - Type params = []
2021-03-11 20:24:43,399 [main:302] - generating value of type = String true depth = 2
2021-03-11 20:24:43,400 [main:58] - GENERATED VALUE OF TYPE InlinedString = InlinedString("gungj")
2021-03-11 20:24:43,400 [main:61] - GENERATED IS CALL =true
2021-03-11 20:24:43,724 [main:67] - randomType = HashMap<ULong, UShort>
2021-03-11 20:24:43,793 [main:302] - generating value of type = HashMap<ULong, UShort> false depth = 0
2021-03-11 20:24:43,866 [main:43] - GENERATING CALL OF fun <K, V> HashMap(initialCapacity: kotlin.Int): HashMap<ULong, UShort> = TODO()
2021-03-11 20:24:43,867 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> HashMap(initialCapacity: kotlin.Int): HashMap<ULong, UShort> = TODO()
2021-03-11 20:24:44,013 [main:302] - generating value of type = Int true depth = 3
2021-03-11 20:24:44,013 [main:95] - GENERATED = HashMap<ULong, UShort>(-530779780)
2021-03-11 20:24:44,112 [main:106] - GETTING InlinedString from Int
2021-03-11 20:24:44,141 [main:106] - GETTING InlinedString from InlinedInt
2021-03-11 20:24:44,145 [main:106] - GETTING InlinedString from InlinedString
2021-03-11 20:24:44,148 [main:61] - replacement of InlinedString((linkedSetOf<InlinedString>(InlinedString("ittpz"))).size.toString(InlinedInt(1381210728).internal)) of type InlinedString is InlinedString("gungj")
2021-03-11 20:24:44,218 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:24:44,218 [main:66] - Compilation checking started
2021-03-11 20:24:44,391 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return (callback).invoke()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return { InlinedString("afpcr")}()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { InlinedInt(1868503123)}
    bar({ InlinedInt(1482976080)})

    foo { InlinedString("gungj")}
    foo<InlinedString>({ InlinedString("egswj")})
}


2021-03-11 20:24:44,391 [main:53] - replacing (989664132, Int)
2021-03-11 20:24:44,391 [main:50] - replacing 989664132 Int
2021-03-11 20:24:44,391 [main:54] - Getting value of type Int
2021-03-11 20:24:44,457 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:24:44,458 [main:58] - GENERATED VALUE OF TYPE Int = 1414691588
2021-03-11 20:24:44,458 [main:61] - GENERATED IS CALL =false
2021-03-11 20:24:44,689 [main:67] - randomType = ArrayList<ULong?>
2021-03-11 20:24:44,755 [main:302] - generating value of type = ArrayList<ULong?> false depth = 0
2021-03-11 20:24:44,825 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: ULong?): ArrayList<ULong?> = TODO()
2021-03-11 20:24:44,826 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: ULong?): ArrayList<ULong?> = TODO()
2021-03-11 20:24:44,894 [main:302] - generating value of type = ULong true depth = 3
2021-03-11 20:24:44,895 [main:95] - GENERATED = arrayListOf<ULong?>(1395713651176378573.toULong())
2021-03-11 20:24:45,015 [main:149] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@5704bb8d]
2021-03-11 20:24:45,016 [main:149] - GENERATING call of type public fun <@kotlin.internal.OnlyInputTypes T> kotlin.Array<out T>.lastIndexOf(element: T): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2d9a273e]
2021-03-11 20:24:45,082 [main:302] - generating value of type = T false depth = 0
2021-03-11 20:24:45,220 [main:43] - GENERATING CALL OF fun <T> checkNotNull(value: UShort): T = TODO()
2021-03-11 20:24:45,221 [main:61] - WITHOUT TYPE PARAMS = fun <T> checkNotNull(value: UShort): T = TODO()
2021-03-11 20:24:45,290 [main:302] - generating value of type = UShort true depth = 3
2021-03-11 20:24:45,291 [main:95] - GENERATED = checkNotNull<UShort>(25730.toUShort())
2021-03-11 20:24:45,291 [main:78] - Generated call from random type = (arrayListOf<ULong?>(1395713651176378573.toULong())).toArray().lastIndexOf(checkNotNull<UShort>(25730.toUShort()))
2021-03-11 20:24:45,292 [main:106] - GETTING Int from String
2021-03-11 20:24:45,309 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@70abc6d1], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1683d77d]]
2021-03-11 20:24:45,309 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1683d77d]
2021-03-11 20:24:45,309 [main:117] - GENERATED CALL = (InlinedString("sqpvl").internal).length.countTrailingZeroBits()
2021-03-11 20:24:45,309 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@103a0cf8], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@381d5eb8]]
2021-03-11 20:24:45,309 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@103a0cf8]
2021-03-11 20:24:45,376 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:24:45,376 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@381d5eb8]
2021-03-11 20:24:45,376 [main:117] - GENERATED CALL = (InlinedString("sqpvl").internal).compareTo("ojexk").dec()
2021-03-11 20:24:45,376 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@103a0cf8], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c7b0f5d]]
2021-03-11 20:24:45,377 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@103a0cf8]
2021-03-11 20:24:45,443 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:24:45,443 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c7b0f5d]
2021-03-11 20:24:45,443 [main:117] - GENERATED CALL = (InlinedString("sqpvl").internal).compareTo("uhcvc").shl(InlinedInt(1381210728).internal)
2021-03-11 20:24:45,443 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@103a0cf8], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@41f3c636]]
2021-03-11 20:24:45,443 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@103a0cf8]
2021-03-11 20:24:45,510 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:24:45,511 [main:117] - GENERATED CALL = (InlinedString("sqpvl").internal).compareTo("lkciz").sign
2021-03-11 20:24:45,511 [main:113] - Case = [public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7042a56]]
2021-03-11 20:24:45,511 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7042a56]
2021-03-11 20:24:45,578 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 20:24:45,578 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 20:24:45,579 [main:117] - GENERATED CALL = (InlinedString("sqpvl").internal).indexOfFirst({a: Char -> true})
2021-03-11 20:24:45,579 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@70abc6d1], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@219912ec]]
2021-03-11 20:24:45,579 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@219912ec]
2021-03-11 20:24:45,646 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:24:45,646 [main:117] - GENERATED CALL = (InlinedString("sqpvl").internal).length.coerceAtLeast(-2042472184)
2021-03-11 20:24:45,646 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@103a0cf8], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@73e802be]]
2021-03-11 20:24:45,646 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@103a0cf8]
2021-03-11 20:24:45,713 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:24:45,713 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@73e802be]
2021-03-11 20:24:45,713 [main:117] - GENERATED CALL = (InlinedString("sqpvl").internal).compareTo("dezgi").takeHighestOneBit()
2021-03-11 20:24:45,713 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@103a0cf8], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3aaede52]]
2021-03-11 20:24:45,713 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@103a0cf8]
2021-03-11 20:24:45,713 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3aaede52]
2021-03-11 20:24:45,713 [main:117] - GENERATED CALL = (InlinedString("sqpvl").internal).compareTo(InlinedString("sqpvl").internal).countOneBits()
2021-03-11 20:24:45,714 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@70abc6d1], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4feb580]]
2021-03-11 20:24:45,714 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4feb580]
2021-03-11 20:24:45,714 [main:117] - GENERATED CALL = (InlinedString("sqpvl").internal).length.toInt()
2021-03-11 20:24:45,714 [main:113] - Case = [public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ee13335]]
2021-03-11 20:24:45,714 [main:149] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ee13335]
2021-03-11 20:24:45,820 [main:302] - generating value of type = CharArray false depth = 0
2021-03-11 20:24:45,893 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 20:24:45,894 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 20:24:45,977 [main:302] - generating value of type = Char true depth = 3
2021-03-11 20:24:45,978 [main:95] - GENERATED = charArrayOf('ፏ')
2021-03-11 20:24:46,071 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:24:46,138 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:24:46,139 [main:117] - GENERATED CALL = (InlinedString("sqpvl").internal).lastIndexOfAny(charArrayOf('ፏ'), 1814538096, false)
2021-03-11 20:24:46,139 [main:61] - replacement of 989664132 of type Int is (InlinedString("sqpvl").internal).compareTo("ojexk").dec()
2021-03-11 20:24:46,204 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:24:46,205 [main:53] - replacing (callback, Function0<InlinedString>)
2021-03-11 20:24:46,205 [main:50] - replacing callback Function0<InlinedString>
2021-03-11 20:24:46,205 [main:54] - Getting value of type Function0<InlinedString>
2021-03-11 20:24:46,271 [main:302] - generating value of type = Function0<InlinedString> false depth = 0
2021-03-11 20:24:46,271 [main:302] - generating value of type = InlinedString false depth = 1
2021-03-11 20:24:46,271 [main:112] - generating klass InlinedString text = inline class InlinedString(val internal: String)
2021-03-11 20:24:46,337 [main:194] - Type params = []
2021-03-11 20:24:46,402 [main:302] - generating value of type = String true depth = 3
2021-03-11 20:24:46,403 [main:58] - GENERATED VALUE OF TYPE Function0<InlinedString> = { InlinedString("zipeh")}
2021-03-11 20:24:46,403 [main:61] - GENERATED IS CALL =false
2021-03-11 20:24:46,404 [main:67] - randomType = InlinedInt
2021-03-11 20:24:46,470 [main:302] - generating value of type = InlinedInt false depth = 0
2021-03-11 20:24:46,470 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:24:46,536 [main:194] - Type params = []
2021-03-11 20:24:46,603 [main:302] - generating value of type = Int true depth = 2
2021-03-11 20:24:46,609 [main:106] - GETTING Function0<InlinedString> from Int
2021-03-11 20:24:46,639 [main:106] - GETTING Function0<InlinedString> from InlinedString
2021-03-11 20:24:46,644 [main:106] - GETTING Function0<InlinedString> from InlinedInt
2021-03-11 20:24:46,649 [main:106] - GETTING Function0<InlinedString> from InlinedString
2021-03-11 20:24:46,650 [main:106] - GETTING Function0<InlinedString> from String
2021-03-11 20:24:46,665 [main:61] - replacement of callback of type Function0<InlinedString> is { InlinedString("zipeh")}
2021-03-11 20:24:46,731 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 20:24:46,731 [main:53] - replacing (InlinedInt(InlinedInt((InlinedString("sqpvl").internal).get(InlinedInt(1381210728).internal).minus('錟')).internal), InlinedInt)
2021-03-11 20:24:46,731 [main:50] - replacing InlinedInt(InlinedInt((InlinedString("sqpvl").internal).get(InlinedInt(1381210728).internal).minus('錟')).internal) InlinedInt
2021-03-11 20:24:46,731 [main:54] - Getting value of type InlinedInt
2021-03-11 20:24:46,797 [main:302] - generating value of type = InlinedInt false depth = 0
2021-03-11 20:24:46,798 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:24:46,904 [main:194] - Type params = []
2021-03-11 20:24:46,991 [main:302] - generating value of type = Int true depth = 2
2021-03-11 20:24:46,991 [main:58] - GENERATED VALUE OF TYPE InlinedInt = InlinedInt(1767325627)
2021-03-11 20:24:46,992 [main:61] - GENERATED IS CALL =true
2021-03-11 20:24:47,078 [main:67] - randomType = Byte
2021-03-11 20:24:47,145 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:24:47,176 [main:106] - GETTING InlinedInt from InlinedString
2021-03-11 20:24:47,180 [main:106] - GETTING InlinedInt from Int
2021-03-11 20:24:47,209 [main:106] - GETTING InlinedInt from InlinedInt
2021-03-11 20:24:47,212 [main:61] - replacement of InlinedInt(InlinedInt((InlinedString("sqpvl").internal).get(InlinedInt(1381210728).internal).minus('錟')).internal) of type InlinedInt is bar({ InlinedInt(-365570261)})
2021-03-11 20:24:47,279 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:24:47,279 [main:53] - replacing (InlinedInt(-1634120613), InlinedInt)
2021-03-11 20:24:47,279 [main:50] - replacing InlinedInt(-1634120613) InlinedInt
2021-03-11 20:24:47,279 [main:54] - Getting value of type InlinedInt
2021-03-11 20:24:47,345 [main:302] - generating value of type = InlinedInt false depth = 0
2021-03-11 20:24:47,345 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:24:47,411 [main:194] - Type params = []
2021-03-11 20:24:47,477 [main:302] - generating value of type = Int true depth = 2
2021-03-11 20:24:47,477 [main:58] - GENERATED VALUE OF TYPE InlinedInt = InlinedInt(1125898314)
2021-03-11 20:24:47,477 [main:61] - GENERATED IS CALL =true
2021-03-11 20:24:47,685 [main:67] - randomType = ArrayList<HashSet<InlinedInt?>>
2021-03-11 20:24:47,752 [main:302] - generating value of type = ArrayList<HashSet<InlinedInt?>> false depth = 0
2021-03-11 20:24:47,848 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<HashSet<InledInt?>> = TODO()
2021-03-11 20:24:47,849 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<HashSet<InledInt?>> = TODO()
2021-03-11 20:24:47,921 [main:95] - GENERATED = arrayListOf<HashSet<InlinedInt?>>()
2021-03-11 20:24:48,122 [main:106] - GETTING InlinedInt from Int
2021-03-11 20:24:48,151 [main:106] - GETTING InlinedInt from InlinedInt
2021-03-11 20:24:48,155 [main:61] - replacement of InlinedInt(-1634120613) of type InlinedInt is bar({ InlinedInt(-365570261)})
2021-03-11 20:24:48,220 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:24:48,221 [main:53] - replacing ("xsyqa", String)
2021-03-11 20:24:48,221 [main:50] - replacing "xsyqa" String
2021-03-11 20:24:48,221 [main:54] - Getting value of type String
2021-03-11 20:24:48,287 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:24:48,288 [main:58] - GENERATED VALUE OF TYPE String = "wudmb"
2021-03-11 20:24:48,288 [main:61] - GENERATED IS CALL =false
2021-03-11 20:24:48,357 [main:67] - randomType = InlinedString?
2021-03-11 20:24:48,422 [main:302] - generating value of type = InlinedString false depth = 0
2021-03-11 20:24:48,423 [main:112] - generating klass InlinedString text = inline class InlinedString(val internal: String)
2021-03-11 20:24:48,488 [main:194] - Type params = []
2021-03-11 20:24:48,554 [main:302] - generating value of type = String true depth = 2
2021-03-11 20:24:48,560 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e2898cd]
2021-03-11 20:24:48,560 [main:78] - Generated call from random type = (InlinedString("oqeey"))?.internal.reversed()
2021-03-11 20:24:48,561 [main:106] - GETTING String from InlinedString
2021-03-11 20:24:48,565 [main:113] - Case = [public final val internal: kotlin.String defined in InlinedString[PropertyDescriptorImpl@245496a8], @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@747d22cc]]
2021-03-11 20:24:48,565 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@747d22cc]
2021-03-11 20:24:48,565 [main:117] - GENERATED CALL = (baz({ InlinedString("tsepv")})).internal.toUpperCase()
2021-03-11 20:24:48,565 [main:113] - Case = [public final val internal: kotlin.String defined in InlinedString[PropertyDescriptorImpl@245496a8], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f55020e]]
2021-03-11 20:24:48,565 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f55020e]
2021-03-11 20:24:48,565 [main:117] - GENERATED CALL = (baz({ InlinedString("tsepv")})).internal.toLowerCase()
2021-03-11 20:24:48,565 [main:113] - Case = [public final val internal: kotlin.String defined in InlinedString[PropertyDescriptorImpl@245496a8], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31fd23ba]]
2021-03-11 20:24:48,566 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31fd23ba]
2021-03-11 20:24:48,631 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:24:48,697 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:24:48,698 [main:117] - GENERATED CALL = (baz({ InlinedString("tsepv")})).internal.substringBefore('篛', "dvtbj")
2021-03-11 20:24:48,698 [main:113] - Case = [public final val internal: kotlin.String defined in InlinedString[PropertyDescriptorImpl@245496a8], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e848fd1]]
2021-03-11 20:24:48,698 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e848fd1]
2021-03-11 20:24:48,764 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 20:24:48,833 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 20:24:48,834 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 20:24:49,002 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 20:24:49,073 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 20:24:49,074 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 20:24:49,210 [main:302] - generating value of type = String true depth = 6
2021-03-11 20:24:49,211 [main:95] - GENERATED = StringBuilder("hqumu")
2021-03-11 20:24:49,211 [main:95] - GENERATED = StringBuilder(StringBuilder("hqumu"))
2021-03-11 20:24:49,211 [main:117] - GENERATED CALL = (baz({ InlinedString("tsepv")})).internal.removePrefix(StringBuilder(StringBuilder("hqumu")))
2021-03-11 20:24:49,211 [main:113] - Case = [public final val internal: kotlin.String defined in InlinedString[PropertyDescriptorImpl@245496a8], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1700d8a1]]
2021-03-11 20:24:49,211 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1700d8a1]
2021-03-11 20:24:49,278 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:24:49,279 [main:117] - GENERATED CALL = (baz({ InlinedString("tsepv")})).internal.substringBeforeLast('蠱', InlinedString("sqpvl").internal)
2021-03-11 20:24:49,279 [main:113] - Case = [public final val internal: kotlin.String defined in InlinedString[PropertyDescriptorImpl@245496a8], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@234bf75d]]
2021-03-11 20:24:49,279 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@234bf75d]
2021-03-11 20:24:49,345 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:24:49,345 [main:117] - GENERATED CALL = (baz({ InlinedString("tsepv")})).internal.plus("ydrlo")
2021-03-11 20:24:49,345 [main:113] - Case = [public final val internal: kotlin.String defined in InlinedString[PropertyDescriptorImpl@245496a8], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38f0e19c]]
2021-03-11 20:24:49,345 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38f0e19c]
2021-03-11 20:24:49,411 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 20:24:49,411 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 20:24:49,411 [main:117] - GENERATED CALL = (baz({ InlinedString("tsepv")})).internal.takeWhile({a: Char -> false})
2021-03-11 20:24:49,411 [main:113] - Case = [public final val internal: kotlin.String defined in InlinedString[PropertyDescriptorImpl@245496a8]]
2021-03-11 20:24:49,411 [main:117] - GENERATED CALL = (baz({ InlinedString("tsepv")})).internal
2021-03-11 20:24:49,412 [main:113] - Case = [public final val internal: kotlin.String defined in InlinedString[PropertyDescriptorImpl@245496a8], public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7fcd6734]]
2021-03-11 20:24:49,412 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7fcd6734]
2021-03-11 20:24:49,477 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 20:24:49,478 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 20:24:49,478 [main:117] - GENERATED CALL = (baz({ InlinedString("tsepv")})).internal.dropWhile({a: Char -> false})
2021-03-11 20:24:49,478 [main:113] - Case = [public final val internal: kotlin.String defined in InlinedString[PropertyDescriptorImpl@245496a8], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61c03bf5]]
2021-03-11 20:24:49,478 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61c03bf5]
2021-03-11 20:24:49,544 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 20:24:49,548 [main:117] - GENERATED CALL = (baz({ InlinedString("tsepv")})).internal.removeSurrounding("cndcc")
2021-03-11 20:24:49,548 [main:61] - replacement of "xsyqa" of type String is (baz({ InlinedString("tsepv")})).internal.dropWhile({a: Char -> false})
2021-03-11 20:24:49,615 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:24:49,682 [main:119] - TRYING TO REPLACE CONSTANT 1868503123
2021-03-11 20:24:49,749 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 20:24:49,749 [main:66] - Compilation checking started
2021-03-11 20:24:49,907 [main:53] - Result = true
Text:
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return (callback).invoke()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return { InlinedString("afpcr")}()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { InlinedInt(1482976080)}
    bar({ InlinedInt(1482976080)})

    foo { InlinedString("gungj")}
    foo<InlinedString>({ InlinedString("egswj")})
}


2021-03-11 20:24:49,907 [main:119] - TRYING TO REPLACE CONSTANT 1482976080
2021-03-11 20:24:49,977 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 20:24:49,977 [main:66] - Compilation checking started
2021-03-11 20:24:50,188 [main:66] - Compilation checking started
2021-03-11 20:24:50,188 [main:71] - Wrong syntax or breaks conditions
2021-03-11 20:24:50,195 [main:41] - AFTER TRY 0 res = inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}


2021-03-11 20:24:50,345 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:24:50,420 [main:194] - Type params = []
2021-03-11 20:24:50,493 [main:302] - generating value of type = Int true depth = 1
2021-03-11 20:24:50,494 [main:112] - generating klass InlinedString text = inline class InlinedString(val internal: String)
2021-03-11 20:24:50,568 [main:194] - Type params = []
2021-03-11 20:24:50,642 [main:302] - generating value of type = String true depth = 1
2021-03-11 20:24:50,643 [main:112] - generating klass Kla0 text = enum class Kla0 {
    Kla1
}
2021-03-11 20:24:50,643 [main:112] - generating klass Kla1 text = Kla1
2021-03-11 20:24:50,792 [main:43] - GENERATING CALL OF inline fun <T> foo(callback: () -> T): T {
    return callback()
}
2021-03-11 20:24:50,871 [main:61] - WITHOUT TYPE PARAMS = inline fun <T> foo(callback: () -> Kla0): Kla0 {
    return callback()
}
2021-03-11 20:24:51,024 [main:302] - generating value of type = Function0<Kla0> false depth = 1
2021-03-11 20:24:51,025 [main:302] - generating value of type = Kla0 false depth = 2
2021-03-11 20:24:51,025 [main:112] - generating klass Kla0 text = enum class Kla0 {
    Kla1
}
2021-03-11 20:24:51,025 [main:95] - GENERATED = foo<Kla0>({ Kla0.Kla1})
2021-03-11 20:24:51,099 [main:43] - GENERATING CALL OF inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}
2021-03-11 20:24:51,100 [main:61] - WITHOUT TYPE PARAMS = inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}
2021-03-11 20:24:51,253 [main:302] - generating value of type = Function0<InlinedInt> false depth = 1
2021-03-11 20:24:51,254 [main:302] - generating value of type = InlinedInt false depth = 2
2021-03-11 20:24:51,255 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:24:51,369 [main:194] - Type params = []
2021-03-11 20:24:51,447 [main:302] - generating value of type = Int true depth = 4
2021-03-11 20:24:51,448 [main:95] - GENERATED = bar({ InlinedInt(-969093760)})
2021-03-11 20:24:51,533 [main:43] - GENERATING CALL OF inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}
2021-03-11 20:24:51,534 [main:61] - WITHOUT TYPE PARAMS = inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}
2021-03-11 20:24:51,699 [main:302] - generating value of type = Function0<InlinedString> false depth = 1
2021-03-11 20:24:51,699 [main:302] - generating value of type = InlinedString false depth = 2
2021-03-11 20:24:51,700 [main:112] - generating klass InlinedString text = inline class InlinedString(val internal: String)
2021-03-11 20:24:51,774 [main:194] - Type params = []
2021-03-11 20:24:51,848 [main:302] - generating value of type = String true depth = 4
2021-03-11 20:24:51,849 [main:95] - GENERATED = baz({ InlinedString("umkcf")})
2021-03-11 20:24:51,923 [main:43] - GENERATING CALL OF fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}
2021-03-11 20:24:51,924 [main:61] - WITHOUT TYPE PARAMS = fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}
2021-03-11 20:24:51,999 [main:302] - generating value of type = InlinedInt false depth = 1
2021-03-11 20:24:51,999 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:24:52,074 [main:194] - Type params = []
2021-03-11 20:24:52,148 [main:302] - generating value of type = Int true depth = 3
2021-03-11 20:24:52,148 [main:302] - generating value of type = InlinedString false depth = 1
2021-03-11 20:24:52,149 [main:112] - generating klass InlinedString text = inline class InlinedString(val internal: String)
2021-03-11 20:24:52,222 [main:194] - Type params = []
2021-03-11 20:24:52,295 [main:302] - generating value of type = String true depth = 3
2021-03-11 20:24:52,296 [main:95] - GENERATED = test(InlinedInt(719696459), InlinedString("xnkpx"))
2021-03-11 20:24:52,370 [main:43] - GENERATING CALL OF fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()
2021-03-11 20:24:52,370 [main:61] - WITHOUT TYPE PARAMS = fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()
2021-03-11 20:24:52,650 [main:302] - generating value of type = Function0<String> false depth = 1
2021-03-11 20:24:52,651 [main:302] - generating value of type = String true depth = 2
2021-03-11 20:24:52,651 [main:302] - generating value of type = Function0<String> false depth = 1
2021-03-11 20:24:52,652 [main:302] - generating value of type = String true depth = 2
2021-03-11 20:24:52,652 [main:95] - GENERATED = fu1({ "vagtc"}, { "jcovl"})
2021-03-11 20:24:52,736 [main:43] - Try №0
2021-03-11 20:25:03,889 [main:48] - Already checked
2021-03-11 20:25:07,468 [main:69] - Trying to insert abstract fun fu9(exception: Throwable)
2021-03-11 20:25:07,560 [main:66] - Compilation checking started
2021-03-11 20:25:08,752 [main:103] - Trying to change 195 nodes
2021-03-11 20:25:08,753 [main:107] - replacing (", got ", String)
2021-03-11 20:25:08,753 [main:50] - replacing ", got " String
2021-03-11 20:25:08,753 [main:54] - Getting value of type String
2021-03-11 20:25:08,897 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:25:08,930 [main:58] - GENERATED VALUE OF TYPE String = "dewpr"
2021-03-11 20:25:08,931 [main:61] - GENERATED IS CALL =false
2021-03-11 20:25:09,796 [main:67] - randomType = Map<Float?, LinkedHashMap<Kla4, InlinedInt>>
2021-03-11 20:25:09,797 [main:106] - GETTING String from Long
2021-03-11 20:25:09,839 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@775f0319], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57d8c30b]]
2021-03-11 20:25:09,839 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@775f0319]
2021-03-11 20:25:09,839 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57d8c30b]
2021-03-11 20:25:09,981 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:25:09,986 [main:117] - GENERATED CALL = ((((17594)).toLong())).toByte().toString(-492159537)
2021-03-11 20:25:09,986 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72c8390], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c70f8ae]]
2021-03-11 20:25:09,986 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72c8390]
2021-03-11 20:25:09,986 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c70f8ae]
2021-03-11 20:25:09,987 [main:117] - GENERATED CALL = ((((17594)).toLong())).toChar().plus((InlinedInt(-17594))?.internal.toString(-17594))
2021-03-11 20:25:09,987 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72c8390], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4045409b]]
2021-03-11 20:25:09,987 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72c8390]
2021-03-11 20:25:09,987 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4045409b]
2021-03-11 20:25:09,987 [main:117] - GENERATED CALL = ((((17594)).toLong())).toChar().lowercase()
2021-03-11 20:25:09,987 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@571d28fe], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]]
2021-03-11 20:25:09,987 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@571d28fe]
2021-03-11 20:25:09,987 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]
2021-03-11 20:25:09,988 [main:117] - GENERATED CALL = ((((17594)).toLong())).toLong().toString(InlinedInt(-463791997).internal)
2021-03-11 20:25:09,988 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]]
2021-03-11 20:25:09,988 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]
2021-03-11 20:25:10,127 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:25:10,132 [main:117] - GENERATED CALL = ((((17594)).toLong())).toString(305377566)
2021-03-11 20:25:10,132 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@283024a2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]]
2021-03-11 20:25:10,132 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@283024a2]
2021-03-11 20:25:10,265 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:25:10,270 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]
2021-03-11 20:25:10,270 [main:117] - GENERATED CALL = ((((17594)).toLong())).compareTo(-14).toString(InlinedInt(-463791997).internal)
2021-03-11 20:25:10,270 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@58d20a49], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2889e564]]
2021-03-11 20:25:10,270 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@58d20a49]
2021-03-11 20:25:10,270 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2889e564]
2021-03-11 20:25:10,397 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:25:10,401 [main:117] - GENERATED CALL = ((((17594)).toLong())).toShort().toString(2047263819)
2021-03-11 20:25:10,401 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72c8390], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@629a957]]
2021-03-11 20:25:10,401 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72c8390]
2021-03-11 20:25:10,401 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@629a957]
2021-03-11 20:25:10,401 [main:117] - GENERATED CALL = ((((17594)).toLong())).toChar().titlecase()
2021-03-11 20:25:10,401 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7a52df9c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]]
2021-03-11 20:25:10,401 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7a52df9c]
2021-03-11 20:25:10,401 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]
2021-03-11 20:25:10,402 [main:117] - GENERATED CALL = ((((17594)).toLong())).toInt().toString(InlinedInt(-463791997).internal)
2021-03-11 20:25:10,402 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72c8390], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d654126]]
2021-03-11 20:25:10,402 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72c8390]
2021-03-11 20:25:10,402 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d654126]
2021-03-11 20:25:10,402 [main:117] - GENERATED CALL = ((((17594)).toLong())).toChar().uppercase()
2021-03-11 20:25:10,402 [main:114] - replacement of ", got " of type String is ((((17594)).toLong())).toString(305377566)
2021-03-11 20:25:10,532 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:25:10,532 [main:66] - Compilation checking started
2021-03-11 20:25:11,220 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { prope2() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = "OK"

fun box378(): String {
    var prope4 = "FAIL 1"
    fu2 {
        prope4 = fu5()
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 2"
    fu2 {
        fu2 {
            fu2 {
                fu2 {
                    fu2 {
                        fu2 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 4"
    fu3 {
        fu3 {
            fu3 {
                fu3 {
                    fu3 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7)
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:25:11,222 [main:107] - replacing (getOrThrow(), Any?)
2021-03-11 20:25:11,222 [main:50] - replacing getOrThrow() Any?
2021-03-11 20:25:11,222 [main:54] - Getting value of type Any?
2021-03-11 20:25:11,350 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:25:11,350 [main:58] - GENERATED VALUE OF TYPE Any? = "qdecv"
2021-03-11 20:25:11,350 [main:61] - GENERATED IS CALL =false
2021-03-11 20:25:11,514 [main:67] - randomType = Kla0
2021-03-11 20:25:11,642 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 20:25:11,646 [main:112] - generating klass Kla0 text = enum class Kla0 {
    Kla1
}
2021-03-11 20:25:11,667 [main:149] - GENERATING call of type protected final fun clone(): kotlin.Any defined in Kla0[DeserializedSimpleFunctionDescriptor@67f331be]
2021-03-11 20:25:11,667 [main:78] - Generated call from random type = (Kla0.Kla1).clone()
2021-03-11 20:25:11,667 [main:114] - replacement of getOrThrow() of type Any? is (Kla0.Kla1).clone()
2021-03-11 20:25:11,793 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:25:11,793 [main:66] - Compilation checking started
2021-03-11 20:25:12,163 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { prope2() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = "OK"

fun box378(): String {
    var prope4 = "FAIL 1"
    fu2 {
        prope4 = fu5()
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 2"
    fu2 {
        fu2 {
            fu2 {
                fu2 {
                    fu2 {
                        fu2 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 4"
    fu3 {
        fu3 {
            fu3 {
                fu3 {
                    fu3 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.(Kla0.Kla1).clone()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7)
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:25:12,165 [main:107] - replacing ("tail-call optimization hit: method " + method + " has no state-machine ", String)
2021-03-11 20:25:12,165 [main:50] - replacing "tail-call optimization hit: method " + method + " has no state-machine " String
2021-03-11 20:25:12,165 [main:54] - Getting value of type String
2021-03-11 20:25:12,296 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:25:12,301 [main:58] - GENERATED VALUE OF TYPE String = "zqnqt"
2021-03-11 20:25:12,301 [main:61] - GENERATED IS CALL =false
2021-03-11 20:25:12,461 [main:67] - randomType = Double
2021-03-11 20:25:12,592 [main:302] - generating value of type = Double true depth = 0
2021-03-11 20:25:12,624 [main:149] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@456f7dd3]
2021-03-11 20:25:12,624 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]
2021-03-11 20:25:12,749 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:25:12,754 [main:78] - Generated call from random type = (0.6925053604068289).toLong().toString(278484088)
2021-03-11 20:25:12,755 [main:106] - GETTING String from Kla0
2021-03-11 20:25:12,785 [main:113] - Case = [public final val name: kotlin.String defined in Kla0[DeserializedPropertyDescriptor@5a595bf9], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56cf897a]]
2021-03-11 20:25:12,785 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56cf897a]
2021-03-11 20:25:12,785 [main:117] - GENERATED CALL = (foo<Kla0>({ Kla0.Kla1})).name.trimEnd()
2021-03-11 20:25:12,785 [main:113] - Case = [public final val name: kotlin.String defined in Kla0[DeserializedPropertyDescriptor@5a595bf9], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4139bfa6]]
2021-03-11 20:25:12,786 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4139bfa6]
2021-03-11 20:25:12,927 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:25:12,932 [main:117] - GENERATED CALL = (foo<Kla0>({ Kla0.Kla1})).name.replaceBefore((((17594)).toLong()).toChar(), fu1({ "vagtc"}, { "jcovl"}), "ezzci")
2021-03-11 20:25:12,932 [main:113] - Case = [public final val name: kotlin.String defined in Kla0[DeserializedPropertyDescriptor@5a595bf9], @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e2898cd]]
2021-03-11 20:25:12,932 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e2898cd]
2021-03-11 20:25:12,932 [main:117] - GENERATED CALL = (foo<Kla0>({ Kla0.Kla1})).name.reversed()
2021-03-11 20:25:12,933 [main:113] - Case = [public final val name: kotlin.String defined in Kla0[DeserializedPropertyDescriptor@5a595bf9], public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2be08794]]
2021-03-11 20:25:12,933 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2be08794]
2021-03-11 20:25:12,933 [main:117] - GENERATED CALL = (foo<Kla0>({ Kla0.Kla1})).name.dropLast(((-17594)))
2021-03-11 20:25:12,933 [main:113] - Case = [public final val name: kotlin.String defined in Kla0[DeserializedPropertyDescriptor@5a595bf9], public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5aecd50c]]
2021-03-11 20:25:12,933 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5aecd50c]
2021-03-11 20:25:12,933 [main:117] - GENERATED CALL = (foo<Kla0>({ Kla0.Kla1})).name.capitalize()
2021-03-11 20:25:12,933 [main:113] - Case = [public final val name: kotlin.String defined in Kla0[DeserializedPropertyDescriptor@5a595bf9], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b92e35]]
2021-03-11 20:25:12,933 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b92e35]
2021-03-11 20:25:12,933 [main:117] - GENERATED CALL = (foo<Kla0>({ Kla0.Kla1})).name.padStart((InlinedInt(-17594))?.internal, (((17594)).toLong()).toChar())
2021-03-11 20:25:12,934 [main:113] - Case = [public final val name: kotlin.String defined in Kla0[DeserializedPropertyDescriptor@5a595bf9], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14c86819]]
2021-03-11 20:25:12,934 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14c86819]
2021-03-11 20:25:12,934 [main:117] - GENERATED CALL = (foo<Kla0>({ Kla0.Kla1})).name.uppercase()
2021-03-11 20:25:12,934 [main:113] - Case = [public final val name: kotlin.String defined in Kla0[DeserializedPropertyDescriptor@5a595bf9], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19cfeeab]]
2021-03-11 20:25:12,934 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19cfeeab]
2021-03-11 20:25:12,934 [main:117] - GENERATED CALL = (foo<Kla0>({ Kla0.Kla1})).name.trimStart()
2021-03-11 20:25:12,934 [main:113] - Case = [public final val name: kotlin.String defined in Kla0[DeserializedPropertyDescriptor@5a595bf9], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43468f59]]
2021-03-11 20:25:12,934 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43468f59]
2021-03-11 20:25:12,934 [main:117] - GENERATED CALL = (foo<Kla0>({ Kla0.Kla1})).name.trimIndent()
2021-03-11 20:25:12,934 [main:113] - Case = [public final val name: kotlin.String defined in Kla0[DeserializedPropertyDescriptor@5a595bf9], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d30213d]]
2021-03-11 20:25:12,934 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d30213d]
2021-03-11 20:25:12,934 [main:117] - GENERATED CALL = (foo<Kla0>({ Kla0.Kla1})).name.lowercase()
2021-03-11 20:25:12,935 [main:114] - replacement of "tail-call optimization hit: method " + method + " has no state-machine " of type String is (foo<Kla0>({ Kla0.Kla1})).name.replaceBefore((((17594)).toLong()).toChar(), fu1({ "vagtc"}, { "jcovl"}), "ezzci")
2021-03-11 20:25:13,062 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:25:13,062 [main:66] - Compilation checking started
2021-03-11 20:25:13,755 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { prope2() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = "OK"

fun box378(): String {
    var prope4 = "FAIL 1"
    fu2 {
        prope4 = fu5()
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 2"
    fu2 {
        fu2 {
            fu2 {
                fu2 {
                    fu2 {
                        fu2 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 4"
    fu3 {
        fu3 {
            fu3 {
                fu3 {
                    fu3 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error((foo<Kla0>({ Kla0.Kla1})).name.replaceBefore((((17594)).toLong()).toChar(), fu1({ "vagtc"}, { "jcovl"}), "ezzci") +
                prope6.joinToString(separator = "\n"))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7)
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:25:13,758 [main:107] - replacing (x, Function1<Throwable, Unit>)
2021-03-11 20:25:13,758 [main:50] - replacing x Function1<Throwable, Unit>
2021-03-11 20:25:13,758 [main:54] - Getting value of type Function1<Throwable, Unit>
2021-03-11 20:25:13,890 [main:302] - generating value of type = Function1<Throwable, Unit> false depth = 0
2021-03-11 20:25:13,894 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:25:14,030 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 20:25:14,036 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 20:25:14,497 [main:302] - generating value of type = Int true depth = 4
2021-03-11 20:25:14,501 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 20:25:14,506 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 20:25:14,642 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:25:14,647 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:25:14,933 [main:302] - generating value of type = Any false depth = 8
2021-03-11 20:25:14,933 [main:95] - GENERATED = print("hzcbv")
2021-03-11 20:25:14,933 [main:95] - GENERATED = repeat(-69918438, {a: Int -> print("hzcbv")})
2021-03-11 20:25:14,933 [main:58] - GENERATED VALUE OF TYPE Function1<Throwable, Unit> = {a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})}
2021-03-11 20:25:14,934 [main:61] - GENERATED IS CALL =false
2021-03-11 20:25:14,943 [main:67] - randomType = Char
2021-03-11 20:25:15,072 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:25:15,097 [main:106] - GETTING Function1<Throwable, Unit> from Int
2021-03-11 20:25:15,127 [main:106] - GETTING Function1<Throwable, Unit> from Int
2021-03-11 20:25:15,128 [main:106] - GETTING Function1<Throwable, Unit> from Int
2021-03-11 20:25:15,129 [main:106] - GETTING Function1<Throwable, Unit> from Int
2021-03-11 20:25:15,130 [main:106] - GETTING Function1<Throwable, Unit> from Int
2021-03-11 20:25:15,131 [main:106] - GETTING Function1<Throwable, Unit> from Char
2021-03-11 20:25:15,149 [main:106] - GETTING Function1<Throwable, Unit> from Int
2021-03-11 20:25:15,151 [main:106] - GETTING Function1<Throwable, Unit> from InlinedInt
2021-03-11 20:25:15,156 [main:106] - GETTING Function1<Throwable, Unit> from ULong
2021-03-11 20:25:15,182 [main:106] - GETTING Function1<Throwable, Unit> from InlinedInt
2021-03-11 20:25:15,183 [main:106] - GETTING Function1<Throwable, Unit> from Long
2021-03-11 20:25:15,212 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-11 20:25:15,259 [main:106] - GETTING Function1<Throwable, Unit> from ULong
2021-03-11 20:25:15,260 [main:106] - GETTING Function1<Throwable, Unit> from InlinedInt
2021-03-11 20:25:15,261 [main:106] - GETTING Function1<Throwable, Unit> from Kla0
2021-03-11 20:25:15,281 [main:106] - GETTING Function1<Throwable, Unit> from InlinedInt
2021-03-11 20:25:15,282 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-11 20:25:15,283 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-11 20:25:15,284 [main:106] - GETTING Function1<Throwable, Unit> from Int
2021-03-11 20:25:15,285 [main:106] - GETTING Function1<Throwable, Unit> from Long
2021-03-11 20:25:15,286 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-11 20:25:15,288 [main:106] - GETTING Function1<Throwable, Unit> from InlinedString
2021-03-11 20:25:15,293 [main:106] - GETTING Function1<Throwable, Unit> from Long
2021-03-11 20:25:15,293 [main:114] - replacement of x of type Function1<Throwable, Unit> is {a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})}
2021-03-11 20:25:15,418 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 20:25:15,418 [main:66] - Compilation checking started
2021-03-11 20:25:16,100 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { prope2() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = "OK"

fun box378(): String {
    var prope4 = "FAIL 1"
    fu2 {
        prope4 = fu5()
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 2"
    fu2 {
        fu2 {
            fu2 {
                fu2 {
                    fu2 {
                        fu2 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 4"
    fu3 {
        fu3 {
            fu3 {
                fu3 {
                    fu3 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error((foo<Kla0>({ Kla0.Kla1})).name.replaceBefore((((17594)).toLong()).toChar(), fu1({ "vagtc"}, { "jcovl"}), "ezzci") +
                prope6.joinToString(separator = "\n"))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7)
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:25:16,102 [main:107] - replacing ((foo<Kla0>({ Kla0.Kla1})).name.replaceBefore((((17594)).toLong()).toChar(), fu1({ "vagtc"}, { "jcovl"}), "ezzci") +
                prope6.joinToString(separator = "\n"), String)
2021-03-11 20:25:16,103 [main:50] - replacing (foo<Kla0>({ Kla0.Kla1})).name.replaceBefore((((17594)).toLong()).toChar(), fu1({ "vagtc"}, { "jcovl"}), "ezzci") +
                prope6.joinToString(separator = "\n") String
2021-03-11 20:25:16,103 [main:54] - Getting value of type String
2021-03-11 20:25:16,230 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:25:16,234 [main:58] - GENERATED VALUE OF TYPE String = "anllk"
2021-03-11 20:25:16,234 [main:61] - GENERATED IS CALL =false
2021-03-11 20:25:16,404 [main:67] - randomType = Set<String>
2021-03-11 20:25:16,405 [main:106] - GETTING String from Int
2021-03-11 20:25:16,440 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4045409b]]
2021-03-11 20:25:16,440 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397]
2021-03-11 20:25:16,440 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4045409b]
2021-03-11 20:25:16,441 [main:117] - GENERATED CALL = (InlinedInt(-463791997).internal).toChar().lowercase()
2021-03-11 20:25:16,441 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c70f8ae]]
2021-03-11 20:25:16,441 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397]
2021-03-11 20:25:16,441 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c70f8ae]
2021-03-11 20:25:16,441 [main:117] - GENERATED CALL = (InlinedInt(-463791997).internal).toChar().plus(fu1({ "vagtc"}, { "jcovl"}))
2021-03-11 20:25:16,441 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d654126]]
2021-03-11 20:25:16,441 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397]
2021-03-11 20:25:16,441 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d654126]
2021-03-11 20:25:16,441 [main:117] - GENERATED CALL = (InlinedInt(-463791997).internal).toChar().uppercase()
2021-03-11 20:25:16,442 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@38a0b896], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57d8c30b]]
2021-03-11 20:25:16,442 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@38a0b896]
2021-03-11 20:25:16,442 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57d8c30b]
2021-03-11 20:25:16,570 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:25:16,575 [main:117] - GENERATED CALL = (InlinedInt(-463791997).internal).toByte().toString(-1786026339)
2021-03-11 20:25:16,575 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a6eaf83], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2889e564]]
2021-03-11 20:25:16,575 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a6eaf83]
2021-03-11 20:25:16,575 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2889e564]
2021-03-11 20:25:16,576 [main:117] - GENERATED CALL = (InlinedInt(-463791997).internal).toShort().toString(-17594)
2021-03-11 20:25:16,576 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@819e073], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]]
2021-03-11 20:25:16,576 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@819e073]
2021-03-11 20:25:16,576 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]
2021-03-11 20:25:16,576 [main:117] - GENERATED CALL = (InlinedInt(-463791997).internal).div((((17594)).toLong())).toString(-17594)
2021-03-11 20:25:16,576 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@25850671], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]]
2021-03-11 20:25:16,576 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@25850671]
2021-03-11 20:25:16,576 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]
2021-03-11 20:25:16,577 [main:117] - GENERATED CALL = (InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594)))
2021-03-11 20:25:16,577 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@571d28fe], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]]
2021-03-11 20:25:16,577 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@571d28fe]
2021-03-11 20:25:16,577 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]
2021-03-11 20:25:16,577 [main:117] - GENERATED CALL = (InlinedInt(-463791997).internal).toLong().toString((17594))
2021-03-11 20:25:16,577 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]]
2021-03-11 20:25:16,577 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]
2021-03-11 20:25:16,577 [main:117] - GENERATED CALL = (InlinedInt(-463791997).internal).toString(InlinedInt(-463791997).internal)
2021-03-11 20:25:16,577 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7a52df9c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]]
2021-03-11 20:25:16,577 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7a52df9c]
2021-03-11 20:25:16,577 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]
2021-03-11 20:25:16,705 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:25:16,710 [main:117] - GENERATED CALL = (InlinedInt(-463791997).internal).toInt().toString(-838537667)
2021-03-11 20:25:16,710 [main:114] - replacement of (foo<Kla0>({ Kla0.Kla1})).name.replaceBefore((((17594)).toLong()).toChar(), fu1({ "vagtc"}, { "jcovl"}), "ezzci") +
                prope6.joinToString(separator = "\n") of type String is (InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594)))
2021-03-11 20:25:16,835 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:25:16,835 [main:66] - Compilation checking started
2021-03-11 20:25:17,529 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { prope2() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = "OK"

fun box378(): String {
    var prope4 = "FAIL 1"
    fu2 {
        prope4 = fu5()
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 2"
    fu2 {
        fu2 {
            fu2 {
                fu2 {
                    fu2 {
                        fu2 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 4"
    fu3 {
        fu3 {
            fu3 {
                fu3 {
                    fu3 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7)
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:25:17,531 [main:107] - replacing ({
        fu2 {
            fu2 {
                fu2 {
                    fu2 {
                        fu2 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }, SuspendFunction0<Unit>)
2021-03-11 20:25:17,532 [main:50] - replacing {
        fu2 {
            fu2 {
                fu2 {
                    fu2 {
                        fu2 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    } SuspendFunction0<Unit>
2021-03-11 20:25:17,532 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-11 20:25:17,668 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-11 20:25:17,672 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:25:17,808 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 20:25:17,814 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 20:25:18,122 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 20:25:18,127 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 20:25:18,259 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:25:18,264 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:25:18,558 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 20:25:18,563 [main:95] - GENERATED = check(false)
2021-03-11 20:25:18,563 [main:95] - GENERATED = contract({ check(false)})
2021-03-11 20:25:18,563 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { contract({ check(false)})}
2021-03-11 20:25:18,563 [main:61] - GENERATED IS CALL =false
2021-03-11 20:25:18,729 [main:67] - randomType = Sequence<String>
2021-03-11 20:25:18,731 [main:106] - GETTING SuspendFunction0<Unit> from Char
2021-03-11 20:25:18,755 [main:106] - GETTING SuspendFunction0<Unit> from ULong
2021-03-11 20:25:18,785 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:25:18,835 [main:106] - GETTING SuspendFunction0<Unit> from Long
2021-03-11 20:25:18,871 [main:106] - GETTING SuspendFunction0<Unit> from InlinedInt
2021-03-11 20:25:18,877 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:25:18,878 [main:106] - GETTING SuspendFunction0<Unit> from InlinedInt
2021-03-11 20:25:18,879 [main:106] - GETTING SuspendFunction0<Unit> from Long
2021-03-11 20:25:18,880 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:25:18,881 [main:106] - GETTING SuspendFunction0<Unit> from InlinedInt
2021-03-11 20:25:18,882 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 20:25:18,905 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 20:25:18,906 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 20:25:18,907 [main:106] - GETTING SuspendFunction0<Unit> from InlinedString
2021-03-11 20:25:18,915 [main:106] - GETTING SuspendFunction0<Unit> from Long
2021-03-11 20:25:18,916 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:25:18,917 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:25:18,917 [main:106] - GETTING SuspendFunction0<Unit> from Kla0
2021-03-11 20:25:18,945 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 20:25:18,946 [main:106] - GETTING SuspendFunction0<Unit> from ULong
2021-03-11 20:25:18,947 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:25:18,947 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:25:18,948 [main:106] - GETTING SuspendFunction0<Unit> from InlinedInt
2021-03-11 20:25:18,948 [main:114] - replacement of {
        fu2 {
            fu2 {
                fu2 {
                    fu2 {
                        fu2 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    } of type SuspendFunction0<Unit> is { contract({ check(false)})}
2021-03-11 20:25:19,072 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:25:19,073 [main:66] - Compilation checking started
2021-03-11 20:25:19,434 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { prope2() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = "OK"

fun box378(): String {
    var prope4 = "FAIL 1"
    fu2 {
        prope4 = fu5()
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 2"
    fu2 { contract({ check(false)})}
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 4"
    fu3 {
        fu3 {
            fu3 {
                fu3 {
                    fu3 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7)
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:25:19,437 [main:107] - replacing (c, Continuation<*>)
2021-03-11 20:25:19,437 [main:50] - replacing c Continuation<*>
2021-03-11 20:25:19,437 [main:54] - Getting value of type Continuation<*>
2021-03-11 20:25:19,587 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 20:25:19,721 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 20:25:19,727 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 20:25:20,189 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 20:25:20,325 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:25:20,331 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:25:20,632 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 20:25:20,773 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:25:20,779 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:25:21,259 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:25:21,259 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:25:21,259 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 20:25:21,259 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 20:25:21,455 [main:67] - randomType = HashSet<Int>
2021-03-11 20:25:21,583 [main:302] - generating value of type = HashSet<Int> false depth = 0
2021-03-11 20:25:21,719 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Int): HashSet<Int> = TODO()
2021-03-11 20:25:21,724 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Int): HashSet<Int> = TODO()
2021-03-11 20:25:21,863 [main:302] - generating value of type = Int true depth = 3
2021-03-11 20:25:21,867 [main:95] - GENERATED = linkedSetOf<Int>(369045270)
2021-03-11 20:25:21,966 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:25:21,996 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:25:21,997 [main:106] - GETTING Continuation<*> from String
2021-03-11 20:25:22,014 [main:106] - GETTING Continuation<*> from InlinedInt
2021-03-11 20:25:22,018 [main:106] - GETTING Continuation<*> from ULong
2021-03-11 20:25:22,040 [main:106] - GETTING Continuation<*> from Kla0
2021-03-11 20:25:22,059 [main:106] - GETTING Continuation<*> from Char
2021-03-11 20:25:22,077 [main:106] - GETTING Continuation<*> from Long
2021-03-11 20:25:22,106 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:25:22,107 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:25:22,108 [main:106] - GETTING Continuation<*> from InlinedInt
2021-03-11 20:25:22,108 [main:106] - GETTING Continuation<*> from InlinedString
2021-03-11 20:25:22,114 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:25:22,115 [main:106] - GETTING Continuation<*> from Long
2021-03-11 20:25:22,116 [main:106] - GETTING Continuation<*> from Long
2021-03-11 20:25:22,117 [main:106] - GETTING Continuation<*> from String
2021-03-11 20:25:22,118 [main:106] - GETTING Continuation<*> from InlinedInt
2021-03-11 20:25:22,119 [main:106] - GETTING Continuation<*> from String
2021-03-11 20:25:22,119 [main:106] - GETTING Continuation<*> from InlinedInt
2021-03-11 20:25:22,120 [main:106] - GETTING Continuation<*> from ULong
2021-03-11 20:25:22,121 [main:106] - GETTING Continuation<*> from String
2021-03-11 20:25:22,122 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:25:22,123 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:25:22,123 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-11 20:25:22,123 [main:107] - replacing (prope5, Any?)
2021-03-11 20:25:22,123 [main:50] - replacing prope5 Any?
2021-03-11 20:25:22,123 [main:54] - Getting value of type Any?
2021-03-11 20:25:22,251 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:25:22,251 [main:58] - GENERATED VALUE OF TYPE Any? = "dogwx"
2021-03-11 20:25:22,251 [main:61] - GENERATED IS CALL =false
2021-03-11 20:25:22,407 [main:67] - randomType = Float
2021-03-11 20:25:22,534 [main:302] - generating value of type = Float true depth = 0
2021-03-11 20:25:22,568 [main:106] - GETTING Any? from InlinedInt
2021-03-11 20:25:22,575 [main:106] - GETTING Any? from InlinedInt
2021-03-11 20:25:22,577 [main:106] - GETTING Any? from InlinedInt
2021-03-11 20:25:22,578 [main:106] - GETTING Any? from Long
2021-03-11 20:25:22,609 [main:106] - GETTING Any? from InlinedString
2021-03-11 20:25:22,614 [main:106] - GETTING Any? from Long
2021-03-11 20:25:22,614 [main:106] - GETTING Any? from Kla0
2021-03-11 20:25:22,633 [main:113] - Case = [protected final fun clone(): kotlin.Any defined in Kla0[DeserializedSimpleFunctionDescriptor@3b5c1a2b]]
2021-03-11 20:25:22,633 [main:149] - GENERATING call of type protected final fun clone(): kotlin.Any defined in Kla0[DeserializedSimpleFunctionDescriptor@3b5c1a2b]
2021-03-11 20:25:22,633 [main:117] - GENERATED CALL = (foo<Kla0>({ Kla0.Kla1}))?.clone()
2021-03-11 20:25:22,633 [main:114] - replacement of prope5 of type Any? is "dogwx"
2021-03-11 20:25:22,758 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 20:25:22,758 [main:66] - Compilation checking started
2021-03-11 20:25:23,121 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { prope2() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = "OK"

fun box378(): String {
    var prope4 = "FAIL 1"
    fu2 {
        prope4 = fu5()
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 2"
    fu2 {
        fu2 {
            fu2 {
                fu2 {
                    fu2 {
                        fu2 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 4"
    fu3 {
        fu3 {
            fu3 {
                fu3 {
                    fu3 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this."dogwx" = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7)
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:25:23,124 [main:107] - replacing ("Wrong state-machine generated: it is finished early", String)
2021-03-11 20:25:23,124 [main:50] - replacing "Wrong state-machine generated: it is finished early" String
2021-03-11 20:25:23,124 [main:54] - Getting value of type String
2021-03-11 20:25:23,256 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:25:23,261 [main:58] - GENERATED VALUE OF TYPE String = "tnuns"
2021-03-11 20:25:23,261 [main:61] - GENERATED IS CALL =false
2021-03-11 20:25:23,448 [main:67] - randomType = Kla8
2021-03-11 20:25:23,576 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-11 20:25:23,580 [main:112] - generating klass Kla8 text = object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}
2021-03-11 20:25:23,602 [main:106] - GETTING String from Long
2021-03-11 20:25:23,631 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72c8390], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4045409b]]
2021-03-11 20:25:23,631 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72c8390]
2021-03-11 20:25:23,632 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4045409b]
2021-03-11 20:25:23,632 [main:117] - GENERATED CALL = (((17594)).toLong()).toChar().lowercase()
2021-03-11 20:25:23,632 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72c8390], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d654126]]
2021-03-11 20:25:23,632 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72c8390]
2021-03-11 20:25:23,632 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d654126]
2021-03-11 20:25:23,632 [main:117] - GENERATED CALL = (((17594)).toLong()).toChar().uppercase()
2021-03-11 20:25:23,632 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72c8390], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@629a957]]
2021-03-11 20:25:23,632 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72c8390]
2021-03-11 20:25:23,632 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@629a957]
2021-03-11 20:25:23,632 [main:117] - GENERATED CALL = (((17594)).toLong()).toChar().titlecase()
2021-03-11 20:25:23,632 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72c8390], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c70f8ae]]
2021-03-11 20:25:23,632 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72c8390]
2021-03-11 20:25:23,633 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c70f8ae]
2021-03-11 20:25:23,633 [main:117] - GENERATED CALL = (((17594)).toLong()).toChar().plus((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))))
2021-03-11 20:25:23,633 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@571d28fe], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]]
2021-03-11 20:25:23,633 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@571d28fe]
2021-03-11 20:25:23,633 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]
2021-03-11 20:25:23,633 [main:117] - GENERATED CALL = (((17594)).toLong()).toLong().toString((-17594))
2021-03-11 20:25:23,633 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@775f0319], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57d8c30b]]
2021-03-11 20:25:23,633 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@775f0319]
2021-03-11 20:25:23,633 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57d8c30b]
2021-03-11 20:25:23,762 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:25:23,767 [main:117] - GENERATED CALL = (((17594)).toLong()).toByte().toString(2134610709)
2021-03-11 20:25:23,767 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]]
2021-03-11 20:25:23,767 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]
2021-03-11 20:25:23,767 [main:117] - GENERATED CALL = (((17594)).toLong()).toString(((17594)))
2021-03-11 20:25:23,767 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@283024a2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]]
2021-03-11 20:25:23,767 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@283024a2]
2021-03-11 20:25:23,892 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:25:23,897 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]
2021-03-11 20:25:23,897 [main:117] - GENERATED CALL = (((17594)).toLong()).compareTo(29).toString(((-17594)))
2021-03-11 20:25:23,897 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7a52df9c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]]
2021-03-11 20:25:23,897 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7a52df9c]
2021-03-11 20:25:23,897 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]
2021-03-11 20:25:23,898 [main:117] - GENERATED CALL = (((17594)).toLong()).toInt().toString(-17594)
2021-03-11 20:25:23,898 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@58d20a49], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2889e564]]
2021-03-11 20:25:23,898 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@58d20a49]
2021-03-11 20:25:23,898 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2889e564]
2021-03-11 20:25:24,026 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:25:24,031 [main:117] - GENERATED CALL = (((17594)).toLong()).toShort().toString(255168954)
2021-03-11 20:25:24,031 [main:114] - replacement of "Wrong state-machine generated: it is finished early" of type String is (((17594)).toLong()).toChar().lowercase()
2021-03-11 20:25:24,156 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:25:24,157 [main:66] - Compilation checking started
2021-03-11 20:25:24,785 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { prope2() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = "OK"

fun box378(): String {
    var prope4 = "FAIL 1"
    fu2 {
        prope4 = fu5()
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 2"
    fu2 {
        fu2 {
            fu2 {
                fu2 {
                    fu2 {
                        fu2 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 4"
    fu3 {
        fu3 {
            fu3 {
                fu3 {
                    fu3 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7)
        if (prope8) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:25:24,788 [main:107] - replacing (", got ", String)
2021-03-11 20:25:24,789 [main:50] - replacing ", got " String
2021-03-11 20:25:24,789 [main:54] - Getting value of type String
2021-03-11 20:25:24,916 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:25:24,920 [main:58] - GENERATED VALUE OF TYPE String = "zlcsx"
2021-03-11 20:25:24,920 [main:61] - GENERATED IS CALL =false
2021-03-11 20:25:25,081 [main:67] - randomType = Kla0
2021-03-11 20:25:25,206 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 20:25:25,211 [main:112] - generating klass Kla0 text = enum class Kla0 {
    Kla1
}
2021-03-11 20:25:25,236 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2be08794]
2021-03-11 20:25:25,237 [main:78] - Generated call from random type = (Kla0.Kla1).name.dropLast(InlinedInt(-463791997).internal)
2021-03-11 20:25:25,237 [main:106] - GETTING String from Long
2021-03-11 20:25:25,278 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@58d20a49], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2889e564]]
2021-03-11 20:25:25,278 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@58d20a49]
2021-03-11 20:25:25,278 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2889e564]
2021-03-11 20:25:25,279 [main:117] - GENERATED CALL = (((17594)).toLong()).toShort().toString(((-17594)))
2021-03-11 20:25:25,279 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@283024a2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]]
2021-03-11 20:25:25,279 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@283024a2]
2021-03-11 20:25:25,410 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:25:25,415 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]
2021-03-11 20:25:25,415 [main:117] - GENERATED CALL = (((17594)).toLong()).compareTo(-28).toString((InlinedInt(-17594))?.internal)
2021-03-11 20:25:25,415 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7a52df9c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]]
2021-03-11 20:25:25,415 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7a52df9c]
2021-03-11 20:25:25,415 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]
2021-03-11 20:25:25,578 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:25:25,582 [main:117] - GENERATED CALL = (((17594)).toLong()).toInt().toString(1637012507)
2021-03-11 20:25:25,582 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72c8390], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d654126]]
2021-03-11 20:25:25,582 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72c8390]
2021-03-11 20:25:25,582 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d654126]
2021-03-11 20:25:25,583 [main:117] - GENERATED CALL = (((17594)).toLong()).toChar().uppercase()
2021-03-11 20:25:25,583 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]]
2021-03-11 20:25:25,583 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]
2021-03-11 20:25:25,714 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:25:25,719 [main:117] - GENERATED CALL = (((17594)).toLong()).toString(-1178048985)
2021-03-11 20:25:25,719 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@571d28fe], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]]
2021-03-11 20:25:25,719 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@571d28fe]
2021-03-11 20:25:25,719 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]
2021-03-11 20:25:25,719 [main:117] - GENERATED CALL = (((17594)).toLong()).toLong().toString(((-17594)))
2021-03-11 20:25:25,719 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@775f0319], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57d8c30b]]
2021-03-11 20:25:25,719 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@775f0319]
2021-03-11 20:25:25,719 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57d8c30b]
2021-03-11 20:25:25,720 [main:117] - GENERATED CALL = (((17594)).toLong()).toByte().toString(InlinedInt(-463791997).internal)
2021-03-11 20:25:25,720 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72c8390], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c70f8ae]]
2021-03-11 20:25:25,720 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72c8390]
2021-03-11 20:25:25,720 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c70f8ae]
2021-03-11 20:25:25,720 [main:117] - GENERATED CALL = (((17594)).toLong()).toChar().plus((InlinedInt(-17594))?.internal.toString(-17594))
2021-03-11 20:25:25,720 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72c8390], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@629a957]]
2021-03-11 20:25:25,720 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72c8390]
2021-03-11 20:25:25,720 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@629a957]
2021-03-11 20:25:25,720 [main:117] - GENERATED CALL = (((17594)).toLong()).toChar().titlecase()
2021-03-11 20:25:25,720 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72c8390], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4045409b]]
2021-03-11 20:25:25,720 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72c8390]
2021-03-11 20:25:25,721 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4045409b]
2021-03-11 20:25:25,721 [main:117] - GENERATED CALL = (((17594)).toLong()).toChar().lowercase()
2021-03-11 20:25:25,721 [main:114] - replacement of ", got " of type String is (((17594)).toLong()).toString(-1178048985)
2021-03-11 20:25:25,845 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:25:25,845 [main:66] - Compilation checking started
2021-03-11 20:25:26,496 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { prope2() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = "OK"

fun box378(): String {
    var prope4 = "FAIL 1"
    fu2 {
        prope4 = fu5()
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 2"
    fu2 {
        fu2 {
            fu2 {
                fu2 {
                    fu2 {
                        fu2 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 4"
    fu3 {
        fu3 {
            fu3 {
                fu3 {
                    fu3 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (prope8) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:25:26,498 [main:107] - replacing ("OK", String)
2021-03-11 20:25:26,498 [main:50] - replacing "OK" String
2021-03-11 20:25:26,498 [main:54] - Getting value of type String
2021-03-11 20:25:26,624 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:25:26,629 [main:58] - GENERATED VALUE OF TYPE String = "xvcpl"
2021-03-11 20:25:26,629 [main:61] - GENERATED IS CALL =false
2021-03-11 20:25:26,646 [main:67] - randomType = Kla7
2021-03-11 20:25:26,781 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-11 20:25:26,785 [main:112] - generating klass Kla7 text = class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (prope8) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 20:25:26,793 [main:106] - GETTING String from Int
2021-03-11 20:25:26,823 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a6eaf83], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2889e564]]
2021-03-11 20:25:26,823 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a6eaf83]
2021-03-11 20:25:26,823 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2889e564]
2021-03-11 20:25:26,824 [main:117] - GENERATED CALL = (InlinedInt(-463791997).internal).toShort().toString(-17594)
2021-03-11 20:25:26,824 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]]
2021-03-11 20:25:26,824 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]
2021-03-11 20:25:26,824 [main:117] - GENERATED CALL = (InlinedInt(-463791997).internal).toString((-17594))
2021-03-11 20:25:26,824 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@571d28fe], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]]
2021-03-11 20:25:26,824 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@571d28fe]
2021-03-11 20:25:26,824 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]
2021-03-11 20:25:26,824 [main:117] - GENERATED CALL = (InlinedInt(-463791997).internal).toLong().toString(((-17594)))
2021-03-11 20:25:26,824 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d654126]]
2021-03-11 20:25:26,824 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397]
2021-03-11 20:25:26,824 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d654126]
2021-03-11 20:25:26,824 [main:117] - GENERATED CALL = (InlinedInt(-463791997).internal).toChar().uppercase()
2021-03-11 20:25:26,824 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@629a957]]
2021-03-11 20:25:26,824 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397]
2021-03-11 20:25:26,825 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@629a957]
2021-03-11 20:25:26,825 [main:117] - GENERATED CALL = (InlinedInt(-463791997).internal).toChar().titlecase()
2021-03-11 20:25:26,825 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7a52df9c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]]
2021-03-11 20:25:26,825 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7a52df9c]
2021-03-11 20:25:26,825 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]
2021-03-11 20:25:26,950 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:25:26,954 [main:117] - GENERATED CALL = (InlinedInt(-463791997).internal).toInt().toString(1659116790)
2021-03-11 20:25:26,954 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@819e073], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]]
2021-03-11 20:25:26,954 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@819e073]
2021-03-11 20:25:26,955 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]
2021-03-11 20:25:26,955 [main:117] - GENERATED CALL = (InlinedInt(-463791997).internal).div((((17594)).toLong())).toString(InlinedInt(-463791997).internal)
2021-03-11 20:25:26,955 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@25850671], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]]
2021-03-11 20:25:26,955 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@25850671]
2021-03-11 20:25:26,955 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]
2021-03-11 20:25:27,081 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:25:27,085 [main:117] - GENERATED CALL = (InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(1220123570)
2021-03-11 20:25:27,085 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@38a0b896], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57d8c30b]]
2021-03-11 20:25:27,086 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@38a0b896]
2021-03-11 20:25:27,086 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57d8c30b]
2021-03-11 20:25:27,086 [main:117] - GENERATED CALL = (InlinedInt(-463791997).internal).toByte().toString(-17594)
2021-03-11 20:25:27,086 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4045409b]]
2021-03-11 20:25:27,086 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397]
2021-03-11 20:25:27,086 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4045409b]
2021-03-11 20:25:27,086 [main:117] - GENERATED CALL = (InlinedInt(-463791997).internal).toChar().lowercase()
2021-03-11 20:25:27,086 [main:114] - replacement of "OK" of type String is (InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(1220123570)
2021-03-11 20:25:27,215 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:25:27,216 [main:66] - Compilation checking started
2021-03-11 20:25:27,867 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { prope2() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = "OK"

fun box378(): String {
    var prope4 = "FAIL 1"
    fu2 {
        prope4 = fu5()
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 2"
    fu2 {
        fu2 {
            fu2 {
                fu2 {
                    fu2 {
                        fu2 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if (prope4 != (InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(1220123570)) return prope4
    prope4 = "FAIL 4"
    fu3 {
        fu3 {
            fu3 {
                fu3 {
                    fu3 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (prope8) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:25:27,869 [main:107] - replacing (true, Boolean)
2021-03-11 20:25:27,869 [main:50] - replacing true Boolean
2021-03-11 20:25:27,870 [main:54] - Getting value of type Boolean
2021-03-11 20:25:27,998 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:25:28,003 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 20:25:28,003 [main:61] - GENERATED IS CALL =false
2021-03-11 20:25:28,352 [main:67] - randomType = HashMap<Kla3, UShort>
2021-03-11 20:25:28,478 [main:302] - generating value of type = HashMap<Kla3, UShort> false depth = 0
2021-03-11 20:25:28,613 [main:43] - GENERATING CALL OF fun <K, V> HashMap(original: kotlin.collections.Map<Kla3, UShort>): HashMap<Kla3, UShort> = TODO()
2021-03-11 20:25:28,618 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> HashMap(original: kotlin.collections.Map<Kla3, UShort>): HashMap<Kla3, UShort> = TODO()
2021-03-11 20:25:28,934 [main:302] - generating value of type = Map<Kla3, UShort> false depth = 3
2021-03-11 20:25:29,071 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Kla3, UShort>): Map<Kla3, UShort> = TODO()
2021-03-11 20:25:29,077 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Kla3, UShort>): Map<Kla3, UShort> = TODO()
2021-03-11 20:25:29,214 [main:302] - generating value of type = Pair<Kla3, UShort> false depth = 6
2021-03-11 20:25:29,348 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Kla3, second: UShort): Pair<Kla3, UShort> = TODO()
2021-03-11 20:25:29,353 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Kla3, second: UShort): Pair<Kla3, UShort> = TODO()
2021-03-11 20:25:29,488 [main:302] - generating value of type = Kla3 false depth = 9
2021-03-11 20:25:29,492 [main:112] - generating klass Kla3 text = open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}
2021-03-11 20:25:29,621 [main:194] - Type params = []
2021-03-11 20:25:29,751 [main:302] - generating value of type = CoroutineContext false depth = 11
2021-03-11 20:25:29,928 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:25:29,934 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:25:30,239 [main:302] - generating value of type = Key<*> false depth = 14
2021-03-11 20:25:30,378 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:25:30,384 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:25:30,871 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 17
2021-03-11 20:25:30,871 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:25:30,871 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:25:30,872 [main:302] - generating value of type = UShort true depth = 9
2021-03-11 20:25:30,876 [main:95] - GENERATED = Pair<Kla3, UShort>(Kla3(), 29440.toUShort())
2021-03-11 20:25:30,876 [main:95] - GENERATED = linkedMapOf<Kla3, UShort>(Pair<Kla3, UShort>(Kla3(), 29440.toUShort()))
2021-03-11 20:25:30,876 [main:95] - GENERATED = HashMap<Kla3, UShort>(linkedMapOf<Kla3, UShort>(Pair<Kla3, UShort>(Kla3(), 29440.toUShort())))
2021-03-11 20:25:30,967 [main:149] - GENERATING call of type public fun <T> kotlin.collections.MutableCollection<in T>.retainAll(elements: kotlin.Array<out T>): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1894b733]
2021-03-11 20:25:31,094 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 20:25:31,229 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<T> = TODO()
2021-03-11 20:25:31,235 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<T> = TODO()
2021-03-11 20:25:31,371 [main:95] - GENERATED = emptyArray<T>()
2021-03-11 20:25:31,371 [main:78] - Generated call from random type = (HashMap<Kla3, UShort>(linkedMapOf<Kla3, UShort>(Pair<Kla3, UShort>(Kla3(), 29440.toUShort())))).values.retainAll(emptyArray<T>())
2021-03-11 20:25:31,371 [main:114] - replacement of true of type Boolean is (HashMap<Kla3, UShort>(linkedMapOf<Kla3, UShort>(Pair<Kla3, UShort>(Kla3(), 29440.toUShort())))).values.retainAll(emptyArray<T>())
2021-03-11 20:25:31,497 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:25:31,497 [main:66] - Compilation checking started
2021-03-11 20:25:31,916 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { prope2() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = "OK"

fun box378(): String {
    var prope4 = "FAIL 1"
    fu2 {
        prope4 = fu5()
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 2"
    fu2 {
        fu2 {
            fu2 {
                fu2 {
                    fu2 {
                        fu2 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if (prope4 != (InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(1220123570)) return prope4
    prope4 = "FAIL 4"
    fu3 {
        fu3 {
            fu3 {
                fu3 {
                    fu3 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (prope8) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = (HashMap<Kla3, UShort>(linkedMapOf<Kla3, UShort>(Pair<Kla3, UShort>(Kla3(), 29440.toUShort())))).values.retainAll(emptyArray<T>())
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:25:31,919 [main:107] - replacing (prope2, SuspendFunction0<Unit>)
2021-03-11 20:25:31,919 [main:50] - replacing prope2 SuspendFunction0<Unit>
2021-03-11 20:25:31,919 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-11 20:25:32,064 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-11 20:25:32,069 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:25:32,231 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:25:32,236 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:25:32,535 [main:302] - generating value of type = Any false depth = 4
2021-03-11 20:25:32,535 [main:95] - GENERATED = print("eclsf")
2021-03-11 20:25:32,535 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { print("eclsf")}
2021-03-11 20:25:32,535 [main:61] - GENERATED IS CALL =false
2021-03-11 20:25:32,694 [main:67] - randomType = Short
2021-03-11 20:25:32,826 [main:302] - generating value of type = Short true depth = 0
2021-03-11 20:25:32,880 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:25:32,927 [main:106] - GETTING SuspendFunction0<Unit> from InlinedInt
2021-03-11 20:25:32,934 [main:106] - GETTING SuspendFunction0<Unit> from InlinedInt
2021-03-11 20:25:32,935 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:25:32,936 [main:106] - GETTING SuspendFunction0<Unit> from ULong
2021-03-11 20:25:32,970 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:25:32,971 [main:106] - GETTING SuspendFunction0<Unit> from InlinedInt
2021-03-11 20:25:32,972 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:25:32,973 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 20:25:32,991 [main:106] - GETTING SuspendFunction0<Unit> from InlinedString
2021-03-11 20:25:32,996 [main:106] - GETTING SuspendFunction0<Unit> from Long
2021-03-11 20:25:33,024 [main:106] - GETTING SuspendFunction0<Unit> from Long
2021-03-11 20:25:33,025 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 20:25:33,026 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:25:33,027 [main:106] - GETTING SuspendFunction0<Unit> from Char
2021-03-11 20:25:33,045 [main:106] - GETTING SuspendFunction0<Unit> from InlinedInt
2021-03-11 20:25:33,046 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:25:33,047 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 20:25:33,047 [main:106] - GETTING SuspendFunction0<Unit> from Kla0
2021-03-11 20:25:33,068 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:25:33,069 [main:106] - GETTING SuspendFunction0<Unit> from ULong
2021-03-11 20:25:33,070 [main:106] - GETTING SuspendFunction0<Unit> from Long
2021-03-11 20:25:33,071 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 20:25:33,071 [main:114] - replacement of prope2 of type SuspendFunction0<Unit> is { print("eclsf")}
2021-03-11 20:25:33,200 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 20:25:33,201 [main:66] - Compilation checking started
2021-03-11 20:25:33,857 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { { print("eclsf")}() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = "OK"

fun box378(): String {
    var prope4 = "FAIL 1"
    fu2 {
        prope4 = fu5()
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 2"
    fu2 {
        fu2 {
            fu2 {
                fu2 {
                    fu2 {
                        fu2 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if (prope4 != (InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(1220123570)) return prope4
    prope4 = "FAIL 4"
    fu3 {
        fu3 {
            fu3 {
                fu3 {
                    fu3 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (prope8) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:25:33,860 [main:107] - replacing ({
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }, SuspendFunction0<Unit>)
2021-03-11 20:25:33,861 [main:50] - replacing {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    } SuspendFunction0<Unit>
2021-03-11 20:25:33,862 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-11 20:25:34,007 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-11 20:25:34,012 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:25:34,150 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 20:25:34,155 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 20:25:34,462 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 20:25:34,466 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 20:25:34,631 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:25:34,636 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:25:34,928 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 20:25:34,933 [main:95] - GENERATED = require(true)
2021-03-11 20:25:34,933 [main:95] - GENERATED = contract({ require(true)})
2021-03-11 20:25:34,933 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { contract({ require(true)})}
2021-03-11 20:25:34,933 [main:61] - GENERATED IS CALL =false
2021-03-11 20:25:35,101 [main:67] - randomType = List<Char>
2021-03-11 20:25:35,102 [main:106] - GETTING SuspendFunction0<Unit> from InlinedInt
2021-03-11 20:25:35,107 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:25:35,138 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 20:25:35,157 [main:106] - GETTING SuspendFunction0<Unit> from Char
2021-03-11 20:25:35,174 [main:106] - GETTING SuspendFunction0<Unit> from InlinedString
2021-03-11 20:25:35,179 [main:106] - GETTING SuspendFunction0<Unit> from InlinedInt
2021-03-11 20:25:35,180 [main:106] - GETTING SuspendFunction0<Unit> from ULong
2021-03-11 20:25:35,201 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:25:35,202 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 20:25:35,203 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:25:35,204 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 20:25:35,205 [main:106] - GETTING SuspendFunction0<Unit> from InlinedInt
2021-03-11 20:25:35,206 [main:106] - GETTING SuspendFunction0<Unit> from Long
2021-03-11 20:25:35,236 [main:106] - GETTING SuspendFunction0<Unit> from ULong
2021-03-11 20:25:35,237 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:25:35,238 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:25:35,238 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 20:25:35,239 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:25:35,240 [main:106] - GETTING SuspendFunction0<Unit> from InlinedInt
2021-03-11 20:25:35,241 [main:106] - GETTING SuspendFunction0<Unit> from Long
2021-03-11 20:25:35,242 [main:106] - GETTING SuspendFunction0<Unit> from Kla0
2021-03-11 20:25:35,261 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:25:35,262 [main:106] - GETTING SuspendFunction0<Unit> from Long
2021-03-11 20:25:35,262 [main:114] - replacement of {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    } of type SuspendFunction0<Unit> is { contract({ require(true)})}
2021-03-11 20:25:35,389 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:25:35,390 [main:66] - Compilation checking started
2021-03-11 20:25:35,771 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { { print("eclsf")}() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = "OK"

fun box378(): String {
    var prope4 = "FAIL 1"
    fu2 {
        prope4 = fu5()
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 2"
    fu2 {
        fu2 {
            fu2 {
                fu2 {
                    fu2 {
                        fu2 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if (prope4 != (InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(1220123570)) return prope4
    prope4 = "FAIL 4"
    fu3 {
        fu3 {
            fu3 {
                fu3 {
                    fu3 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 { contract({ require(true)})}
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (prope8) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:25:35,774 [main:107] - replacing ("tail-call optimization miss: method at " + it + " has state-machine ", String)
2021-03-11 20:25:35,774 [main:50] - replacing "tail-call optimization miss: method at " + it + " has state-machine " String
2021-03-11 20:25:35,774 [main:54] - Getting value of type String
2021-03-11 20:25:35,901 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:25:35,906 [main:58] - GENERATED VALUE OF TYPE String = "cuemh"
2021-03-11 20:25:35,906 [main:61] - GENERATED IS CALL =false
2021-03-11 20:25:36,214 [main:67] - randomType = Byte?
2021-03-11 20:25:36,341 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:25:36,381 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@58c77d6c]
2021-03-11 20:25:36,381 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4045409b]
2021-03-11 20:25:36,382 [main:78] - Generated call from random type = (-63)?.toChar().lowercase()
2021-03-11 20:25:36,382 [main:106] - GETTING String from Kla0
2021-03-11 20:25:36,400 [main:113] - Case = [public final val name: kotlin.String defined in Kla0[DeserializedPropertyDescriptor@5a595bf9], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77da2f63]]
2021-03-11 20:25:36,400 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77da2f63]
2021-03-11 20:25:36,528 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 20:25:36,532 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 20:25:36,537 [main:117] - GENERATED CALL = (foo<Kla0>({ Kla0.Kla1})).name.filterIndexed({a: Int, b: Char -> true})
2021-03-11 20:25:36,537 [main:113] - Case = [public final val name: kotlin.String defined in Kla0[DeserializedPropertyDescriptor@5a595bf9], public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@502f7dba]]
2021-03-11 20:25:36,537 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@502f7dba]
2021-03-11 20:25:36,665 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:25:36,816 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:25:36,947 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:25:36,951 [main:117] - GENERATED CALL = (foo<Kla0>({ Kla0.Kla1})).name.replaceFirst('Չ', '슯', true)
2021-03-11 20:25:36,952 [main:113] - Case = [public final val name: kotlin.String defined in Kla0[DeserializedPropertyDescriptor@5a595bf9], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56cf897a]]
2021-03-11 20:25:36,952 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56cf897a]
2021-03-11 20:25:36,952 [main:117] - GENERATED CALL = (foo<Kla0>({ Kla0.Kla1})).name.trimEnd()
2021-03-11 20:25:36,952 [main:113] - Case = [public final val name: kotlin.String defined in Kla0[DeserializedPropertyDescriptor@5a595bf9], public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e88e9ec]]
2021-03-11 20:25:36,952 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e88e9ec]
2021-03-11 20:25:36,952 [main:117] - GENERATED CALL = (foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal)
2021-03-11 20:25:36,953 [main:113] - Case = [public final val name: kotlin.String defined in Kla0[DeserializedPropertyDescriptor@5a595bf9], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14c86819]]
2021-03-11 20:25:36,953 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14c86819]
2021-03-11 20:25:36,953 [main:117] - GENERATED CALL = (foo<Kla0>({ Kla0.Kla1})).name.uppercase()
2021-03-11 20:25:36,953 [main:113] - Case = [public final val name: kotlin.String defined in Kla0[DeserializedPropertyDescriptor@5a595bf9], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@180e599e]]
2021-03-11 20:25:36,953 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@180e599e]
2021-03-11 20:25:36,953 [main:117] - GENERATED CALL = (foo<Kla0>({ Kla0.Kla1})).name.trim()
2021-03-11 20:25:36,953 [main:113] - Case = [public final val name: kotlin.String defined in Kla0[DeserializedPropertyDescriptor@5a595bf9], public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7fcd6734]]
2021-03-11 20:25:36,953 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7fcd6734]
2021-03-11 20:25:37,080 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 20:25:37,085 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 20:25:37,090 [main:117] - GENERATED CALL = (foo<Kla0>({ Kla0.Kla1})).name.dropWhile({a: Char -> false})
2021-03-11 20:25:37,090 [main:113] - Case = [public final val name: kotlin.String defined in Kla0[DeserializedPropertyDescriptor@5a595bf9], @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3477cd10]]
2021-03-11 20:25:37,090 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3477cd10]
2021-03-11 20:25:37,217 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 20:25:37,225 [main:117] - GENERATED CALL = (foo<Kla0>({ Kla0.Kla1})).name.replaceRange(((17594)), (InlinedInt(-17594))?.internal, "fmmlw")
2021-03-11 20:25:37,225 [main:113] - Case = [public final val ordinal: kotlin.Int defined in Kla0[DeserializedPropertyDescriptor@426485c0], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]]
2021-03-11 20:25:37,225 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]
2021-03-11 20:25:37,225 [main:117] - GENERATED CALL = (foo<Kla0>({ Kla0.Kla1})).ordinal.toString(((-17594)))
2021-03-11 20:25:37,226 [main:113] - Case = [public final val name: kotlin.String defined in Kla0[DeserializedPropertyDescriptor@5a595bf9], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b92e35]]
2021-03-11 20:25:37,226 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b92e35]
2021-03-11 20:25:37,226 [main:117] - GENERATED CALL = (foo<Kla0>({ Kla0.Kla1})).name.padStart(-17594, (((17594)).toLong()).toChar())
2021-03-11 20:25:37,226 [main:114] - replacement of "tail-call optimization miss: method at " + it + " has state-machine " of type String is (foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal)
2021-03-11 20:25:37,359 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:25:37,359 [main:66] - Compilation checking started
2021-03-11 20:25:38,021 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { { print("eclsf")}() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = "OK"

fun box378(): String {
    var prope4 = "FAIL 1"
    fu2 {
        prope4 = fu5()
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 2"
    fu2 {
        fu2 {
            fu2 {
                fu2 {
                    fu2 {
                        fu2 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if (prope4 != (InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(1220123570)) return prope4
    prope4 = "FAIL 4"
    fu3 {
        fu3 {
            fu3 {
                fu3 {
                    fu3 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (prope8) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:25:38,023 [main:107] - replacing (true, Boolean)
2021-03-11 20:25:38,024 [main:50] - replacing true Boolean
2021-03-11 20:25:38,024 [main:54] - Getting value of type Boolean
2021-03-11 20:25:38,156 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:25:38,160 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 20:25:38,160 [main:61] - GENERATED IS CALL =false
2021-03-11 20:25:38,170 [main:67] - randomType = ULong
2021-03-11 20:25:38,300 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 20:25:38,333 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@3d9350bd]
2021-03-11 20:25:38,333 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@5e811c3f]
2021-03-11 20:25:38,464 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:25:38,464 [main:78] - Generated call from random type = (5385610955158891429.toULong()).toLong().equals("wqsrb")
2021-03-11 20:25:38,465 [main:106] - GETTING Boolean from Int
2021-03-11 20:25:38,517 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@557a2fe7], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@60ebb310]]
2021-03-11 20:25:38,517 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@557a2fe7]
2021-03-11 20:25:38,517 [main:149] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@60ebb310]
2021-03-11 20:25:38,518 [main:117] - GENERATED CALL = (((-17594))).toDouble().isNaN()
2021-03-11 20:25:38,518 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@557a2fe7], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6db0bca]]
2021-03-11 20:25:38,518 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@557a2fe7]
2021-03-11 20:25:38,518 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6db0bca]
2021-03-11 20:25:38,518 [main:117] - GENERATED CALL = (((-17594))).toDouble().isInfinite()
2021-03-11 20:25:38,518 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3939fec8]]
2021-03-11 20:25:38,518 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397]
2021-03-11 20:25:38,518 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3939fec8]
2021-03-11 20:25:38,518 [main:117] - GENERATED CALL = (((-17594))).toChar().isISOControl()
2021-03-11 20:25:38,518 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36192c3c]]
2021-03-11 20:25:38,518 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397]
2021-03-11 20:25:38,518 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36192c3c]
2021-03-11 20:25:38,519 [main:117] - GENERATED CALL = (((-17594))).toChar().isDigit()
2021-03-11 20:25:38,519 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@58411db7], public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@4608c405]]
2021-03-11 20:25:38,519 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@58411db7]
2021-03-11 20:25:38,519 [main:149] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@4608c405]
2021-03-11 20:25:38,519 [main:117] - GENERATED CALL = (((-17594))).toFloat().isNaN()
2021-03-11 20:25:38,519 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@752353bc]]
2021-03-11 20:25:38,519 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397]
2021-03-11 20:25:38,519 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@752353bc]
2021-03-11 20:25:38,519 [main:117] - GENERATED CALL = (((-17594))).toChar().isWhitespace()
2021-03-11 20:25:38,519 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e465cf2], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@559171b7]]
2021-03-11 20:25:38,519 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e465cf2]
2021-03-11 20:25:38,652 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:25:38,652 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@559171b7]
2021-03-11 20:25:38,788 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:25:38,793 [main:117] - GENERATED CALL = (((-17594))).equals("fuxea").and(false)
2021-03-11 20:25:38,793 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@25850671], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e465cf2]]
2021-03-11 20:25:38,793 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@25850671]
2021-03-11 20:25:38,793 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e465cf2]
2021-03-11 20:25:38,922 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:25:38,922 [main:117] - GENERATED CALL = (((-17594))).compareTo(((17594))).equals("edudc")
2021-03-11 20:25:38,923 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e465cf2], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3859262c]]
2021-03-11 20:25:38,923 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e465cf2]
2021-03-11 20:25:39,050 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:25:39,051 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3859262c]
2021-03-11 20:25:39,051 [main:117] - GENERATED CALL = (((-17594))).equals("bmwea").not()
2021-03-11 20:25:39,051 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6bb22339], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@46bcc85e]]
2021-03-11 20:25:39,051 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6bb22339]
2021-03-11 20:25:39,205 [main:302] - generating value of type = Double true depth = 0
2021-03-11 20:25:39,209 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@46bcc85e]
2021-03-11 20:25:39,343 [main:117] - GENERATED CALL = (((-17594))).div(0.3450161744058431).equals(null)
2021-03-11 20:25:39,343 [main:114] - replacement of true of type Boolean is true
2021-03-11 20:25:39,472 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-11 20:25:39,475 [main:107] - replacing (prope10 != null, Boolean)
2021-03-11 20:25:39,475 [main:50] - replacing prope10 != null Boolean
2021-03-11 20:25:39,475 [main:54] - Getting value of type Boolean
2021-03-11 20:25:39,608 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:25:39,613 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 20:25:39,613 [main:61] - GENERATED IS CALL =false
2021-03-11 20:25:39,631 [main:67] - randomType = Kla3
2021-03-11 20:25:39,760 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-11 20:25:39,765 [main:112] - generating klass Kla3 text = open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}
2021-03-11 20:25:39,893 [main:194] - Type params = []
2021-03-11 20:25:40,022 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 20:25:40,159 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:25:40,165 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:25:40,484 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 20:25:40,627 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:25:40,632 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:25:41,107 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:25:41,108 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:25:41,122 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla3[DeserializedSimpleFunctionDescriptor@17312410]
2021-03-11 20:25:41,250 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:25:41,251 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@559171b7]
2021-03-11 20:25:41,407 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:25:41,412 [main:78] - Generated call from random type = (Kla3()).equals("zduwv").and(true)
2021-03-11 20:25:41,413 [main:106] - GETTING Boolean from InlinedInt
2021-03-11 20:25:41,418 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in InlinedInt[SimpleFunctionDescriptorImpl@14eaa39c], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2b9c0a0e]]
2021-03-11 20:25:41,418 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in InlinedInt[SimpleFunctionDescriptorImpl@14eaa39c]
2021-03-11 20:25:41,556 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:25:41,556 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2b9c0a0e]
2021-03-11 20:25:41,684 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:25:41,684 [main:117] - GENERATED CALL = (InlinedInt(1265378532)).equals("sysai").equals("uoqsu")
2021-03-11 20:25:41,684 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in InlinedInt[SimpleFunctionDescriptorImpl@14eaa39c]]
2021-03-11 20:25:41,684 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in InlinedInt[SimpleFunctionDescriptorImpl@14eaa39c]
2021-03-11 20:25:41,816 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:25:41,816 [main:117] - GENERATED CALL = (InlinedInt(1265378532)).equals("laxan")
2021-03-11 20:25:41,816 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in InlinedInt[SimpleFunctionDescriptorImpl@14eaa39c], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@559171b7]]
2021-03-11 20:25:41,817 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in InlinedInt[SimpleFunctionDescriptorImpl@14eaa39c]
2021-03-11 20:25:41,983 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@559171b7]
2021-03-11 20:25:42,122 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:25:42,127 [main:117] - GENERATED CALL = (InlinedInt(1265378532)).equals(null).and(true)
2021-03-11 20:25:42,127 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in InlinedInt[SimpleFunctionDescriptorImpl@14eaa39c], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@fdd1e25]]
2021-03-11 20:25:42,127 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in InlinedInt[SimpleFunctionDescriptorImpl@14eaa39c]
2021-03-11 20:25:42,259 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:25:42,260 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@fdd1e25]
2021-03-11 20:25:42,390 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:25:42,395 [main:117] - GENERATED CALL = (InlinedInt(1265378532)).equals("uwkgk").xor(false)
2021-03-11 20:25:42,395 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in InlinedInt[SimpleFunctionDescriptorImpl@14eaa39c], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3859262c]]
2021-03-11 20:25:42,395 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in InlinedInt[SimpleFunctionDescriptorImpl@14eaa39c]
2021-03-11 20:25:42,525 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:25:42,525 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3859262c]
2021-03-11 20:25:42,525 [main:117] - GENERATED CALL = (InlinedInt(1265378532)).equals("ulqyq").not()
2021-03-11 20:25:42,525 [main:113] - Case = [public final val internal: kotlin.Int defined in InlinedInt[PropertyDescriptorImpl@1259794], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e465cf2]]
2021-03-11 20:25:42,525 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e465cf2]
2021-03-11 20:25:42,654 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:25:42,654 [main:117] - GENERATED CALL = (InlinedInt(1265378532)).internal.equals("neyei")
2021-03-11 20:25:42,654 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in InlinedInt[SimpleFunctionDescriptorImpl@14eaa39c], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7d04b157]]
2021-03-11 20:25:42,654 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in InlinedInt[SimpleFunctionDescriptorImpl@14eaa39c]
2021-03-11 20:25:42,783 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:25:42,784 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7d04b157]
2021-03-11 20:25:42,914 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:25:42,919 [main:117] - GENERATED CALL = (InlinedInt(1265378532)).equals("pgmvs").or(true)
2021-03-11 20:25:42,919 [main:114] - replacement of prope10 != null of type Boolean is (InlinedInt(1265378532)).equals("laxan")
2021-03-11 20:25:43,051 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:25:43,051 [main:66] - Compilation checking started
2021-03-11 20:25:43,442 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { { print("eclsf")}() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = "OK"

fun box378(): String {
    var prope4 = "FAIL 1"
    fu2 {
        prope4 = fu5()
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 2"
    fu2 {
        fu2 {
            fu2 {
                fu2 {
                    fu2 {
                        fu2 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if (prope4 != (InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(1220123570)) return prope4
    prope4 = "FAIL 4"
    fu3 {
        fu3 {
            fu3 {
                fu3 {
                    fu3 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while ((InlinedInt(1265378532)).equals("laxan")) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (prope8) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:25:43,447 [main:107] - replacing (numberOfSuspensions, Int)
2021-03-11 20:25:43,448 [main:50] - replacing numberOfSuspensions Int
2021-03-11 20:25:43,448 [main:54] - Getting value of type Int
2021-03-11 20:25:43,584 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:25:43,589 [main:58] - GENERATED VALUE OF TYPE Int = -707895550
2021-03-11 20:25:43,589 [main:61] - GENERATED IS CALL =false
2021-03-11 20:25:43,755 [main:67] - randomType = Kla3
2021-03-11 20:25:43,917 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-11 20:25:43,922 [main:112] - generating klass Kla3 text = open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}
2021-03-11 20:25:44,050 [main:194] - Type params = []
2021-03-11 20:25:44,178 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 20:25:44,312 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:25:44,318 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:25:44,626 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 20:25:44,769 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:25:44,774 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:25:45,247 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:25:45,247 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:25:45,261 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla3[DeserializedSimpleFunctionDescriptor@6ee58a70]
2021-03-11 20:25:45,390 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:25:45,390 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1bdbc878]
2021-03-11 20:25:45,527 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:25:45,532 [main:78] - Generated call from random type = (Kla3()).equals("oejig").compareTo(true)
2021-03-11 20:25:45,533 [main:106] - GETTING Int from ULong
2021-03-11 20:25:45,555 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@6e694746], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5679d86e]]
2021-03-11 20:25:45,555 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@6e694746]
2021-03-11 20:25:45,555 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5679d86e]
2021-03-11 20:25:45,555 [main:117] - GENERATED CALL = (foo<ULong>({ 7467005423461192445.toULong()})).toShort().countLeadingZeroBits()
2021-03-11 20:25:45,555 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@71cd5779], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.UShort.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5a771dc6]]
2021-03-11 20:25:45,555 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@71cd5779]
2021-03-11 20:25:45,555 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.UShort.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5a771dc6]
2021-03-11 20:25:45,555 [main:117] - GENERATED CALL = (foo<ULong>({ 7467005423461192445.toULong()})).toUShort().countOneBits()
2021-03-11 20:25:45,556 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@71cd5779], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.UShort.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6999c848]]
2021-03-11 20:25:45,556 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@71cd5779]
2021-03-11 20:25:45,556 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.UShort.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6999c848]
2021-03-11 20:25:45,556 [main:117] - GENERATED CALL = (foo<ULong>({ 7467005423461192445.toULong()})).toUShort().countTrailingZeroBits()
2021-03-11 20:25:45,556 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@4e4273fe], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3d982f4c]]
2021-03-11 20:25:45,556 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@4e4273fe]
2021-03-11 20:25:45,556 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3d982f4c]
2021-03-11 20:25:45,556 [main:117] - GENERATED CALL = (foo<ULong>({ 7467005423461192445.toULong()})).toByte().unaryPlus()
2021-03-11 20:25:45,556 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@4e4273fe], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@5756cfe6]]
2021-03-11 20:25:45,556 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@4e4273fe]
2021-03-11 20:25:45,556 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@5756cfe6]
2021-03-11 20:25:45,685 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:25:45,691 [main:117] - GENERATED CALL = (foo<ULong>({ 7467005423461192445.toULong()})).toByte().plus(19)
2021-03-11 20:25:45,691 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@af20986], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.UByte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@785c5b78]]
2021-03-11 20:25:45,691 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@af20986]
2021-03-11 20:25:45,691 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.UByte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@785c5b78]
2021-03-11 20:25:45,691 [main:117] - GENERATED CALL = (foo<ULong>({ 7467005423461192445.toULong()})).toUByte().countLeadingZeroBits()
2021-03-11 20:25:45,691 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@4d0ee8e], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4fe258f2]]
2021-03-11 20:25:45,691 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@4d0ee8e]
2021-03-11 20:25:45,821 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 20:25:45,825 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4fe258f2]
2021-03-11 20:25:45,954 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:25:45,959 [main:117] - GENERATED CALL = (foo<ULong>({ 7467005423461192445.toULong()})).compareTo(55.toUByte()).div(110)
2021-03-11 20:25:45,959 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@6e694746], public open fun toInt(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2e358c0d]]
2021-03-11 20:25:45,959 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@6e694746]
2021-03-11 20:25:45,959 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2e358c0d]
2021-03-11 20:25:45,959 [main:117] - GENERATED CALL = (foo<ULong>({ 7467005423461192445.toULong()})).toShort().toInt()
2021-03-11 20:25:45,960 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@af20986], @kotlin.internal.InlineOnly public final inline fun toInt(): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@53237588]]
2021-03-11 20:25:45,960 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@af20986]
2021-03-11 20:25:45,960 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toInt(): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@53237588]
2021-03-11 20:25:45,960 [main:117] - GENERATED CALL = (foo<ULong>({ 7467005423461192445.toULong()})).toUByte().toInt()
2021-03-11 20:25:45,960 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@af20986], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.UByte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5e9c61cd]]
2021-03-11 20:25:45,960 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@af20986]
2021-03-11 20:25:45,960 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.UByte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5e9c61cd]
2021-03-11 20:25:45,960 [main:117] - GENERATED CALL = (foo<ULong>({ 7467005423461192445.toULong()})).toUByte().countTrailingZeroBits()
2021-03-11 20:25:45,960 [main:114] - replacement of numberOfSuspensions of type Int is (foo<ULong>({ 7467005423461192445.toULong()})).toUShort().countOneBits()
2021-03-11 20:25:46,091 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:25:46,091 [main:66] - Compilation checking started
2021-03-11 20:25:46,829 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { { print("eclsf")}() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = "OK"

fun box378(): String {
    var prope4 = "FAIL 1"
    fu2 {
        prope4 = fu5()
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 2"
    fu2 {
        fu2 {
            fu2 {
                fu2 {
                    fu2 {
                        fu2 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if (prope4 != (InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(1220123570)) return prope4
    prope4 = "FAIL 4"
    fu3 {
        fu3 {
            fu3 {
                fu3 {
                    fu3 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (foo<ULong>({ 7467005423461192445.toULong()})).toUShort().countOneBits() + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (prope8) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:25:46,832 [main:107] - replacing ("FAIL 4", String)
2021-03-11 20:25:46,833 [main:50] - replacing "FAIL 4" String
2021-03-11 20:25:46,833 [main:54] - Getting value of type String
2021-03-11 20:25:46,980 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:25:46,985 [main:58] - GENERATED VALUE OF TYPE String = "iytoj"
2021-03-11 20:25:46,986 [main:61] - GENERATED IS CALL =false
2021-03-11 20:25:47,651 [main:67] - randomType = Function1<Kla8?, Kla3>
2021-03-11 20:25:47,652 [main:106] - GETTING String from Int
2021-03-11 20:25:47,694 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@25850671], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]]
2021-03-11 20:25:47,694 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@25850671]
2021-03-11 20:25:47,825 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:25:47,829 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]
2021-03-11 20:25:47,830 [main:117] - GENERATED CALL = ((-17594)).compareTo(-1028863766).toString(-17594)
2021-03-11 20:25:47,830 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@571d28fe], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]]
2021-03-11 20:25:47,830 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@571d28fe]
2021-03-11 20:25:47,830 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]
2021-03-11 20:25:47,830 [main:117] - GENERATED CALL = ((-17594)).toLong().toString((InlinedInt(-17594))?.internal)
2021-03-11 20:25:47,830 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a6eaf83], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2889e564]]
2021-03-11 20:25:47,830 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a6eaf83]
2021-03-11 20:25:47,830 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2889e564]
2021-03-11 20:25:47,830 [main:117] - GENERATED CALL = ((-17594)).toShort().toString((-17594))
2021-03-11 20:25:47,830 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]]
2021-03-11 20:25:47,830 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]
2021-03-11 20:25:47,831 [main:117] - GENERATED CALL = ((-17594)).toString(((17594)))
2021-03-11 20:25:47,831 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7a52df9c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]]
2021-03-11 20:25:47,831 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7a52df9c]
2021-03-11 20:25:47,831 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]
2021-03-11 20:25:47,831 [main:117] - GENERATED CALL = ((-17594)).toInt().toString((17594))
2021-03-11 20:25:47,831 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@629a957]]
2021-03-11 20:25:47,831 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397]
2021-03-11 20:25:47,831 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@629a957]
2021-03-11 20:25:47,831 [main:117] - GENERATED CALL = ((-17594)).toChar().titlecase()
2021-03-11 20:25:47,831 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@819e073], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]]
2021-03-11 20:25:47,831 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@819e073]
2021-03-11 20:25:47,961 [main:302] - generating value of type = Long true depth = 0
2021-03-11 20:25:47,966 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]
2021-03-11 20:25:47,967 [main:117] - GENERATED CALL = ((-17594)).div(-5207658985313574011).toString(((17594)))
2021-03-11 20:25:47,967 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4045409b]]
2021-03-11 20:25:47,967 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397]
2021-03-11 20:25:47,967 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4045409b]
2021-03-11 20:25:47,967 [main:117] - GENERATED CALL = ((-17594)).toChar().lowercase()
2021-03-11 20:25:47,967 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@38a0b896], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57d8c30b]]
2021-03-11 20:25:47,967 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@38a0b896]
2021-03-11 20:25:47,967 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57d8c30b]
2021-03-11 20:25:48,103 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:25:48,108 [main:117] - GENERATED CALL = ((-17594)).toByte().toString(2098456637)
2021-03-11 20:25:48,108 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d654126]]
2021-03-11 20:25:48,108 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397]
2021-03-11 20:25:48,108 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d654126]
2021-03-11 20:25:48,108 [main:117] - GENERATED CALL = ((-17594)).toChar().uppercase()
2021-03-11 20:25:48,108 [main:114] - replacement of "FAIL 4" of type String is ((-17594)).compareTo(-1028863766).toString(-17594)
2021-03-11 20:25:48,237 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:25:48,237 [main:66] - Compilation checking started
2021-03-11 20:25:48,914 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { { print("eclsf")}() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = "OK"

fun box378(): String {
    var prope4 = "FAIL 1"
    fu2 {
        prope4 = fu5()
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 2"
    fu2 {
        fu2 {
            fu2 {
                fu2 {
                    fu2 {
                        fu2 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if (prope4 != (InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(1220123570)) return prope4
    prope4 = ((-17594)).compareTo(-1028863766).toString(-17594)
    fu3 {
        fu3 {
            fu3 {
                fu3 {
                    fu3 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (foo<ULong>({ 7467005423461192445.toULong()})).toUShort().countOneBits() + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (prope8) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:25:48,917 [main:107] - replacing ("OK", String)
2021-03-11 20:25:48,917 [main:50] - replacing "OK" String
2021-03-11 20:25:48,917 [main:54] - Getting value of type String
2021-03-11 20:25:49,052 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:25:49,057 [main:58] - GENERATED VALUE OF TYPE String = "eucit"
2021-03-11 20:25:49,057 [main:61] - GENERATED IS CALL =false
2021-03-11 20:25:49,239 [main:67] - randomType = Short
2021-03-11 20:25:49,369 [main:302] - generating value of type = Short true depth = 0
2021-03-11 20:25:49,403 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@571d28fe]
2021-03-11 20:25:49,403 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]
2021-03-11 20:25:49,403 [main:78] - Generated call from random type = (-7491).toLong().toString(InlinedInt(-463791997).internal)
2021-03-11 20:25:49,404 [main:106] - GETTING String from Kla0
2021-03-11 20:25:49,421 [main:113] - Case = [public final val name: kotlin.String defined in Kla0[DeserializedPropertyDescriptor@5a595bf9], public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2be08794]]
2021-03-11 20:25:49,421 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2be08794]
2021-03-11 20:25:49,552 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:25:49,557 [main:117] - GENERATED CALL = (foo<Kla0>({ Kla0.Kla1})).name.dropLast(1910722145)
2021-03-11 20:25:49,557 [main:113] - Case = [public final val name: kotlin.String defined in Kla0[DeserializedPropertyDescriptor@5a595bf9], @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b2162ab]]
2021-03-11 20:25:49,557 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b2162ab]
2021-03-11 20:25:49,688 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 20:25:49,834 [main:43] - GENERATING CALL OF fun <E> buildSet(builderAction: kotlin.collections.MutableSet<Int>.()->kotlin.Unit): Iterable<Int> = TODO()
2021-03-11 20:25:49,840 [main:61] - WITHOUT TYPE PARAMS = fun <E> buildSet(builderAction: kotlin.collections.MutableSet<Int>.()->kotlin.Unit): Iterable<Int> = TODO()
2021-03-11 20:25:50,165 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<MutableSet<Int>, Unit> false depth = 3
2021-03-11 20:25:50,170 [main:302] - generating value of type = Unit false depth = 4
2021-03-11 20:25:50,310 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:25:50,316 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:25:50,616 [main:302] - generating value of type = Any false depth = 7
2021-03-11 20:25:50,617 [main:95] - GENERATED = println("owtiy")
2021-03-11 20:25:50,617 [main:95] - GENERATED = buildSet<Int>({ println("owtiy")})
2021-03-11 20:25:50,617 [main:117] - GENERATED CALL = (foo<Kla0>({ Kla0.Kla1})).name.slice(buildSet<Int>({ println("owtiy")}))
2021-03-11 20:25:50,617 [main:113] - Case = [public final val name: kotlin.String defined in Kla0[DeserializedPropertyDescriptor@5a595bf9], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c22f8a5]]
2021-03-11 20:25:50,617 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c22f8a5]
2021-03-11 20:25:50,748 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-11 20:25:50,753 [main:302] - generating value of type = Char true depth = 1
2021-03-11 20:25:50,758 [main:117] - GENERATED CALL = (foo<Kla0>({ Kla0.Kla1})).name.replaceFirstChar({a: Char -> '᲍'})
2021-03-11 20:25:50,758 [main:113] - Case = [public final val name: kotlin.String defined in Kla0[DeserializedPropertyDescriptor@5a595bf9], public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36b57609]]
2021-03-11 20:25:50,758 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36b57609]
2021-03-11 20:25:50,890 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:25:50,895 [main:117] - GENERATED CALL = (foo<Kla0>({ Kla0.Kla1})).name.trimMargin("ntmtb")
2021-03-11 20:25:50,895 [main:113] - Case = [public final val name: kotlin.String defined in Kla0[DeserializedPropertyDescriptor@5a595bf9], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d5c6662]]
2021-03-11 20:25:50,895 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d5c6662]
2021-03-11 20:25:51,027 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:25:51,033 [main:117] - GENERATED CALL = (foo<Kla0>({ Kla0.Kla1})).name.replaceBeforeLast('ꩨ', fu1({ "vagtc"}, { "jcovl"}), fu1({ "vagtc"}, { "jcovl"}))
2021-03-11 20:25:51,033 [main:113] - Case = [public final val name: kotlin.String defined in Kla0[DeserializedPropertyDescriptor@5a595bf9], public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7fcd6734]]
2021-03-11 20:25:51,033 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7fcd6734]
2021-03-11 20:25:51,165 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 20:25:51,170 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 20:25:51,175 [main:117] - GENERATED CALL = (foo<Kla0>({ Kla0.Kla1})).name.dropWhile({a: Char -> true})
2021-03-11 20:25:51,175 [main:113] - Case = [public final val name: kotlin.String defined in Kla0[DeserializedPropertyDescriptor@5a595bf9], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31fd23ba]]
2021-03-11 20:25:51,175 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31fd23ba]
2021-03-11 20:25:51,307 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:25:51,312 [main:117] - GENERATED CALL = (foo<Kla0>({ Kla0.Kla1})).name.substringBefore((((17594)).toLong()).toChar(), "oqxdi")
2021-03-11 20:25:51,312 [main:113] - Case = [public final val name: kotlin.String defined in Kla0[DeserializedPropertyDescriptor@5a595bf9], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77da2f63]]
2021-03-11 20:25:51,312 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77da2f63]
2021-03-11 20:25:51,442 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 20:25:51,447 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 20:25:51,452 [main:117] - GENERATED CALL = (foo<Kla0>({ Kla0.Kla1})).name.filterIndexed({a: Int, b: Char -> true})
2021-03-11 20:25:51,452 [main:113] - Case = [public final val name: kotlin.String defined in Kla0[DeserializedPropertyDescriptor@5a595bf9], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61c03bf5]]
2021-03-11 20:25:51,452 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61c03bf5]
2021-03-11 20:25:51,585 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 20:25:51,593 [main:117] - GENERATED CALL = (foo<Kla0>({ Kla0.Kla1})).name.removeSurrounding("xuwhs")
2021-03-11 20:25:51,594 [main:113] - Case = [public final val name: kotlin.String defined in Kla0[DeserializedPropertyDescriptor@5a595bf9], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d30213d]]
2021-03-11 20:25:51,594 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d30213d]
2021-03-11 20:25:51,594 [main:117] - GENERATED CALL = (foo<Kla0>({ Kla0.Kla1})).name.lowercase()
2021-03-11 20:25:51,594 [main:114] - replacement of "OK" of type String is (foo<Kla0>({ Kla0.Kla1})).name.slice(buildSet<Int>({ println("owtiy")}))
2021-03-11 20:25:51,747 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:25:51,747 [main:66] - Compilation checking started
2021-03-11 20:25:52,486 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { { print("eclsf")}() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = (foo<Kla0>({ Kla0.Kla1})).name.slice(buildSet<Int>({ println("owtiy")}))

fun box378(): String {
    var prope4 = "FAIL 1"
    fu2 {
        prope4 = fu5()
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 2"
    fu2 {
        fu2 {
            fu2 {
                fu2 {
                    fu2 {
                        fu2 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if (prope4 != (InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(1220123570)) return prope4
    prope4 = ((-17594)).compareTo(-1028863766).toString(-17594)
    fu3 {
        fu3 {
            fu3 {
                fu3 {
                    fu3 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (foo<ULong>({ 7467005423461192445.toULong()})).toUShort().countOneBits() + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (prope8) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:25:52,489 [main:107] - replacing (getOrThrow(), Ty0)
2021-03-11 20:25:52,489 [main:50] - replacing getOrThrow() Ty0
2021-03-11 20:25:52,489 [main:54] - Getting value of type Ty0
2021-03-11 20:25:52,647 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 20:25:52,655 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 20:25:53,426 [main:67] - randomType = Pair<Sequence<Kla0?>, UByte>
2021-03-11 20:25:53,572 [main:302] - generating value of type = Pair<Sequence<Kla0?>, UByte> false depth = 0
2021-03-11 20:25:53,717 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Sequence<Kla0?>, second: UByte): Pair<Sequence<Kla0?>, UByte> = TODO()
2021-03-11 20:25:53,723 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Sequence<Kla0?>, second: UByte): Pair<Sequence<Kla0?>, UByte> = TODO()
2021-03-11 20:25:53,872 [main:302] - generating value of type = Sequence<Kla0?> false depth = 3
2021-03-11 20:25:54,015 [main:43] - GENERATING CALL OF fun <T> emptySequence(): Sequence<Kla0?> = TODO()
2021-03-11 20:25:54,021 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptySequence(): Sequence<Kla0?> = TODO()
2021-03-11 20:25:54,167 [main:95] - GENERATED = emptySequence<Kla0?>()
2021-03-11 20:25:54,167 [main:302] - generating value of type = UByte true depth = 3
2021-03-11 20:25:54,172 [main:95] - GENERATED = Pair<Sequence<Kla0?>, UByte>(emptySequence<Kla0?>(), 32.toUByte())
2021-03-11 20:25:54,187 [main:106] - GETTING Ty0 from Int
2021-03-11 20:25:54,216 [main:106] - GETTING Ty0 from String
2021-03-11 20:25:54,232 [main:106] - GETTING Ty0 from String
2021-03-11 20:25:54,233 [main:106] - GETTING Ty0 from Int
2021-03-11 20:25:54,234 [main:106] - GETTING Ty0 from Int
2021-03-11 20:25:54,234 [main:106] - GETTING Ty0 from Int
2021-03-11 20:25:54,235 [main:106] - GETTING Ty0 from Long
2021-03-11 20:25:54,264 [main:106] - GETTING Ty0 from Int
2021-03-11 20:25:54,265 [main:106] - GETTING Ty0 from Int
2021-03-11 20:25:54,265 [main:106] - GETTING Ty0 from InlinedInt
2021-03-11 20:25:54,270 [main:106] - GETTING Ty0 from ULong
2021-03-11 20:25:54,291 [main:106] - GETTING Ty0 from Char
2021-03-11 20:25:54,308 [main:106] - GETTING Ty0 from InlinedInt
2021-03-11 20:25:54,308 [main:106] - GETTING Ty0 from InlinedInt
2021-03-11 20:25:54,309 [main:106] - GETTING Ty0 from Long
2021-03-11 20:25:54,310 [main:106] - GETTING Ty0 from ULong
2021-03-11 20:25:54,310 [main:106] - GETTING Ty0 from String
2021-03-11 20:25:54,311 [main:106] - GETTING Ty0 from Long
2021-03-11 20:25:54,311 [main:106] - GETTING Ty0 from Int
2021-03-11 20:25:54,312 [main:106] - GETTING Ty0 from InlinedInt
2021-03-11 20:25:54,313 [main:106] - GETTING Ty0 from Kla0
2021-03-11 20:25:54,331 [main:106] - GETTING Ty0 from InlinedString
2021-03-11 20:25:54,336 [main:106] - GETTING Ty0 from String
2021-03-11 20:25:54,336 [main:111] - Cant find and generate replacement for getOrThrow() type Ty0
2021-03-11 20:25:54,336 [main:107] - replacing (true, Boolean)
2021-03-11 20:25:54,336 [main:50] - replacing true Boolean
2021-03-11 20:25:54,336 [main:54] - Getting value of type Boolean
2021-03-11 20:25:54,472 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:25:54,477 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 20:25:54,477 [main:61] - GENERATED IS CALL =false
2021-03-11 20:25:54,684 [main:67] - randomType = LinkedHashSet<UShort>
2021-03-11 20:25:54,819 [main:302] - generating value of type = LinkedHashSet<UShort> false depth = 0
2021-03-11 20:25:54,960 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: UShort): LkedHashSet<UShort> = TODO()
2021-03-11 20:25:54,966 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: UShort): LkedHashSet<UShort> = TODO()
2021-03-11 20:25:55,109 [main:302] - generating value of type = UShort true depth = 3
2021-03-11 20:25:55,114 [main:95] - GENERATED = linkedSetOf<UShort>(16589.toUShort())
2021-03-11 20:25:55,224 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@71ddce83]
2021-03-11 20:25:55,224 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Array<*>?.isNullOrEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@29bccdab]
2021-03-11 20:25:55,224 [main:78] - Generated call from random type = (linkedSetOf<UShort>(16589.toUShort())).toArray().isNullOrEmpty()
2021-03-11 20:25:55,225 [main:106] - GETTING Boolean from ULong
2021-03-11 20:25:55,246 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.ULong): kotlin.ranges.ULongRange defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@54fceb37], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.ULongRange[DeserializedSimpleFunctionDescriptor@713179e3]]
2021-03-11 20:25:55,246 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.ULong): kotlin.ranges.ULongRange defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@54fceb37]
2021-03-11 20:25:55,246 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.ULongRange[DeserializedSimpleFunctionDescriptor@713179e3]
2021-03-11 20:25:55,380 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:25:55,381 [main:117] - GENERATED CALL = (foo<ULong>({ 7467005423461192445.toULong()})).rangeTo(foo<ULong>({ 7467005423461192445.toULong()})).equals("ucugw")
2021-03-11 20:25:55,381 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.ULong): kotlin.ranges.ULongRange defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@54fceb37], public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.ULongRange[DeserializedSimpleFunctionDescriptor@3c80811c]]
2021-03-11 20:25:55,381 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.ULong): kotlin.ranges.ULongRange defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@54fceb37]
2021-03-11 20:25:55,381 [main:149] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.ULongRange[DeserializedSimpleFunctionDescriptor@3c80811c]
2021-03-11 20:25:55,381 [main:117] - GENERATED CALL = (foo<ULong>({ 7467005423461192445.toULong()})).rangeTo(foo<ULong>({ 7467005423461192445.toULong()})).isEmpty()
2021-03-11 20:25:55,381 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@252d1390], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3859262c]]
2021-03-11 20:25:55,381 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@252d1390]
2021-03-11 20:25:55,521 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:25:55,521 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3859262c]
2021-03-11 20:25:55,521 [main:117] - GENERATED CALL = (foo<ULong>({ 7467005423461192445.toULong()})).equals("tjcqu").not()
2021-03-11 20:25:55,521 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@252d1390], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7d04b157]]
2021-03-11 20:25:55,521 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@252d1390]
2021-03-11 20:25:55,659 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:25:55,659 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7d04b157]
2021-03-11 20:25:55,795 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:25:55,800 [main:117] - GENERATED CALL = (foo<ULong>({ 7467005423461192445.toULong()})).equals("rizmj").or(true)
2021-03-11 20:25:55,801 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@5801eedf], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@60ebb310]]
2021-03-11 20:25:55,801 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@5801eedf]
2021-03-11 20:25:55,801 [main:149] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@60ebb310]
2021-03-11 20:25:55,801 [main:117] - GENERATED CALL = (foo<ULong>({ 7467005423461192445.toULong()})).toDouble().isNaN()
2021-03-11 20:25:55,801 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@252d1390], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@559171b7]]
2021-03-11 20:25:55,801 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@252d1390]
2021-03-11 20:25:55,934 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:25:55,935 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@559171b7]
2021-03-11 20:25:56,071 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:25:56,076 [main:117] - GENERATED CALL = (foo<ULong>({ 7467005423461192445.toULong()})).equals("tqokz").and(true)
2021-03-11 20:25:56,076 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@11deb431], public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@4608c405]]
2021-03-11 20:25:56,077 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@11deb431]
2021-03-11 20:25:56,077 [main:149] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@4608c405]
2021-03-11 20:25:56,077 [main:117] - GENERATED CALL = (foo<ULong>({ 7467005423461192445.toULong()})).toFloat().isNaN()
2021-03-11 20:25:56,077 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@11deb431], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@1364b0de]]
2021-03-11 20:25:56,077 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@11deb431]
2021-03-11 20:25:56,077 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@1364b0de]
2021-03-11 20:25:56,212 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:25:56,212 [main:117] - GENERATED CALL = (foo<ULong>({ 7467005423461192445.toULong()})).toFloat().equals("ptoav")
2021-03-11 20:25:56,212 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@252d1390], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2b9c0a0e]]
2021-03-11 20:25:56,212 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@252d1390]
2021-03-11 20:25:56,347 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:25:56,347 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2b9c0a0e]
2021-03-11 20:25:56,486 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:25:56,487 [main:117] - GENERATED CALL = (foo<ULong>({ 7467005423461192445.toULong()})).equals("pifcv").equals("wvosh")
2021-03-11 20:25:56,487 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@11deb431], public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@1bac51bd]]
2021-03-11 20:25:56,487 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@11deb431]
2021-03-11 20:25:56,487 [main:149] - GENERATING call of type public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@1bac51bd]
2021-03-11 20:25:56,487 [main:117] - GENERATED CALL = (foo<ULong>({ 7467005423461192445.toULong()})).toFloat().isInfinite()
2021-03-11 20:25:56,487 [main:114] - replacement of true of type Boolean is (foo<ULong>({ 7467005423461192445.toULong()})).rangeTo(foo<ULong>({ 7467005423461192445.toULong()})).equals("ucugw")
2021-03-11 20:25:56,622 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:25:56,622 [main:66] - Compilation checking started
2021-03-11 20:25:57,376 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { { print("eclsf")}() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = (foo<Kla0>({ Kla0.Kla1})).name.slice(buildSet<Int>({ println("owtiy")}))

fun box378(): String {
    var prope4 = "FAIL 1"
    fu2 {
        prope4 = fu5()
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 2"
    fu2 {
        fu2 {
            fu2 {
                fu2 {
                    fu2 {
                        fu2 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if (prope4 != (InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(1220123570)) return prope4
    prope4 = ((-17594)).compareTo(-1028863766).toString(-17594)
    fu3 {
        fu3 {
            fu3 {
                fu3 {
                    fu3 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (foo<ULong>({ 7467005423461192445.toULong()})).rangeTo(foo<ULong>({ 7467005423461192445.toULong()})).equals("ucugw") } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (foo<ULong>({ 7467005423461192445.toULong()})).toUShort().countOneBits() + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (prope8) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:25:57,381 [main:107] - replacing ({
            fu2 {
                fu2 {
                    fu2 {
                        fu2 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }, SuspendFunction0<Unit>)
2021-03-11 20:25:57,382 [main:50] - replacing {
            fu2 {
                fu2 {
                    fu2 {
                        fu2 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        } SuspendFunction0<Unit>
2021-03-11 20:25:57,382 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-11 20:25:57,534 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-11 20:25:57,539 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:25:57,695 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:25:57,701 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:25:58,191 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 20:25:58,196 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 20:25:58,201 [main:302] - generating value of type = Any false depth = 5
2021-03-11 20:25:58,201 [main:95] - GENERATED = require(false, { "sfizs"})
2021-03-11 20:25:58,201 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { require(false, { "sfizs"})}
2021-03-11 20:25:58,201 [main:61] - GENERATED IS CALL =false
2021-03-11 20:25:58,211 [main:67] - randomType = Boolean
2021-03-11 20:25:58,348 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:25:58,362 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 20:25:58,379 [main:106] - GETTING SuspendFunction0<Unit> from ULong
2021-03-11 20:25:58,400 [main:106] - GETTING SuspendFunction0<Unit> from InlinedInt
2021-03-11 20:25:58,405 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 20:25:58,406 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:25:58,435 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:25:58,436 [main:106] - GETTING SuspendFunction0<Unit> from InlinedInt
2021-03-11 20:25:58,437 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:25:58,438 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 20:25:58,439 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:25:58,440 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:25:58,440 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:25:58,441 [main:106] - GETTING SuspendFunction0<Unit> from Long
2021-03-11 20:25:58,470 [main:106] - GETTING SuspendFunction0<Unit> from InlinedInt
2021-03-11 20:25:58,471 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 20:25:58,472 [main:106] - GETTING SuspendFunction0<Unit> from Long
2021-03-11 20:25:58,473 [main:106] - GETTING SuspendFunction0<Unit> from InlinedString
2021-03-11 20:25:58,478 [main:106] - GETTING SuspendFunction0<Unit> from InlinedInt
2021-03-11 20:25:58,479 [main:106] - GETTING SuspendFunction0<Unit> from ULong
2021-03-11 20:25:58,480 [main:106] - GETTING SuspendFunction0<Unit> from Long
2021-03-11 20:25:58,481 [main:106] - GETTING SuspendFunction0<Unit> from Kla0
2021-03-11 20:25:58,499 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:25:58,500 [main:106] - GETTING SuspendFunction0<Unit> from Char
2021-03-11 20:25:58,516 [main:114] - replacement of {
            fu2 {
                fu2 {
                    fu2 {
                        fu2 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        } of type SuspendFunction0<Unit> is { require(false, { "sfizs"})}
2021-03-11 20:25:58,653 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:25:58,653 [main:66] - Compilation checking started
2021-03-11 20:25:59,320 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { { print("eclsf")}() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = (foo<Kla0>({ Kla0.Kla1})).name.slice(buildSet<Int>({ println("owtiy")}))

fun box378(): String {
    var prope4 = "FAIL 1"
    fu2 {
        prope4 = fu5()
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 2"
    fu2 {
        fu2 { require(false, { "sfizs"})}
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if (prope4 != (InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(1220123570)) return prope4
    prope4 = ((-17594)).compareTo(-1028863766).toString(-17594)
    fu3 {
        fu3 {
            fu3 {
                fu3 {
                    fu3 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (foo<ULong>({ 7467005423461192445.toULong()})).rangeTo(foo<ULong>({ 7467005423461192445.toULong()})).equals("ucugw") } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (foo<ULong>({ 7467005423461192445.toULong()})).toUShort().countOneBits() + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (prope8) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:25:59,323 [main:107] - replacing (i, Int)
2021-03-11 20:25:59,323 [main:50] - replacing i Int
2021-03-11 20:25:59,323 [main:54] - Getting value of type Int
2021-03-11 20:25:59,460 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:25:59,465 [main:58] - GENERATED VALUE OF TYPE Int = 1225152974
2021-03-11 20:25:59,465 [main:61] - GENERATED IS CALL =false
2021-03-11 20:25:59,796 [main:67] - randomType = UInt?
2021-03-11 20:25:59,937 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 20:25:59,984 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@19983584]
2021-03-11 20:25:59,984 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@382e9e2a]
2021-03-11 20:25:59,984 [main:78] - Generated call from random type = (98550246.toUInt())?.toFloat().toRawBits()
2021-03-11 20:25:59,984 [main:114] - replacement of i of type Int is (98550246.toUInt())?.toFloat().toRawBits()
2021-03-11 20:26:00,152 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:26:00,153 [main:66] - Compilation checking started
2021-03-11 20:26:00,839 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { { print("eclsf")}() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = (foo<Kla0>({ Kla0.Kla1})).name.slice(buildSet<Int>({ println("owtiy")}))

fun box378(): String {
    var prope4 = "FAIL 1"
    fu2 {
        prope4 = fu5()
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 2"
    fu2 {
        fu2 { require(false, { "sfizs"})}
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if (prope4 != (InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(1220123570)) return prope4
    prope4 = ((-17594)).compareTo(-1028863766).toString(-17594)
    fu3 {
        fu3 {
            fu3 {
                fu3 {
                    fu3 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (foo<ULong>({ 7467005423461192445.toULong()})).rangeTo(foo<ULong>({ 7467005423461192445.toULong()})).equals("ucugw") } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != (98550246.toUInt())?.toFloat().toRawBits()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (foo<ULong>({ 7467005423461192445.toULong()})).toUShort().countOneBits() + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (prope8) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:26:00,842 [main:107] - replacing ({ c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }, Function1<Continuation<Unit>, Unit>)
2021-03-11 20:26:00,842 [main:50] - replacing { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    } Function1<Continuation<Unit>, Unit>
2021-03-11 20:26:00,842 [main:54] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-11 20:26:01,000 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-11 20:26:01,005 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:26:01,153 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 20:26:01,159 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 20:26:01,481 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 20:26:01,487 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 20:26:01,637 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 20:26:01,644 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 20:26:01,966 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 8
2021-03-11 20:26:01,971 [main:302] - generating value of type = Unit false depth = 9
2021-03-11 20:26:02,117 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:26:02,124 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:26:02,616 [main:302] - generating value of type = Boolean true depth = 12
2021-03-11 20:26:02,621 [main:302] - generating value of type = Function0<Any> false depth = 12
2021-03-11 20:26:02,626 [main:302] - generating value of type = Any false depth = 13
2021-03-11 20:26:02,627 [main:95] - GENERATED = require(false, { "kycms"})
2021-03-11 20:26:02,627 [main:95] - GENERATED = contract({ require(false, { "kycms"})})
2021-03-11 20:26:02,627 [main:95] - GENERATED = contract({ contract({ require(false, { "kycms"})})})
2021-03-11 20:26:02,627 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> contract({ contract({ require(false, { "kycms"})})})}
2021-03-11 20:26:02,627 [main:61] - GENERATED IS CALL =false
2021-03-11 20:26:02,637 [main:67] - randomType = Boolean
2021-03-11 20:26:02,776 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:26:02,794 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 20:26:02,828 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from InlinedInt
2021-03-11 20:26:02,834 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 20:26:02,835 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from InlinedString
2021-03-11 20:26:02,841 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 20:26:02,858 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from InlinedInt
2021-03-11 20:26:02,859 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from ULong
2021-03-11 20:26:02,903 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 20:26:02,904 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Long
2021-03-11 20:26:02,934 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Char
2021-03-11 20:26:02,951 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Kla0
2021-03-11 20:26:02,970 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 20:26:02,971 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 20:26:02,973 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 20:26:02,974 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 20:26:02,976 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from ULong
2021-03-11 20:26:02,977 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 20:26:02,978 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 20:26:02,980 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from InlinedInt
2021-03-11 20:26:02,981 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Long
2021-03-11 20:26:02,982 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 20:26:02,984 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Long
2021-03-11 20:26:02,985 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from InlinedInt
2021-03-11 20:26:02,985 [main:114] - replacement of { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> contract({ contract({ require(false, { "kycms"})})})}
2021-03-11 20:26:03,141 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:26:03,142 [main:66] - Compilation checking started
2021-03-11 20:26:03,559 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { { print("eclsf")}() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = (foo<Kla0>({ Kla0.Kla1})).name.slice(buildSet<Int>({ println("owtiy")}))

fun box378(): String {
    var prope4 = "FAIL 1"
    fu2 {
        prope4 = fu5()
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 2"
    fu2 {
        fu2 { require(false, { "sfizs"})}
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if (prope4 != (InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(1220123570)) return prope4
    prope4 = ((-17594)).compareTo(-1028863766).toString(-17594)
    fu3 {
        fu3 {
            fu3 {
                fu3 {
                    fu3 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (foo<ULong>({ 7467005423461192445.toULong()})).rangeTo(foo<ULong>({ 7467005423461192445.toULong()})).equals("ucugw") } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> {a: Continuation<Unit> -> contract({ contract({ require(false, { "kycms"})})})}

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != (98550246.toUInt())?.toFloat().toRawBits()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (foo<ULong>({ 7467005423461192445.toULong()})).toUShort().countOneBits() + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (prope8) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:26:03,562 [main:107] - replacing ("Continuation " + c + " is not subtype of CoroutineStackFrame", String)
2021-03-11 20:26:03,562 [main:50] - replacing "Continuation " + c + " is not subtype of CoroutineStackFrame" String
2021-03-11 20:26:03,562 [main:54] - Getting value of type String
2021-03-11 20:26:03,700 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:26:03,705 [main:58] - GENERATED VALUE OF TYPE String = "dmkdn"
2021-03-11 20:26:03,705 [main:61] - GENERATED IS CALL =false
2021-03-11 20:26:04,271 [main:67] - randomType = List<Triple<Byte, Kla6, Float>>
2021-03-11 20:26:04,272 [main:106] - GETTING String from Int
2021-03-11 20:26:04,304 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@629a957]]
2021-03-11 20:26:04,304 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397]
2021-03-11 20:26:04,304 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@629a957]
2021-03-11 20:26:04,305 [main:117] - GENERATED CALL = (-17594).toChar().titlecase()
2021-03-11 20:26:04,305 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@25850671], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]]
2021-03-11 20:26:04,305 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@25850671]
2021-03-11 20:26:04,305 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]
2021-03-11 20:26:04,442 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:26:04,448 [main:117] - GENERATED CALL = (-17594).compareTo(InlinedInt(-463791997).internal).toString(1608135993)
2021-03-11 20:26:04,448 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]]
2021-03-11 20:26:04,448 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]
2021-03-11 20:26:04,448 [main:117] - GENERATED CALL = (-17594).toString(InlinedInt(-463791997).internal)
2021-03-11 20:26:04,448 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@571d28fe], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]]
2021-03-11 20:26:04,448 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@571d28fe]
2021-03-11 20:26:04,448 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]
2021-03-11 20:26:04,592 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:26:04,597 [main:117] - GENERATED CALL = (-17594).toLong().toString(-1433651449)
2021-03-11 20:26:04,598 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4045409b]]
2021-03-11 20:26:04,598 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397]
2021-03-11 20:26:04,598 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4045409b]
2021-03-11 20:26:04,598 [main:117] - GENERATED CALL = (-17594).toChar().lowercase()
2021-03-11 20:26:04,598 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c70f8ae]]
2021-03-11 20:26:04,598 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397]
2021-03-11 20:26:04,598 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c70f8ae]
2021-03-11 20:26:04,599 [main:117] - GENERATED CALL = (-17594).toChar().plus((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))))
2021-03-11 20:26:04,599 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7a52df9c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]]
2021-03-11 20:26:04,599 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7a52df9c]
2021-03-11 20:26:04,599 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]
2021-03-11 20:26:04,599 [main:117] - GENERATED CALL = (-17594).toInt().toString(((17594)))
2021-03-11 20:26:04,599 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@38a0b896], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57d8c30b]]
2021-03-11 20:26:04,599 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@38a0b896]
2021-03-11 20:26:04,599 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57d8c30b]
2021-03-11 20:26:04,599 [main:117] - GENERATED CALL = (-17594).toByte().toString(((-17594)))
2021-03-11 20:26:04,599 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d654126]]
2021-03-11 20:26:04,599 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397]
2021-03-11 20:26:04,599 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d654126]
2021-03-11 20:26:04,600 [main:117] - GENERATED CALL = (-17594).toChar().uppercase()
2021-03-11 20:26:04,600 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a6eaf83], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2889e564]]
2021-03-11 20:26:04,600 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a6eaf83]
2021-03-11 20:26:04,600 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2889e564]
2021-03-11 20:26:04,600 [main:117] - GENERATED CALL = (-17594).toShort().toString(-17594)
2021-03-11 20:26:04,600 [main:114] - replacement of "Continuation " + c + " is not subtype of CoroutineStackFrame" of type String is (-17594).toChar().plus((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))))
2021-03-11 20:26:04,745 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:26:04,745 [main:66] - Compilation checking started
2021-03-11 20:26:05,444 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { { print("eclsf")}() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = (foo<Kla0>({ Kla0.Kla1})).name.slice(buildSet<Int>({ println("owtiy")}))

fun box378(): String {
    var prope4 = "FAIL 1"
    fu2 {
        prope4 = fu5()
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 2"
    fu2 {
        fu2 { require(false, { "sfizs"})}
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if (prope4 != (InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(1220123570)) return prope4
    prope4 = ((-17594)).compareTo(-1028863766).toString(-17594)
    fu3 {
        fu3 {
            fu3 {
                fu3 {
                    fu3 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((-17594).toChar().plus((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594)))))
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (foo<ULong>({ 7467005423461192445.toULong()})).rangeTo(foo<ULong>({ 7467005423461192445.toULong()})).equals("ucugw") } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != (98550246.toUInt())?.toFloat().toRawBits()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (foo<ULong>({ 7467005423461192445.toULong()})).toUShort().countOneBits() + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (prope8) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:26:05,447 [main:107] - replacing (Kla3, Kla9)
2021-03-11 20:26:05,447 [main:50] - replacing Kla3 Kla9
2021-03-11 20:26:05,447 [main:54] - Getting value of type Kla9
2021-03-11 20:26:05,592 [main:302] - generating value of type = Kla9 false depth = 0
2021-03-11 20:26:05,598 [main:112] - generating klass Kla9 text = companion object Kla9 : Kla3()
2021-03-11 20:26:05,598 [main:58] - GENERATED VALUE OF TYPE Kla9 = 
2021-03-11 20:26:05,608 [main:67] - randomType = ULong
2021-03-11 20:26:05,771 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 20:26:05,807 [main:106] - GETTING Kla9 from InlinedInt
2021-03-11 20:26:05,811 [main:106] - GETTING Kla9 from Int
2021-03-11 20:26:05,840 [main:106] - GETTING Kla9 from Int
2021-03-11 20:26:05,841 [main:106] - GETTING Kla9 from Int
2021-03-11 20:26:05,841 [main:106] - GETTING Kla9 from Long
2021-03-11 20:26:05,870 [main:106] - GETTING Kla9 from ULong
2021-03-11 20:26:05,891 [main:106] - GETTING Kla9 from Int
2021-03-11 20:26:05,891 [main:106] - GETTING Kla9 from Kla0
2021-03-11 20:26:05,909 [main:106] - GETTING Kla9 from String
2021-03-11 20:26:05,924 [main:106] - GETTING Kla9 from Char
2021-03-11 20:26:05,941 [main:106] - GETTING Kla9 from String
2021-03-11 20:26:05,941 [main:106] - GETTING Kla9 from Int
2021-03-11 20:26:05,942 [main:106] - GETTING Kla9 from InlinedInt
2021-03-11 20:26:05,943 [main:106] - GETTING Kla9 from Int
2021-03-11 20:26:05,943 [main:106] - GETTING Kla9 from String
2021-03-11 20:26:05,944 [main:106] - GETTING Kla9 from Int
2021-03-11 20:26:05,944 [main:106] - GETTING Kla9 from String
2021-03-11 20:26:05,945 [main:106] - GETTING Kla9 from InlinedString
2021-03-11 20:26:05,950 [main:106] - GETTING Kla9 from Long
2021-03-11 20:26:05,950 [main:106] - GETTING Kla9 from ULong
2021-03-11 20:26:05,951 [main:106] - GETTING Kla9 from InlinedInt
2021-03-11 20:26:05,951 [main:106] - GETTING Kla9 from InlinedInt
2021-03-11 20:26:05,952 [main:106] - GETTING Kla9 from Long
2021-03-11 20:26:05,952 [main:111] - Cant find and generate replacement for Kla3 type Kla9
2021-03-11 20:26:05,952 [main:107] - replacing (prope4, String)
2021-03-11 20:26:05,953 [main:50] - replacing prope4 String
2021-03-11 20:26:05,953 [main:54] - Getting value of type String
2021-03-11 20:26:06,096 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:26:06,101 [main:58] - GENERATED VALUE OF TYPE String = "ahpoz"
2021-03-11 20:26:06,102 [main:61] - GENERATED IS CALL =false
2021-03-11 20:26:06,296 [main:67] - randomType = Kla5<Char>
2021-03-11 20:26:06,437 [main:302] - generating value of type = Kla5<Char> false depth = 0
2021-03-11 20:26:06,442 [main:112] - generating klass Kla5 text = abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 20:26:06,952 [main:302] - generating value of type = Kla8 false depth = 2
2021-03-11 20:26:06,957 [main:112] - generating klass Kla8 text = object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}
2021-03-11 20:26:06,973 [main:106] - GETTING String from Char
2021-03-11 20:26:06,989 [main:113] - Case = [public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@50370495], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2889e564]]
2021-03-11 20:26:06,989 [main:149] - GENERATING call of type public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@50370495]
2021-03-11 20:26:06,989 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2889e564]
2021-03-11 20:26:06,990 [main:117] - GENERATED CALL = ((((17594)).toLong()).toChar()).toShort().toString((-17594))
2021-03-11 20:26:06,990 [main:113] - Case = [public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@3319792d], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57d8c30b]]
2021-03-11 20:26:06,990 [main:149] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@3319792d]
2021-03-11 20:26:06,990 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57d8c30b]
2021-03-11 20:26:06,990 [main:117] - GENERATED CALL = ((((17594)).toLong()).toChar()).toByte().toString((17594))
2021-03-11 20:26:06,990 [main:113] - Case = [public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@283beaba], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]]
2021-03-11 20:26:06,990 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@283beaba]
2021-03-11 20:26:06,990 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]
2021-03-11 20:26:07,130 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:26:07,135 [main:117] - GENERATED CALL = ((((17594)).toLong()).toChar()).toLong().toString(462269481)
2021-03-11 20:26:07,135 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@52064d67], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]]
2021-03-11 20:26:07,135 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@52064d67]
2021-03-11 20:26:07,136 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]
2021-03-11 20:26:07,136 [main:117] - GENERATED CALL = ((((17594)).toLong()).toChar()).compareTo((((17594)).toLong()).toChar()).toString((-17594))
2021-03-11 20:26:07,136 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@629a957]]
2021-03-11 20:26:07,136 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@629a957]
2021-03-11 20:26:07,136 [main:117] - GENERATED CALL = ((((17594)).toLong()).toChar()).titlecase()
2021-03-11 20:26:07,136 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4045409b]]
2021-03-11 20:26:07,136 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4045409b]
2021-03-11 20:26:07,136 [main:117] - GENERATED CALL = ((((17594)).toLong()).toChar()).lowercase()
2021-03-11 20:26:07,136 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d654126]]
2021-03-11 20:26:07,136 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d654126]
2021-03-11 20:26:07,137 [main:117] - GENERATED CALL = ((((17594)).toLong()).toChar()).uppercase()
2021-03-11 20:26:07,137 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c70f8ae]]
2021-03-11 20:26:07,137 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c70f8ae]
2021-03-11 20:26:07,137 [main:117] - GENERATED CALL = ((((17594)).toLong()).toChar()).plus((InlinedInt(-17594))?.internal.toString(-17594))
2021-03-11 20:26:07,137 [main:114] - replacement of prope4 of type String is ((((17594)).toLong()).toChar()).toByte().toString((17594))
2021-03-11 20:26:07,277 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:26:07,277 [main:66] - Compilation checking started
2021-03-11 20:26:07,710 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { { print("eclsf")}() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = (foo<Kla0>({ Kla0.Kla1})).name.slice(buildSet<Int>({ println("owtiy")}))

fun box378(): String {
    var prope4 = "FAIL 1"
    fu2 {
        ((((17594)).toLong()).toChar()).toByte().toString((17594)) = fu5()
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 2"
    fu2 {
        fu2 { require(false, { "sfizs"})}
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if (prope4 != (InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(1220123570)) return prope4
    prope4 = ((-17594)).compareTo(-1028863766).toString(-17594)
    fu3 {
        fu3 {
            fu3 {
                fu3 {
                    fu3 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((-17594).toChar().plus((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594)))))
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (foo<ULong>({ 7467005423461192445.toULong()})).rangeTo(foo<ULong>({ 7467005423461192445.toULong()})).equals("ucugw") } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != (98550246.toUInt())?.toFloat().toRawBits()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (foo<ULong>({ 7467005423461192445.toULong()})).toUShort().countOneBits() + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (prope8) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:26:07,713 [main:107] - replacing (prope7, Int)
2021-03-11 20:26:07,713 [main:50] - replacing prope7 Int
2021-03-11 20:26:07,713 [main:54] - Getting value of type Int
2021-03-11 20:26:07,855 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:26:07,860 [main:58] - GENERATED VALUE OF TYPE Int = -1618049666
2021-03-11 20:26:07,860 [main:61] - GENERATED IS CALL =false
2021-03-11 20:26:08,826 [main:67] - randomType = LinkedHashMap<Pair<Byte, InlinedInt?>, String>?
2021-03-11 20:26:08,968 [main:302] - generating value of type = LinkedHashMap<Pair<Byte, InlinedInt?>, String> false depth = 0
2021-03-11 20:26:09,119 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Pair<Byte, InledInt?>, Strg> = TODO()
2021-03-11 20:26:09,125 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Pair<Byte, InledInt?>, Strg> = TODO()
2021-03-11 20:26:09,277 [main:95] - GENERATED = linkedMapOf<Pair<Byte, InlinedInt?>, String>()
2021-03-11 20:26:09,423 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2b67e627]
2021-03-11 20:26:09,423 [main:78] - Generated call from random type = (linkedMapOf<Pair<Byte, InlinedInt?>, String>())?.size.takeLowestOneBit()
2021-03-11 20:26:09,423 [main:114] - replacement of prope7 of type Int is (linkedMapOf<Pair<Byte, InlinedInt?>, String>())?.size.takeLowestOneBit()
2021-03-11 20:26:09,563 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:26:09,564 [main:66] - Compilation checking started
2021-03-11 20:26:10,304 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { { print("eclsf")}() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = (foo<Kla0>({ Kla0.Kla1})).name.slice(buildSet<Int>({ println("owtiy")}))

fun box378(): String {
    var prope4 = "FAIL 1"
    fu2 {
        prope4 = fu5()
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 2"
    fu2 {
        fu2 { require(false, { "sfizs"})}
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if (prope4 != (InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(1220123570)) return prope4
    prope4 = ((-17594)).compareTo(-1028863766).toString(-17594)
    fu3 {
        fu3 {
            fu3 {
                fu3 {
                    fu3 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((-17594).toChar().plus((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594)))))
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (foo<ULong>({ 7467005423461192445.toULong()})).rangeTo(foo<ULong>({ 7467005423461192445.toULong()})).equals("ucugw") } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != (98550246.toUInt())?.toFloat().toRawBits()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if ((linkedMapOf<Pair<Byte, InlinedInt?>, String>())?.size.takeLowestOneBit() != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (foo<ULong>({ 7467005423461192445.toULong()})).toUShort().countOneBits() + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (prope8) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:26:10,307 [main:107] - replacing (prope7++, Int)
2021-03-11 20:26:10,307 [main:50] - replacing prope7++ Int
2021-03-11 20:26:10,307 [main:54] - Getting value of type Int
2021-03-11 20:26:10,459 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:26:10,464 [main:58] - GENERATED VALUE OF TYPE Int = 1274230541
2021-03-11 20:26:10,464 [main:61] - GENERATED IS CALL =false
2021-03-11 20:26:10,656 [main:67] - randomType = Array<Kla3>
2021-03-11 20:26:10,800 [main:302] - generating value of type = Array<Kla3> false depth = 0
2021-03-11 20:26:10,949 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<Kla3> = TODO()
2021-03-11 20:26:10,955 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<Kla3> = TODO()
2021-03-11 20:26:11,108 [main:95] - GENERATED = emptyArray<Kla3>()
2021-03-11 20:26:11,142 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.count(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@ba28d1b]
2021-03-11 20:26:11,142 [main:78] - Generated call from random type = (emptyArray<Kla3>()).count()
2021-03-11 20:26:11,143 [main:106] - GETTING Int from Long
2021-03-11 20:26:11,171 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@283024a2], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1c6dfdb1]]
2021-03-11 20:26:11,171 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@283024a2]
2021-03-11 20:26:11,314 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:26:11,319 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1c6dfdb1]
2021-03-11 20:26:11,462 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:26:11,467 [main:117] - GENERATED CALL = (((17594)).toLong()).compareTo(-118).coerceAtMost(159912147)
2021-03-11 20:26:11,467 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@58d20a49], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1643adb0]]
2021-03-11 20:26:11,467 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@58d20a49]
2021-03-11 20:26:11,467 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1643adb0]
2021-03-11 20:26:11,611 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:26:11,617 [main:117] - GENERATED CALL = (((17594)).toLong()).toShort().div(121)
2021-03-11 20:26:11,617 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7a52df9c], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@60509848]]
2021-03-11 20:26:11,617 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7a52df9c]
2021-03-11 20:26:11,617 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@60509848]
2021-03-11 20:26:11,617 [main:117] - GENERATED CALL = (((17594)).toLong()).toInt().countLeadingZeroBits()
2021-03-11 20:26:11,617 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7a52df9c], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36ab683]]
2021-03-11 20:26:11,617 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7a52df9c]
2021-03-11 20:26:11,617 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36ab683]
2021-03-11 20:26:11,618 [main:117] - GENERATED CALL = (((17594)).toLong()).toInt().inv()
2021-03-11 20:26:11,618 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7a52df9c], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1320fd4d]]
2021-03-11 20:26:11,618 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7a52df9c]
2021-03-11 20:26:11,618 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1320fd4d]
2021-03-11 20:26:11,761 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:26:11,767 [main:117] - GENERATED CALL = (((17594)).toLong()).toInt().times(52)
2021-03-11 20:26:11,767 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7a52df9c], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6f6920dd]]
2021-03-11 20:26:11,767 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7a52df9c]
2021-03-11 20:26:11,767 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6f6920dd]
2021-03-11 20:26:11,911 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:26:11,916 [main:117] - GENERATED CALL = (((17594)).toLong()).toInt().coerceIn(-17594, 364080474)
2021-03-11 20:26:11,916 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7a52df9c], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c7b0f5d]]
2021-03-11 20:26:11,916 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7a52df9c]
2021-03-11 20:26:11,916 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c7b0f5d]
2021-03-11 20:26:11,917 [main:117] - GENERATED CALL = (((17594)).toLong()).toInt().shl(InlinedInt(-463791997).internal)
2021-03-11 20:26:11,917 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@283024a2], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3aaede52]]
2021-03-11 20:26:11,917 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@283024a2]
2021-03-11 20:26:12,060 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:26:12,066 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3aaede52]
2021-03-11 20:26:12,066 [main:117] - GENERATED CALL = (((17594)).toLong()).compareTo(2).countOneBits()
2021-03-11 20:26:12,066 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@571d28fe], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@68bdd886]]
2021-03-11 20:26:12,066 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@571d28fe]
2021-03-11 20:26:12,066 [main:117] - GENERATED CALL = (((17594)).toLong()).toLong().sign
2021-03-11 20:26:12,066 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@58d20a49], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@5d359ba8]]
2021-03-11 20:26:12,066 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@58d20a49]
2021-03-11 20:26:12,066 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@5d359ba8]
2021-03-11 20:26:12,212 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:26:12,217 [main:117] - GENERATED CALL = (((17594)).toLong()).toShort().times(19)
2021-03-11 20:26:12,217 [main:114] - replacement of prope7++ of type Int is (((17594)).toLong()).toShort().div(121)
2021-03-11 20:26:12,361 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:26:12,362 [main:66] - Compilation checking started
2021-03-11 20:26:13,066 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { { print("eclsf")}() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = (foo<Kla0>({ Kla0.Kla1})).name.slice(buildSet<Int>({ println("owtiy")}))

fun box378(): String {
    var prope4 = "FAIL 1"
    fu2 {
        prope4 = fu5()
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 2"
    fu2 {
        fu2 { require(false, { "sfizs"})}
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if (prope4 != (InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(1220123570)) return prope4
    prope4 = ((-17594)).compareTo(-1028863766).toString(-17594)
    fu3 {
        fu3 {
            fu3 {
                fu3 {
                    fu3 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((-17594).toChar().plus((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594)))))
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (foo<ULong>({ 7467005423461192445.toULong()})).rangeTo(foo<ULong>({ 7467005423461192445.toULong()})).equals("ucugw") } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (((17594)).toLong()).toShort().div(121)
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != (98550246.toUInt())?.toFloat().toRawBits()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if ((linkedMapOf<Pair<Byte, InlinedInt?>, String>())?.size.takeLowestOneBit() != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (foo<ULong>({ 7467005423461192445.toULong()})).toUShort().countOneBits() + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (prope8) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:26:13,069 [main:107] - replacing ({
                        fu3 {
                            prope4 = fu5()
                        }
                    }, SuspendFunction0<Unit>)
2021-03-11 20:26:13,069 [main:50] - replacing {
                        fu3 {
                            prope4 = fu5()
                        }
                    } SuspendFunction0<Unit>
2021-03-11 20:26:13,069 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-11 20:26:13,214 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-11 20:26:13,219 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:26:13,371 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:26:13,377 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:26:13,704 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 20:26:13,709 [main:95] - GENERATED = check(true)
2021-03-11 20:26:13,710 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { check(true)}
2021-03-11 20:26:13,710 [main:61] - GENERATED IS CALL =false
2021-03-11 20:26:13,895 [main:67] - randomType = Long?
2021-03-11 20:26:14,061 [main:302] - generating value of type = Long true depth = 0
2021-03-11 20:26:14,101 [main:106] - GETTING SuspendFunction0<Unit> from InlinedInt
2021-03-11 20:26:14,106 [main:106] - GETTING SuspendFunction0<Unit> from InlinedInt
2021-03-11 20:26:14,107 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:26:14,136 [main:106] - GETTING SuspendFunction0<Unit> from ULong
2021-03-11 20:26:14,157 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:26:14,158 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 20:26:14,175 [main:106] - GETTING SuspendFunction0<Unit> from ULong
2021-03-11 20:26:14,176 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:26:14,176 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:26:14,177 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:26:14,178 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:26:14,179 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 20:26:14,180 [main:106] - GETTING SuspendFunction0<Unit> from Long
2021-03-11 20:26:14,209 [main:106] - GETTING SuspendFunction0<Unit> from InlinedString
2021-03-11 20:26:14,213 [main:106] - GETTING SuspendFunction0<Unit> from Long
2021-03-11 20:26:14,214 [main:106] - GETTING SuspendFunction0<Unit> from Kla0
2021-03-11 20:26:14,232 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 20:26:14,233 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 20:26:14,234 [main:106] - GETTING SuspendFunction0<Unit> from Long
2021-03-11 20:26:14,235 [main:106] - GETTING SuspendFunction0<Unit> from InlinedInt
2021-03-11 20:26:14,236 [main:106] - GETTING SuspendFunction0<Unit> from InlinedInt
2021-03-11 20:26:14,236 [main:106] - GETTING SuspendFunction0<Unit> from Char
2021-03-11 20:26:14,255 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:26:14,255 [main:114] - replacement of {
                        fu3 {
                            prope4 = fu5()
                        }
                    } of type SuspendFunction0<Unit> is { check(true)}
2021-03-11 20:26:14,399 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:26:14,399 [main:66] - Compilation checking started
2021-03-11 20:26:15,098 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { { print("eclsf")}() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = (foo<Kla0>({ Kla0.Kla1})).name.slice(buildSet<Int>({ println("owtiy")}))

fun box378(): String {
    var prope4 = "FAIL 1"
    fu2 {
        prope4 = fu5()
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 2"
    fu2 {
        fu2 { require(false, { "sfizs"})}
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if (prope4 != (InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(1220123570)) return prope4
    prope4 = ((-17594)).compareTo(-1028863766).toString(-17594)
    fu3 {
        fu3 {
            fu3 {
                fu3 {
                    fu3 { check(true)}
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((-17594).toChar().plus((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594)))))
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (foo<ULong>({ 7467005423461192445.toULong()})).rangeTo(foo<ULong>({ 7467005423461192445.toULong()})).equals("ucugw") } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (((17594)).toLong()).toShort().div(121)
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != (98550246.toUInt())?.toFloat().toRawBits()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if ((linkedMapOf<Pair<Byte, InlinedInt?>, String>())?.size.takeLowestOneBit() != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (foo<ULong>({ 7467005423461192445.toULong()})).toUShort().countOneBits() + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (prope8) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:26:15,102 [main:107] - replacing (prope8, Boolean)
2021-03-11 20:26:15,102 [main:50] - replacing prope8 Boolean
2021-03-11 20:26:15,102 [main:54] - Getting value of type Boolean
2021-03-11 20:26:15,261 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:26:15,266 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 20:26:15,266 [main:61] - GENERATED IS CALL =false
2021-03-11 20:26:15,277 [main:67] - randomType = Short
2021-03-11 20:26:15,424 [main:302] - generating value of type = Short true depth = 0
2021-03-11 20:26:15,461 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@33d574a5]
2021-03-11 20:26:15,607 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@fdd1e25]
2021-03-11 20:26:15,751 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:26:15,757 [main:78] - Generated call from random type = (4460).equals(null).xor(true)
2021-03-11 20:26:15,758 [main:106] - GETTING Boolean from Long
2021-03-11 20:26:15,788 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72c8390], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@235ae2ad]]
2021-03-11 20:26:15,788 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72c8390]
2021-03-11 20:26:15,788 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@235ae2ad]
2021-03-11 20:26:15,788 [main:117] - GENERATED CALL = (((-17594)).toLong()).toChar().isTitleCase()
2021-03-11 20:26:15,788 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@557a2fe7], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@46bcc85e]]
2021-03-11 20:26:15,788 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@557a2fe7]
2021-03-11 20:26:15,788 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@46bcc85e]
2021-03-11 20:26:15,932 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:26:15,933 [main:117] - GENERATED CALL = (((-17594)).toLong()).toDouble().equals("ftjms")
2021-03-11 20:26:15,933 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@557a2fe7], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@7c90e595]]
2021-03-11 20:26:15,933 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@557a2fe7]
2021-03-11 20:26:15,933 [main:149] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@7c90e595]
2021-03-11 20:26:15,933 [main:117] - GENERATED CALL = (((-17594)).toLong()).toDouble().isFinite()
2021-03-11 20:26:15,933 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@58411db7], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@1364b0de]]
2021-03-11 20:26:15,933 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@58411db7]
2021-03-11 20:26:15,933 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@1364b0de]
2021-03-11 20:26:16,078 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:26:16,078 [main:117] - GENERATED CALL = (((-17594)).toLong()).toFloat().equals("emikh")
2021-03-11 20:26:16,079 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72c8390], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c6aeff7]]
2021-03-11 20:26:16,079 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72c8390]
2021-03-11 20:26:16,079 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c6aeff7]
2021-03-11 20:26:16,079 [main:117] - GENERATED CALL = (((-17594)).toLong()).toChar().isDefined()
2021-03-11 20:26:16,079 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.LongRange defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@452271ce], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.LongRange[DeserializedSimpleFunctionDescriptor@6bb2adda]]
2021-03-11 20:26:16,079 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.LongRange defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@452271ce]
2021-03-11 20:26:16,222 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:26:16,227 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.LongRange[DeserializedSimpleFunctionDescriptor@6bb2adda]
2021-03-11 20:26:16,370 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:26:16,370 [main:117] - GENERATED CALL = (((-17594)).toLong()).rangeTo(21).equals("xzspd")
2021-03-11 20:26:16,370 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@58411db7], public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@1bac51bd]]
2021-03-11 20:26:16,370 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@58411db7]
2021-03-11 20:26:16,370 [main:149] - GENERATING call of type public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@1bac51bd]
2021-03-11 20:26:16,370 [main:117] - GENERATED CALL = (((-17594)).toLong()).toFloat().isInfinite()
2021-03-11 20:26:16,370 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72c8390], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e1b9a7e]]
2021-03-11 20:26:16,370 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72c8390]
2021-03-11 20:26:16,370 [main:149] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e1b9a7e]
2021-03-11 20:26:16,370 [main:117] - GENERATED CALL = (((-17594)).toLong()).toChar().isLetterOrDigit()
2021-03-11 20:26:16,371 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@5e811c3f], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@fdd1e25]]
2021-03-11 20:26:16,371 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@5e811c3f]
2021-03-11 20:26:16,514 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:26:16,514 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@fdd1e25]
2021-03-11 20:26:16,662 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:26:16,691 [main:117] - GENERATED CALL = (((-17594)).toLong()).equals("vxekl").xor(true)
2021-03-11 20:26:16,691 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7a52df9c], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e465cf2]]
2021-03-11 20:26:16,691 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7a52df9c]
2021-03-11 20:26:16,691 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e465cf2]
2021-03-11 20:26:16,837 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:26:16,837 [main:117] - GENERATED CALL = (((-17594)).toLong()).toInt().equals("famzr")
2021-03-11 20:26:16,837 [main:114] - replacement of prope8 of type Boolean is (4460).equals(null).xor(true)
2021-03-11 20:26:16,978 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:26:16,979 [main:66] - Compilation checking started
2021-03-11 20:26:17,414 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { { print("eclsf")}() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = (foo<Kla0>({ Kla0.Kla1})).name.slice(buildSet<Int>({ println("owtiy")}))

fun box378(): String {
    var prope4 = "FAIL 1"
    fu2 {
        prope4 = fu5()
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 2"
    fu2 {
        fu2 { require(false, { "sfizs"})}
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if (prope4 != (InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(1220123570)) return prope4
    prope4 = ((-17594)).compareTo(-1028863766).toString(-17594)
    fu3 {
        fu3 {
            fu3 {
                fu3 {
                    fu3 { check(true)}
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((-17594).toChar().plus((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594)))))
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (foo<ULong>({ 7467005423461192445.toULong()})).rangeTo(foo<ULong>({ 7467005423461192445.toULong()})).equals("ucugw") } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (((17594)).toLong()).toShort().div(121)
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != (98550246.toUInt())?.toFloat().toRawBits()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if ((linkedMapOf<Pair<Byte, InlinedInt?>, String>())?.size.takeLowestOneBit() != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (foo<ULong>({ 7467005423461192445.toULong()})).toUShort().countOneBits() + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (prope8) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.(4460).equals(null).xor(true) = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:26:17,417 [main:107] - replacing ({}, Function0<Unit>)
2021-03-11 20:26:17,417 [main:50] - replacing {} Function0<Unit>
2021-03-11 20:26:17,417 [main:54] - Getting value of type Function0<Unit>
2021-03-11 20:26:17,559 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 20:26:17,564 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:26:17,714 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 20:26:17,720 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 20:26:18,232 [main:302] - generating value of type = Int true depth = 4
2021-03-11 20:26:18,237 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 20:26:18,242 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 20:26:18,393 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:26:18,399 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:26:18,903 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 20:26:18,908 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-11 20:26:18,913 [main:302] - generating value of type = Any false depth = 9
2021-03-11 20:26:18,914 [main:95] - GENERATED = require(true, { "jrwxy"})
2021-03-11 20:26:18,914 [main:95] - GENERATED = repeat(1263814102, {a: Int -> require(true, { "jrwxy"})})
2021-03-11 20:26:18,914 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(1263814102, {a: Int -> require(true, { "jrwxy"})})}
2021-03-11 20:26:18,914 [main:61] - GENERATED IS CALL =false
2021-03-11 20:26:19,125 [main:67] - randomType = Map<UShort, Long>
2021-03-11 20:26:19,127 [main:106] - GETTING Function0<Unit> from InlinedString
2021-03-11 20:26:19,134 [main:106] - GETTING Function0<Unit> from Long
2021-03-11 20:26:19,163 [main:106] - GETTING Function0<Unit> from Char
2021-03-11 20:26:19,180 [main:106] - GETTING Function0<Unit> from InlinedInt
2021-03-11 20:26:19,185 [main:106] - GETTING Function0<Unit> from Long
2021-03-11 20:26:19,186 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:26:19,215 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:26:19,216 [main:106] - GETTING Function0<Unit> from Kla0
2021-03-11 20:26:19,234 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:26:19,235 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:26:19,236 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:26:19,237 [main:106] - GETTING Function0<Unit> from ULong
2021-03-11 20:26:19,260 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:26:19,261 [main:106] - GETTING Function0<Unit> from InlinedInt
2021-03-11 20:26:19,261 [main:106] - GETTING Function0<Unit> from String
2021-03-11 20:26:19,278 [main:106] - GETTING Function0<Unit> from ULong
2021-03-11 20:26:19,279 [main:106] - GETTING Function0<Unit> from Long
2021-03-11 20:26:19,280 [main:106] - GETTING Function0<Unit> from String
2021-03-11 20:26:19,281 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:26:19,282 [main:106] - GETTING Function0<Unit> from String
2021-03-11 20:26:19,283 [main:106] - GETTING Function0<Unit> from InlinedInt
2021-03-11 20:26:19,284 [main:106] - GETTING Function0<Unit> from InlinedInt
2021-03-11 20:26:19,285 [main:106] - GETTING Function0<Unit> from String
2021-03-11 20:26:19,285 [main:114] - replacement of {} of type Function0<Unit> is { repeat(1263814102, {a: Int -> require(true, { "jrwxy"})})}
2021-03-11 20:26:19,447 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:26:19,447 [main:66] - Compilation checking started
2021-03-11 20:26:20,154 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { { print("eclsf")}() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = (foo<Kla0>({ Kla0.Kla1})).name.slice(buildSet<Int>({ println("owtiy")}))

fun box378(): String {
    var prope4 = "FAIL 1"
    fu2 {
        prope4 = fu5()
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 2"
    fu2 {
        fu2 { require(false, { "sfizs"})}
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if (prope4 != (InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(1220123570)) return prope4
    prope4 = ((-17594)).compareTo(-1028863766).toString(-17594)
    fu3 {
        fu3 {
            fu3 {
                fu3 {
                    fu3 { check(true)}
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((-17594).toChar().plus((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594)))))
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (foo<ULong>({ 7467005423461192445.toULong()})).rangeTo(foo<ULong>({ 7467005423461192445.toULong()})).equals("ucugw") } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = { repeat(1263814102, {a: Int -> require(true, { "jrwxy"})})}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (((17594)).toLong()).toShort().div(121)
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != (98550246.toUInt())?.toFloat().toRawBits()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if ((linkedMapOf<Pair<Byte, InlinedInt?>, String>())?.size.takeLowestOneBit() != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (foo<ULong>({ 7467005423461192445.toULong()})).toUShort().countOneBits() + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (prope8) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:26:20,157 [main:107] - replacing (prope4, String)
2021-03-11 20:26:20,158 [main:50] - replacing prope4 String
2021-03-11 20:26:20,158 [main:54] - Getting value of type String
2021-03-11 20:26:20,302 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:26:20,307 [main:58] - GENERATED VALUE OF TYPE String = "etwvc"
2021-03-11 20:26:20,307 [main:61] - GENERATED IS CALL =false
2021-03-11 20:26:20,318 [main:67] - randomType = Short
2021-03-11 20:26:20,467 [main:302] - generating value of type = Short true depth = 0
2021-03-11 20:26:20,516 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@421ac4a0]
2021-03-11 20:26:20,659 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:26:20,665 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]
2021-03-11 20:26:20,665 [main:78] - Generated call from random type = (-2247).compareTo(117).toString((InlinedInt(-17594))?.internal)
2021-03-11 20:26:20,666 [main:106] - GETTING String from Int
2021-03-11 20:26:20,695 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]]
2021-03-11 20:26:20,695 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]
2021-03-11 20:26:20,840 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:26:20,845 [main:117] - GENERATED CALL = ((17594)).toString(589272567)
2021-03-11 20:26:20,846 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7a52df9c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]]
2021-03-11 20:26:20,846 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7a52df9c]
2021-03-11 20:26:20,846 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]
2021-03-11 20:26:20,846 [main:117] - GENERATED CALL = ((17594)).toInt().toString((InlinedInt(-17594))?.internal)
2021-03-11 20:26:20,846 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a6eaf83], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2889e564]]
2021-03-11 20:26:20,846 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a6eaf83]
2021-03-11 20:26:20,846 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2889e564]
2021-03-11 20:26:20,846 [main:117] - GENERATED CALL = ((17594)).toShort().toString(InlinedInt(-463791997).internal)
2021-03-11 20:26:20,846 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@571d28fe], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]]
2021-03-11 20:26:20,847 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@571d28fe]
2021-03-11 20:26:20,847 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]
2021-03-11 20:26:20,847 [main:117] - GENERATED CALL = ((17594)).toLong().toString(((-17594)))
2021-03-11 20:26:20,847 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4045409b]]
2021-03-11 20:26:20,847 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397]
2021-03-11 20:26:20,847 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4045409b]
2021-03-11 20:26:20,847 [main:117] - GENERATED CALL = ((17594)).toChar().lowercase()
2021-03-11 20:26:20,847 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@629a957]]
2021-03-11 20:26:20,847 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397]
2021-03-11 20:26:20,847 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@629a957]
2021-03-11 20:26:20,847 [main:117] - GENERATED CALL = ((17594)).toChar().titlecase()
2021-03-11 20:26:20,847 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@38a0b896], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57d8c30b]]
2021-03-11 20:26:20,848 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@38a0b896]
2021-03-11 20:26:20,848 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57d8c30b]
2021-03-11 20:26:20,993 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:26:20,998 [main:117] - GENERATED CALL = ((17594)).toByte().toString(-1288308424)
2021-03-11 20:26:20,998 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@819e073], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]]
2021-03-11 20:26:20,998 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@819e073]
2021-03-11 20:26:20,999 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]
2021-03-11 20:26:20,999 [main:117] - GENERATED CALL = ((17594)).div(((-17594)).toLong()).toString(((17594)))
2021-03-11 20:26:20,999 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d654126]]
2021-03-11 20:26:20,999 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397]
2021-03-11 20:26:20,999 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d654126]
2021-03-11 20:26:20,999 [main:117] - GENERATED CALL = ((17594)).toChar().uppercase()
2021-03-11 20:26:20,999 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c70f8ae]]
2021-03-11 20:26:20,999 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397]
2021-03-11 20:26:20,999 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c70f8ae]
2021-03-11 20:26:21,000 [main:117] - GENERATED CALL = ((17594)).toChar().plus((InlinedInt(-17594))?.internal.toString(-17594))
2021-03-11 20:26:21,000 [main:114] - replacement of prope4 of type String is ((17594)).toChar().lowercase()
2021-03-11 20:26:21,149 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:26:21,150 [main:66] - Compilation checking started
2021-03-11 20:26:21,588 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { { print("eclsf")}() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = (foo<Kla0>({ Kla0.Kla1})).name.slice(buildSet<Int>({ println("owtiy")}))

fun box378(): String {
    var prope4 = "FAIL 1"
    fu2 {
        prope4 = fu5()
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 2"
    fu2 {
        fu2 { require(false, { "sfizs"})}
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        ((17594)).toChar().lowercase() = fu5()
    }
    if (prope4 != (InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(1220123570)) return prope4
    prope4 = ((-17594)).compareTo(-1028863766).toString(-17594)
    fu3 {
        fu3 {
            fu3 {
                fu3 {
                    fu3 { check(true)}
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((-17594).toChar().plus((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594)))))
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (foo<ULong>({ 7467005423461192445.toULong()})).rangeTo(foo<ULong>({ 7467005423461192445.toULong()})).equals("ucugw") } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = { repeat(1263814102, {a: Int -> require(true, { "jrwxy"})})}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (((17594)).toLong()).toShort().div(121)
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != (98550246.toUInt())?.toFloat().toRawBits()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if ((linkedMapOf<Pair<Byte, InlinedInt?>, String>())?.size.takeLowestOneBit() != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (foo<ULong>({ 7467005423461192445.toULong()})).toUShort().countOneBits() + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (prope8) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:26:21,591 [main:107] - replacing (let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})}), Unit?)
2021-03-11 20:26:21,591 [main:50] - replacing let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})}) Unit?
2021-03-11 20:26:21,591 [main:54] - Getting value of type Unit?
2021-03-11 20:26:21,733 [main:302] - generating value of type = Unit false depth = 0
2021-03-11 20:26:21,885 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:26:21,891 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:26:22,427 [main:302] - generating value of type = Boolean true depth = 3
2021-03-11 20:26:22,432 [main:302] - generating value of type = Function0<Any> false depth = 3
2021-03-11 20:26:22,437 [main:302] - generating value of type = Any false depth = 4
2021-03-11 20:26:22,438 [main:95] - GENERATED = require(true, { "upxlt"})
2021-03-11 20:26:22,438 [main:58] - GENERATED VALUE OF TYPE Unit? = require(true, { "upxlt"})
2021-03-11 20:26:22,438 [main:61] - GENERATED IS CALL =true
2021-03-11 20:26:22,633 [main:67] - randomType = Collection<InlinedString>
2021-03-11 20:26:22,639 [main:106] - GETTING Unit? from String
2021-03-11 20:26:22,657 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@193ae7ca], public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79dd9cd0]]
2021-03-11 20:26:22,657 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@193ae7ca]
2021-03-11 20:26:22,658 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79dd9cd0]
2021-03-11 20:26:22,807 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 20:26:22,812 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:26:22,963 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:26:22,970 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:26:23,302 [main:95] - GENERATED = print(null)
2021-03-11 20:26:23,302 [main:117] - GENERATED CALL = ((InlinedInt(-17594))?.internal.toString(-17594))?.subSequence(((-17594)), (17594)).forEachIndexed({a: Int, b: Char -> print(null)})
2021-03-11 20:26:23,303 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@193ae7ca], public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54c0f5af]]
2021-03-11 20:26:23,303 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@193ae7ca]
2021-03-11 20:26:23,303 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54c0f5af]
2021-03-11 20:26:23,446 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 20:26:23,451 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:26:23,603 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:26:23,609 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:26:23,936 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 20:26:23,941 [main:95] - GENERATED = require(false)
2021-03-11 20:26:23,942 [main:117] - GENERATED CALL = ((InlinedInt(-17594))?.internal.toString(-17594))?.subSequence((17594), InlinedInt(-463791997).internal).forEach({a: Char -> require(false)})
2021-03-11 20:26:23,942 [main:113] - Case = [public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54c0f5af]]
2021-03-11 20:26:23,942 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54c0f5af]
2021-03-11 20:26:24,086 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 20:26:24,091 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:26:24,243 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 20:26:24,249 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 20:26:24,582 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 20:26:24,587 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 20:26:24,737 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:26:24,744 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:26:25,109 [main:302] - generating value of type = Any false depth = 8
2021-03-11 20:26:25,109 [main:95] - GENERATED = print("swkxg")
2021-03-11 20:26:25,109 [main:95] - GENERATED = contract({ print("swkxg")})
2021-03-11 20:26:25,110 [main:117] - GENERATED CALL = ((InlinedInt(-17594))?.internal.toString(-17594))?.forEach({a: Char -> contract({ print("swkxg")})})
2021-03-11 20:26:25,110 [main:113] - Case = [public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79dd9cd0]]
2021-03-11 20:26:25,110 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79dd9cd0]
2021-03-11 20:26:25,254 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 20:26:25,259 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:26:25,409 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:26:25,415 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:26:25,739 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 20:26:25,744 [main:95] - GENERATED = check(true)
2021-03-11 20:26:25,745 [main:117] - GENERATED CALL = ((InlinedInt(-17594))?.internal.toString(-17594))?.forEachIndexed({a: Int, b: Char -> check(true)})
2021-03-11 20:26:25,745 [main:114] - replacement of let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})}) of type Unit? is require(true, { "upxlt"})
2021-03-11 20:26:25,887 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:26:25,887 [main:66] - Compilation checking started
2021-03-11 20:26:26,323 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { { print("eclsf")}() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = (foo<Kla0>({ Kla0.Kla1})).name.slice(buildSet<Int>({ println("owtiy")}))

fun box378(): String {
    var prope4 = "FAIL 1"
    fu2 {
        prope4 = fu5()
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 2"
    fu2 {
        fu2 { require(false, { "sfizs"})}
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if (prope4 != (InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(1220123570)) return prope4
    prope4 = ((-17594)).compareTo(-1028863766).toString(-17594)
    fu3 {
        fu3 {
            fu3 {
                fu3 {
                    fu3 { check(true)}
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.require(true, { "upxlt"})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((-17594).toChar().plus((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594)))))
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (foo<ULong>({ 7467005423461192445.toULong()})).rangeTo(foo<ULong>({ 7467005423461192445.toULong()})).equals("ucugw") } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = { repeat(1263814102, {a: Int -> require(true, { "jrwxy"})})}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (((17594)).toLong()).toShort().div(121)
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != (98550246.toUInt())?.toFloat().toRawBits()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if ((linkedMapOf<Pair<Byte, InlinedInt?>, String>())?.size.takeLowestOneBit() != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (foo<ULong>({ 7467005423461192445.toULong()})).toUShort().countOneBits() + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (prope8) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:26:26,326 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 20:26:26,326 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 20:26:26,326 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-11 20:26:26,469 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 20:26:26,477 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 20:26:27,217 [main:67] - randomType = MutableMap<ULong, ArrayList<Kla8>>
2021-03-11 20:26:27,218 [main:106] - GETTING EmptyCoroutineContext from Long
2021-03-11 20:26:27,249 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 20:26:27,265 [main:106] - GETTING EmptyCoroutineContext from Long
2021-03-11 20:26:27,266 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 20:26:27,295 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 20:26:27,296 [main:106] - GETTING EmptyCoroutineContext from InlinedInt
2021-03-11 20:26:27,301 [main:106] - GETTING EmptyCoroutineContext from Long
2021-03-11 20:26:27,302 [main:106] - GETTING EmptyCoroutineContext from ULong
2021-03-11 20:26:27,323 [main:106] - GETTING EmptyCoroutineContext from Char
2021-03-11 20:26:27,340 [main:106] - GETTING EmptyCoroutineContext from InlinedString
2021-03-11 20:26:27,344 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 20:26:27,345 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 20:26:27,346 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 20:26:27,346 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 20:26:27,347 [main:106] - GETTING EmptyCoroutineContext from InlinedInt
2021-03-11 20:26:27,348 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 20:26:27,350 [main:106] - GETTING EmptyCoroutineContext from InlinedInt
2021-03-11 20:26:27,350 [main:106] - GETTING EmptyCoroutineContext from InlinedInt
2021-03-11 20:26:27,351 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 20:26:27,351 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 20:26:27,352 [main:106] - GETTING EmptyCoroutineContext from ULong
2021-03-11 20:26:27,353 [main:106] - GETTING EmptyCoroutineContext from Kla0
2021-03-11 20:26:27,372 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 20:26:27,372 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 20:26:27,372 [main:107] - replacing (prope4, String)
2021-03-11 20:26:27,372 [main:50] - replacing prope4 String
2021-03-11 20:26:27,372 [main:54] - Getting value of type String
2021-03-11 20:26:27,516 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:26:27,522 [main:58] - GENERATED VALUE OF TYPE String = "rvpae"
2021-03-11 20:26:27,522 [main:61] - GENERATED IS CALL =false
2021-03-11 20:26:27,738 [main:67] - randomType = String?
2021-03-11 20:26:27,882 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:26:27,909 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@234bf75d]
2021-03-11 20:26:28,054 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:26:28,055 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7306c6d8]
2021-03-11 20:26:28,197 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 20:26:28,202 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 20:26:28,207 [main:78] - Generated call from random type = ("vehlu")?.plus("jctic").filterNot({a: Char -> true})
2021-03-11 20:26:28,207 [main:114] - replacement of prope4 of type String is ("vehlu")?.plus("jctic").filterNot({a: Char -> true})
2021-03-11 20:26:28,349 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:26:28,350 [main:66] - Compilation checking started
2021-03-11 20:26:28,788 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { { print("eclsf")}() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = (foo<Kla0>({ Kla0.Kla1})).name.slice(buildSet<Int>({ println("owtiy")}))

fun box378(): String {
    var prope4 = "FAIL 1"
    fu2 {
        prope4 = fu5()
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 2"
    fu2 {
        fu2 { require(false, { "sfizs"})}
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if (prope4 != (InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(1220123570)) return prope4
    ("vehlu")?.plus("jctic").filterNot({a: Char -> true}) = ((-17594)).compareTo(-1028863766).toString(-17594)
    fu3 {
        fu3 {
            fu3 {
                fu3 {
                    fu3 { check(true)}
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((-17594).toChar().plus((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594)))))
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (foo<ULong>({ 7467005423461192445.toULong()})).rangeTo(foo<ULong>({ 7467005423461192445.toULong()})).equals("ucugw") } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = { repeat(1263814102, {a: Int -> require(true, { "jrwxy"})})}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (((17594)).toLong()).toShort().div(121)
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != (98550246.toUInt())?.toFloat().toRawBits()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if ((linkedMapOf<Pair<Byte, InlinedInt?>, String>())?.size.takeLowestOneBit() != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (foo<ULong>({ 7467005423461192445.toULong()})).toUShort().countOneBits() + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (prope8) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:26:28,791 [main:107] - replacing (prope4, String)
2021-03-11 20:26:28,791 [main:50] - replacing prope4 String
2021-03-11 20:26:28,791 [main:54] - Getting value of type String
2021-03-11 20:26:28,935 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:26:28,941 [main:58] - GENERATED VALUE OF TYPE String = "vpjcf"
2021-03-11 20:26:28,941 [main:61] - GENERATED IS CALL =false
2021-03-11 20:26:28,962 [main:67] - randomType = Kla6
2021-03-11 20:26:29,105 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 20:26:29,110 [main:112] - generating klass Kla6 text = class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((-17594).toChar().plus((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594)))))
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (foo<ULong>({ 7467005423461192445.toULong()})).rangeTo(foo<ULong>({ 7467005423461192445.toULong()})).equals("ucugw") } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}
2021-03-11 20:26:29,116 [main:106] - GETTING String from Char
2021-03-11 20:26:29,133 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d654126]]
2021-03-11 20:26:29,133 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d654126]
2021-03-11 20:26:29,133 [main:117] - GENERATED CALL = ((((17594)).toLong()).toChar()).uppercase()
2021-03-11 20:26:29,133 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@629a957]]
2021-03-11 20:26:29,133 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@629a957]
2021-03-11 20:26:29,133 [main:117] - GENERATED CALL = ((((17594)).toLong()).toChar()).titlecase()
2021-03-11 20:26:29,133 [main:113] - Case = [public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@283beaba], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]]
2021-03-11 20:26:29,133 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@283beaba]
2021-03-11 20:26:29,133 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]
2021-03-11 20:26:29,134 [main:117] - GENERATED CALL = ((((17594)).toLong()).toChar()).toLong().toString((17594))
2021-03-11 20:26:29,134 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c70f8ae]]
2021-03-11 20:26:29,134 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c70f8ae]
2021-03-11 20:26:29,134 [main:117] - GENERATED CALL = ((((17594)).toLong()).toChar()).plus(InlinedString("tcuco").internal)
2021-03-11 20:26:29,134 [main:113] - Case = [public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@50370495], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2889e564]]
2021-03-11 20:26:29,134 [main:149] - GENERATING call of type public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@50370495]
2021-03-11 20:26:29,134 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2889e564]
2021-03-11 20:26:29,134 [main:117] - GENERATED CALL = ((((17594)).toLong()).toChar()).toShort().toString(-17594)
2021-03-11 20:26:29,134 [main:113] - Case = [public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@3319792d], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57d8c30b]]
2021-03-11 20:26:29,134 [main:149] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@3319792d]
2021-03-11 20:26:29,134 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57d8c30b]
2021-03-11 20:26:29,135 [main:117] - GENERATED CALL = ((((17594)).toLong()).toChar()).toByte().toString(((17594)))
2021-03-11 20:26:29,135 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4045409b]]
2021-03-11 20:26:29,135 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4045409b]
2021-03-11 20:26:29,135 [main:117] - GENERATED CALL = ((((17594)).toLong()).toChar()).lowercase()
2021-03-11 20:26:29,135 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@52064d67], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]]
2021-03-11 20:26:29,135 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@52064d67]
2021-03-11 20:26:29,135 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]
2021-03-11 20:26:29,279 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:26:29,284 [main:117] - GENERATED CALL = ((((17594)).toLong()).toChar()).compareTo((((17594)).toLong()).toChar()).toString(-2032715984)
2021-03-11 20:26:29,284 [main:114] - replacement of prope4 of type String is ((((17594)).toLong()).toChar()).toShort().toString(-17594)
2021-03-11 20:26:29,426 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:26:29,426 [main:66] - Compilation checking started
2021-03-11 20:26:29,864 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { { print("eclsf")}() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = (foo<Kla0>({ Kla0.Kla1})).name.slice(buildSet<Int>({ println("owtiy")}))

fun box378(): String {
    var prope4 = "FAIL 1"
    fu2 {
        ((((17594)).toLong()).toChar()).toShort().toString(-17594) = fu5()
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 2"
    fu2 {
        fu2 { require(false, { "sfizs"})}
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if (prope4 != (InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(1220123570)) return prope4
    prope4 = ((-17594)).compareTo(-1028863766).toString(-17594)
    fu3 {
        fu3 {
            fu3 {
                fu3 {
                    fu3 { check(true)}
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((-17594).toChar().plus((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594)))))
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (foo<ULong>({ 7467005423461192445.toULong()})).rangeTo(foo<ULong>({ 7467005423461192445.toULong()})).equals("ucugw") } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = { repeat(1263814102, {a: Int -> require(true, { "jrwxy"})})}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (((17594)).toLong()).toShort().div(121)
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != (98550246.toUInt())?.toFloat().toRawBits()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if ((linkedMapOf<Pair<Byte, InlinedInt?>, String>())?.size.takeLowestOneBit() != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (foo<ULong>({ 7467005423461192445.toULong()})).toUShort().countOneBits() + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (prope8) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:26:29,867 [main:107] - replacing (prope5.getOrThrow(), Any?)
2021-03-11 20:26:29,867 [main:50] - replacing prope5.getOrThrow() Any?
2021-03-11 20:26:29,867 [main:54] - Getting value of type Any?
2021-03-11 20:26:30,010 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:26:30,010 [main:58] - GENERATED VALUE OF TYPE Any? = "kqkbp"
2021-03-11 20:26:30,010 [main:61] - GENERATED IS CALL =false
2021-03-11 20:26:30,021 [main:67] - randomType = Byte
2021-03-11 20:26:30,165 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:26:30,201 [main:106] - GETTING Any? from Char
2021-03-11 20:26:30,218 [main:106] - GETTING Any? from InlinedInt
2021-03-11 20:26:30,223 [main:106] - GETTING Any? from Int
2021-03-11 20:26:30,253 [main:106] - GETTING Any? from Int
2021-03-11 20:26:30,254 [main:106] - GETTING Any? from Kla0
2021-03-11 20:26:30,272 [main:113] - Case = [protected final fun clone(): kotlin.Any defined in Kla0[DeserializedSimpleFunctionDescriptor@3b5c1a2b]]
2021-03-11 20:26:30,272 [main:149] - GENERATING call of type protected final fun clone(): kotlin.Any defined in Kla0[DeserializedSimpleFunctionDescriptor@3b5c1a2b]
2021-03-11 20:26:30,272 [main:117] - GENERATED CALL = (foo<Kla0>({ Kla0.Kla1}))?.clone()
2021-03-11 20:26:30,272 [main:114] - replacement of prope5.getOrThrow() of type Any? is "kqkbp"
2021-03-11 20:26:30,415 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 20:26:30,416 [main:66] - Compilation checking started
2021-03-11 20:26:31,128 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { { print("eclsf")}() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = (foo<Kla0>({ Kla0.Kla1})).name.slice(buildSet<Int>({ println("owtiy")}))

fun box378(): String {
    var prope4 = "FAIL 1"
    fu2 {
        prope4 = fu5()
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 2"
    fu2 {
        fu2 { require(false, { "sfizs"})}
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if (prope4 != (InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(1220123570)) return prope4
    prope4 = ((-17594)).compareTo(-1028863766).toString(-17594)
    fu3 {
        fu3 {
            fu3 {
                fu3 {
                    fu3 { check(true)}
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "kqkbp"
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((-17594).toChar().plus((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594)))))
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (foo<ULong>({ 7467005423461192445.toULong()})).rangeTo(foo<ULong>({ 7467005423461192445.toULong()})).equals("ucugw") } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = { repeat(1263814102, {a: Int -> require(true, { "jrwxy"})})}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (((17594)).toLong()).toShort().div(121)
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != (98550246.toUInt())?.toFloat().toRawBits()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if ((linkedMapOf<Pair<Byte, InlinedInt?>, String>())?.size.takeLowestOneBit() != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (foo<ULong>({ 7467005423461192445.toULong()})).toUShort().countOneBits() + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (prope8) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:26:31,132 [main:107] - replacing (prope4 != "OK", Boolean)
2021-03-11 20:26:31,132 [main:50] - replacing prope4 != "OK" Boolean
2021-03-11 20:26:31,132 [main:54] - Getting value of type Boolean
2021-03-11 20:26:31,277 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:26:31,283 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 20:26:31,283 [main:61] - GENERATED IS CALL =false
2021-03-11 20:26:31,303 [main:67] - randomType = Kla6
2021-03-11 20:26:31,446 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 20:26:31,451 [main:112] - generating klass Kla6 text = class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((-17594).toChar().plus((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594)))))
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (foo<ULong>({ 7467005423461192445.toULong()})).rangeTo(foo<ULong>({ 7467005423461192445.toULong()})).equals("ucugw") } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}
2021-03-11 20:26:31,455 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla6[DeserializedSimpleFunctionDescriptor@68e376de]
2021-03-11 20:26:31,599 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:26:31,600 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3859262c]
2021-03-11 20:26:31,600 [main:78] - Generated call from random type = (Kla6()).equals("ptyvl").not()
2021-03-11 20:26:31,601 [main:106] - GETTING Boolean from ULong
2021-03-11 20:26:31,622 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@71cd5779], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@cc5b16f]]
2021-03-11 20:26:31,622 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@71cd5779]
2021-03-11 20:26:31,622 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@cc5b16f]
2021-03-11 20:26:31,765 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:26:31,765 [main:117] - GENERATED CALL = ((foo<ULong>({ 7467005423461192445.toULong()}))).toUShort().equals("rsbzo")
2021-03-11 20:26:31,765 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@5801eedf], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@46bcc85e]]
2021-03-11 20:26:31,766 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@5801eedf]
2021-03-11 20:26:31,766 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@46bcc85e]
2021-03-11 20:26:31,908 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:26:31,908 [main:117] - GENERATED CALL = ((foo<ULong>({ 7467005423461192445.toULong()}))).toDouble().equals("guala")
2021-03-11 20:26:31,908 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@252d1390], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3859262c]]
2021-03-11 20:26:31,908 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@252d1390]
2021-03-11 20:26:32,054 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:26:32,054 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3859262c]
2021-03-11 20:26:32,054 [main:117] - GENERATED CALL = ((foo<ULong>({ 7467005423461192445.toULong()}))).equals("uzkxz").not()
2021-03-11 20:26:32,054 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toUInt(): kotlin.UInt defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@258e28f9], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@7709050]]
2021-03-11 20:26:32,054 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUInt(): kotlin.UInt defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@258e28f9]
2021-03-11 20:26:32,054 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@7709050]
2021-03-11 20:26:32,197 [main:117] - GENERATED CALL = ((foo<ULong>({ 7467005423461192445.toULong()}))).toUInt().equals(null)
2021-03-11 20:26:32,197 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@4e4273fe], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@2878caf6]]
2021-03-11 20:26:32,197 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@4e4273fe]
2021-03-11 20:26:32,197 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@2878caf6]
2021-03-11 20:26:32,346 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:26:32,346 [main:117] - GENERATED CALL = ((foo<ULong>({ 7467005423461192445.toULong()}))).toByte().equals("sdzhb")
2021-03-11 20:26:32,346 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@11deb431], public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@2348e36]]
2021-03-11 20:26:32,346 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@11deb431]
2021-03-11 20:26:32,346 [main:149] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@2348e36]
2021-03-11 20:26:32,346 [main:117] - GENERATED CALL = ((foo<ULong>({ 7467005423461192445.toULong()}))).toFloat().isFinite()
2021-03-11 20:26:32,346 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.ULong): kotlin.ranges.ULongRange defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@54fceb37], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.ULongRange[DeserializedSimpleFunctionDescriptor@713179e3]]
2021-03-11 20:26:32,346 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.ULong): kotlin.ranges.ULongRange defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@54fceb37]
2021-03-11 20:26:32,347 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.ULongRange[DeserializedSimpleFunctionDescriptor@713179e3]
2021-03-11 20:26:32,493 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:26:32,493 [main:117] - GENERATED CALL = ((foo<ULong>({ 7467005423461192445.toULong()}))).rangeTo((foo<ULong>({ 7467005423461192445.toULong()}))).equals("ukwkh")
2021-03-11 20:26:32,493 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@252d1390]]
2021-03-11 20:26:32,493 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@252d1390]
2021-03-11 20:26:32,636 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:26:32,636 [main:117] - GENERATED CALL = ((foo<ULong>({ 7467005423461192445.toULong()}))).equals("npcvn")
2021-03-11 20:26:32,636 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@5801eedf], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@7c90e595]]
2021-03-11 20:26:32,636 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@5801eedf]
2021-03-11 20:26:32,636 [main:149] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@7c90e595]
2021-03-11 20:26:32,636 [main:117] - GENERATED CALL = ((foo<ULong>({ 7467005423461192445.toULong()}))).toDouble().isFinite()
2021-03-11 20:26:32,637 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@6e694746], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@33d574a5]]
2021-03-11 20:26:32,637 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@6e694746]
2021-03-11 20:26:32,637 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@33d574a5]
2021-03-11 20:26:32,782 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:26:32,782 [main:117] - GENERATED CALL = ((foo<ULong>({ 7467005423461192445.toULong()}))).toShort().equals("topgi")
2021-03-11 20:26:32,782 [main:114] - replacement of prope4 != "OK" of type Boolean is ((foo<ULong>({ 7467005423461192445.toULong()}))).rangeTo((foo<ULong>({ 7467005423461192445.toULong()}))).equals("ukwkh")
2021-03-11 20:26:32,923 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:26:32,924 [main:66] - Compilation checking started
2021-03-11 20:26:33,639 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { { print("eclsf")}() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = (foo<Kla0>({ Kla0.Kla1})).name.slice(buildSet<Int>({ println("owtiy")}))

fun box378(): String {
    var prope4 = "FAIL 1"
    fu2 {
        prope4 = fu5()
    }
    if (((foo<ULong>({ 7467005423461192445.toULong()}))).rangeTo((foo<ULong>({ 7467005423461192445.toULong()}))).equals("ukwkh")) return prope4
    prope4 = "FAIL 2"
    fu2 {
        fu2 { require(false, { "sfizs"})}
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if (prope4 != (InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(1220123570)) return prope4
    prope4 = ((-17594)).compareTo(-1028863766).toString(-17594)
    fu3 {
        fu3 {
            fu3 {
                fu3 {
                    fu3 { check(true)}
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "kqkbp"
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((-17594).toChar().plus((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594)))))
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (foo<ULong>({ 7467005423461192445.toULong()})).rangeTo(foo<ULong>({ 7467005423461192445.toULong()})).equals("ucugw") } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = { repeat(1263814102, {a: Int -> require(true, { "jrwxy"})})}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (((17594)).toLong()).toShort().div(121)
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != (98550246.toUInt())?.toFloat().toRawBits()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if ((linkedMapOf<Pair<Byte, InlinedInt?>, String>())?.size.takeLowestOneBit() != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (foo<ULong>({ 7467005423461192445.toULong()})).toUShort().countOneBits() + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (prope8) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:26:33,642 [main:107] - replacing ("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (foo<ULong>({ 7467005423461192445.toULong()})).toUShort().countOneBits(), String)
2021-03-11 20:26:33,643 [main:50] - replacing "Wrong state-machine generated: wrong number of overall suspensions. Expected " + (foo<ULong>({ 7467005423461192445.toULong()})).toUShort().countOneBits() String
2021-03-11 20:26:33,643 [main:54] - Getting value of type String
2021-03-11 20:26:33,788 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:26:33,793 [main:58] - GENERATED VALUE OF TYPE String = "ffnbs"
2021-03-11 20:26:33,793 [main:61] - GENERATED IS CALL =false
2021-03-11 20:26:34,181 [main:67] - randomType = Collection<LinkedHashSet<Kla4>>
2021-03-11 20:26:34,182 [main:106] - GETTING String from Long
2021-03-11 20:26:34,230 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72c8390], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d654126]]
2021-03-11 20:26:34,230 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72c8390]
2021-03-11 20:26:34,231 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d654126]
2021-03-11 20:26:34,231 [main:117] - GENERATED CALL = ((((17594)).toLong())).toChar().uppercase()
2021-03-11 20:26:34,231 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@58d20a49], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2889e564]]
2021-03-11 20:26:34,231 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@58d20a49]
2021-03-11 20:26:34,231 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2889e564]
2021-03-11 20:26:34,231 [main:117] - GENERATED CALL = ((((17594)).toLong())).toShort().toString(-17594)
2021-03-11 20:26:34,231 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@775f0319], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57d8c30b]]
2021-03-11 20:26:34,231 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@775f0319]
2021-03-11 20:26:34,231 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57d8c30b]
2021-03-11 20:26:34,375 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:26:34,380 [main:117] - GENERATED CALL = ((((17594)).toLong())).toByte().toString(420946678)
2021-03-11 20:26:34,380 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7a52df9c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]]
2021-03-11 20:26:34,380 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7a52df9c]
2021-03-11 20:26:34,380 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]
2021-03-11 20:26:34,381 [main:117] - GENERATED CALL = ((((17594)).toLong())).toInt().toString((-17594))
2021-03-11 20:26:34,381 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72c8390], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c70f8ae]]
2021-03-11 20:26:34,381 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72c8390]
2021-03-11 20:26:34,381 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c70f8ae]
2021-03-11 20:26:34,381 [main:117] - GENERATED CALL = ((((17594)).toLong())).toChar().plus((InlinedInt(-17594))?.internal.toString(-17594))
2021-03-11 20:26:34,381 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]]
2021-03-11 20:26:34,381 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]
2021-03-11 20:26:34,381 [main:117] - GENERATED CALL = ((((17594)).toLong())).toString((InlinedInt(-17594))?.internal)
2021-03-11 20:26:34,381 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@571d28fe], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]]
2021-03-11 20:26:34,381 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@571d28fe]
2021-03-11 20:26:34,381 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]
2021-03-11 20:26:34,524 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:26:34,529 [main:117] - GENERATED CALL = ((((17594)).toLong())).toLong().toString(-777856155)
2021-03-11 20:26:34,530 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72c8390], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4045409b]]
2021-03-11 20:26:34,530 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72c8390]
2021-03-11 20:26:34,530 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4045409b]
2021-03-11 20:26:34,530 [main:117] - GENERATED CALL = ((((17594)).toLong())).toChar().lowercase()
2021-03-11 20:26:34,530 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72c8390], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@629a957]]
2021-03-11 20:26:34,530 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@72c8390]
2021-03-11 20:26:34,530 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@629a957]
2021-03-11 20:26:34,530 [main:117] - GENERATED CALL = ((((17594)).toLong())).toChar().titlecase()
2021-03-11 20:26:34,530 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@283024a2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]]
2021-03-11 20:26:34,530 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@283024a2]
2021-03-11 20:26:34,674 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:26:34,680 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]
2021-03-11 20:26:34,680 [main:117] - GENERATED CALL = ((((17594)).toLong())).compareTo(-123).toString(((17594)))
2021-03-11 20:26:34,680 [main:114] - replacement of "Wrong state-machine generated: wrong number of overall suspensions. Expected " + (foo<ULong>({ 7467005423461192445.toULong()})).toUShort().countOneBits() of type String is ((((17594)).toLong())).toChar().uppercase()
2021-03-11 20:26:34,824 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:26:34,824 [main:66] - Compilation checking started
2021-03-11 20:26:35,521 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { { print("eclsf")}() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = (foo<Kla0>({ Kla0.Kla1})).name.slice(buildSet<Int>({ println("owtiy")}))

fun box378(): String {
    var prope4 = "FAIL 1"
    fu2 {
        prope4 = fu5()
    }
    if (((foo<ULong>({ 7467005423461192445.toULong()}))).rangeTo((foo<ULong>({ 7467005423461192445.toULong()}))).equals("ukwkh")) return prope4
    prope4 = "FAIL 2"
    fu2 {
        fu2 { require(false, { "sfizs"})}
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if (prope4 != (InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(1220123570)) return prope4
    prope4 = ((-17594)).compareTo(-1028863766).toString(-17594)
    fu3 {
        fu3 {
            fu3 {
                fu3 {
                    fu3 { check(true)}
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "kqkbp"
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((-17594).toChar().plus((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594)))))
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (foo<ULong>({ 7467005423461192445.toULong()})).rangeTo(foo<ULong>({ 7467005423461192445.toULong()})).equals("ucugw") } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = { repeat(1263814102, {a: Int -> require(true, { "jrwxy"})})}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (((17594)).toLong()).toShort().div(121)
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != (98550246.toUInt())?.toFloat().toRawBits()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if ((linkedMapOf<Pair<Byte, InlinedInt?>, String>())?.size.takeLowestOneBit() != numberOfSuspensions)
            error(((((17594)).toLong())).toChar().uppercase() + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (prope8) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:26:35,524 [main:107] - replacing (prope8, Boolean)
2021-03-11 20:26:35,524 [main:50] - replacing prope8 Boolean
2021-03-11 20:26:35,524 [main:54] - Getting value of type Boolean
2021-03-11 20:26:35,678 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:26:35,683 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 20:26:35,683 [main:61] - GENERATED IS CALL =false
2021-03-11 20:26:35,857 [main:67] - randomType = Double
2021-03-11 20:26:35,999 [main:302] - generating value of type = Double true depth = 0
2021-03-11 20:26:36,032 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6db0bca]
2021-03-11 20:26:36,032 [main:78] - Generated call from random type = (0.6022481416866154).isInfinite()
2021-03-11 20:26:36,033 [main:106] - GETTING Boolean from InlinedInt
2021-03-11 20:26:36,037 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in InlinedInt[SimpleFunctionDescriptorImpl@14eaa39c]]
2021-03-11 20:26:36,037 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in InlinedInt[SimpleFunctionDescriptorImpl@14eaa39c]
2021-03-11 20:26:36,179 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:26:36,180 [main:117] - GENERATED CALL = (InlinedInt(-17594)).equals("ozavn")
2021-03-11 20:26:36,180 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in InlinedInt[SimpleFunctionDescriptorImpl@14eaa39c], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@559171b7]]
2021-03-11 20:26:36,180 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in InlinedInt[SimpleFunctionDescriptorImpl@14eaa39c]
2021-03-11 20:26:36,322 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:26:36,322 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@559171b7]
2021-03-11 20:26:36,487 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:26:36,493 [main:117] - GENERATED CALL = (InlinedInt(-17594)).equals("qtxam").and(true)
2021-03-11 20:26:36,493 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in InlinedInt[SimpleFunctionDescriptorImpl@14eaa39c], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@fdd1e25]]
2021-03-11 20:26:36,493 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in InlinedInt[SimpleFunctionDescriptorImpl@14eaa39c]
2021-03-11 20:26:36,635 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:26:36,636 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@fdd1e25]
2021-03-11 20:26:36,778 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:26:36,783 [main:117] - GENERATED CALL = (InlinedInt(-17594)).equals("omykc").xor(true)
2021-03-11 20:26:36,783 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in InlinedInt[SimpleFunctionDescriptorImpl@14eaa39c], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2b9c0a0e]]
2021-03-11 20:26:36,783 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in InlinedInt[SimpleFunctionDescriptorImpl@14eaa39c]
2021-03-11 20:26:36,928 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:26:36,928 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2b9c0a0e]
2021-03-11 20:26:37,071 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:26:37,072 [main:117] - GENERATED CALL = (InlinedInt(-17594)).equals("mfkhh").equals("lkjwf")
2021-03-11 20:26:37,072 [main:113] - Case = [public final val internal: kotlin.Int defined in InlinedInt[PropertyDescriptorImpl@1259794], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e465cf2]]
2021-03-11 20:26:37,072 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e465cf2]
2021-03-11 20:26:37,216 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:26:37,216 [main:117] - GENERATED CALL = (InlinedInt(-17594)).internal.equals("qqnus")
2021-03-11 20:26:37,216 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in InlinedInt[SimpleFunctionDescriptorImpl@14eaa39c], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3859262c]]
2021-03-11 20:26:37,216 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in InlinedInt[SimpleFunctionDescriptorImpl@14eaa39c]
2021-03-11 20:26:37,361 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:26:37,361 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3859262c]
2021-03-11 20:26:37,361 [main:117] - GENERATED CALL = (InlinedInt(-17594)).equals("ausvn").not()
2021-03-11 20:26:37,361 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in InlinedInt[SimpleFunctionDescriptorImpl@14eaa39c], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7d04b157]]
2021-03-11 20:26:37,361 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in InlinedInt[SimpleFunctionDescriptorImpl@14eaa39c]
2021-03-11 20:26:37,504 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:26:37,504 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7d04b157]
2021-03-11 20:26:37,647 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:26:37,652 [main:117] - GENERATED CALL = (InlinedInt(-17594)).equals("mafnp").or(true)
2021-03-11 20:26:37,653 [main:114] - replacement of prope8 of type Boolean is false
2021-03-11 20:26:37,794 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-11 20:26:37,795 [main:66] - Compilation checking started
2021-03-11 20:26:38,501 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { { print("eclsf")}() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = (foo<Kla0>({ Kla0.Kla1})).name.slice(buildSet<Int>({ println("owtiy")}))

fun box378(): String {
    var prope4 = "FAIL 1"
    fu2 {
        prope4 = fu5()
    }
    if (((foo<ULong>({ 7467005423461192445.toULong()}))).rangeTo((foo<ULong>({ 7467005423461192445.toULong()}))).equals("ukwkh")) return prope4
    prope4 = "FAIL 2"
    fu2 {
        fu2 { require(false, { "sfizs"})}
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if (prope4 != (InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(1220123570)) return prope4
    prope4 = ((-17594)).compareTo(-1028863766).toString(-17594)
    fu3 {
        fu3 {
            fu3 {
                fu3 {
                    fu3 { check(true)}
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "kqkbp"
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((-17594).toChar().plus((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594)))))
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (foo<ULong>({ 7467005423461192445.toULong()})).rangeTo(foo<ULong>({ 7467005423461192445.toULong()})).equals("ucugw") } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = { repeat(1263814102, {a: Int -> require(true, { "jrwxy"})})}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (((17594)).toLong()).toShort().div(121)
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != (98550246.toUInt())?.toFloat().toRawBits()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if ((linkedMapOf<Pair<Byte, InlinedInt?>, String>())?.size.takeLowestOneBit() != numberOfSuspensions)
            error(((((17594)).toLong())).toChar().uppercase() + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (false) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:26:38,504 [main:107] - replacing (prope4, String)
2021-03-11 20:26:38,505 [main:50] - replacing prope4 String
2021-03-11 20:26:38,505 [main:54] - Getting value of type String
2021-03-11 20:26:38,648 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:26:38,654 [main:58] - GENERATED VALUE OF TYPE String = "rifos"
2021-03-11 20:26:38,654 [main:61] - GENERATED IS CALL =false
2021-03-11 20:26:38,665 [main:67] - randomType = Int
2021-03-11 20:26:38,808 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:26:38,845 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@38a0b896]
2021-03-11 20:26:38,845 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57d8c30b]
2021-03-11 20:26:38,987 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:26:38,993 [main:78] - Generated call from random type = (659239553).toByte().toString(1451772574)
2021-03-11 20:26:38,993 [main:114] - replacement of prope4 of type String is (659239553).toByte().toString(1451772574)
2021-03-11 20:26:39,135 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:26:39,135 [main:66] - Compilation checking started
2021-03-11 20:26:39,585 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { { print("eclsf")}() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = (foo<Kla0>({ Kla0.Kla1})).name.slice(buildSet<Int>({ println("owtiy")}))

fun box378(): String {
    var prope4 = "FAIL 1"
    fu2 {
        prope4 = fu5()
    }
    if (((foo<ULong>({ 7467005423461192445.toULong()}))).rangeTo((foo<ULong>({ 7467005423461192445.toULong()}))).equals("ukwkh")) return prope4
    prope4 = "FAIL 2"
    fu2 {
        fu2 { require(false, { "sfizs"})}
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if (prope4 != (InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(1220123570)) return prope4
    prope4 = ((-17594)).compareTo(-1028863766).toString(-17594)
    fu3 {
        fu3 {
            fu3 {
                fu3 {
                    fu3 { check(true)}
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    (659239553).toByte().toString(1451772574) = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "kqkbp"
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((-17594).toChar().plus((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594)))))
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (foo<ULong>({ 7467005423461192445.toULong()})).rangeTo(foo<ULong>({ 7467005423461192445.toULong()})).equals("ucugw") } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = { repeat(1263814102, {a: Int -> require(true, { "jrwxy"})})}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (((17594)).toLong()).toShort().div(121)
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != (98550246.toUInt())?.toFloat().toRawBits()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if ((linkedMapOf<Pair<Byte, InlinedInt?>, String>())?.size.takeLowestOneBit() != numberOfSuspensions)
            error(((((17594)).toLong())).toChar().uppercase() + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (false) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:26:39,588 [main:107] - replacing ({
        fu11(it)
    }, Function1<Continuation<Unit>, Unit>)
2021-03-11 20:26:39,588 [main:50] - replacing {
        fu11(it)
    } Function1<Continuation<Unit>, Unit>
2021-03-11 20:26:39,589 [main:54] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-11 20:26:39,734 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-11 20:26:39,739 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:26:39,889 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 20:26:39,895 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 20:26:40,403 [main:302] - generating value of type = Int true depth = 4
2021-03-11 20:26:40,408 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 20:26:40,413 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 20:26:40,564 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:26:40,571 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:26:40,896 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 20:26:40,901 [main:95] - GENERATED = require(true)
2021-03-11 20:26:40,901 [main:95] - GENERATED = repeat(330449219, {a: Int -> require(true)})
2021-03-11 20:26:40,902 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> repeat(330449219, {a: Int -> require(true)})}
2021-03-11 20:26:40,902 [main:61] - GENERATED IS CALL =false
2021-03-11 20:26:40,922 [main:67] - randomType = Kla0
2021-03-11 20:26:41,065 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 20:26:41,070 [main:112] - generating klass Kla0 text = enum class Kla0 {
    Kla1
}
2021-03-11 20:26:41,090 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from InlinedInt
2021-03-11 20:26:41,096 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 20:26:41,126 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from InlinedInt
2021-03-11 20:26:41,128 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Long
2021-03-11 20:26:41,159 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 20:26:41,160 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Long
2021-03-11 20:26:41,161 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 20:26:41,163 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from InlinedInt
2021-03-11 20:26:41,164 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Long
2021-03-11 20:26:41,166 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from ULong
2021-03-11 20:26:41,189 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 20:26:41,190 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from ULong
2021-03-11 20:26:41,192 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 20:26:41,193 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from InlinedString
2021-03-11 20:26:41,199 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 20:26:41,216 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 20:26:41,218 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from InlinedInt
2021-03-11 20:26:41,219 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Kla0
2021-03-11 20:26:41,239 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 20:26:41,240 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 20:26:41,242 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 20:26:41,243 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 20:26:41,244 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Char
2021-03-11 20:26:41,262 [main:114] - replacement of {
        fu11(it)
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> repeat(330449219, {a: Int -> require(true)})}
2021-03-11 20:26:41,405 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:26:41,405 [main:66] - Compilation checking started
2021-03-11 20:26:42,096 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { { print("eclsf")}() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = (foo<Kla0>({ Kla0.Kla1})).name.slice(buildSet<Int>({ println("owtiy")}))

fun box378(): String {
    var prope4 = "FAIL 1"
    fu2 {
        prope4 = fu5()
    }
    if (((foo<ULong>({ 7467005423461192445.toULong()}))).rangeTo((foo<ULong>({ 7467005423461192445.toULong()}))).equals("ukwkh")) return prope4
    prope4 = "FAIL 2"
    fu2 {
        fu2 { require(false, { "sfizs"})}
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if (prope4 != (InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(1220123570)) return prope4
    prope4 = ((-17594)).compareTo(-1028863766).toString(-17594)
    fu3 {
        fu3 {
            fu3 {
                fu3 {
                    fu3 { check(true)}
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "kqkbp"
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(330449219, {a: Int -> require(true)})}

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((-17594).toChar().plus((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594)))))
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (foo<ULong>({ 7467005423461192445.toULong()})).rangeTo(foo<ULong>({ 7467005423461192445.toULong()})).equals("ucugw") } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = { repeat(1263814102, {a: Int -> require(true, { "jrwxy"})})}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (((17594)).toLong()).toShort().div(121)
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != (98550246.toUInt())?.toFloat().toRawBits()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if ((linkedMapOf<Pair<Byte, InlinedInt?>, String>())?.size.takeLowestOneBit() != numberOfSuspensions)
            error(((((17594)).toLong())).toChar().uppercase() + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (false) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:26:42,099 [main:107] - replacing ({
        prope5.getOrThrow()
    }, Any?)
2021-03-11 20:26:42,099 [main:50] - replacing {
        prope5.getOrThrow()
    } Any?
2021-03-11 20:26:42,100 [main:54] - Getting value of type Any?
2021-03-11 20:26:42,264 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:26:42,265 [main:58] - GENERATED VALUE OF TYPE Any? = "madad"
2021-03-11 20:26:42,265 [main:61] - GENERATED IS CALL =false
2021-03-11 20:26:42,612 [main:67] - randomType = UShort?
2021-03-11 20:26:42,754 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 20:26:42,788 [main:106] - GETTING Any? from Int
2021-03-11 20:26:42,817 [main:106] - GETTING Any? from Int
2021-03-11 20:26:42,818 [main:106] - GETTING Any? from Int
2021-03-11 20:26:42,819 [main:106] - GETTING Any? from Kla0
2021-03-11 20:26:42,840 [main:113] - Case = [protected final fun clone(): kotlin.Any defined in Kla0[DeserializedSimpleFunctionDescriptor@3b5c1a2b]]
2021-03-11 20:26:42,840 [main:149] - GENERATING call of type protected final fun clone(): kotlin.Any defined in Kla0[DeserializedSimpleFunctionDescriptor@3b5c1a2b]
2021-03-11 20:26:42,841 [main:117] - GENERATED CALL = (foo<Kla0>({ Kla0.Kla1}))?.clone()
2021-03-11 20:26:42,841 [main:114] - replacement of {
        prope5.getOrThrow()
    } of type Any? is "madad"
2021-03-11 20:26:42,984 [main:33] - Trying to replace BLOCK on Element(STRING_TEMPLATE)
2021-03-11 20:26:42,985 [main:66] - Compilation checking started
2021-03-11 20:26:42,993 [main:71] - Wrong syntax or breaks conditions
2021-03-11 20:26:42,993 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { { print("eclsf")}() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = (foo<Kla0>({ Kla0.Kla1})).name.slice(buildSet<Int>({ println("owtiy")}))

fun box378(): String {
    var prope4 = "FAIL 1"
    fu2 {
        prope4 = fu5()
    }
    if (((foo<ULong>({ 7467005423461192445.toULong()}))).rangeTo((foo<ULong>({ 7467005423461192445.toULong()}))).equals("ukwkh")) return prope4
    prope4 = "FAIL 2"
    fu2 {
        fu2 { require(false, { "sfizs"})}
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if (prope4 != (InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(1220123570)) return prope4
    prope4 = ((-17594)).compareTo(-1028863766).toString(-17594)
    fu3 {
        fu3 {
            fu3 {
                fu3 {
                    fu3 { check(true)}
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) "madad"
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "kqkbp"
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(330449219, {a: Int -> require(true)})}

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((-17594).toChar().plus((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594)))))
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (foo<ULong>({ 7467005423461192445.toULong()})).rangeTo(foo<ULong>({ 7467005423461192445.toULong()})).equals("ucugw") } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = { repeat(1263814102, {a: Int -> require(true, { "jrwxy"})})}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (((17594)).toLong()).toShort().div(121)
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != (98550246.toUInt())?.toFloat().toRawBits()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if ((linkedMapOf<Pair<Byte, InlinedInt?>, String>())?.size.takeLowestOneBit() != numberOfSuspensions)
            error(((((17594)).toLong())).toChar().uppercase() + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (false) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:26:42,996 [main:107] - replacing (exceptionOrNull(), Throwable?)
2021-03-11 20:26:42,996 [main:50] - replacing exceptionOrNull() Throwable?
2021-03-11 20:26:42,996 [main:54] - Getting value of type Throwable?
2021-03-11 20:26:43,139 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 20:26:43,292 [main:43] - GENERATING CALL OF fun UnsupportedOperationException(message: kotlin.String?): Throwable = TODO()
2021-03-11 20:26:43,298 [main:61] - WITHOUT TYPE PARAMS = fun UnsupportedOperationException(message: kotlin.String?): Throwable = TODO()
2021-03-11 20:26:43,631 [main:302] - generating value of type = String true depth = 3
2021-03-11 20:26:43,636 [main:95] - GENERATED = UnsupportedOperationException("dkhqi")
2021-03-11 20:26:43,637 [main:58] - GENERATED VALUE OF TYPE Throwable? = UnsupportedOperationException("dkhqi")
2021-03-11 20:26:43,637 [main:61] - GENERATED IS CALL =true
2021-03-11 20:26:43,858 [main:67] - randomType = Function1<Kla0, Kla4>
2021-03-11 20:26:43,859 [main:106] - GETTING Throwable? from InlinedInt
2021-03-11 20:26:43,866 [main:106] - GETTING Throwable? from String
2021-03-11 20:26:43,883 [main:106] - GETTING Throwable? from Int
2021-03-11 20:26:43,912 [main:106] - GETTING Throwable? from Int
2021-03-11 20:26:43,912 [main:106] - GETTING Throwable? from String
2021-03-11 20:26:43,913 [main:106] - GETTING Throwable? from InlinedInt
2021-03-11 20:26:43,914 [main:106] - GETTING Throwable? from Long
2021-03-11 20:26:43,942 [main:106] - GETTING Throwable? from Int
2021-03-11 20:26:43,943 [main:106] - GETTING Throwable? from Int
2021-03-11 20:26:43,943 [main:106] - GETTING Throwable? from Long
2021-03-11 20:26:43,944 [main:106] - GETTING Throwable? from String
2021-03-11 20:26:43,945 [main:106] - GETTING Throwable? from Kla0
2021-03-11 20:26:43,963 [main:106] - GETTING Throwable? from InlinedInt
2021-03-11 20:26:43,964 [main:106] - GETTING Throwable? from Long
2021-03-11 20:26:43,964 [main:106] - GETTING Throwable? from String
2021-03-11 20:26:43,965 [main:106] - GETTING Throwable? from InlinedInt
2021-03-11 20:26:43,966 [main:106] - GETTING Throwable? from Int
2021-03-11 20:26:43,966 [main:106] - GETTING Throwable? from Char
2021-03-11 20:26:43,984 [main:106] - GETTING Throwable? from ULong
2021-03-11 20:26:44,005 [main:106] - GETTING Throwable? from InlinedString
2021-03-11 20:26:44,009 [main:106] - GETTING Throwable? from Int
2021-03-11 20:26:44,010 [main:106] - GETTING Throwable? from Int
2021-03-11 20:26:44,010 [main:106] - GETTING Throwable? from ULong
2021-03-11 20:26:44,010 [main:114] - replacement of exceptionOrNull() of type Throwable? is UnsupportedOperationException("dkhqi")
2021-03-11 20:26:44,153 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:26:44,156 [main:107] - replacing ("FAIL 1", String)
2021-03-11 20:26:44,157 [main:50] - replacing "FAIL 1" String
2021-03-11 20:26:44,157 [main:54] - Getting value of type String
2021-03-11 20:26:44,301 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:26:44,307 [main:58] - GENERATED VALUE OF TYPE String = "pzxvl"
2021-03-11 20:26:44,307 [main:61] - GENERATED IS CALL =false
2021-03-11 20:26:45,267 [main:67] - randomType = Set<Function2<Double, Kla5<UInt>, Double>>
2021-03-11 20:26:45,268 [main:106] - GETTING String from Int
2021-03-11 20:26:45,297 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a6eaf83], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2889e564]]
2021-03-11 20:26:45,297 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a6eaf83]
2021-03-11 20:26:45,297 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2889e564]
2021-03-11 20:26:45,297 [main:117] - GENERATED CALL = (-17594).toShort().toString(-17594)
2021-03-11 20:26:45,297 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d654126]]
2021-03-11 20:26:45,297 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397]
2021-03-11 20:26:45,297 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d654126]
2021-03-11 20:26:45,298 [main:117] - GENERATED CALL = (-17594).toChar().uppercase()
2021-03-11 20:26:45,298 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@571d28fe], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]]
2021-03-11 20:26:45,298 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@571d28fe]
2021-03-11 20:26:45,298 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]
2021-03-11 20:26:45,298 [main:117] - GENERATED CALL = (-17594).toLong().toString(((17594)))
2021-03-11 20:26:45,298 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c70f8ae]]
2021-03-11 20:26:45,298 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397]
2021-03-11 20:26:45,298 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c70f8ae]
2021-03-11 20:26:45,298 [main:117] - GENERATED CALL = (-17594).toChar().plus((InlinedInt(-17594))?.internal.toString(-17594))
2021-03-11 20:26:45,298 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7a52df9c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]]
2021-03-11 20:26:45,298 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7a52df9c]
2021-03-11 20:26:45,298 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]
2021-03-11 20:26:45,299 [main:117] - GENERATED CALL = (-17594).toInt().toString(((17594)))
2021-03-11 20:26:45,299 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@38a0b896], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57d8c30b]]
2021-03-11 20:26:45,299 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@38a0b896]
2021-03-11 20:26:45,299 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57d8c30b]
2021-03-11 20:26:45,299 [main:117] - GENERATED CALL = (-17594).toByte().toString(((-17594)))
2021-03-11 20:26:45,299 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@629a957]]
2021-03-11 20:26:45,299 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397]
2021-03-11 20:26:45,299 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@629a957]
2021-03-11 20:26:45,299 [main:117] - GENERATED CALL = (-17594).toChar().titlecase()
2021-03-11 20:26:45,299 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]]
2021-03-11 20:26:45,299 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]
2021-03-11 20:26:45,442 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:26:45,447 [main:117] - GENERATED CALL = (-17594).toString(1039752648)
2021-03-11 20:26:45,447 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@25850671], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]]
2021-03-11 20:26:45,447 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@25850671]
2021-03-11 20:26:45,448 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]
2021-03-11 20:26:45,589 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:26:45,595 [main:117] - GENERATED CALL = (-17594).compareTo(((-17594))).toString(1893117957)
2021-03-11 20:26:45,595 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@819e073], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]]
2021-03-11 20:26:45,595 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@819e073]
2021-03-11 20:26:45,737 [main:302] - generating value of type = Long true depth = 0
2021-03-11 20:26:45,742 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]
2021-03-11 20:26:45,885 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:26:45,891 [main:117] - GENERATED CALL = (-17594).div(-6651347170545639247).toString(1968940251)
2021-03-11 20:26:45,891 [main:114] - replacement of "FAIL 1" of type String is (-17594).toByte().toString(((-17594)))
2021-03-11 20:26:46,035 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:26:46,035 [main:66] - Compilation checking started
2021-03-11 20:26:46,743 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { { print("eclsf")}() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = (foo<Kla0>({ Kla0.Kla1})).name.slice(buildSet<Int>({ println("owtiy")}))

fun box378(): String {
    var prope4 = (-17594).toByte().toString(((-17594)))
    fu2 {
        prope4 = fu5()
    }
    if (((foo<ULong>({ 7467005423461192445.toULong()}))).rangeTo((foo<ULong>({ 7467005423461192445.toULong()}))).equals("ukwkh")) return prope4
    prope4 = "FAIL 2"
    fu2 {
        fu2 { require(false, { "sfizs"})}
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if (prope4 != (InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(1220123570)) return prope4
    prope4 = ((-17594)).compareTo(-1028863766).toString(-17594)
    fu3 {
        fu3 {
            fu3 {
                fu3 {
                    fu3 { check(true)}
                }
            }
        }
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "kqkbp"
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(330449219, {a: Int -> require(true)})}

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((-17594).toChar().plus((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594)))))
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (foo<ULong>({ 7467005423461192445.toULong()})).rangeTo(foo<ULong>({ 7467005423461192445.toULong()})).equals("ucugw") } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = { repeat(1263814102, {a: Int -> require(true, { "jrwxy"})})}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (((17594)).toLong()).toShort().div(121)
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != (98550246.toUInt())?.toFloat().toRawBits()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if ((linkedMapOf<Pair<Byte, InlinedInt?>, String>())?.size.takeLowestOneBit() != numberOfSuspensions)
            error(((((17594)).toLong())).toChar().uppercase() + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (false) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:26:46,746 [main:107] - replacing ({
        fu3 {
            fu3 {
                fu3 {
                    fu3 { check(true)}
                }
            }
        }
    }, SuspendFunction0<Unit>)
2021-03-11 20:26:46,747 [main:50] - replacing {
        fu3 {
            fu3 {
                fu3 {
                    fu3 { check(true)}
                }
            }
        }
    } SuspendFunction0<Unit>
2021-03-11 20:26:46,747 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-11 20:26:46,898 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-11 20:26:46,903 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:26:47,058 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:26:47,066 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:26:47,406 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 20:26:47,411 [main:95] - GENERATED = require(false)
2021-03-11 20:26:47,411 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { require(false)}
2021-03-11 20:26:47,412 [main:61] - GENERATED IS CALL =false
2021-03-11 20:26:47,992 [main:67] - randomType = Collection<Pair<Float, String?>>
2021-03-11 20:26:47,994 [main:106] - GETTING SuspendFunction0<Unit> from InlinedInt
2021-03-11 20:26:48,001 [main:106] - GETTING SuspendFunction0<Unit> from Long
2021-03-11 20:26:48,058 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 20:26:48,077 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:26:48,105 [main:106] - GETTING SuspendFunction0<Unit> from Long
2021-03-11 20:26:48,106 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 20:26:48,107 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:26:48,108 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:26:48,109 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 20:26:48,110 [main:106] - GETTING SuspendFunction0<Unit> from InlinedInt
2021-03-11 20:26:48,111 [main:106] - GETTING SuspendFunction0<Unit> from InlinedInt
2021-03-11 20:26:48,111 [main:106] - GETTING SuspendFunction0<Unit> from ULong
2021-03-11 20:26:48,134 [main:106] - GETTING SuspendFunction0<Unit> from InlinedString
2021-03-11 20:26:48,138 [main:106] - GETTING SuspendFunction0<Unit> from Long
2021-03-11 20:26:48,139 [main:106] - GETTING SuspendFunction0<Unit> from ULong
2021-03-11 20:26:48,140 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:26:48,141 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:26:48,142 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:26:48,143 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:26:48,144 [main:106] - GETTING SuspendFunction0<Unit> from InlinedInt
2021-03-11 20:26:48,144 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 20:26:48,145 [main:106] - GETTING SuspendFunction0<Unit> from Char
2021-03-11 20:26:48,163 [main:106] - GETTING SuspendFunction0<Unit> from Kla0
2021-03-11 20:26:48,180 [main:114] - replacement of {
        fu3 {
            fu3 {
                fu3 {
                    fu3 { check(true)}
                }
            }
        }
    } of type SuspendFunction0<Unit> is { require(false)}
2021-03-11 20:26:48,332 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:26:48,333 [main:66] - Compilation checking started
2021-03-11 20:26:49,060 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { { print("eclsf")}() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = (foo<Kla0>({ Kla0.Kla1})).name.slice(buildSet<Int>({ println("owtiy")}))

fun box378(): String {
    var prope4 = (-17594).toByte().toString(((-17594)))
    fu2 {
        prope4 = fu5()
    }
    if (((foo<ULong>({ 7467005423461192445.toULong()}))).rangeTo((foo<ULong>({ 7467005423461192445.toULong()}))).equals("ukwkh")) return prope4
    prope4 = "FAIL 2"
    fu2 {
        fu2 { require(false, { "sfizs"})}
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if (prope4 != (InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(1220123570)) return prope4
    prope4 = ((-17594)).compareTo(-1028863766).toString(-17594)
    fu3 { require(false)}
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "kqkbp"
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(330449219, {a: Int -> require(true)})}

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((-17594).toChar().plus((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594)))))
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (foo<ULong>({ 7467005423461192445.toULong()})).rangeTo(foo<ULong>({ 7467005423461192445.toULong()})).equals("ucugw") } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = { repeat(1263814102, {a: Int -> require(true, { "jrwxy"})})}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (((17594)).toLong()).toShort().div(121)
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != (98550246.toUInt())?.toFloat().toRawBits()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if ((linkedMapOf<Pair<Byte, InlinedInt?>, String>())?.size.takeLowestOneBit() != numberOfSuspensions)
            error(((((17594)).toLong())).toChar().uppercase() + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (false) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:26:49,064 [main:107] - replacing (checkFinished && !prope8, Boolean)
2021-03-11 20:26:49,065 [main:50] - replacing checkFinished && !prope8 Boolean
2021-03-11 20:26:49,065 [main:54] - Getting value of type Boolean
2021-03-11 20:26:49,220 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:26:49,226 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 20:26:49,226 [main:61] - GENERATED IS CALL =false
2021-03-11 20:26:50,689 [main:67] - randomType = LinkedHashMap<Triple<Kla0?, Kla0, Triple<Int, Byte, Float?>>, Triple<Long, Kla8, Kla3>>
2021-03-11 20:26:50,830 [main:302] - generating value of type = LinkedHashMap<Triple<Kla0?, Kla0, Triple<Int, Byte, Float?>>, Triple<Long, Kla8, Kla3>> false depth = 0
2021-03-11 20:26:50,984 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Triple<Kla0?, Kla0, Triple<Int, Byte, Float?>>, Triple<Long, Kla8, Kla3>> = TODO()
2021-03-11 20:26:51,017 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Triple<Kla0?, Kla0, Triple<Int, Byte, Float?>>, Triple<Long, Kla8, Kla3>> = TODO()
2021-03-11 20:26:51,167 [main:95] - GENERATED = linkedMapOf<Triple<Kla0?, Kla0, Triple<Int, Byte, Float?>>, Triple<Long, Kla8, Kla3>>()
2021-03-11 20:26:51,413 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.MutableCollection[DeserializedSimpleFunctionDescriptor@c52b009]
2021-03-11 20:26:51,554 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:26:51,555 [main:78] - Generated call from random type = (linkedMapOf<Triple<Kla0?, Kla0, Triple<Int, Byte, Float?>>, Triple<Long, Kla8, Kla3>>()).values.equals("qvzrz")
2021-03-11 20:26:51,555 [main:106] - GETTING Boolean from Int
2021-03-11 20:26:51,584 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e465cf2], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@fdd1e25]]
2021-03-11 20:26:51,584 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e465cf2]
2021-03-11 20:26:51,726 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:26:51,727 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@fdd1e25]
2021-03-11 20:26:51,869 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:26:51,875 [main:117] - GENERATED CALL = ((-17594)).equals("esmdm").xor(true)
2021-03-11 20:26:51,875 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@25850671], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e465cf2]]
2021-03-11 20:26:51,875 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@25850671]
2021-03-11 20:26:51,875 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e465cf2]
2021-03-11 20:26:52,017 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:26:52,018 [main:117] - GENERATED CALL = ((-17594)).compareTo((InlinedInt(-17594))?.internal).equals("lawsz")
2021-03-11 20:26:52,018 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6bb22339], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@46bcc85e]]
2021-03-11 20:26:52,018 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6bb22339]
2021-03-11 20:26:52,163 [main:302] - generating value of type = Double true depth = 0
2021-03-11 20:26:52,169 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@46bcc85e]
2021-03-11 20:26:52,312 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:26:52,312 [main:117] - GENERATED CALL = ((-17594)).div(0.4532375320132095).equals("cgunu")
2021-03-11 20:26:52,312 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2cc5f775], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.IntRange.contains(element: kotlin.Int?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3e678502]]
2021-03-11 20:26:52,312 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2cc5f775]
2021-03-11 20:26:52,454 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:26:52,459 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.IntRange.contains(element: kotlin.Int?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3e678502]
2021-03-11 20:26:52,602 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:26:52,608 [main:117] - GENERATED CALL = ((-17594)).rangeTo(-16).contains(706474926)
2021-03-11 20:26:52,608 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7a52df9c], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e465cf2]]
2021-03-11 20:26:52,608 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7a52df9c]
2021-03-11 20:26:52,608 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e465cf2]
2021-03-11 20:26:52,753 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:26:52,753 [main:117] - GENERATED CALL = ((-17594)).toInt().equals("gszln")
2021-03-11 20:26:52,753 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f73e1a8]]
2021-03-11 20:26:52,753 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397]
2021-03-11 20:26:52,753 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f73e1a8]
2021-03-11 20:26:52,753 [main:117] - GENERATED CALL = ((-17594)).toChar().isUpperCase()
2021-03-11 20:26:52,753 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a6eaf83], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@33d574a5]]
2021-03-11 20:26:52,753 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a6eaf83]
2021-03-11 20:26:52,753 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@33d574a5]
2021-03-11 20:26:52,899 [main:117] - GENERATED CALL = ((-17594)).toShort().equals(null)
2021-03-11 20:26:52,899 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d3c9f6b]]
2021-03-11 20:26:52,900 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397]
2021-03-11 20:26:52,900 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d3c9f6b]
2021-03-11 20:26:53,042 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:26:53,191 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:26:53,196 [main:117] - GENERATED CALL = ((-17594)).toChar().equals('ᅒ', true)
2021-03-11 20:26:53,196 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6bb22339], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@60ebb310]]
2021-03-11 20:26:53,196 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6bb22339]
2021-03-11 20:26:53,341 [main:302] - generating value of type = Double true depth = 0
2021-03-11 20:26:53,346 [main:149] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@60ebb310]
2021-03-11 20:26:53,347 [main:117] - GENERATED CALL = ((-17594)).div(0.12241196869660476).isNaN()
2021-03-11 20:26:53,347 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@38a0b896], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@2878caf6]]
2021-03-11 20:26:53,347 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@38a0b896]
2021-03-11 20:26:53,347 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@2878caf6]
2021-03-11 20:26:53,490 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:26:53,491 [main:117] - GENERATED CALL = ((-17594)).toByte().equals("edsnm")
2021-03-11 20:26:53,491 [main:114] - replacement of checkFinished && !prope8 of type Boolean is ((-17594)).div(0.12241196869660476).isNaN()
2021-03-11 20:26:53,632 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:26:53,633 [main:66] - Compilation checking started
2021-03-11 20:26:54,346 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { { print("eclsf")}() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = (foo<Kla0>({ Kla0.Kla1})).name.slice(buildSet<Int>({ println("owtiy")}))

fun box378(): String {
    var prope4 = (-17594).toByte().toString(((-17594)))
    fu2 {
        prope4 = fu5()
    }
    if (((foo<ULong>({ 7467005423461192445.toULong()}))).rangeTo((foo<ULong>({ 7467005423461192445.toULong()}))).equals("ukwkh")) return prope4
    prope4 = "FAIL 2"
    fu2 {
        fu2 { require(false, { "sfizs"})}
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if (prope4 != (InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(1220123570)) return prope4
    prope4 = ((-17594)).compareTo(-1028863766).toString(-17594)
    fu3 { require(false)}
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "kqkbp"
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(330449219, {a: Int -> require(true)})}

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((-17594).toChar().plus((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594)))))
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (foo<ULong>({ 7467005423461192445.toULong()})).rangeTo(foo<ULong>({ 7467005423461192445.toULong()})).equals("ucugw") } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = { repeat(1263814102, {a: Int -> require(true, { "jrwxy"})})}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (((17594)).toLong()).toShort().div(121)
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != (98550246.toUInt())?.toFloat().toRawBits()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if ((linkedMapOf<Pair<Byte, InlinedInt?>, String>())?.size.takeLowestOneBit() != numberOfSuspensions)
            error(((((17594)).toLong())).toChar().uppercase() + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (false) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (((-17594)).div(0.12241196869660476).isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:26:54,350 [main:107] - replacing ({
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }, Unit?)
2021-03-11 20:26:54,350 [main:50] - replacing {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    } Unit?
2021-03-11 20:26:54,350 [main:54] - Getting value of type Unit?
2021-03-11 20:26:54,502 [main:302] - generating value of type = Unit false depth = 0
2021-03-11 20:26:54,653 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:26:54,659 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:26:54,986 [main:302] - generating value of type = Any false depth = 3
2021-03-11 20:26:54,986 [main:95] - GENERATED = print("ltbwx")
2021-03-11 20:26:54,986 [main:58] - GENERATED VALUE OF TYPE Unit? = print("ltbwx")
2021-03-11 20:26:54,986 [main:61] - GENERATED IS CALL =true
2021-03-11 20:26:54,997 [main:67] - randomType = Long
2021-03-11 20:26:55,140 [main:302] - generating value of type = Long true depth = 0
2021-03-11 20:26:55,174 [main:106] - GETTING Unit? from InlinedInt
2021-03-11 20:26:55,179 [main:106] - GETTING Unit? from Int
2021-03-11 20:26:55,208 [main:106] - GETTING Unit? from Int
2021-03-11 20:26:55,209 [main:106] - GETTING Unit? from String
2021-03-11 20:26:55,227 [main:113] - Case = [public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54c0f5af]]
2021-03-11 20:26:55,227 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54c0f5af]
2021-03-11 20:26:55,373 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 20:26:55,378 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:26:55,531 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:26:55,538 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:26:55,866 [main:302] - generating value of type = Any false depth = 4
2021-03-11 20:26:55,866 [main:95] - GENERATED = println("tyyvv")
2021-03-11 20:26:55,868 [main:117] - GENERATED CALL = ((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))))?.forEach({a: Char -> println("tyyvv")})
2021-03-11 20:26:55,868 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@193ae7ca], public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54c0f5af]]
2021-03-11 20:26:55,868 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@193ae7ca]
2021-03-11 20:26:55,868 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54c0f5af]
2021-03-11 20:26:56,010 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 20:26:56,015 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:26:56,167 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:26:56,173 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:26:56,503 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 20:26:56,509 [main:95] - GENERATED = require(true)
2021-03-11 20:26:56,509 [main:117] - GENERATED CALL = ((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))))?.subSequence(((-17594)), (-17594)).forEach({a: Char -> require(true)})
2021-03-11 20:26:56,509 [main:113] - Case = [public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79dd9cd0]]
2021-03-11 20:26:56,509 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79dd9cd0]
2021-03-11 20:26:56,651 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 20:26:56,656 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:26:56,832 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:26:56,839 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:26:57,342 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 20:26:57,348 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 20:26:57,353 [main:302] - generating value of type = Any false depth = 5
2021-03-11 20:26:57,353 [main:95] - GENERATED = check(true, { "xvzyg"})
2021-03-11 20:26:57,353 [main:117] - GENERATED CALL = ((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))))?.forEachIndexed({a: Int, b: Char -> check(true, { "xvzyg"})})
2021-03-11 20:26:57,354 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@193ae7ca], public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79dd9cd0]]
2021-03-11 20:26:57,354 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@193ae7ca]
2021-03-11 20:26:57,354 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79dd9cd0]
2021-03-11 20:26:57,495 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 20:26:57,500 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:26:57,650 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:26:57,657 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:26:58,162 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 20:26:58,168 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 20:26:58,173 [main:302] - generating value of type = Any false depth = 5
2021-03-11 20:26:58,173 [main:95] - GENERATED = require(false, { "cgdgb"})
2021-03-11 20:26:58,174 [main:117] - GENERATED CALL = ((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))))?.subSequence(((17594)), InlinedInt(-463791997).internal).forEachIndexed({a: Int, b: Char -> require(false, { "cgdgb"})})
2021-03-11 20:26:58,174 [main:114] - replacement of {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    } of type Unit? is ((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))))?.forEach({a: Char -> println("tyyvv")})
2021-03-11 20:26:58,316 [main:33] - Trying to replace BLOCK on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 20:26:58,316 [main:66] - Compilation checking started
2021-03-11 20:26:58,325 [main:71] - Wrong syntax or breaks conditions
2021-03-11 20:26:58,325 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { { print("eclsf")}() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = (foo<Kla0>({ Kla0.Kla1})).name.slice(buildSet<Int>({ println("owtiy")}))

fun box378(): String {
    var prope4 = (-17594).toByte().toString(((-17594)))
    fu2 {
        prope4 = fu5()
    }
    if (((foo<ULong>({ 7467005423461192445.toULong()}))).rangeTo((foo<ULong>({ 7467005423461192445.toULong()}))).equals("ukwkh")) return prope4
    prope4 = "FAIL 2"
    fu2 {
        fu2 { require(false, { "sfizs"})}
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if (prope4 != (InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(1220123570)) return prope4
    prope4 = ((-17594)).compareTo(-1028863766).toString(-17594)
    fu3 { require(false)}
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) ((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))))?.forEach({a: Char -> println("tyyvv")})
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "kqkbp"
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(330449219, {a: Int -> require(true)})}

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((-17594).toChar().plus((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594)))))
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (foo<ULong>({ 7467005423461192445.toULong()})).rangeTo(foo<ULong>({ 7467005423461192445.toULong()})).equals("ucugw") } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = { repeat(1263814102, {a: Int -> require(true, { "jrwxy"})})}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (((17594)).toLong()).toShort().div(121)
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != (98550246.toUInt())?.toFloat().toRawBits()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if ((linkedMapOf<Pair<Byte, InlinedInt?>, String>())?.size.takeLowestOneBit() != numberOfSuspensions)
            error(((((17594)).toLong())).toChar().uppercase() + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (false) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (((-17594)).div(0.12241196869660476).isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:26:58,328 [main:107] - replacing (prope4, String)
2021-03-11 20:26:58,328 [main:50] - replacing prope4 String
2021-03-11 20:26:58,328 [main:54] - Getting value of type String
2021-03-11 20:26:58,472 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:26:58,478 [main:58] - GENERATED VALUE OF TYPE String = "xmlxy"
2021-03-11 20:26:58,478 [main:61] - GENERATED IS CALL =false
2021-03-11 20:26:58,489 [main:67] - randomType = ULong
2021-03-11 20:26:58,631 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 20:26:58,661 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@66d94daf]
2021-03-11 20:26:58,661 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70beb7d5]
2021-03-11 20:26:58,804 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:26:58,809 [main:78] - Generated call from random type = (694385842852473829.toULong()).toUShort().toString(-466744609)
2021-03-11 20:26:58,810 [main:106] - GETTING String from String
2021-03-11 20:26:58,828 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36620397]]
2021-03-11 20:26:58,829 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36620397]
2021-03-11 20:26:58,970 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 20:26:58,978 [main:117] - GENERATED CALL = (fu1({ "vagtc"}, { "jcovl"})).removeSuffix("vjfpg")
2021-03-11 20:26:58,978 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e848fd1]]
2021-03-11 20:26:58,978 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e848fd1]
2021-03-11 20:26:59,122 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 20:26:59,131 [main:117] - GENERATED CALL = (fu1({ "vagtc"}, { "jcovl"})).removePrefix("lijwd")
2021-03-11 20:26:59,131 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49210540]]
2021-03-11 20:26:59,131 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49210540]
2021-03-11 20:26:59,131 [main:117] - GENERATED CALL = (fu1({ "vagtc"}, { "jcovl"})).decapitalize()
2021-03-11 20:26:59,131 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61c03bf5]]
2021-03-11 20:26:59,131 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61c03bf5]
2021-03-11 20:26:59,273 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 20:26:59,282 [main:117] - GENERATED CALL = (fu1({ "vagtc"}, { "jcovl"})).removeSurrounding("xnqar")
2021-03-11 20:26:59,282 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@193ae7ca], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@301c042e]]
2021-03-11 20:26:59,282 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@193ae7ca]
2021-03-11 20:26:59,282 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@301c042e]
2021-03-11 20:26:59,427 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 20:26:59,578 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 20:26:59,584 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 20:26:59,945 [main:302] - generating value of type = String true depth = 3
2021-03-11 20:26:59,951 [main:95] - GENERATED = Regex("jpdoq")
2021-03-11 20:27:00,092 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-11 20:27:00,098 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 20:27:00,106 [main:117] - GENERATED CALL = (fu1({ "vagtc"}, { "jcovl"})).subSequence(InlinedInt(-463791997).internal, (-17594)).replace(Regex("jpdoq"), {a: MatchResult -> StringBuilder()})
2021-03-11 20:27:00,106 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@193ae7ca], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3bee7d1c]]
2021-03-11 20:27:00,106 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@193ae7ca]
2021-03-11 20:27:00,249 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:27:00,254 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3bee7d1c]
2021-03-11 20:27:00,396 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 20:27:00,546 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 20:27:00,553 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 20:27:00,876 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 20:27:01,026 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 20:27:01,032 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 20:27:01,355 [main:302] - generating value of type = String true depth = 6
2021-03-11 20:27:01,361 [main:95] - GENERATED = StringBuilder("jlxaa")
2021-03-11 20:27:01,361 [main:95] - GENERATED = StringBuilder(StringBuilder("jlxaa"))
2021-03-11 20:27:01,502 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:27:01,507 [main:117] - GENERATED CALL = (fu1({ "vagtc"}, { "jcovl"})).subSequence(962068635, (InlinedInt(-17594))?.internal).commonPrefixWith(StringBuilder(StringBuilder("jlxaa")), true)
2021-03-11 20:27:01,507 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@193ae7ca], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bdb4017]]
2021-03-11 20:27:01,507 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@193ae7ca]
2021-03-11 20:27:01,508 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bdb4017]
2021-03-11 20:27:01,651 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:27:01,656 [main:117] - GENERATED CALL = (fu1({ "vagtc"}, { "jcovl"})).subSequence(((17594)), ((-17594))).repeat(-453491651)
2021-03-11 20:27:01,656 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4139bfa6]]
2021-03-11 20:27:01,656 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4139bfa6]
2021-03-11 20:27:01,801 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:27:01,949 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:27:01,954 [main:117] - GENERATED CALL = (fu1({ "vagtc"}, { "jcovl"})).replaceBefore('郤', (InlinedInt(-17594))?.internal.toString(-17594), "kmphf")
2021-03-11 20:27:01,954 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5710e7a3]]
2021-03-11 20:27:01,954 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5710e7a3]
2021-03-11 20:27:02,098 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 20:27:02,103 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 20:27:02,109 [main:117] - GENERATED CALL = (fu1({ "vagtc"}, { "jcovl"})).filter({a: Char -> true})
2021-03-11 20:27:02,109 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@747d22cc]]
2021-03-11 20:27:02,109 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@747d22cc]
2021-03-11 20:27:02,109 [main:117] - GENERATED CALL = (fu1({ "vagtc"}, { "jcovl"})).toUpperCase()
2021-03-11 20:27:02,109 [main:114] - replacement of prope4 of type String is (fu1({ "vagtc"}, { "jcovl"})).toUpperCase()
2021-03-11 20:27:02,251 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:27:02,252 [main:66] - Compilation checking started
2021-03-11 20:27:02,964 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { { print("eclsf")}() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = (foo<Kla0>({ Kla0.Kla1})).name.slice(buildSet<Int>({ println("owtiy")}))

fun box378(): String {
    var prope4 = (-17594).toByte().toString(((-17594)))
    fu2 {
        prope4 = fu5()
    }
    if (((foo<ULong>({ 7467005423461192445.toULong()}))).rangeTo((foo<ULong>({ 7467005423461192445.toULong()}))).equals("ukwkh")) return (fu1({ "vagtc"}, { "jcovl"})).toUpperCase()
    prope4 = "FAIL 2"
    fu2 {
        fu2 { require(false, { "sfizs"})}
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if (prope4 != (InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(1220123570)) return prope4
    prope4 = ((-17594)).compareTo(-1028863766).toString(-17594)
    fu3 { require(false)}
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "kqkbp"
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(330449219, {a: Int -> require(true)})}

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((-17594).toChar().plus((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594)))))
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (foo<ULong>({ 7467005423461192445.toULong()})).rangeTo(foo<ULong>({ 7467005423461192445.toULong()})).equals("ucugw") } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = { repeat(1263814102, {a: Int -> require(true, { "jrwxy"})})}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (((17594)).toLong()).toShort().div(121)
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != (98550246.toUInt())?.toFloat().toRawBits()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if ((linkedMapOf<Pair<Byte, InlinedInt?>, String>())?.size.takeLowestOneBit() != numberOfSuspensions)
            error(((((17594)).toLong())).toChar().uppercase() + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (false) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (((-17594)).div(0.12241196869660476).isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:27:02,967 [main:107] - replacing (prope4 != (InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(1220123570), Boolean)
2021-03-11 20:27:02,968 [main:50] - replacing prope4 != (InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(1220123570) Boolean
2021-03-11 20:27:02,968 [main:54] - Getting value of type Boolean
2021-03-11 20:27:03,113 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:27:03,119 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 20:27:03,119 [main:61] - GENERATED IS CALL =false
2021-03-11 20:27:03,303 [main:67] - randomType = Double?
2021-03-11 20:27:03,446 [main:302] - generating value of type = Double true depth = 0
2021-03-11 20:27:03,482 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@67c70197]
2021-03-11 20:27:03,482 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36192c3c]
2021-03-11 20:27:03,483 [main:78] - Generated call from random type = (0.9957030629358804)?.toChar().isDigit()
2021-03-11 20:27:03,483 [main:106] - GETTING Boolean from InlinedInt
2021-03-11 20:27:03,487 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in InlinedInt[SimpleFunctionDescriptorImpl@14eaa39c], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@559171b7]]
2021-03-11 20:27:03,487 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in InlinedInt[SimpleFunctionDescriptorImpl@14eaa39c]
2021-03-11 20:27:03,630 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:27:03,630 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@559171b7]
2021-03-11 20:27:03,773 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:27:03,779 [main:117] - GENERATED CALL = (InlinedInt(1265378532)).equals("vxvps").and(true)
2021-03-11 20:27:03,779 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in InlinedInt[SimpleFunctionDescriptorImpl@14eaa39c]]
2021-03-11 20:27:03,779 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in InlinedInt[SimpleFunctionDescriptorImpl@14eaa39c]
2021-03-11 20:27:03,922 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:27:03,922 [main:117] - GENERATED CALL = (InlinedInt(1265378532)).equals("xxykn")
2021-03-11 20:27:03,922 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in InlinedInt[SimpleFunctionDescriptorImpl@14eaa39c], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3859262c]]
2021-03-11 20:27:03,922 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in InlinedInt[SimpleFunctionDescriptorImpl@14eaa39c]
2021-03-11 20:27:04,069 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:27:04,069 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3859262c]
2021-03-11 20:27:04,069 [main:117] - GENERATED CALL = (InlinedInt(1265378532)).equals("mbdqn").not()
2021-03-11 20:27:04,069 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in InlinedInt[SimpleFunctionDescriptorImpl@14eaa39c], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7d04b157]]
2021-03-11 20:27:04,069 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in InlinedInt[SimpleFunctionDescriptorImpl@14eaa39c]
2021-03-11 20:27:04,212 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:27:04,212 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7d04b157]
2021-03-11 20:27:04,355 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:27:04,360 [main:117] - GENERATED CALL = (InlinedInt(1265378532)).equals("oujuz").or(false)
2021-03-11 20:27:04,360 [main:113] - Case = [public final val internal: kotlin.Int defined in InlinedInt[PropertyDescriptorImpl@1259794], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e465cf2]]
2021-03-11 20:27:04,360 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e465cf2]
2021-03-11 20:27:04,503 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:27:04,504 [main:117] - GENERATED CALL = (InlinedInt(1265378532)).internal.equals("rpave")
2021-03-11 20:27:04,504 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in InlinedInt[SimpleFunctionDescriptorImpl@14eaa39c], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2b9c0a0e]]
2021-03-11 20:27:04,504 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in InlinedInt[SimpleFunctionDescriptorImpl@14eaa39c]
2021-03-11 20:27:04,646 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:27:04,646 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2b9c0a0e]
2021-03-11 20:27:04,789 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:27:04,789 [main:117] - GENERATED CALL = (InlinedInt(1265378532)).equals("iizti").equals("tszdu")
2021-03-11 20:27:04,790 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in InlinedInt[SimpleFunctionDescriptorImpl@14eaa39c], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@fdd1e25]]
2021-03-11 20:27:04,790 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in InlinedInt[SimpleFunctionDescriptorImpl@14eaa39c]
2021-03-11 20:27:04,933 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:27:04,933 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@fdd1e25]
2021-03-11 20:27:05,076 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:27:05,082 [main:117] - GENERATED CALL = (InlinedInt(1265378532)).equals("ssndf").xor(true)
2021-03-11 20:27:05,082 [main:114] - replacement of prope4 != (InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(1220123570) of type Boolean is (InlinedInt(1265378532)).equals("ssndf").xor(true)
2021-03-11 20:27:05,224 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:27:05,225 [main:66] - Compilation checking started
2021-03-11 20:27:06,081 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { { print("eclsf")}() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = (foo<Kla0>({ Kla0.Kla1})).name.slice(buildSet<Int>({ println("owtiy")}))

fun box378(): String {
    var prope4 = (-17594).toByte().toString(((-17594)))
    fu2 {
        prope4 = fu5()
    }
    if (((foo<ULong>({ 7467005423461192445.toULong()}))).rangeTo((foo<ULong>({ 7467005423461192445.toULong()}))).equals("ukwkh")) return (fu1({ "vagtc"}, { "jcovl"})).toUpperCase()
    prope4 = "FAIL 2"
    fu2 {
        fu2 { require(false, { "sfizs"})}
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if ((InlinedInt(1265378532)).equals("ssndf").xor(true)) return prope4
    prope4 = ((-17594)).compareTo(-1028863766).toString(-17594)
    fu3 { require(false)}
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "kqkbp"
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(330449219, {a: Int -> require(true)})}

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((-17594).toChar().plus((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594)))))
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (foo<ULong>({ 7467005423461192445.toULong()})).rangeTo(foo<ULong>({ 7467005423461192445.toULong()})).equals("ucugw") } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = { repeat(1263814102, {a: Int -> require(true, { "jrwxy"})})}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (((17594)).toLong()).toShort().div(121)
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != (98550246.toUInt())?.toFloat().toRawBits()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if ((linkedMapOf<Pair<Byte, InlinedInt?>, String>())?.size.takeLowestOneBit() != numberOfSuspensions)
            error(((((17594)).toLong())).toChar().uppercase() + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (false) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (((-17594)).div(0.12241196869660476).isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:27:06,084 [main:107] - replacing ({
        prope5.getOrThrow()
    }, Any?)
2021-03-11 20:27:06,084 [main:50] - replacing {
        prope5.getOrThrow()
    } Any?
2021-03-11 20:27:06,084 [main:54] - Getting value of type Any?
2021-03-11 20:27:06,254 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:27:06,254 [main:58] - GENERATED VALUE OF TYPE Any? = "olfbt"
2021-03-11 20:27:06,254 [main:61] - GENERATED IS CALL =false
2021-03-11 20:27:06,631 [main:67] - randomType = Function1<Char, Kla8>
2021-03-11 20:27:06,632 [main:106] - GETTING Any? from String
2021-03-11 20:27:06,654 [main:106] - GETTING Any? from InlinedString
2021-03-11 20:27:06,658 [main:106] - GETTING Any? from Long
2021-03-11 20:27:06,687 [main:106] - GETTING Any? from Int
2021-03-11 20:27:06,716 [main:106] - GETTING Any? from InlinedInt
2021-03-11 20:27:06,721 [main:106] - GETTING Any? from InlinedInt
2021-03-11 20:27:06,722 [main:106] - GETTING Any? from String
2021-03-11 20:27:06,723 [main:106] - GETTING Any? from Int
2021-03-11 20:27:06,724 [main:106] - GETTING Any? from ULong
2021-03-11 20:27:06,746 [main:106] - GETTING Any? from Int
2021-03-11 20:27:06,747 [main:106] - GETTING Any? from InlinedInt
2021-03-11 20:27:06,748 [main:106] - GETTING Any? from Int
2021-03-11 20:27:06,749 [main:106] - GETTING Any? from String
2021-03-11 20:27:06,750 [main:106] - GETTING Any? from Int
2021-03-11 20:27:06,751 [main:106] - GETTING Any? from InlinedInt
2021-03-11 20:27:06,752 [main:106] - GETTING Any? from Long
2021-03-11 20:27:06,753 [main:106] - GETTING Any? from String
2021-03-11 20:27:06,754 [main:106] - GETTING Any? from Long
2021-03-11 20:27:06,755 [main:106] - GETTING Any? from Char
2021-03-11 20:27:06,773 [main:106] - GETTING Any? from ULong
2021-03-11 20:27:06,774 [main:106] - GETTING Any? from Int
2021-03-11 20:27:06,775 [main:106] - GETTING Any? from Kla0
2021-03-11 20:27:06,792 [main:113] - Case = [protected final fun clone(): kotlin.Any defined in Kla0[DeserializedSimpleFunctionDescriptor@3b5c1a2b]]
2021-03-11 20:27:06,792 [main:149] - GENERATING call of type protected final fun clone(): kotlin.Any defined in Kla0[DeserializedSimpleFunctionDescriptor@3b5c1a2b]
2021-03-11 20:27:06,793 [main:117] - GENERATED CALL = (foo<Kla0>({ Kla0.Kla1}))?.clone()
2021-03-11 20:27:06,793 [main:114] - replacement of {
        prope5.getOrThrow()
    } of type Any? is (foo<Kla0>({ Kla0.Kla1}))?.clone()
2021-03-11 20:27:06,936 [main:33] - Trying to replace BLOCK on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 20:27:06,936 [main:66] - Compilation checking started
2021-03-11 20:27:06,945 [main:71] - Wrong syntax or breaks conditions
2021-03-11 20:27:06,945 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { { print("eclsf")}() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = (foo<Kla0>({ Kla0.Kla1})).name.slice(buildSet<Int>({ println("owtiy")}))

fun box378(): String {
    var prope4 = (-17594).toByte().toString(((-17594)))
    fu2 {
        prope4 = fu5()
    }
    if (((foo<ULong>({ 7467005423461192445.toULong()}))).rangeTo((foo<ULong>({ 7467005423461192445.toULong()}))).equals("ukwkh")) return (fu1({ "vagtc"}, { "jcovl"})).toUpperCase()
    prope4 = "FAIL 2"
    fu2 {
        fu2 { require(false, { "sfizs"})}
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if ((InlinedInt(1265378532)).equals("ssndf").xor(true)) return prope4
    prope4 = ((-17594)).compareTo(-1028863766).toString(-17594)
    fu3 { require(false)}
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) (foo<Kla0>({ Kla0.Kla1}))?.clone()
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "kqkbp"
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(330449219, {a: Int -> require(true)})}

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((-17594).toChar().plus((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594)))))
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (foo<ULong>({ 7467005423461192445.toULong()})).rangeTo(foo<ULong>({ 7467005423461192445.toULong()})).equals("ucugw") } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = { repeat(1263814102, {a: Int -> require(true, { "jrwxy"})})}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (((17594)).toLong()).toShort().div(121)
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != (98550246.toUInt())?.toFloat().toRawBits()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if ((linkedMapOf<Pair<Byte, InlinedInt?>, String>())?.size.takeLowestOneBit() != numberOfSuspensions)
            error(((((17594)).toLong())).toChar().uppercase() + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (false) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (((-17594)).div(0.12241196869660476).isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:27:06,949 [main:107] - replacing (c, SuspendFunction0<Unit>)
2021-03-11 20:27:06,949 [main:50] - replacing c SuspendFunction0<Unit>
2021-03-11 20:27:06,949 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-11 20:27:07,093 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-11 20:27:07,099 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:27:07,250 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:27:07,256 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:27:07,585 [main:302] - generating value of type = Any false depth = 4
2021-03-11 20:27:07,585 [main:95] - GENERATED = print("kxmvu")
2021-03-11 20:27:07,585 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { print("kxmvu")}
2021-03-11 20:27:07,585 [main:61] - GENERATED IS CALL =false
2021-03-11 20:27:08,001 [main:67] - randomType = HashMap<Char, Double>
2021-03-11 20:27:08,153 [main:302] - generating value of type = HashMap<Char, Double> false depth = 0
2021-03-11 20:27:08,316 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(): HashMap<Char, Double> = TODO()
2021-03-11 20:27:08,322 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(): HashMap<Char, Double> = TODO()
2021-03-11 20:27:08,476 [main:95] - GENERATED = hashMapOf<Char, Double>()
2021-03-11 20:27:08,571 [main:106] - GETTING SuspendFunction0<Unit> from Long
2021-03-11 20:27:08,599 [main:106] - GETTING SuspendFunction0<Unit> from Kla0
2021-03-11 20:27:08,617 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:27:08,646 [main:106] - GETTING SuspendFunction0<Unit> from ULong
2021-03-11 20:27:08,667 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:27:08,668 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:27:08,669 [main:106] - GETTING SuspendFunction0<Unit> from InlinedInt
2021-03-11 20:27:08,674 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:27:08,675 [main:106] - GETTING SuspendFunction0<Unit> from Long
2021-03-11 20:27:08,676 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 20:27:08,692 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 20:27:08,693 [main:106] - GETTING SuspendFunction0<Unit> from Char
2021-03-11 20:27:08,710 [main:106] - GETTING SuspendFunction0<Unit> from InlinedInt
2021-03-11 20:27:08,711 [main:106] - GETTING SuspendFunction0<Unit> from InlinedInt
2021-03-11 20:27:08,712 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 20:27:08,713 [main:106] - GETTING SuspendFunction0<Unit> from InlinedInt
2021-03-11 20:27:08,714 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:27:08,714 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:27:08,715 [main:106] - GETTING SuspendFunction0<Unit> from InlinedString
2021-03-11 20:27:08,721 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 20:27:08,722 [main:106] - GETTING SuspendFunction0<Unit> from Long
2021-03-11 20:27:08,722 [main:106] - GETTING SuspendFunction0<Unit> from ULong
2021-03-11 20:27:08,723 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:27:08,723 [main:114] - replacement of c of type SuspendFunction0<Unit> is { print("kxmvu")}
2021-03-11 20:27:08,866 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 20:27:08,866 [main:66] - Compilation checking started
2021-03-11 20:27:09,337 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { { print("eclsf")}() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    { print("kxmvu")}.startCoroutine(Kla3)
}

suspend fun fu5() = (foo<Kla0>({ Kla0.Kla1})).name.slice(buildSet<Int>({ println("owtiy")}))

fun box378(): String {
    var prope4 = (-17594).toByte().toString(((-17594)))
    fu2 {
        prope4 = fu5()
    }
    if (((foo<ULong>({ 7467005423461192445.toULong()}))).rangeTo((foo<ULong>({ 7467005423461192445.toULong()}))).equals("ukwkh")) return (fu1({ "vagtc"}, { "jcovl"})).toUpperCase()
    prope4 = "FAIL 2"
    fu2 {
        fu2 { require(false, { "sfizs"})}
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if ((InlinedInt(1265378532)).equals("ssndf").xor(true)) return prope4
    prope4 = ((-17594)).compareTo(-1028863766).toString(-17594)
    fu3 { require(false)}
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "kqkbp"
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(330449219, {a: Int -> require(true)})}

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((-17594).toChar().plus((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594)))))
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (foo<ULong>({ 7467005423461192445.toULong()})).rangeTo(foo<ULong>({ 7467005423461192445.toULong()})).equals("ucugw") } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = { repeat(1263814102, {a: Int -> require(true, { "jrwxy"})})}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (((17594)).toLong()).toShort().div(121)
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != (98550246.toUInt())?.toFloat().toRawBits()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if ((linkedMapOf<Pair<Byte, InlinedInt?>, String>())?.size.takeLowestOneBit() != numberOfSuspensions)
            error(((((17594)).toLong())).toChar().uppercase() + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (false) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (((-17594)).div(0.12241196869660476).isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:27:09,341 [main:107] - replacing (c, Continuation<*>)
2021-03-11 20:27:09,341 [main:50] - replacing c Continuation<*>
2021-03-11 20:27:09,341 [main:54] - Getting value of type Continuation<*>
2021-03-11 20:27:09,484 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 20:27:09,634 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 20:27:09,641 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 20:27:10,163 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 20:27:10,313 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:27:10,319 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:27:10,663 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 20:27:10,821 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:27:10,828 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:27:11,355 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:27:11,355 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:27:11,355 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 20:27:11,355 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 20:27:11,366 [main:67] - randomType = Boolean
2021-03-11 20:27:11,509 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:27:11,527 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:27:11,560 [main:106] - GETTING Continuation<*> from String
2021-03-11 20:27:11,576 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:27:11,577 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:27:11,577 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:27:11,578 [main:106] - GETTING Continuation<*> from ULong
2021-03-11 20:27:11,600 [main:106] - GETTING Continuation<*> from InlinedInt
2021-03-11 20:27:11,605 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:27:11,605 [main:106] - GETTING Continuation<*> from Long
2021-03-11 20:27:11,634 [main:106] - GETTING Continuation<*> from InlinedInt
2021-03-11 20:27:11,635 [main:106] - GETTING Continuation<*> from InlinedInt
2021-03-11 20:27:11,635 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:27:11,636 [main:106] - GETTING Continuation<*> from Kla0
2021-03-11 20:27:11,654 [main:106] - GETTING Continuation<*> from Long
2021-03-11 20:27:11,655 [main:106] - GETTING Continuation<*> from Long
2021-03-11 20:27:11,656 [main:106] - GETTING Continuation<*> from ULong
2021-03-11 20:27:11,657 [main:106] - GETTING Continuation<*> from InlinedString
2021-03-11 20:27:11,662 [main:106] - GETTING Continuation<*> from String
2021-03-11 20:27:11,663 [main:106] - GETTING Continuation<*> from String
2021-03-11 20:27:11,663 [main:106] - GETTING Continuation<*> from Char
2021-03-11 20:27:11,681 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:27:11,681 [main:106] - GETTING Continuation<*> from String
2021-03-11 20:27:11,682 [main:106] - GETTING Continuation<*> from InlinedInt
2021-03-11 20:27:11,682 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-11 20:27:11,682 [main:107] - replacing (getOrThrow(), Any?)
2021-03-11 20:27:11,682 [main:50] - replacing getOrThrow() Any?
2021-03-11 20:27:11,682 [main:54] - Getting value of type Any?
2021-03-11 20:27:11,825 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:27:11,825 [main:58] - GENERATED VALUE OF TYPE Any? = "kwqhu"
2021-03-11 20:27:11,825 [main:61] - GENERATED IS CALL =false
2021-03-11 20:27:11,836 [main:67] - randomType = Byte
2021-03-11 20:27:11,979 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:27:12,018 [main:106] - GETTING Any? from InlinedInt
2021-03-11 20:27:12,023 [main:106] - GETTING Any? from Int
2021-03-11 20:27:12,053 [main:106] - GETTING Any? from String
2021-03-11 20:27:12,070 [main:106] - GETTING Any? from Int
2021-03-11 20:27:12,071 [main:106] - GETTING Any? from Long
2021-03-11 20:27:12,100 [main:106] - GETTING Any? from Int
2021-03-11 20:27:12,101 [main:106] - GETTING Any? from Int
2021-03-11 20:27:12,102 [main:106] - GETTING Any? from Long
2021-03-11 20:27:12,102 [main:106] - GETTING Any? from InlinedInt
2021-03-11 20:27:12,103 [main:106] - GETTING Any? from InlinedInt
2021-03-11 20:27:12,104 [main:106] - GETTING Any? from String
2021-03-11 20:27:12,105 [main:106] - GETTING Any? from ULong
2021-03-11 20:27:12,128 [main:106] - GETTING Any? from Int
2021-03-11 20:27:12,129 [main:106] - GETTING Any? from String
2021-03-11 20:27:12,130 [main:106] - GETTING Any? from Kla0
2021-03-11 20:27:12,147 [main:113] - Case = [protected final fun clone(): kotlin.Any defined in Kla0[DeserializedSimpleFunctionDescriptor@3b5c1a2b]]
2021-03-11 20:27:12,147 [main:149] - GENERATING call of type protected final fun clone(): kotlin.Any defined in Kla0[DeserializedSimpleFunctionDescriptor@3b5c1a2b]
2021-03-11 20:27:12,148 [main:117] - GENERATED CALL = (foo<Kla0>({ Kla0.Kla1}))?.clone()
2021-03-11 20:27:12,148 [main:114] - replacement of getOrThrow() of type Any? is "kwqhu"
2021-03-11 20:27:12,309 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 20:27:12,310 [main:66] - Compilation checking started
2021-03-11 20:27:12,743 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { { print("eclsf")}() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = (foo<Kla0>({ Kla0.Kla1})).name.slice(buildSet<Int>({ println("owtiy")}))

fun box378(): String {
    var prope4 = (-17594).toByte().toString(((-17594)))
    fu2 {
        prope4 = fu5()
    }
    if (((foo<ULong>({ 7467005423461192445.toULong()}))).rangeTo((foo<ULong>({ 7467005423461192445.toULong()}))).equals("ukwkh")) return (fu1({ "vagtc"}, { "jcovl"})).toUpperCase()
    prope4 = "FAIL 2"
    fu2 {
        fu2 { require(false, { "sfizs"})}
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if ((InlinedInt(1265378532)).equals("ssndf").xor(true)) return prope4
    prope4 = ((-17594)).compareTo(-1028863766).toString(-17594)
    fu3 { require(false)}
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5."kwqhu"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "kqkbp"
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(330449219, {a: Int -> require(true)})}

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((-17594).toChar().plus((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594)))))
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (foo<ULong>({ 7467005423461192445.toULong()})).rangeTo(foo<ULong>({ 7467005423461192445.toULong()})).equals("ucugw") } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = { repeat(1263814102, {a: Int -> require(true, { "jrwxy"})})}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (((17594)).toLong()).toShort().div(121)
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != (98550246.toUInt())?.toFloat().toRawBits()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if ((linkedMapOf<Pair<Byte, InlinedInt?>, String>())?.size.takeLowestOneBit() != numberOfSuspensions)
            error(((((17594)).toLong())).toChar().uppercase() + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (false) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (((-17594)).div(0.12241196869660476).isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:27:12,746 [main:107] - replacing (prope5.getOrThrow(), Any?)
2021-03-11 20:27:12,746 [main:50] - replacing prope5.getOrThrow() Any?
2021-03-11 20:27:12,746 [main:54] - Getting value of type Any?
2021-03-11 20:27:12,887 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:27:12,888 [main:58] - GENERATED VALUE OF TYPE Any? = "jiicm"
2021-03-11 20:27:12,888 [main:61] - GENERATED IS CALL =false
2021-03-11 20:27:13,101 [main:67] - randomType = MutableMap<Boolean, Char>
2021-03-11 20:27:13,103 [main:106] - GETTING Any? from InlinedInt
2021-03-11 20:27:13,109 [main:106] - GETTING Any? from InlinedInt
2021-03-11 20:27:13,110 [main:106] - GETTING Any? from Char
2021-03-11 20:27:13,130 [main:106] - GETTING Any? from Long
2021-03-11 20:27:13,158 [main:106] - GETTING Any? from String
2021-03-11 20:27:13,174 [main:106] - GETTING Any? from Int
2021-03-11 20:27:13,203 [main:106] - GETTING Any? from Int
2021-03-11 20:27:13,204 [main:106] - GETTING Any? from InlinedString
2021-03-11 20:27:13,208 [main:106] - GETTING Any? from Int
2021-03-11 20:27:13,209 [main:106] - GETTING Any? from Int
2021-03-11 20:27:13,210 [main:106] - GETTING Any? from InlinedInt
2021-03-11 20:27:13,211 [main:106] - GETTING Any? from ULong
2021-03-11 20:27:13,233 [main:106] - GETTING Any? from Long
2021-03-11 20:27:13,234 [main:106] - GETTING Any? from Kla0
2021-03-11 20:27:13,251 [main:113] - Case = [protected final fun clone(): kotlin.Any defined in Kla0[DeserializedSimpleFunctionDescriptor@3b5c1a2b]]
2021-03-11 20:27:13,251 [main:149] - GENERATING call of type protected final fun clone(): kotlin.Any defined in Kla0[DeserializedSimpleFunctionDescriptor@3b5c1a2b]
2021-03-11 20:27:13,251 [main:117] - GENERATED CALL = (foo<Kla0>({ Kla0.Kla1}))?.clone()
2021-03-11 20:27:13,251 [main:114] - replacement of prope5.getOrThrow() of type Any? is "jiicm"
2021-03-11 20:27:13,394 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 20:27:13,394 [main:66] - Compilation checking started
2021-03-11 20:27:14,087 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { { print("eclsf")}() }
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = (foo<Kla0>({ Kla0.Kla1})).name.slice(buildSet<Int>({ println("owtiy")}))

fun box378(): String {
    var prope4 = (-17594).toByte().toString(((-17594)))
    fu2 {
        prope4 = fu5()
    }
    if (((foo<ULong>({ 7467005423461192445.toULong()}))).rangeTo((foo<ULong>({ 7467005423461192445.toULong()}))).equals("ukwkh")) return (fu1({ "vagtc"}, { "jcovl"})).toUpperCase()
    prope4 = "FAIL 2"
    fu2 {
        fu2 { require(false, { "sfizs"})}
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if ((InlinedInt(1265378532)).equals("ssndf").xor(true)) return prope4
    prope4 = ((-17594)).compareTo(-1028863766).toString(-17594)
    fu3 { require(false)}
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        "jiicm"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "kqkbp"
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(330449219, {a: Int -> require(true)})}

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((-17594).toChar().plus((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594)))))
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (foo<ULong>({ 7467005423461192445.toULong()})).rangeTo(foo<ULong>({ 7467005423461192445.toULong()})).equals("ucugw") } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = { repeat(1263814102, {a: Int -> require(true, { "jrwxy"})})}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (((17594)).toLong()).toShort().div(121)
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != (98550246.toUInt())?.toFloat().toRawBits()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if ((linkedMapOf<Pair<Byte, InlinedInt?>, String>())?.size.takeLowestOneBit() != numberOfSuspensions)
            error(((((17594)).toLong())).toChar().uppercase() + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (false) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (((-17594)).div(0.12241196869660476).isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:27:14,091 [main:107] - replacing ({ { print("eclsf")}() }, SuspendFunction0<Unit>)
2021-03-11 20:27:14,092 [main:50] - replacing { { print("eclsf")}() } SuspendFunction0<Unit>
2021-03-11 20:27:14,092 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-11 20:27:14,239 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-11 20:27:14,245 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:27:14,395 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:27:14,402 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:27:14,736 [main:302] - generating value of type = Any false depth = 4
2021-03-11 20:27:14,736 [main:95] - GENERATED = print("uofax")
2021-03-11 20:27:14,736 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { print("uofax")}
2021-03-11 20:27:14,736 [main:61] - GENERATED IS CALL =false
2021-03-11 20:27:15,270 [main:67] - randomType = Sequence<UShort>
2021-03-11 20:27:15,271 [main:106] - GETTING SuspendFunction0<Unit> from Char
2021-03-11 20:27:15,293 [main:106] - GETTING SuspendFunction0<Unit> from InlinedInt
2021-03-11 20:27:15,298 [main:106] - GETTING SuspendFunction0<Unit> from Long
2021-03-11 20:27:15,326 [main:106] - GETTING SuspendFunction0<Unit> from ULong
2021-03-11 20:27:15,370 [main:106] - GETTING SuspendFunction0<Unit> from InlinedInt
2021-03-11 20:27:15,371 [main:106] - GETTING SuspendFunction0<Unit> from InlinedInt
2021-03-11 20:27:15,372 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:27:15,405 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 20:27:15,421 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:27:15,422 [main:106] - GETTING SuspendFunction0<Unit> from ULong
2021-03-11 20:27:15,423 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 20:27:15,424 [main:106] - GETTING SuspendFunction0<Unit> from Long
2021-03-11 20:27:15,425 [main:106] - GETTING SuspendFunction0<Unit> from InlinedInt
2021-03-11 20:27:15,426 [main:106] - GETTING SuspendFunction0<Unit> from Long
2021-03-11 20:27:15,426 [main:106] - GETTING SuspendFunction0<Unit> from InlinedString
2021-03-11 20:27:15,432 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:27:15,433 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:27:15,434 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:27:15,435 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:27:15,435 [main:106] - GETTING SuspendFunction0<Unit> from Kla0
2021-03-11 20:27:15,454 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 20:27:15,455 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-11 20:27:15,456 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:27:15,456 [main:114] - replacement of { { print("eclsf")}() } of type SuspendFunction0<Unit> is { print("uofax")}
2021-03-11 20:27:15,597 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:27:15,597 [main:66] - Compilation checking started
2021-03-11 20:27:16,291 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { print("uofax")}
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = (foo<Kla0>({ Kla0.Kla1})).name.slice(buildSet<Int>({ println("owtiy")}))

fun box378(): String {
    var prope4 = (-17594).toByte().toString(((-17594)))
    fu2 {
        prope4 = fu5()
    }
    if (((foo<ULong>({ 7467005423461192445.toULong()}))).rangeTo((foo<ULong>({ 7467005423461192445.toULong()}))).equals("ukwkh")) return (fu1({ "vagtc"}, { "jcovl"})).toUpperCase()
    prope4 = "FAIL 2"
    fu2 {
        fu2 { require(false, { "sfizs"})}
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if ((InlinedInt(1265378532)).equals("ssndf").xor(true)) return prope4
    prope4 = ((-17594)).compareTo(-1028863766).toString(-17594)
    fu3 { require(false)}
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        "jiicm"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "kqkbp"
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(330449219, {a: Int -> require(true)})}

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((-17594).toChar().plus((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594)))))
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (foo<ULong>({ 7467005423461192445.toULong()})).rangeTo(foo<ULong>({ 7467005423461192445.toULong()})).equals("ucugw") } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = { repeat(1263814102, {a: Int -> require(true, { "jrwxy"})})}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (((17594)).toLong()).toShort().div(121)
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != (98550246.toUInt())?.toFloat().toRawBits()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if ((linkedMapOf<Pair<Byte, InlinedInt?>, String>())?.size.takeLowestOneBit() != numberOfSuspensions)
            error(((((17594)).toLong())).toChar().uppercase() + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (false) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (((-17594)).div(0.12241196869660476).isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:27:16,294 [main:107] - replacing (Kla6(), Kla6)
2021-03-11 20:27:16,294 [main:50] - replacing Kla6() Kla6
2021-03-11 20:27:16,294 [main:54] - Getting value of type Kla6
2021-03-11 20:27:16,438 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 20:27:16,443 [main:112] - generating klass Kla6 text = class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(330449219, {a: Int -> require(true)})}

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((-17594).toChar().plus((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594)))))
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (foo<ULong>({ 7467005423461192445.toULong()})).rangeTo(foo<ULong>({ 7467005423461192445.toULong()})).equals("ucugw") } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}
2021-03-11 20:27:16,444 [main:58] - GENERATED VALUE OF TYPE Kla6 = Kla6()
2021-03-11 20:27:16,444 [main:61] - GENERATED IS CALL =true
2021-03-11 20:27:16,465 [main:67] - randomType = Kla2
2021-03-11 20:27:16,466 [main:106] - GETTING Kla6 from Int
2021-03-11 20:27:16,496 [main:106] - GETTING Kla6 from Long
2021-03-11 20:27:16,523 [main:106] - GETTING Kla6 from InlinedInt
2021-03-11 20:27:16,528 [main:106] - GETTING Kla6 from Int
2021-03-11 20:27:16,528 [main:106] - GETTING Kla6 from Long
2021-03-11 20:27:16,529 [main:106] - GETTING Kla6 from Int
2021-03-11 20:27:16,529 [main:106] - GETTING Kla6 from String
2021-03-11 20:27:16,546 [main:106] - GETTING Kla6 from InlinedString
2021-03-11 20:27:16,550 [main:106] - GETTING Kla6 from InlinedInt
2021-03-11 20:27:16,551 [main:106] - GETTING Kla6 from Int
2021-03-11 20:27:16,551 [main:106] - GETTING Kla6 from String
2021-03-11 20:27:16,552 [main:106] - GETTING Kla6 from String
2021-03-11 20:27:16,552 [main:106] - GETTING Kla6 from ULong
2021-03-11 20:27:16,574 [main:106] - GETTING Kla6 from Kla0
2021-03-11 20:27:16,593 [main:106] - GETTING Kla6 from InlinedInt
2021-03-11 20:27:16,593 [main:106] - GETTING Kla6 from Char
2021-03-11 20:27:16,610 [main:106] - GETTING Kla6 from Int
2021-03-11 20:27:16,611 [main:106] - GETTING Kla6 from String
2021-03-11 20:27:16,612 [main:106] - GETTING Kla6 from ULong
2021-03-11 20:27:16,612 [main:106] - GETTING Kla6 from InlinedInt
2021-03-11 20:27:16,613 [main:106] - GETTING Kla6 from Int
2021-03-11 20:27:16,613 [main:106] - GETTING Kla6 from Int
2021-03-11 20:27:16,614 [main:106] - GETTING Kla6 from Long
2021-03-11 20:27:16,614 [main:114] - replacement of Kla6() of type Kla6 is Kla6()
2021-03-11 20:27:16,755 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:27:16,758 [main:107] - replacing ("\n", String)
2021-03-11 20:27:16,758 [main:50] - replacing "\n" String
2021-03-11 20:27:16,758 [main:54] - Getting value of type String
2021-03-11 20:27:16,898 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:27:16,904 [main:58] - GENERATED VALUE OF TYPE String = "hugsa"
2021-03-11 20:27:16,904 [main:61] - GENERATED IS CALL =false
2021-03-11 20:27:17,089 [main:67] - randomType = Boolean?
2021-03-11 20:27:17,230 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:27:17,245 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1bdbc878]
2021-03-11 20:27:17,390 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:27:17,396 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]
2021-03-11 20:27:17,396 [main:78] - Generated call from random type = (true)?.compareTo(false).toString((-17594))
2021-03-11 20:27:17,397 [main:106] - GETTING String from Int
2021-03-11 20:27:17,426 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@629a957]]
2021-03-11 20:27:17,427 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397]
2021-03-11 20:27:17,427 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@629a957]
2021-03-11 20:27:17,427 [main:117] - GENERATED CALL = (-17594).toChar().titlecase()
2021-03-11 20:27:17,427 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4045409b]]
2021-03-11 20:27:17,427 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397]
2021-03-11 20:27:17,427 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4045409b]
2021-03-11 20:27:17,427 [main:117] - GENERATED CALL = (-17594).toChar().lowercase()
2021-03-11 20:27:17,427 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a6eaf83], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2889e564]]
2021-03-11 20:27:17,427 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a6eaf83]
2021-03-11 20:27:17,427 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2889e564]
2021-03-11 20:27:17,427 [main:117] - GENERATED CALL = (-17594).toShort().toString(-17594)
2021-03-11 20:27:17,428 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c70f8ae]]
2021-03-11 20:27:17,428 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397]
2021-03-11 20:27:17,428 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c70f8ae]
2021-03-11 20:27:17,570 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:27:17,576 [main:117] - GENERATED CALL = (-17594).toChar().plus("cerco")
2021-03-11 20:27:17,576 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d654126]]
2021-03-11 20:27:17,576 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3a24f397]
2021-03-11 20:27:17,576 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d654126]
2021-03-11 20:27:17,576 [main:117] - GENERATED CALL = (-17594).toChar().uppercase()
2021-03-11 20:27:17,576 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7a52df9c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]]
2021-03-11 20:27:17,576 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7a52df9c]
2021-03-11 20:27:17,576 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]
2021-03-11 20:27:17,732 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:27:17,737 [main:117] - GENERATED CALL = (-17594).toInt().toString(1778736925)
2021-03-11 20:27:17,737 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@819e073], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]]
2021-03-11 20:27:17,737 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@819e073]
2021-03-11 20:27:17,737 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]
2021-03-11 20:27:17,738 [main:117] - GENERATED CALL = (-17594).div((((17594)).toLong())).toString((17594))
2021-03-11 20:27:17,738 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]]
2021-03-11 20:27:17,738 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]
2021-03-11 20:27:17,738 [main:117] - GENERATED CALL = (-17594).toString(-17594)
2021-03-11 20:27:17,738 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@571d28fe], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]]
2021-03-11 20:27:17,738 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@571d28fe]
2021-03-11 20:27:17,738 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@305fa5a8]
2021-03-11 20:27:17,881 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:27:17,886 [main:117] - GENERATED CALL = (-17594).toLong().toString(1865093706)
2021-03-11 20:27:17,886 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@38a0b896], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57d8c30b]]
2021-03-11 20:27:17,886 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@38a0b896]
2021-03-11 20:27:17,886 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57d8c30b]
2021-03-11 20:27:17,886 [main:117] - GENERATED CALL = (-17594).toByte().toString(-17594)
2021-03-11 20:27:17,887 [main:114] - replacement of "\n" of type String is (true)?.compareTo(false).toString((-17594))
2021-03-11 20:27:18,029 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:27:18,029 [main:66] - Compilation checking started
2021-03-11 20:27:18,746 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { print("uofax")}
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = (foo<Kla0>({ Kla0.Kla1})).name.slice(buildSet<Int>({ println("owtiy")}))

fun box378(): String {
    var prope4 = (-17594).toByte().toString(((-17594)))
    fu2 {
        prope4 = fu5()
    }
    if (((foo<ULong>({ 7467005423461192445.toULong()}))).rangeTo((foo<ULong>({ 7467005423461192445.toULong()}))).equals("ukwkh")) return (fu1({ "vagtc"}, { "jcovl"})).toUpperCase()
    prope4 = "FAIL 2"
    fu2 {
        fu2 { require(false, { "sfizs"})}
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if ((InlinedInt(1265378532)).equals("ssndf").xor(true)) return prope4
    prope4 = ((-17594)).compareTo(-1028863766).toString(-17594)
    fu3 { require(false)}
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = fu5()
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        "jiicm"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "kqkbp"
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(330449219, {a: Int -> require(true)})}

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((-17594).toChar().plus((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594)))))
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = (true)?.compareTo(false).toString((-17594)))) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (foo<ULong>({ 7467005423461192445.toULong()})).rangeTo(foo<ULong>({ 7467005423461192445.toULong()})).equals("ucugw") } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = { repeat(1263814102, {a: Int -> require(true, { "jrwxy"})})}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (((17594)).toLong()).toShort().div(121)
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != (98550246.toUInt())?.toFloat().toRawBits()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if ((linkedMapOf<Pair<Byte, InlinedInt?>, String>())?.size.takeLowestOneBit() != numberOfSuspensions)
            error(((((17594)).toLong())).toChar().uppercase() + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (false) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (((-17594)).div(0.12241196869660476).isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:27:18,750 [main:107] - replacing (fu5(), String)
2021-03-11 20:27:18,751 [main:50] - replacing fu5() String
2021-03-11 20:27:18,751 [main:54] - Getting value of type String
2021-03-11 20:27:18,903 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:27:18,909 [main:58] - GENERATED VALUE OF TYPE String = "wgvog"
2021-03-11 20:27:18,909 [main:61] - GENERATED IS CALL =false
2021-03-11 20:27:18,931 [main:67] - randomType = Kla7
2021-03-11 20:27:19,076 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-11 20:27:19,081 [main:112] - generating klass Kla7 text = class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = { repeat(1263814102, {a: Int -> require(true, { "jrwxy"})})}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (((17594)).toLong()).toShort().div(121)
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != (98550246.toUInt())?.toFloat().toRawBits()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if ((linkedMapOf<Pair<Byte, InlinedInt?>, String>())?.size.takeLowestOneBit() != numberOfSuspensions)
            error(((((17594)).toLong())).toChar().uppercase() + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (false) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (((-17594)).div(0.12241196869660476).isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 20:27:19,090 [main:106] - GETTING String from InlinedInt
2021-03-11 20:27:19,095 [main:113] - Case = [public final val internal: kotlin.Int defined in InlinedInt[PropertyDescriptorImpl@1259794], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]]
2021-03-11 20:27:19,095 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]
2021-03-11 20:27:19,095 [main:117] - GENERATED CALL = ((InlinedInt(-17594))).internal.toString(((-17594)))
2021-03-11 20:27:19,095 [main:114] - replacement of fu5() of type String is "wgvog"
2021-03-11 20:27:19,248 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 20:27:19,248 [main:66] - Compilation checking started
2021-03-11 20:27:19,934 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { print("uofax")}
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = (foo<Kla0>({ Kla0.Kla1})).name.slice(buildSet<Int>({ println("owtiy")}))

fun box378(): String {
    var prope4 = (-17594).toByte().toString(((-17594)))
    fu2 {
        prope4 = fu5()
    }
    if (((foo<ULong>({ 7467005423461192445.toULong()}))).rangeTo((foo<ULong>({ 7467005423461192445.toULong()}))).equals("ukwkh")) return (fu1({ "vagtc"}, { "jcovl"})).toUpperCase()
    prope4 = "FAIL 2"
    fu2 {
        fu2 { require(false, { "sfizs"})}
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if ((InlinedInt(1265378532)).equals("ssndf").xor(true)) return prope4
    prope4 = ((-17594)).compareTo(-1028863766).toString(-17594)
    fu3 { require(false)}
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = "wgvog"
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        "jiicm"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "kqkbp"
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(330449219, {a: Int -> require(true)})}

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((-17594).toChar().plus((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594)))))
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = (true)?.compareTo(false).toString((-17594)))) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (foo<ULong>({ 7467005423461192445.toULong()})).rangeTo(foo<ULong>({ 7467005423461192445.toULong()})).equals("ucugw") } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = { repeat(1263814102, {a: Int -> require(true, { "jrwxy"})})}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (((17594)).toLong()).toShort().div(121)
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != (98550246.toUInt())?.toFloat().toRawBits()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if ((linkedMapOf<Pair<Byte, InlinedInt?>, String>())?.size.takeLowestOneBit() != numberOfSuspensions)
            error(((((17594)).toLong())).toChar().uppercase() + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (false) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (((-17594)).div(0.12241196869660476).isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:27:19,937 [main:107] - replacing (prope5, Result<Any?>)
2021-03-11 20:27:19,937 [main:50] - replacing prope5 Result<Any?>
2021-03-11 20:27:19,937 [main:54] - Getting value of type Result<Any?>
2021-03-11 20:27:20,087 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-11 20:27:20,241 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 20:27:20,248 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 20:27:20,578 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-11 20:27:20,583 [main:302] - generating value of type = Any false depth = 4
2021-03-11 20:27:20,583 [main:95] - GENERATED = runCatching<Any?>({ "mskhe"})
2021-03-11 20:27:20,583 [main:58] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ "mskhe"})
2021-03-11 20:27:20,583 [main:61] - GENERATED IS CALL =true
2021-03-11 20:27:20,605 [main:67] - randomType = InlinedString
2021-03-11 20:27:20,757 [main:302] - generating value of type = InlinedString false depth = 0
2021-03-11 20:27:20,762 [main:112] - generating klass InlinedString text = inline class InlinedString(val internal: String)
2021-03-11 20:27:20,905 [main:194] - Type params = []
2021-03-11 20:27:21,047 [main:302] - generating value of type = String true depth = 2
2021-03-11 20:27:21,061 [main:106] - GETTING Result<Any?> from InlinedInt
2021-03-11 20:27:21,067 [main:106] - GETTING Result<Any?> from Long
2021-03-11 20:27:21,102 [main:106] - GETTING Result<Any?> from Int
2021-03-11 20:27:21,143 [main:106] - GETTING Result<Any?> from Int
2021-03-11 20:27:21,144 [main:106] - GETTING Result<Any?> from InlinedInt
2021-03-11 20:27:21,145 [main:106] - GETTING Result<Any?> from Kla0
2021-03-11 20:27:21,171 [main:106] - GETTING Result<Any?> from InlinedString
2021-03-11 20:27:21,178 [main:106] - GETTING Result<Any?> from Int
2021-03-11 20:27:21,179 [main:106] - GETTING Result<Any?> from ULong
2021-03-11 20:27:21,208 [main:106] - GETTING Result<Any?> from Char
2021-03-11 20:27:21,237 [main:106] - GETTING Result<Any?> from Long
2021-03-11 20:27:21,238 [main:106] - GETTING Result<Any?> from Long
2021-03-11 20:27:21,239 [main:106] - GETTING Result<Any?> from String
2021-03-11 20:27:21,264 [main:106] - GETTING Result<Any?> from Int
2021-03-11 20:27:21,266 [main:106] - GETTING Result<Any?> from Int
2021-03-11 20:27:21,267 [main:106] - GETTING Result<Any?> from Int
2021-03-11 20:27:21,268 [main:106] - GETTING Result<Any?> from Int
2021-03-11 20:27:21,269 [main:106] - GETTING Result<Any?> from ULong
2021-03-11 20:27:21,270 [main:106] - GETTING Result<Any?> from InlinedInt
2021-03-11 20:27:21,271 [main:106] - GETTING Result<Any?> from String
2021-03-11 20:27:21,273 [main:106] - GETTING Result<Any?> from String
2021-03-11 20:27:21,274 [main:106] - GETTING Result<Any?> from String
2021-03-11 20:27:21,275 [main:106] - GETTING Result<Any?> from InlinedInt
2021-03-11 20:27:21,275 [main:114] - replacement of prope5 of type Result<Any?> is runCatching<Any?>({ "mskhe"})
2021-03-11 20:27:21,420 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:27:21,421 [main:66] - Compilation checking started
2021-03-11 20:27:22,118 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { print("uofax")}
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = (foo<Kla0>({ Kla0.Kla1})).name.slice(buildSet<Int>({ println("owtiy")}))

fun box378(): String {
    var prope4 = (-17594).toByte().toString(((-17594)))
    fu2 {
        prope4 = fu5()
    }
    if (((foo<ULong>({ 7467005423461192445.toULong()}))).rangeTo((foo<ULong>({ 7467005423461192445.toULong()}))).equals("ukwkh")) return (fu1({ "vagtc"}, { "jcovl"})).toUpperCase()
    prope4 = "FAIL 2"
    fu2 {
        fu2 { require(false, { "sfizs"})}
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if ((InlinedInt(1265378532)).equals("ssndf").xor(true)) return prope4
    prope4 = ((-17594)).compareTo(-1028863766).toString(-17594)
    fu3 { require(false)}
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = "wgvog"
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        runCatching<Any?>({ "mskhe"}).exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        "jiicm"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "kqkbp"
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(330449219, {a: Int -> require(true)})}

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((-17594).toChar().plus((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594)))))
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = (true)?.compareTo(false).toString((-17594)))) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (foo<ULong>({ 7467005423461192445.toULong()})).rangeTo(foo<ULong>({ 7467005423461192445.toULong()})).equals("ucugw") } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = { repeat(1263814102, {a: Int -> require(true, { "jrwxy"})})}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (((17594)).toLong()).toShort().div(121)
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != (98550246.toUInt())?.toFloat().toRawBits()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if ((linkedMapOf<Pair<Byte, InlinedInt?>, String>())?.size.takeLowestOneBit() != numberOfSuspensions)
            error(((((17594)).toLong())).toChar().uppercase() + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (false) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (((-17594)).div(0.12241196869660476).isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:27:22,121 [main:107] - replacing (prope4, String)
2021-03-11 20:27:22,121 [main:50] - replacing prope4 String
2021-03-11 20:27:22,121 [main:54] - Getting value of type String
2021-03-11 20:27:22,266 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:27:22,271 [main:58] - GENERATED VALUE OF TYPE String = "chvcm"
2021-03-11 20:27:22,271 [main:61] - GENERATED IS CALL =false
2021-03-11 20:27:22,292 [main:67] - randomType = InlinedInt
2021-03-11 20:27:22,435 [main:302] - generating value of type = InlinedInt false depth = 0
2021-03-11 20:27:22,440 [main:112] - generating klass InlinedInt text = inline class InlinedInt(val internal: Int)
2021-03-11 20:27:22,583 [main:194] - Type params = []
2021-03-11 20:27:22,729 [main:302] - generating value of type = Int true depth = 2
2021-03-11 20:27:22,740 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]
2021-03-11 20:27:22,889 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:27:22,895 [main:78] - Generated call from random type = (InlinedInt(-310918627)).internal.toString(-1035913712)
2021-03-11 20:27:22,896 [main:106] - GETTING String from InlinedInt
2021-03-11 20:27:22,902 [main:113] - Case = [public final val internal: kotlin.Int defined in InlinedInt[PropertyDescriptorImpl@1259794], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]]
2021-03-11 20:27:22,902 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@757ce498]
2021-03-11 20:27:22,903 [main:117] - GENERATED CALL = ((InlinedInt(-17594))).internal.toString(((-17594)))
2021-03-11 20:27:22,903 [main:114] - replacement of prope4 of type String is "chvcm"
2021-03-11 20:27:23,045 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 20:27:23,045 [main:66] - Compilation checking started
2021-03-11 20:27:23,483 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { print("uofax")}
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = (foo<Kla0>({ Kla0.Kla1})).name.slice(buildSet<Int>({ println("owtiy")}))

fun box378(): String {
    var prope4 = (-17594).toByte().toString(((-17594)))
    fu2 {
        prope4 = fu5()
    }
    if (((foo<ULong>({ 7467005423461192445.toULong()}))).rangeTo((foo<ULong>({ 7467005423461192445.toULong()}))).equals("ukwkh")) return (fu1({ "vagtc"}, { "jcovl"})).toUpperCase()
    "chvcm" = "FAIL 2"
    fu2 {
        fu2 { require(false, { "sfizs"})}
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if ((InlinedInt(1265378532)).equals("ssndf").xor(true)) return prope4
    prope4 = ((-17594)).compareTo(-1028863766).toString(-17594)
    fu3 { require(false)}
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = "wgvog"
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        runCatching<Any?>({ "mskhe"}).exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        "jiicm"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "kqkbp"
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(330449219, {a: Int -> require(true)})}

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((-17594).toChar().plus((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594)))))
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = (true)?.compareTo(false).toString((-17594)))) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (foo<ULong>({ 7467005423461192445.toULong()})).rangeTo(foo<ULong>({ 7467005423461192445.toULong()})).equals("ucugw") } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = { repeat(1263814102, {a: Int -> require(true, { "jrwxy"})})}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (((17594)).toLong()).toShort().div(121)
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != (98550246.toUInt())?.toFloat().toRawBits()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if ((linkedMapOf<Pair<Byte, InlinedInt?>, String>())?.size.takeLowestOneBit() != numberOfSuspensions)
            error(((((17594)).toLong())).toChar().uppercase() + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (false) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (((-17594)).div(0.12241196869660476).isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:27:23,486 [main:107] - replacing (prope9, Function0<Unit>)
2021-03-11 20:27:23,486 [main:50] - replacing prope9 Function0<Unit>
2021-03-11 20:27:23,486 [main:54] - Getting value of type Function0<Unit>
2021-03-11 20:27:23,630 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 20:27:23,635 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:27:23,786 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:27:23,792 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:27:24,301 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 20:27:24,306 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 20:27:24,312 [main:302] - generating value of type = Any false depth = 5
2021-03-11 20:27:24,312 [main:95] - GENERATED = check(false, { "gqgiu"})
2021-03-11 20:27:24,312 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false, { "gqgiu"})}
2021-03-11 20:27:24,312 [main:61] - GENERATED IS CALL =false
2021-03-11 20:27:24,323 [main:67] - randomType = Short
2021-03-11 20:27:24,466 [main:302] - generating value of type = Short true depth = 0
2021-03-11 20:27:24,504 [main:106] - GETTING Function0<Unit> from InlinedInt
2021-03-11 20:27:24,509 [main:106] - GETTING Function0<Unit> from String
2021-03-11 20:27:24,525 [main:106] - GETTING Function0<Unit> from Long
2021-03-11 20:27:24,553 [main:106] - GETTING Function0<Unit> from Long
2021-03-11 20:27:24,554 [main:106] - GETTING Function0<Unit> from String
2021-03-11 20:27:24,555 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:27:24,585 [main:106] - GETTING Function0<Unit> from InlinedInt
2021-03-11 20:27:24,586 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:27:24,587 [main:106] - GETTING Function0<Unit> from String
2021-03-11 20:27:24,588 [main:106] - GETTING Function0<Unit> from InlinedString
2021-03-11 20:27:24,593 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:27:24,594 [main:106] - GETTING Function0<Unit> from String
2021-03-11 20:27:24,595 [main:106] - GETTING Function0<Unit> from Char
2021-03-11 20:27:24,612 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:27:24,613 [main:106] - GETTING Function0<Unit> from Long
2021-03-11 20:27:24,614 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:27:24,615 [main:106] - GETTING Function0<Unit> from InlinedInt
2021-03-11 20:27:24,616 [main:106] - GETTING Function0<Unit> from ULong
2021-03-11 20:27:24,639 [main:106] - GETTING Function0<Unit> from Kla0
2021-03-11 20:27:24,657 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:27:24,658 [main:106] - GETTING Function0<Unit> from ULong
2021-03-11 20:27:24,659 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:27:24,660 [main:106] - GETTING Function0<Unit> from InlinedInt
2021-03-11 20:27:24,660 [main:114] - replacement of prope9 of type Function0<Unit> is { check(false, { "gqgiu"})}
2021-03-11 20:27:24,802 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 20:27:24,802 [main:66] - Compilation checking started
2021-03-11 20:27:25,265 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { print("uofax")}
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = (foo<Kla0>({ Kla0.Kla1})).name.slice(buildSet<Int>({ println("owtiy")}))

fun box378(): String {
    var prope4 = (-17594).toByte().toString(((-17594)))
    fu2 {
        prope4 = fu5()
    }
    if (((foo<ULong>({ 7467005423461192445.toULong()}))).rangeTo((foo<ULong>({ 7467005423461192445.toULong()}))).equals("ukwkh")) return (fu1({ "vagtc"}, { "jcovl"})).toUpperCase()
    prope4 = "FAIL 2"
    fu2 {
        fu2 { require(false, { "sfizs"})}
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if ((InlinedInt(1265378532)).equals("ssndf").xor(true)) return prope4
    prope4 = ((-17594)).compareTo(-1028863766).toString(-17594)
    fu3 { require(false)}
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = "wgvog"
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        runCatching<Any?>({ "mskhe"}).exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        "jiicm"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "kqkbp"
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(330449219, {a: Int -> require(true)})}

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((-17594).toChar().plus((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594)))))
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = (true)?.compareTo(false).toString((-17594)))) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (foo<ULong>({ 7467005423461192445.toULong()})).rangeTo(foo<ULong>({ 7467005423461192445.toULong()})).equals("ucugw") } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = { repeat(1263814102, {a: Int -> require(true, { "jrwxy"})})}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (((17594)).toLong()).toShort().div(121)
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != (98550246.toUInt())?.toFloat().toRawBits()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if ((linkedMapOf<Pair<Byte, InlinedInt?>, String>())?.size.takeLowestOneBit() != numberOfSuspensions)
            error(((((17594)).toLong())).toChar().uppercase() + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (false) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (((-17594)).div(0.12241196869660476).isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.{ check(false, { "gqgiu"})} = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:27:25,268 [main:107] - replacing (method, String)
2021-03-11 20:27:25,268 [main:50] - replacing method String
2021-03-11 20:27:25,268 [main:54] - Getting value of type String
2021-03-11 20:27:25,412 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:27:25,417 [main:58] - GENERATED VALUE OF TYPE String = "sdwew"
2021-03-11 20:27:25,417 [main:61] - GENERATED IS CALL =false
2021-03-11 20:27:25,428 [main:67] - randomType = UInt
2021-03-11 20:27:25,570 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 20:27:25,603 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@22567712]
2021-03-11 20:27:25,603 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57d8c30b]
2021-03-11 20:27:25,603 [main:78] - Generated call from random type = (764980774.toUInt()).toByte().toString(InlinedInt(-463791997).internal)
2021-03-11 20:27:25,604 [main:106] - GETTING String from Kla0
2021-03-11 20:27:25,622 [main:113] - Case = [public final val name: kotlin.String defined in Kla0[DeserializedPropertyDescriptor@5a595bf9], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@234bf75d]]
2021-03-11 20:27:25,622 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@234bf75d]
2021-03-11 20:27:25,764 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:27:25,765 [main:117] - GENERATED CALL = (foo<Kla0>({ Kla0.Kla1})).name.plus("jwdzc")
2021-03-11 20:27:25,765 [main:113] - Case = [public final val name: kotlin.String defined in Kla0[DeserializedPropertyDescriptor@5a595bf9], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@180e599e]]
2021-03-11 20:27:25,765 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@180e599e]
2021-03-11 20:27:25,765 [main:117] - GENERATED CALL = (foo<Kla0>({ Kla0.Kla1})).name.trim()
2021-03-11 20:27:25,765 [main:113] - Case = [public final val name: kotlin.String defined in Kla0[DeserializedPropertyDescriptor@5a595bf9], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7306c6d8]]
2021-03-11 20:27:25,765 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7306c6d8]
2021-03-11 20:27:25,907 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 20:27:25,913 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 20:27:25,919 [main:117] - GENERATED CALL = (foo<Kla0>({ Kla0.Kla1})).name.filterNot({a: Char -> false})
2021-03-11 20:27:25,919 [main:113] - Case = [public final val name: kotlin.String defined in Kla0[DeserializedPropertyDescriptor@5a595bf9], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3999a215]]
2021-03-11 20:27:25,919 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3999a215]
2021-03-11 20:27:25,919 [main:117] - GENERATED CALL = (foo<Kla0>({ Kla0.Kla1})).name.prependIndent((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))))
2021-03-11 20:27:25,919 [main:113] - Case = [public final val name: kotlin.String defined in Kla0[DeserializedPropertyDescriptor@5a595bf9], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b92e35]]
2021-03-11 20:27:25,919 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b92e35]
2021-03-11 20:27:25,919 [main:117] - GENERATED CALL = (foo<Kla0>({ Kla0.Kla1})).name.padStart(-17594, (((17594)).toLong()).toChar())
2021-03-11 20:27:25,919 [main:113] - Case = [public final val name: kotlin.String defined in Kla0[DeserializedPropertyDescriptor@5a595bf9], @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c3cdca2]]
2021-03-11 20:27:25,920 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c3cdca2]
2021-03-11 20:27:25,920 [main:117] - GENERATED CALL = (foo<Kla0>({ Kla0.Kla1})).name.substring(InlinedInt(-463791997).internal)
2021-03-11 20:27:25,920 [main:113] - Case = [public final val name: kotlin.String defined in Kla0[DeserializedPropertyDescriptor@5a595bf9], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e3dabaa]]
2021-03-11 20:27:25,920 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e3dabaa]
2021-03-11 20:27:25,920 [main:117] - GENERATED CALL = (foo<Kla0>({ Kla0.Kla1})).name.substringAfterLast((((17594)).toLong()).toChar(), (InlinedInt(-17594))?.internal.toString(-17594))
2021-03-11 20:27:25,920 [main:113] - Case = [public final val name: kotlin.String defined in Kla0[DeserializedPropertyDescriptor@5a595bf9], @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3477cd10]]
2021-03-11 20:27:25,920 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3477cd10]
2021-03-11 20:27:26,063 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 20:27:26,072 [main:117] - GENERATED CALL = (foo<Kla0>({ Kla0.Kla1})).name.replaceRange((InlinedInt(-17594))?.internal, (17594), "vsuvl")
2021-03-11 20:27:26,073 [main:113] - Case = [public final val name: kotlin.String defined in Kla0[DeserializedPropertyDescriptor@5a595bf9], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1700d8a1]]
2021-03-11 20:27:26,073 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1700d8a1]
2021-03-11 20:27:26,073 [main:117] - GENERATED CALL = (foo<Kla0>({ Kla0.Kla1})).name.substringBeforeLast((((17594)).toLong()).toChar(), (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))))
2021-03-11 20:27:26,073 [main:113] - Case = [public final val name: kotlin.String defined in Kla0[DeserializedPropertyDescriptor@5a595bf9], public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36620397]]
2021-03-11 20:27:26,073 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36620397]
2021-03-11 20:27:26,215 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 20:27:26,224 [main:117] - GENERATED CALL = (foo<Kla0>({ Kla0.Kla1})).name.removeSuffix("dcsni")
2021-03-11 20:27:26,224 [main:114] - replacement of method of type String is (foo<Kla0>({ Kla0.Kla1})).name.trim()
2021-03-11 20:27:26,365 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:27:26,366 [main:66] - Compilation checking started
2021-03-11 20:27:27,072 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { print("uofax")}
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = (foo<Kla0>({ Kla0.Kla1})).name.slice(buildSet<Int>({ println("owtiy")}))

fun box378(): String {
    var prope4 = (-17594).toByte().toString(((-17594)))
    fu2 {
        prope4 = fu5()
    }
    if (((foo<ULong>({ 7467005423461192445.toULong()}))).rangeTo((foo<ULong>({ 7467005423461192445.toULong()}))).equals("ukwkh")) return (fu1({ "vagtc"}, { "jcovl"})).toUpperCase()
    prope4 = "FAIL 2"
    fu2 {
        fu2 { require(false, { "sfizs"})}
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if ((InlinedInt(1265378532)).equals("ssndf").xor(true)) return prope4
    prope4 = ((-17594)).compareTo(-1028863766).toString(-17594)
    fu3 { require(false)}
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = "wgvog"
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        runCatching<Any?>({ "mskhe"}).exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        "jiicm"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "kqkbp"
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(330449219, {a: Int -> require(true)})}

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((-17594).toChar().plus((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594)))))
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith((foo<Kla0>({ Kla0.Kla1})).name.trim()) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = (true)?.compareTo(false).toString((-17594)))) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (foo<ULong>({ 7467005423461192445.toULong()})).rangeTo(foo<ULong>({ 7467005423461192445.toULong()})).equals("ucugw") } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = { repeat(1263814102, {a: Int -> require(true, { "jrwxy"})})}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (((17594)).toLong()).toShort().div(121)
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != (98550246.toUInt())?.toFloat().toRawBits()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if ((linkedMapOf<Pair<Byte, InlinedInt?>, String>())?.size.takeLowestOneBit() != numberOfSuspensions)
            error(((((17594)).toLong())).toChar().uppercase() + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (false) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (((-17594)).div(0.12241196869660476).isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:27:27,075 [main:107] - replacing (prope5, Any?)
2021-03-11 20:27:27,075 [main:50] - replacing prope5 Any?
2021-03-11 20:27:27,075 [main:54] - Getting value of type Any?
2021-03-11 20:27:27,223 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:27:27,223 [main:58] - GENERATED VALUE OF TYPE Any? = "ttuqv"
2021-03-11 20:27:27,223 [main:61] - GENERATED IS CALL =false
2021-03-11 20:27:27,419 [main:67] - randomType = LinkedHashSet<Long>
2021-03-11 20:27:27,566 [main:302] - generating value of type = LinkedHashSet<Long> false depth = 0
2021-03-11 20:27:27,719 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<Long> = TODO()
2021-03-11 20:27:27,726 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<Long> = TODO()
2021-03-11 20:27:27,878 [main:95] - GENERATED = linkedSetOf<Long>()
2021-03-11 20:27:27,994 [main:149] - GENERATING call of type @kotlin.js.JsName public open fun toJSON(): kotlin.Any defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@333c1c7]
2021-03-11 20:27:27,994 [main:78] - Generated call from random type = (linkedSetOf<Long>()).toJSON()
2021-03-11 20:27:27,995 [main:106] - GETTING Any? from Long
2021-03-11 20:27:28,024 [main:106] - GETTING Any? from InlinedInt
2021-03-11 20:27:28,028 [main:106] - GETTING Any? from Int
2021-03-11 20:27:28,057 [main:106] - GETTING Any? from ULong
2021-03-11 20:27:28,105 [main:106] - GETTING Any? from InlinedInt
2021-03-11 20:27:28,106 [main:106] - GETTING Any? from String
2021-03-11 20:27:28,122 [main:106] - GETTING Any? from Char
2021-03-11 20:27:28,139 [main:106] - GETTING Any? from InlinedInt
2021-03-11 20:27:28,140 [main:106] - GETTING Any? from Int
2021-03-11 20:27:28,141 [main:106] - GETTING Any? from Long
2021-03-11 20:27:28,141 [main:106] - GETTING Any? from String
2021-03-11 20:27:28,142 [main:106] - GETTING Any? from Int
2021-03-11 20:27:28,143 [main:106] - GETTING Any? from Int
2021-03-11 20:27:28,143 [main:106] - GETTING Any? from Int
2021-03-11 20:27:28,144 [main:106] - GETTING Any? from InlinedInt
2021-03-11 20:27:28,145 [main:106] - GETTING Any? from String
2021-03-11 20:27:28,145 [main:106] - GETTING Any? from Int
2021-03-11 20:27:28,146 [main:106] - GETTING Any? from InlinedString
2021-03-11 20:27:28,151 [main:106] - GETTING Any? from Long
2021-03-11 20:27:28,152 [main:106] - GETTING Any? from Int
2021-03-11 20:27:28,152 [main:106] - GETTING Any? from ULong
2021-03-11 20:27:28,153 [main:106] - GETTING Any? from Kla0
2021-03-11 20:27:28,170 [main:113] - Case = [protected final fun clone(): kotlin.Any defined in Kla0[DeserializedSimpleFunctionDescriptor@3b5c1a2b]]
2021-03-11 20:27:28,170 [main:149] - GENERATING call of type protected final fun clone(): kotlin.Any defined in Kla0[DeserializedSimpleFunctionDescriptor@3b5c1a2b]
2021-03-11 20:27:28,171 [main:117] - GENERATED CALL = (foo<Kla0>({ Kla0.Kla1}))?.clone()
2021-03-11 20:27:28,171 [main:114] - replacement of prope5 of type Any? is "ttuqv"
2021-03-11 20:27:28,313 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 20:27:28,314 [main:66] - Compilation checking started
2021-03-11 20:27:28,757 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { print("uofax")}
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = (foo<Kla0>({ Kla0.Kla1})).name.slice(buildSet<Int>({ println("owtiy")}))

fun box378(): String {
    var prope4 = (-17594).toByte().toString(((-17594)))
    fu2 {
        prope4 = fu5()
    }
    if (((foo<ULong>({ 7467005423461192445.toULong()}))).rangeTo((foo<ULong>({ 7467005423461192445.toULong()}))).equals("ukwkh")) return (fu1({ "vagtc"}, { "jcovl"})).toUpperCase()
    prope4 = "FAIL 2"
    fu2 {
        fu2 { require(false, { "sfizs"})}
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if ((InlinedInt(1265378532)).equals("ssndf").xor(true)) return prope4
    prope4 = ((-17594)).compareTo(-1028863766).toString(-17594)
    fu3 { require(false)}
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = "wgvog"
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        runCatching<Any?>({ "mskhe"}).exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        "jiicm"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this."ttuqv" = "kqkbp"
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(330449219, {a: Int -> require(true)})}

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((-17594).toChar().plus((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594)))))
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith((foo<Kla0>({ Kla0.Kla1})).name.trim()) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = (true)?.compareTo(false).toString((-17594)))) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (foo<ULong>({ 7467005423461192445.toULong()})).rangeTo(foo<ULong>({ 7467005423461192445.toULong()})).equals("ucugw") } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = { repeat(1263814102, {a: Int -> require(true, { "jrwxy"})})}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (((17594)).toLong()).toShort().div(121)
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != (98550246.toUInt())?.toFloat().toRawBits()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if ((linkedMapOf<Pair<Byte, InlinedInt?>, String>())?.size.takeLowestOneBit() != numberOfSuspensions)
            error(((((17594)).toLong())).toChar().uppercase() + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (false) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (((-17594)).div(0.12241196869660476).isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:27:28,761 [main:107] - replacing (prope5.getOrThrow(), Ty0)
2021-03-11 20:27:28,761 [main:50] - replacing prope5.getOrThrow() Ty0
2021-03-11 20:27:28,761 [main:54] - Getting value of type Ty0
2021-03-11 20:27:28,904 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 20:27:28,912 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 20:27:29,469 [main:67] - randomType = Kla5<Int?>?
2021-03-11 20:27:29,612 [main:302] - generating value of type = Kla5<Int?> false depth = 0
2021-03-11 20:27:29,617 [main:112] - generating klass Kla5 text = abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 20:27:30,134 [main:302] - generating value of type = Kla8 false depth = 2
2021-03-11 20:27:30,140 [main:112] - generating klass Kla8 text = object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}
2021-03-11 20:27:30,154 [main:106] - GETTING Ty0 from ULong
2021-03-11 20:27:30,175 [main:106] - GETTING Ty0 from InlinedInt
2021-03-11 20:27:30,180 [main:106] - GETTING Ty0 from InlinedInt
2021-03-11 20:27:30,181 [main:106] - GETTING Ty0 from Int
2021-03-11 20:27:30,215 [main:106] - GETTING Ty0 from String
2021-03-11 20:27:30,235 [main:106] - GETTING Ty0 from Int
2021-03-11 20:27:30,235 [main:106] - GETTING Ty0 from Long
2021-03-11 20:27:30,277 [main:106] - GETTING Ty0 from String
2021-03-11 20:27:30,278 [main:106] - GETTING Ty0 from Kla0
2021-03-11 20:27:30,301 [main:106] - GETTING Ty0 from InlinedInt
2021-03-11 20:27:30,302 [main:106] - GETTING Ty0 from Int
2021-03-11 20:27:30,302 [main:106] - GETTING Ty0 from Int
2021-03-11 20:27:30,303 [main:106] - GETTING Ty0 from Int
2021-03-11 20:27:30,303 [main:106] - GETTING Ty0 from Long
2021-03-11 20:27:30,304 [main:106] - GETTING Ty0 from String
2021-03-11 20:27:30,304 [main:106] - GETTING Ty0 from Long
2021-03-11 20:27:30,305 [main:106] - GETTING Ty0 from Int
2021-03-11 20:27:30,306 [main:106] - GETTING Ty0 from InlinedString
2021-03-11 20:27:30,311 [main:106] - GETTING Ty0 from Int
2021-03-11 20:27:30,312 [main:106] - GETTING Ty0 from InlinedInt
2021-03-11 20:27:30,312 [main:106] - GETTING Ty0 from ULong
2021-03-11 20:27:30,313 [main:106] - GETTING Ty0 from String
2021-03-11 20:27:30,313 [main:106] - GETTING Ty0 from Char
2021-03-11 20:27:30,340 [main:111] - Cant find and generate replacement for prope5.getOrThrow() type Ty0
2021-03-11 20:27:30,340 [main:107] - replacing (getOrThrow(), Ty0)
2021-03-11 20:27:30,340 [main:50] - replacing getOrThrow() Ty0
2021-03-11 20:27:30,340 [main:54] - Getting value of type Ty0
2021-03-11 20:27:30,490 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 20:27:30,498 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 20:27:31,084 [main:67] - randomType = Map<Short?, Double>?
2021-03-11 20:27:31,085 [main:106] - GETTING Ty0 from Int
2021-03-11 20:27:31,118 [main:106] - GETTING Ty0 from Char
2021-03-11 20:27:31,159 [main:106] - GETTING Ty0 from String
2021-03-11 20:27:31,176 [main:106] - GETTING Ty0 from String
2021-03-11 20:27:31,176 [main:106] - GETTING Ty0 from InlinedInt
2021-03-11 20:27:31,181 [main:106] - GETTING Ty0 from Long
2021-03-11 20:27:31,209 [main:106] - GETTING Ty0 from Int
2021-03-11 20:27:31,209 [main:106] - GETTING Ty0 from Int
2021-03-11 20:27:31,210 [main:106] - GETTING Ty0 from ULong
2021-03-11 20:27:31,231 [main:106] - GETTING Ty0 from InlinedInt
2021-03-11 20:27:31,232 [main:106] - GETTING Ty0 from InlinedString
2021-03-11 20:27:31,236 [main:106] - GETTING Ty0 from Kla0
2021-03-11 20:27:31,254 [main:106] - GETTING Ty0 from Int
2021-03-11 20:27:31,254 [main:106] - GETTING Ty0 from Long
2021-03-11 20:27:31,255 [main:106] - GETTING Ty0 from String
2021-03-11 20:27:31,255 [main:106] - GETTING Ty0 from String
2021-03-11 20:27:31,256 [main:106] - GETTING Ty0 from Long
2021-03-11 20:27:31,257 [main:106] - GETTING Ty0 from InlinedInt
2021-03-11 20:27:31,257 [main:106] - GETTING Ty0 from ULong
2021-03-11 20:27:31,258 [main:106] - GETTING Ty0 from Int
2021-03-11 20:27:31,258 [main:106] - GETTING Ty0 from Int
2021-03-11 20:27:31,259 [main:106] - GETTING Ty0 from Int
2021-03-11 20:27:31,259 [main:106] - GETTING Ty0 from InlinedInt
2021-03-11 20:27:31,259 [main:111] - Cant find and generate replacement for getOrThrow() type Ty0
2021-03-11 20:27:31,259 [main:107] - replacing (this, Kla4)
2021-03-11 20:27:31,260 [main:50] - replacing this Kla4
2021-03-11 20:27:31,260 [main:54] - Getting value of type Kla4
2021-03-11 20:27:31,405 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 20:27:31,410 [main:112] - generating klass Kla4 text = class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = "kqkbp"
    }

    var prope5: Any? = null
}
2021-03-11 20:27:31,410 [main:58] - GENERATED VALUE OF TYPE Kla4 = Kla4()
2021-03-11 20:27:31,410 [main:61] - GENERATED IS CALL =true
2021-03-11 20:27:31,584 [main:67] - randomType = UShort
2021-03-11 20:27:31,728 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 20:27:31,762 [main:106] - GETTING Kla4 from String
2021-03-11 20:27:31,779 [main:106] - GETTING Kla4 from Int
2021-03-11 20:27:31,808 [main:106] - GETTING Kla4 from Int
2021-03-11 20:27:31,808 [main:106] - GETTING Kla4 from InlinedInt
2021-03-11 20:27:31,813 [main:106] - GETTING Kla4 from Int
2021-03-11 20:27:31,813 [main:106] - GETTING Kla4 from String
2021-03-11 20:27:31,814 [main:106] - GETTING Kla4 from Int
2021-03-11 20:27:31,815 [main:106] - GETTING Kla4 from String
2021-03-11 20:27:31,815 [main:106] - GETTING Kla4 from ULong
2021-03-11 20:27:31,837 [main:106] - GETTING Kla4 from Long
2021-03-11 20:27:31,864 [main:106] - GETTING Kla4 from Char
2021-03-11 20:27:31,880 [main:106] - GETTING Kla4 from Long
2021-03-11 20:27:31,881 [main:106] - GETTING Kla4 from String
2021-03-11 20:27:31,882 [main:106] - GETTING Kla4 from InlinedInt
2021-03-11 20:27:31,882 [main:106] - GETTING Kla4 from Int
2021-03-11 20:27:31,883 [main:106] - GETTING Kla4 from Long
2021-03-11 20:27:31,883 [main:106] - GETTING Kla4 from ULong
2021-03-11 20:27:31,884 [main:106] - GETTING Kla4 from InlinedString
2021-03-11 20:27:31,889 [main:106] - GETTING Kla4 from Int
2021-03-11 20:27:31,889 [main:106] - GETTING Kla4 from InlinedInt
2021-03-11 20:27:31,890 [main:106] - GETTING Kla4 from InlinedInt
2021-03-11 20:27:31,891 [main:106] - GETTING Kla4 from Kla0
2021-03-11 20:27:31,908 [main:106] - GETTING Kla4 from Int
2021-03-11 20:27:31,908 [main:114] - replacement of this of type Kla4 is Kla4()
2021-03-11 20:27:32,053 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:27:32,053 [main:66] - Compilation checking started
2021-03-11 20:27:32,754 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline class InlinedInt(val internal: Int)
inline class InlinedString(val internal: String)

inline fun <T> foo(callback: () -> T): T {
    return callback()
}

inline fun bar(callback: () -> InlinedInt): InlinedInt {
    return callback()
}

inline fun baz(callback: () -> InlinedString): InlinedString {
    return callback()
}

fun test(i: InlinedInt, s: InlinedString) {
    foo { i }
    bar { i }

    foo { s }
    baz { s }
}

inline fun fu0() {}

enum class Kla0 {
    Kla1
}

fun box758(): String {
    return  ((-17594)).toLong().toString(InlinedInt(1265378532).internal)
}

fun fu1(
    f1: () -> String = { { "ayhpl"}() },
    f2: () -> String = { "pveid"}
): String = { "mhmtn"}()

fun box912(): String {
    try {
        (InlinedInt(-17594))?.internal.toString(-17594)
        return "Fail: f() should have thrown NPE"
    } catch (e : Exception) {
    }
    return (foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))) + fu1(f1 = { (((17594)).toLong()).toChar().titlecase() })
}

inline fun fu2(crossinline runner: suspend () -> Unit)  {
    val prope2 : suspend () -> Unit = { runner() }
    fu4 { print("uofax")}
}

interface Kla2 {
    suspend fun fu8()
}

inline fun fu3(crossinline c: suspend () -> Unit) {
    val prope3 = object: Kla2 {
        override suspend fun fu8() {
            c()
        }
    }
    fu4 { prope3.fu8() }
}

fun fu4(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

suspend fun fu5() = (foo<Kla0>({ Kla0.Kla1})).name.slice(buildSet<Int>({ println("owtiy")}))

fun box378(): String {
    var prope4 = (-17594).toByte().toString(((-17594)))
    fu2 {
        prope4 = fu5()
    }
    if (((foo<ULong>({ 7467005423461192445.toULong()}))).rangeTo((foo<ULong>({ 7467005423461192445.toULong()}))).equals("ukwkh")) return (fu1({ "vagtc"}, { "jcovl"})).toUpperCase()
    prope4 = "FAIL 2"
    fu2 {
        fu2 { require(false, { "sfizs"})}
    }
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 3"
    fu3 {
        prope4 = fu5()
    }
    if ((InlinedInt(1265378532)).equals("ssndf").xor(true)) return prope4
    prope4 = ((-17594)).compareTo(-1028863766).toString(-17594)
    fu3 { require(false)}
    if (prope4 != "OK") return prope4
    prope4 = "FAIL 5"
    fu2 {
        fu3 {
            fu2 {
                fu3 {
                    fu2 {
                        fu3 {
                            prope4 = "wgvog"
                        }
                    }
                }
            }
        }
    }
    return prope4
}

fun <Ty0> fu6(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        x(prope5.getOrThrow())
    }
}

fun fu7(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        runCatching<Any?>({ "mskhe"}).exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})})
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope5: Result<Any?>) {
        "jiicm"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla4().prope5 = "kqkbp"
    }

    var prope5: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu9(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(330449219, {a: Int -> require(true)})}

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((-17594).toChar().plus((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594)))))
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu12(method: String) {
        prope6.find { it?.methodName?.startsWith((foo<Kla0>({ Kla0.Kla1})).name.trim()) == true }?.let { error((foo<Kla0>({ Kla0.Kla1})).name.replaceIndentByMargin((foo<ULong>({ 7467005423461192445.toULong()})).toString(((-17594))), InlinedString("tcuco").internal) +
                prope6.joinToString(separator = (true)?.compareTo(false).toString((-17594)))) }
    }

    fun fu13(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == (foo<ULong>({ 7467005423461192445.toULong()})).rangeTo(foo<ULong>({ 7467005423461192445.toULong()})).equals("ucugw") } ?: error((InlinedInt(-463791997).internal).compareTo(InlinedInt(-463791997).internal).toString(((-17594))))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu14() {
        prope7 = 0
        prope8 = false
        prope9 = { repeat(1263814102, {a: Int -> require(true, { "jrwxy"})})}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        (((17594)).toLong()).toShort().div(121)
        prope9 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != (98550246.toUInt())?.toFloat().toRawBits()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ((((17594)).toLong())).toString(305377566) + prope7)
            prope9()
        }
        if ((linkedMapOf<Pair<Byte, InlinedInt?>, String>())?.size.takeLowestOneBit() != numberOfSuspensions)
            error(((((17594)).toLong())).toChar().uppercase() + (((17594)).toLong()).toString(-1178048985) + prope7)
        if (false) error((((17594)).toLong()).toChar().lowercase())
        prope9()
        if (((-17594)).div(0.12241196869660476).isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:27:32,757 [main:107] - replacing (runCatching<Any?>({ "mskhe"}).exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})}), Unit?)
2021-03-11 20:27:32,758 [main:50] - replacing runCatching<Any?>({ "mskhe"}).exceptionOrNull()?.let({a: Throwable -> repeat(-69918438, {a: Int -> print("hzcbv")})}) Unit?
2021-03-11 20:27:32,758 [main:54] - Getting value of type Unit?
