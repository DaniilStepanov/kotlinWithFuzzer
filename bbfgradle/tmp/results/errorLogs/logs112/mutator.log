2021-03-12 10:42:47,357 [main:66] - Compilation checking started
2021-03-12 10:42:48,922 [main:112] - generating klass Local text = open class Local {
        fun result() = this@bar
    }
2021-03-12 10:42:48,924 [main:112] - generating klass Outer text = class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }
2021-03-12 10:42:48,924 [main:112] - generating klass Inner text = inner class Inner : Local() {
            fun outer() = this@Outer
        }
2021-03-12 10:42:49,255 [main:43] - GENERATING CALL OF fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}
2021-03-12 10:42:49,260 [main:61] - WITHOUT TYPE PARAMS = fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}
2021-03-12 10:42:49,426 [main:302] - generating value of type = String true depth = 1
2021-03-12 10:42:49,432 [main:95] - GENERATED = "ewtpt".bar()
2021-03-12 10:42:49,572 [main:45] - Trying to change 6 nodes
2021-03-12 10:42:49,575 [main:53] - replacing (this, String)
2021-03-12 10:42:49,576 [main:50] - replacing this String
2021-03-12 10:42:49,577 [main:54] - Getting value of type String
2021-03-12 10:42:49,734 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:42:49,735 [main:58] - GENERATED VALUE OF TYPE String = "tsnao"
2021-03-12 10:42:49,736 [main:61] - GENERATED IS CALL =false
2021-03-12 10:42:50,458 [main:67] - randomType = Byte
2021-03-12 10:42:50,560 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 10:42:50,775 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@504dda01]
2021-03-12 10:42:50,906 [main:302] - generating value of type = Long true depth = 0
2021-03-12 10:42:50,907 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4117fd79]
2021-03-12 10:42:51,041 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:42:51,044 [main:78] - Generated call from random type = (14).div(-2453247527288078457).toString(57987796)
2021-03-12 10:42:51,044 [main:106] - GETTING String from String
2021-03-12 10:42:51,106 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e695432]]
2021-03-12 10:42:51,106 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e695432]
2021-03-12 10:42:51,204 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:42:51,205 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:42:51,208 [main:117] - GENERATED CALL = ("ewtpt".bar()).dropWhile({a: Char -> true})
2021-03-12 10:42:51,208 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@372aaebd]]
2021-03-12 10:42:51,208 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@372aaebd]
2021-03-12 10:42:51,323 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:42:51,470 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 10:42:51,473 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 10:42:51,724 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 10:42:51,840 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 10:42:51,843 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 10:42:52,072 [main:302] - generating value of type = CharSequence false depth = 6
2021-03-12 10:42:52,085 [main:95] - GENERATED = StringBuilder(StringBuilder())
2021-03-12 10:42:52,086 [main:95] - GENERATED = StringBuilder(StringBuilder(StringBuilder()))
2021-03-12 10:42:52,187 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:42:52,190 [main:117] - GENERATED CALL = ("ewtpt".bar()).commonSuffixWith(StringBuilder(StringBuilder(StringBuilder())), true)
2021-03-12 10:42:52,190 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3295bad5]]
2021-03-12 10:42:52,190 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3295bad5]
2021-03-12 10:42:52,278 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:42:52,367 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:42:52,369 [main:117] - GENERATED CALL = ("ewtpt".bar()).removeRange(-2131722104, -140088170)
2021-03-12 10:42:52,369 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a1e902a]]
2021-03-12 10:42:52,369 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a1e902a]
2021-03-12 10:42:52,370 [main:117] - GENERATED CALL = ("ewtpt".bar()).reversed()
2021-03-12 10:42:52,370 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36df92ac]]
2021-03-12 10:42:52,370 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735]
2021-03-12 10:42:52,492 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:42:52,587 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:42:52,587 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36df92ac]
2021-03-12 10:42:52,668 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:42:52,792 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 10:42:52,796 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 10:42:52,994 [main:302] - generating value of type = Int true depth = 3
2021-03-12 10:42:52,996 [main:95] - GENERATED = StringBuilder(747634322)
2021-03-12 10:42:53,109 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:42:53,111 [main:117] - GENERATED CALL = ("ewtpt".bar()).subSequence(-674141660, 709103683).commonPrefixWith(StringBuilder(747634322), false)
2021-03-12 10:42:53,111 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3cd33897], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27ff17db]]
2021-03-12 10:42:53,111 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3cd33897]
2021-03-12 10:42:53,200 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:42:53,201 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27ff17db]
2021-03-12 10:42:53,202 [main:117] - GENERATED CALL = ("ewtpt".bar()).get(-1880686237).titlecase()
2021-03-12 10:42:53,202 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64c1f475]]
2021-03-12 10:42:53,203 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64c1f475]
2021-03-12 10:42:53,203 [main:117] - GENERATED CALL = ("ewtpt".bar()).trim()
2021-03-12 10:42:53,203 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@33f341c7]]
2021-03-12 10:42:53,204 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@33f341c7]
2021-03-12 10:42:53,302 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:42:53,303 [main:117] - GENERATED CALL = ("ewtpt".bar()).plus("qxhmh")
2021-03-12 10:42:53,304 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@614b3201]]
2021-03-12 10:42:53,304 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@614b3201]
2021-03-12 10:42:53,305 [main:117] - GENERATED CALL = ("ewtpt".bar()).lowercase()
2021-03-12 10:42:53,305 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@14d954b4], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4203bb7]]
2021-03-12 10:42:53,305 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4203bb7]
2021-03-12 10:42:53,427 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:42:53,429 [main:117] - GENERATED CALL = ("ewtpt".bar()).length.toString(-246953170)
2021-03-12 10:42:53,429 [main:61] - replacement of this of type String is ("ewtpt".bar()).get(-1880686237).titlecase()
2021-03-12 10:42:53,548 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:42:53,549 [main:66] - Compilation checking started
2021-03-12 10:42:53,551 [main:71] - Wrong syntax or breaks conditions
2021-03-12 10:42:53,551 [main:49] - Result = false
Text:
fun String.bar(): String {
    open class Local {
        fun result() = ("ewtpt".bar()).get(-1880686237).titlecase()@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()


2021-03-12 10:42:53,552 [main:53] - replacing (Outer().Inner().result(), String)
2021-03-12 10:42:53,552 [main:50] - replacing Outer().Inner().result() String
2021-03-12 10:42:53,552 [main:54] - Getting value of type String
2021-03-12 10:42:53,632 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:42:53,632 [main:58] - GENERATED VALUE OF TYPE String = "pjltc"
2021-03-12 10:42:53,632 [main:61] - GENERATED IS CALL =false
2021-03-12 10:42:54,062 [main:67] - randomType = HashMap<Short?, String?>
2021-03-12 10:42:54,142 [main:302] - generating value of type = HashMap<Short?, String?> false depth = 0
2021-03-12 10:42:54,255 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Short?, String?>): HashMap<Short?, Strg?> = TODO()
2021-03-12 10:42:54,258 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Short?, String?>): HashMap<Short?, Strg?> = TODO()
2021-03-12 10:42:54,354 [main:302] - generating value of type = Pair<Short?, String?> false depth = 3
2021-03-12 10:42:54,445 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Short?, second: String?): Pair<Short?, String?> = TODO()
2021-03-12 10:42:54,448 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Short?, second: String?): Pair<Short?, String?> = TODO()
2021-03-12 10:42:54,543 [main:302] - generating value of type = Short true depth = 6
2021-03-12 10:42:54,543 [main:302] - generating value of type = String true depth = 6
2021-03-12 10:42:54,544 [main:95] - GENERATED = Pair<Short?, String?>(-20259, "vwsqy")
2021-03-12 10:42:54,545 [main:95] - GENERATED = linkedMapOf<Short?, String?>(Pair<Short?, String?>(-20259, "vwsqy"))
2021-03-12 10:42:54,752 [main:149] - GENERATING call of type public open fun remove(key: kotlin.Short?): kotlin.String? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@5b072751]
2021-03-12 10:42:54,837 [main:302] - generating value of type = Short true depth = 0
2021-03-12 10:42:54,839 [main:78] - Generated call from random type = (linkedMapOf<Short?, String?>(Pair<Short?, String?>(-20259, "vwsqy"))).remove(-14382)!!
2021-03-12 10:42:54,839 [main:106] - GETTING String from String
2021-03-12 10:42:54,872 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@236610cf]]
2021-03-12 10:42:54,872 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@236610cf]
2021-03-12 10:42:54,874 [main:117] - GENERATED CALL = ("ewtpt".bar()).capitalize()
2021-03-12 10:42:54,874 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5655e036]]
2021-03-12 10:42:54,874 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5655e036]
2021-03-12 10:42:54,972 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:42:54,974 [main:117] - GENERATED CALL = ("ewtpt".bar()).substringAfter('䰂', "ewtpt".bar())
2021-03-12 10:42:54,974 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36df92ac]]
2021-03-12 10:42:54,975 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735]
2021-03-12 10:42:55,056 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:42:55,143 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:42:55,144 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36df92ac]
2021-03-12 10:42:55,230 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:42:55,316 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 10:42:55,319 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 10:42:55,546 [main:302] - generating value of type = Int true depth = 3
2021-03-12 10:42:55,546 [main:95] - GENERATED = StringBuilder(352821692)
2021-03-12 10:42:55,631 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:42:55,632 [main:117] - GENERATED CALL = ("ewtpt".bar()).subSequence(-1767290371, 228083764).commonPrefixWith(StringBuilder(352821692), true)
2021-03-12 10:42:55,632 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a7e2646]]
2021-03-12 10:42:55,633 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a7e2646]
2021-03-12 10:42:55,713 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:42:55,798 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:42:55,897 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:42:55,902 [main:117] - GENERATED CALL = ("ewtpt".bar()).replaceRange(-1891009098, 923271048, "jxufj")
2021-03-12 10:42:55,902 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64c1f475]]
2021-03-12 10:42:55,903 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64c1f475]
2021-03-12 10:42:55,903 [main:117] - GENERATED CALL = ("ewtpt".bar()).trim()
2021-03-12 10:42:55,903 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@513a0d0b]]
2021-03-12 10:42:55,904 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@513a0d0b]
2021-03-12 10:42:55,998 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:42:56,000 [main:117] - GENERATED CALL = ("ewtpt".bar()).substringAfterLast('倘', "ewtpt".bar())
2021-03-12 10:42:56,000 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@506938cf]]
2021-03-12 10:42:56,000 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@506938cf]
2021-03-12 10:42:56,082 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:42:56,082 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:42:56,084 [main:117] - GENERATED CALL = ("ewtpt".bar()).takeWhile({a: Char -> false})
2021-03-12 10:42:56,085 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b32c95b]]
2021-03-12 10:42:56,085 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b32c95b]
2021-03-12 10:42:56,169 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:42:56,171 [main:117] - GENERATED CALL = ("ewtpt".bar()).substring(-1455098707)
2021-03-12 10:42:56,171 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71c97784]]
2021-03-12 10:42:56,171 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71c97784]
2021-03-12 10:42:56,173 [main:117] - GENERATED CALL = ("ewtpt".bar()).uppercase()
2021-03-12 10:42:56,173 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28299528]]
2021-03-12 10:42:56,173 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28299528]
2021-03-12 10:42:56,254 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:42:56,255 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:42:56,256 [main:117] - GENERATED CALL = ("ewtpt".bar()).takeLastWhile({a: Char -> true})
2021-03-12 10:42:56,256 [main:61] - replacement of Outer().Inner().result() of type String is ("ewtpt".bar()).substring(-1455098707)
2021-03-12 10:42:56,406 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:42:56,407 [main:66] - Compilation checking started
2021-03-12 10:42:56,978 [main:53] - Result = true
Text:
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return ("ewtpt".bar()).substring(-1455098707)
}

fun box() = "OK".bar()


2021-03-12 10:42:56,979 [main:53] - replacing ("OK".bar()

, String)
2021-03-12 10:42:56,979 [main:50] - replacing "OK".bar()

 String
2021-03-12 10:42:56,979 [main:54] - Getting value of type String
2021-03-12 10:42:57,073 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:42:57,074 [main:58] - GENERATED VALUE OF TYPE String = "qhdsj"
2021-03-12 10:42:57,075 [main:61] - GENERATED IS CALL =false
2021-03-12 10:42:57,180 [main:67] - randomType = ULong
2021-03-12 10:42:57,269 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 10:42:57,348 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@5384f549]
2021-03-12 10:42:57,349 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4df2f084]
2021-03-12 10:42:57,481 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:42:57,483 [main:78] - Generated call from random type = (8221438448729733762.toULong()).toUByte().toString(-1648941780)
2021-03-12 10:42:57,483 [main:106] - GETTING String from String
2021-03-12 10:42:57,520 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47b0a41d]]
2021-03-12 10:42:57,520 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47b0a41d]
2021-03-12 10:42:57,610 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:42:57,704 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:42:57,705 [main:117] - GENERATED CALL = ("ewtpt".bar()).substringBefore('距', "lolbq")
2021-03-12 10:42:57,705 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@701b1a8a]]
2021-03-12 10:42:57,706 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@701b1a8a]
2021-03-12 10:42:57,707 [main:117] - GENERATED CALL = ("ewtpt".bar()).trimStart()
2021-03-12 10:42:57,707 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@372aaebd]]
2021-03-12 10:42:57,707 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735]
2021-03-12 10:42:57,801 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:42:57,884 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:42:57,885 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@372aaebd]
2021-03-12 10:42:57,989 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:42:58,086 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:42:58,088 [main:117] - GENERATED CALL = ("ewtpt".bar()).subSequence(-71466438, 149562440).commonSuffixWith("jhgrd", true)
2021-03-12 10:42:58,088 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@506938cf]]
2021-03-12 10:42:58,088 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@506938cf]
2021-03-12 10:42:58,173 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:42:58,173 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:42:58,175 [main:117] - GENERATED CALL = ("ewtpt".bar()).takeWhile({a: Char -> false})
2021-03-12 10:42:58,175 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28299528]]
2021-03-12 10:42:58,175 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28299528]
2021-03-12 10:42:58,267 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:42:58,267 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:42:58,268 [main:117] - GENERATED CALL = ("ewtpt".bar()).takeLastWhile({a: Char -> true})
2021-03-12 10:42:58,269 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@513a0d0b]]
2021-03-12 10:42:58,269 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@513a0d0b]
2021-03-12 10:42:58,351 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:42:58,455 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:42:58,457 [main:117] - GENERATED CALL = ("ewtpt".bar()).substringAfterLast('䞣', "dnyqh")
2021-03-12 10:42:58,458 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14cc2fdd]]
2021-03-12 10:42:58,458 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14cc2fdd]
2021-03-12 10:42:58,557 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:42:58,559 [main:117] - GENERATED CALL = ("ewtpt".bar()).replaceAfter('✒', "ewtpt".bar(), "ewtpt".bar())
2021-03-12 10:42:58,559 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55bbf1b6]]
2021-03-12 10:42:58,560 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735]
2021-03-12 10:42:58,649 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:42:58,736 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:42:58,737 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55bbf1b6]
2021-03-12 10:42:58,834 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 10:42:58,943 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 10:42:58,945 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 10:42:59,168 [main:302] - generating value of type = String true depth = 3
2021-03-12 10:42:59,169 [main:95] - GENERATED = Regex("joucf")
2021-03-12 10:42:59,256 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 10:42:59,257 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 10:42:59,346 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 10:42:59,348 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 10:42:59,575 [main:302] - generating value of type = String true depth = 4
2021-03-12 10:42:59,576 [main:95] - GENERATED = StringBuilder("hsybw")
2021-03-12 10:42:59,578 [main:117] - GENERATED CALL = ("ewtpt".bar()).subSequence(419148474, -1021284473).replace(Regex("joucf"), {a: MatchResult -> StringBuilder("hsybw")})
2021-03-12 10:42:59,578 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77022855]]
2021-03-12 10:42:59,578 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77022855]
2021-03-12 10:42:59,670 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:42:59,671 [main:117] - GENERATED CALL = ("ewtpt".bar()).repeat(1665448800)
2021-03-12 10:42:59,671 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51545ae8]]
2021-03-12 10:42:59,671 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51545ae8]
2021-03-12 10:42:59,763 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:42:59,764 [main:117] - GENERATED CALL = ("ewtpt".bar()).drop(624475587)
2021-03-12 10:42:59,764 [main:61] - replacement of "OK".bar()

 of type String is "ewtpt".bar()
2021-03-12 10:42:59,843 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:42:59,844 [main:66] - Compilation checking started
2021-03-12 10:43:00,251 [main:53] - Result = true
Text:
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return ("ewtpt".bar()).substring(-1455098707)
}

fun box() = "ewtpt".bar()
2021-03-12 10:43:00,369 [main:119] - TRYING TO REPLACE CONSTANT 1455098707
2021-03-12 10:43:00,455 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 10:43:00,455 [main:66] - Compilation checking started
2021-03-12 10:43:00,803 [main:53] - Result = true
Text:
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return ("ewtpt".bar()).substring(1455098707)
}

fun box() = "ewtpt".bar()
2021-03-12 10:43:00,838 [main:41] - AFTER TRY 0 res = fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()
2021-03-12 10:43:01,011 [main:112] - generating klass Local text = open class Local {
        fun result() = this@bar
    }
2021-03-12 10:43:01,012 [main:112] - generating klass Outer text = class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }
2021-03-12 10:43:01,012 [main:112] - generating klass Inner text = inner class Inner : Local() {
            fun outer() = this@Outer
        }
2021-03-12 10:43:01,202 [main:43] - GENERATING CALL OF fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}
2021-03-12 10:43:01,202 [main:61] - WITHOUT TYPE PARAMS = fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}
2021-03-12 10:43:01,287 [main:302] - generating value of type = String true depth = 1
2021-03-12 10:43:01,288 [main:95] - GENERATED = "juxnb".bar()
2021-03-12 10:43:01,372 [main:43] - Try №0
2021-03-12 10:43:16,682 [main:48] - Already checked
2021-03-12 10:43:21,757 [main:69] - Trying to insert override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }
2021-03-12 10:43:21,875 [main:66] - Compilation checking started
2021-03-12 10:43:23,158 [main:103] - Trying to change 153 nodes
2021-03-12 10:43:23,159 [main:107] - replacing ({}, Function0<Unit>)
2021-03-12 10:43:23,159 [main:50] - replacing {} Function0<Unit>
2021-03-12 10:43:23,159 [main:54] - Getting value of type Function0<Unit>
2021-03-12 10:43:23,331 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 10:43:23,333 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:43:23,518 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 10:43:23,522 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 10:43:23,931 [main:302] - generating value of type = Any false depth = 4
2021-03-12 10:43:23,931 [main:95] - GENERATED = print("dxjme")
2021-03-12 10:43:23,931 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { print("dxjme")}
2021-03-12 10:43:23,932 [main:61] - GENERATED IS CALL =false
2021-03-12 10:43:26,061 [main:67] - randomType = Function2<Kla5, ArrayList<HashMap<Function1<Long, Function1<UByte?, Kla5>>, Kla6>?>, List<Kla6?>>
2021-03-12 10:43:26,063 [main:106] - GETTING Function0<Unit> from String
2021-03-12 10:43:26,100 [main:114] - replacement of {} of type Function0<Unit> is { print("dxjme")}
2021-03-12 10:43:26,240 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 10:43:26,241 [main:66] - Compilation checking started
2021-03-12 10:43:27,066 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            prope1.fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        prope1.fu12()
    }
    fu1 {
        prope2.fu4()
    }
    prope1.fu13(numberOfSuspensions = 4)
    prope1.fu11()
    fu1 {
        prope2.fu5()
    }
    prope1.fu13(numberOfSuspensions = 4)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:43:27,069 [main:107] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got ", String)
2021-03-12 10:43:27,070 [main:50] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " String
2021-03-12 10:43:27,070 [main:54] - Getting value of type String
2021-03-12 10:43:27,252 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:43:27,255 [main:58] - GENERATED VALUE OF TYPE String = "swugi"
2021-03-12 10:43:27,255 [main:61] - GENERATED IS CALL =false
2021-03-12 10:43:27,611 [main:67] - randomType = Array<Float>
2021-03-12 10:43:27,781 [main:302] - generating value of type = Array<Float> false depth = 0
2021-03-12 10:43:27,953 [main:43] - GENERATING CALL OF fun <T> enumValues(): Array<Float> = TODO()
2021-03-12 10:43:27,958 [main:61] - WITHOUT TYPE PARAMS = fun <T> enumValues(): Array<Float> = TODO()
2021-03-12 10:43:28,140 [main:95] - GENERATED = enumValues<Float>()
2021-03-12 10:43:28,162 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4203bb7]
2021-03-12 10:43:28,312 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:43:28,315 [main:78] - Generated call from random type = (enumValues<Float>()).size.toString(-1538778953)
2021-03-12 10:43:28,316 [main:106] - GETTING String from String
2021-03-12 10:43:28,360 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14cc2fdd]]
2021-03-12 10:43:28,361 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14cc2fdd]
2021-03-12 10:43:28,504 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:43:28,506 [main:117] - GENERATED CALL = ("juxnb".bar()).replaceAfter('⼣', "juxnb".bar(), "juxnb".bar())
2021-03-12 10:43:28,507 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3cd33897], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79dde7d9]]
2021-03-12 10:43:28,507 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3cd33897]
2021-03-12 10:43:28,662 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:43:28,665 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79dde7d9]
2021-03-12 10:43:28,665 [main:117] - GENERATED CALL = ("juxnb".bar()).get(1706545122).plus("juxnb".bar())
2021-03-12 10:43:28,665 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@484ded00]]
2021-03-12 10:43:28,665 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@484ded00]
2021-03-12 10:43:28,666 [main:117] - GENERATED CALL = ("juxnb".bar()).toLowerCase()
2021-03-12 10:43:28,666 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e23f4b4]]
2021-03-12 10:43:28,666 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e23f4b4]
2021-03-12 10:43:28,822 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:43:28,977 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:43:29,132 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:43:29,134 [main:117] - GENERATED CALL = ("juxnb".bar()).replace('', '常', true)
2021-03-12 10:43:29,135 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@506938cf]]
2021-03-12 10:43:29,135 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@506938cf]
2021-03-12 10:43:29,280 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:43:29,283 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:43:29,286 [main:117] - GENERATED CALL = ("juxnb".bar()).takeWhile({a: Char -> true})
2021-03-12 10:43:29,287 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@33f341c7]]
2021-03-12 10:43:29,287 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@33f341c7]
2021-03-12 10:43:29,433 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:43:29,433 [main:117] - GENERATED CALL = ("juxnb".bar()).plus("aobro")
2021-03-12 10:43:29,434 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@558a66fc]]
2021-03-12 10:43:29,434 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@558a66fc]
2021-03-12 10:43:29,575 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:43:29,582 [main:117] - GENERATED CALL = ("juxnb".bar()).removePrefix("kgbhx")
2021-03-12 10:43:29,582 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28299528]]
2021-03-12 10:43:29,582 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28299528]
2021-03-12 10:43:29,727 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:43:29,730 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:43:29,732 [main:117] - GENERATED CALL = ("juxnb".bar()).takeLastWhile({a: Char -> true})
2021-03-12 10:43:29,732 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46156f94]]
2021-03-12 10:43:29,732 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46156f94]
2021-03-12 10:43:29,874 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:43:30,112 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:43:30,116 [main:117] - GENERATED CALL = ("juxnb".bar()).replaceAfterLast('', "juxnb".bar(), "mfolc")
2021-03-12 10:43:30,116 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6cc718dc]]
2021-03-12 10:43:30,116 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6cc718dc]
2021-03-12 10:43:30,272 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:43:30,278 [main:117] - GENERATED CALL = ("juxnb".bar()).removeSurrounding("nyudh")
2021-03-12 10:43:30,278 [main:114] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " of type String is ("juxnb".bar()).replace('', '常', true)
2021-03-12 10:43:30,410 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:43:30,410 [main:66] - Compilation checking started
2021-03-12 10:43:31,162 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            prope1.fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        prope1.fu12()
    }
    fu1 {
        prope2.fu4()
    }
    prope1.fu13(numberOfSuspensions = 4)
    prope1.fu11()
    fu1 {
        prope2.fu5()
    }
    prope1.fu13(numberOfSuspensions = 4)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:43:31,165 [main:107] - replacing (prope1, Kla5)
2021-03-12 10:43:31,165 [main:50] - replacing prope1 Kla5
2021-03-12 10:43:31,165 [main:54] - Getting value of type Kla5
2021-03-12 10:43:31,331 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 10:43:31,334 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 10:43:31,335 [main:58] - GENERATED VALUE OF TYPE Kla5 = Kla5()
2021-03-12 10:43:31,335 [main:61] - GENERATED IS CALL =true
2021-03-12 10:43:31,687 [main:67] - randomType = LinkedHashMap<Int, Kla1>
2021-03-12 10:43:31,846 [main:302] - generating value of type = LinkedHashMap<Int, Kla1> false depth = 0
2021-03-12 10:43:31,997 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): LinkedHashMap<Int, Kla1> = TODO()
2021-03-12 10:43:32,002 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): LinkedHashMap<Int, Kla1> = TODO()
2021-03-12 10:43:32,521 [main:302] - generating value of type = Int true depth = 3
2021-03-12 10:43:32,523 [main:302] - generating value of type = Float true depth = 3
2021-03-12 10:43:32,527 [main:95] - GENERATED = LinkedHashMap<Int, Kla1>(-1881626454, 0.23872524f)
2021-03-12 10:43:32,736 [main:106] - GETTING Kla5 from String
2021-03-12 10:43:32,773 [main:114] - replacement of prope1 of type Kla5 is Kla5()
2021-03-12 10:43:32,934 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 10:43:32,935 [main:66] - Compilation checking started
2021-03-12 10:43:33,678 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            prope1.fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        prope1.fu12()
    }
    fu1 {
        prope2.fu4()
    }
    prope1.fu13(numberOfSuspensions = 4)
    prope1.fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = 4)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:43:33,681 [main:107] - replacing ("Continuation " + c + " is not subtype of CoroutineStackFrame", String)
2021-03-12 10:43:33,682 [main:50] - replacing "Continuation " + c + " is not subtype of CoroutineStackFrame" String
2021-03-12 10:43:33,682 [main:54] - Getting value of type String
2021-03-12 10:43:33,833 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:43:33,835 [main:58] - GENERATED VALUE OF TYPE String = "snpri"
2021-03-12 10:43:33,835 [main:61] - GENERATED IS CALL =false
2021-03-12 10:43:36,680 [main:67] - randomType = Function1<Triple<Set<Kla3<UInt?>>, LinkedHashSet<Long>, LinkedHashMap<Long?, Function2<Kla3<Boolean>, Float, Kla5?>>?>, UByte>
2021-03-12 10:43:36,680 [main:106] - GETTING String from String
2021-03-12 10:43:36,718 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@499888ea]]
2021-03-12 10:43:36,718 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@499888ea]
2021-03-12 10:43:36,866 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:43:37,008 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:43:37,011 [main:117] - GENERATED CALL = ("juxnb".bar()).replaceBefore('懴', "juxnb".bar(), "frthp")
2021-03-12 10:43:37,011 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24f3ed36]]
2021-03-12 10:43:37,011 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24f3ed36]
2021-03-12 10:43:37,011 [main:117] - GENERATED CALL = ("juxnb".bar()).prependIndent("juxnb".bar())
2021-03-12 10:43:37,011 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77022855]]
2021-03-12 10:43:37,012 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77022855]
2021-03-12 10:43:37,148 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:43:37,151 [main:117] - GENERATED CALL = ("juxnb".bar()).repeat(-464487596)
2021-03-12 10:43:37,151 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a0d92f4]]
2021-03-12 10:43:37,151 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a0d92f4]
2021-03-12 10:43:37,151 [main:117] - GENERATED CALL = ("juxnb".bar()).concat("juxnb".bar())
2021-03-12 10:43:37,152 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@97e5e03]]
2021-03-12 10:43:37,152 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735]
2021-03-12 10:43:37,287 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:43:37,448 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:43:37,450 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@97e5e03]
2021-03-12 10:43:37,584 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 10:43:37,747 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 10:43:37,750 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 10:43:38,254 [main:302] - generating value of type = String true depth = 3
2021-03-12 10:43:38,257 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 10:43:38,265 [main:95] - GENERATED = Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE)
2021-03-12 10:43:38,421 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:43:38,425 [main:117] - GENERATED CALL = ("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv")
2021-03-12 10:43:38,425 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f5b58e6]]
2021-03-12 10:43:38,425 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f5b58e6]
2021-03-12 10:43:38,573 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:43:38,720 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:43:38,740 [main:117] - GENERATED CALL = ("juxnb".bar()).replaceIndentByMargin("sdhhy", "majgp")
2021-03-12 10:43:38,740 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64c1f475]]
2021-03-12 10:43:38,740 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64c1f475]
2021-03-12 10:43:38,741 [main:117] - GENERATED CALL = ("juxnb".bar()).trim()
2021-03-12 10:43:38,741 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@596aee2c]]
2021-03-12 10:43:38,741 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@596aee2c]
2021-03-12 10:43:38,741 [main:117] - GENERATED CALL = ("juxnb".bar()).decapitalize()
2021-03-12 10:43:38,741 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59c025a5]]
2021-03-12 10:43:38,741 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59c025a5]
2021-03-12 10:43:38,906 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:43:38,909 [main:117] - GENERATED CALL = ("juxnb".bar()).replaceBeforeLast('粙', "juxnb".bar(), "juxnb".bar())
2021-03-12 10:43:38,909 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e23f4b4]]
2021-03-12 10:43:38,909 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e23f4b4]
2021-03-12 10:43:39,088 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:43:39,278 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:43:39,414 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:43:39,416 [main:117] - GENERATED CALL = ("juxnb".bar()).replace('퇟', '숦', true)
2021-03-12 10:43:39,416 [main:114] - replacement of "Continuation " + c + " is not subtype of CoroutineStackFrame" of type String is ("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv")
2021-03-12 10:43:39,549 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:43:39,549 [main:66] - Compilation checking started
2021-03-12 10:43:40,368 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            prope1.fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        prope1.fu12()
    }
    fu1 {
        prope2.fu4()
    }
    prope1.fu13(numberOfSuspensions = 4)
    prope1.fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = 4)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:43:40,372 [main:107] - replacing (prope7, Function0<Unit>)
2021-03-12 10:43:40,372 [main:50] - replacing prope7 Function0<Unit>
2021-03-12 10:43:40,372 [main:54] - Getting value of type Function0<Unit>
2021-03-12 10:43:40,524 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 10:43:40,527 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:43:40,676 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 10:43:40,680 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 10:43:41,208 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 10:43:41,210 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 10:43:41,213 [main:302] - generating value of type = Any false depth = 5
2021-03-12 10:43:41,213 [main:95] - GENERATED = require(false, { "dajts"})
2021-03-12 10:43:41,213 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false, { "dajts"})}
2021-03-12 10:43:41,214 [main:61] - GENERATED IS CALL =false
2021-03-12 10:43:41,569 [main:67] - randomType = Long?
2021-03-12 10:43:41,703 [main:302] - generating value of type = Long true depth = 0
2021-03-12 10:43:41,769 [main:106] - GETTING Function0<Unit> from String
2021-03-12 10:43:41,802 [main:114] - replacement of prope7 of type Function0<Unit> is { require(false, { "dajts"})}
2021-03-12 10:43:41,944 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 10:43:41,945 [main:66] - Compilation checking started
2021-03-12 10:43:42,371 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            prope1.fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        prope1.fu12()
    }
    fu1 {
        prope2.fu4()
    }
    prope1.fu13(numberOfSuspensions = 4)
    prope1.fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = 4)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        { require(false, { "dajts"})} = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:43:42,373 [main:107] - replacing (Kla4(), Kla4)
2021-03-12 10:43:42,374 [main:50] - replacing Kla4() Kla4
2021-03-12 10:43:42,374 [main:54] - Getting value of type Kla4
2021-03-12 10:43:42,529 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 10:43:42,531 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}
2021-03-12 10:43:42,532 [main:58] - GENERATED VALUE OF TYPE Kla4 = Kla4()
2021-03-12 10:43:42,532 [main:61] - GENERATED IS CALL =true
2021-03-12 10:43:42,859 [main:67] - randomType = Float?
2021-03-12 10:43:42,994 [main:302] - generating value of type = Float true depth = 0
2021-03-12 10:43:43,054 [main:106] - GETTING Kla4 from String
2021-03-12 10:43:43,086 [main:114] - replacement of Kla4() of type Kla4 is Kla4()
2021-03-12 10:43:43,225 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 10:43:43,228 [main:107] - replacing (prope5, Int)
2021-03-12 10:43:43,228 [main:50] - replacing prope5 Int
2021-03-12 10:43:43,228 [main:54] - Getting value of type Int
2021-03-12 10:43:43,403 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:43:43,406 [main:58] - GENERATED VALUE OF TYPE Int = -557744704
2021-03-12 10:43:43,406 [main:61] - GENERATED IS CALL =false
2021-03-12 10:43:43,587 [main:67] - randomType = UByte
2021-03-12 10:43:43,718 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 10:43:43,767 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@577744fe]
2021-03-12 10:43:43,767 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@505013d8]
2021-03-12 10:43:43,929 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 10:43:43,933 [main:78] - Generated call from random type = (63.toUByte()).toByte().minus(-29)
2021-03-12 10:43:43,934 [main:106] - GETTING Int from String
2021-03-12 10:43:43,972 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@14d954b4], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@74be2d81]]
2021-03-12 10:43:43,972 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@74be2d81]
2021-03-12 10:43:44,124 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:43:44,126 [main:117] - GENERATED CALL = ("juxnb".bar()).length.rotateLeft(387076538)
2021-03-12 10:43:44,126 [main:113] - Case = [public val kotlin.CharSequence.lastIndex: kotlin.Int defined in kotlin.text[DeserializedPropertyDescriptor@1c366083]]
2021-03-12 10:43:44,126 [main:117] - GENERATED CALL = ("juxnb".bar()).lastIndex
2021-03-12 10:43:44,127 [main:113] - Case = [public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e7e3e46]]
2021-03-12 10:43:44,127 [main:149] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e7e3e46]
2021-03-12 10:43:44,311 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:43:44,531 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:43:44,676 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:43:44,678 [main:117] - GENERATED CALL = ("juxnb".bar()).lastIndexOf('', -1035373442, false)
2021-03-12 10:43:44,679 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@590784be], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4ab08881]]
2021-03-12 10:43:44,679 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@590784be]
2021-03-12 10:43:44,848 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:43:44,850 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4ab08881]
2021-03-12 10:43:44,851 [main:117] - GENERATED CALL = ("juxnb".bar()).compareTo("kmbso").countLeadingZeroBits()
2021-03-12 10:43:44,851 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@14d954b4], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1564d5de]]
2021-03-12 10:43:44,851 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1564d5de]
2021-03-12 10:43:44,999 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:43:45,170 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:43:45,173 [main:117] - GENERATED CALL = ("juxnb".bar()).length.coerceIn(1016463788, -1820887600)
2021-03-12 10:43:45,173 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@14d954b4], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ca432b0]]
2021-03-12 10:43:45,173 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ca432b0]
2021-03-12 10:43:45,173 [main:117] - GENERATED CALL = ("juxnb".bar()).length.dec()
2021-03-12 10:43:45,174 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735], @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c8864e1]]
2021-03-12 10:43:45,174 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735]
2021-03-12 10:43:45,380 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:43:45,557 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:43:45,561 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c8864e1]
2021-03-12 10:43:45,700 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-12 10:43:45,702 [main:302] - generating value of type = Int true depth = 1
2021-03-12 10:43:45,704 [main:117] - GENERATED CALL = ("juxnb".bar()).subSequence(693163330, -641963939).sumOf({a: Char -> -1835140353})
2021-03-12 10:43:45,704 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@590784be], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@34b5308c]]
2021-03-12 10:43:45,704 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@590784be]
2021-03-12 10:43:45,840 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:43:45,842 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@34b5308c]
2021-03-12 10:43:45,842 [main:117] - GENERATED CALL = ("juxnb".bar()).compareTo("yiymw").countOneBits()
2021-03-12 10:43:45,842 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@14d954b4], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7eafc362]]
2021-03-12 10:43:45,842 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7eafc362]
2021-03-12 10:43:45,963 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 10:43:45,967 [main:117] - GENERATED CALL = ("juxnb".bar()).length.rem(123)
2021-03-12 10:43:45,967 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@590784be], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7f8b7b1e]]
2021-03-12 10:43:45,967 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@590784be]
2021-03-12 10:43:45,967 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7f8b7b1e]
2021-03-12 10:43:46,124 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 10:43:46,126 [main:117] - GENERATED CALL = ("juxnb".bar()).compareTo("juxnb".bar()).compareTo(-41)
2021-03-12 10:43:46,127 [main:114] - replacement of prope5 of type Int is ("juxnb".bar()).length.rotateLeft(387076538)
2021-03-12 10:43:46,261 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:43:46,262 [main:66] - Compilation checking started
2021-03-12 10:43:46,897 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            prope1.fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        prope1.fu12()
    }
    fu1 {
        prope2.fu4()
    }
    prope1.fu13(numberOfSuspensions = 4)
    prope1.fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = 4)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:43:46,900 [main:107] - replacing ({
        prope2.fu4()
    }, SuspendFunction0<Unit>)
2021-03-12 10:43:46,901 [main:50] - replacing {
        prope2.fu4()
    } SuspendFunction0<Unit>
2021-03-12 10:43:46,901 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-12 10:43:47,047 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-12 10:43:47,049 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:43:47,193 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 10:43:47,195 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 10:43:47,472 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 10:43:47,474 [main:95] - GENERATED = require(true)
2021-03-12 10:43:47,474 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { require(true)}
2021-03-12 10:43:47,475 [main:61] - GENERATED IS CALL =false
2021-03-12 10:43:47,482 [main:67] - randomType = Kla6
2021-03-12 10:43:47,625 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 10:43:47,627 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}
2021-03-12 10:43:47,662 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-12 10:43:47,691 [main:114] - replacement of {
        prope2.fu4()
    } of type SuspendFunction0<Unit> is { require(true)}
2021-03-12 10:43:47,820 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 10:43:47,820 [main:66] - Compilation checking started
2021-03-12 10:43:48,483 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            prope1.fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        prope1.fu12()
    }
    fu1 { require(true)}
    prope1.fu13(numberOfSuspensions = 4)
    prope1.fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = 4)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:43:48,486 [main:107] - replacing (method, String)
2021-03-12 10:43:48,486 [main:50] - replacing method String
2021-03-12 10:43:48,487 [main:54] - Getting value of type String
2021-03-12 10:43:48,643 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:43:48,645 [main:58] - GENERATED VALUE OF TYPE String = "utxfg"
2021-03-12 10:43:48,645 [main:61] - GENERATED IS CALL =false
2021-03-12 10:43:49,668 [main:67] - randomType = MutableMap<Function1<Float, Kla3<Kla0>>, UByte>?
2021-03-12 10:43:49,669 [main:106] - GETTING String from String
2021-03-12 10:43:49,693 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@614b3201]]
2021-03-12 10:43:49,693 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@614b3201]
2021-03-12 10:43:49,693 [main:117] - GENERATED CALL = ("juxnb".bar()).lowercase()
2021-03-12 10:43:49,693 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@701b1a8a]]
2021-03-12 10:43:49,693 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@701b1a8a]
2021-03-12 10:43:49,693 [main:117] - GENERATED CALL = ("juxnb".bar()).trimStart()
2021-03-12 10:43:49,693 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55bbf1b6]]
2021-03-12 10:43:49,693 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735]
2021-03-12 10:43:49,825 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:43:49,949 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:43:49,951 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55bbf1b6]
2021-03-12 10:43:50,095 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 10:43:50,241 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 10:43:50,244 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 10:43:50,790 [main:302] - generating value of type = String true depth = 3
2021-03-12 10:43:50,792 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-12 10:43:50,918 [main:43] - GENERATING CALL OF fun <E> HashSet(initialCapacity: kotlin.Int): Set<RegexOption> = TODO()
2021-03-12 10:43:50,921 [main:61] - WITHOUT TYPE PARAMS = fun <E> HashSet(initialCapacity: kotlin.Int): Set<RegexOption> = TODO()
2021-03-12 10:43:51,220 [main:302] - generating value of type = Int true depth = 6
2021-03-12 10:43:51,223 [main:95] - GENERATED = HashSet<RegexOption>(233602352)
2021-03-12 10:43:51,223 [main:95] - GENERATED = Regex("idwif", HashSet<RegexOption>(233602352))
2021-03-12 10:43:51,359 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 10:43:51,360 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 10:43:51,366 [main:117] - GENERATED CALL = ("juxnb".bar()).subSequence(-603308555, 461000439).replace(Regex("idwif", HashSet<RegexOption>(233602352)), {a: MatchResult -> StringBuilder()})
2021-03-12 10:43:51,366 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36df92ac]]
2021-03-12 10:43:51,366 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36df92ac]
2021-03-12 10:43:51,493 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:43:51,646 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 10:43:51,649 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 10:43:51,902 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 10:43:51,908 [main:95] - GENERATED = StringBuilder("nvwmi")
2021-03-12 10:43:52,057 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:43:52,060 [main:117] - GENERATED CALL = ("juxnb".bar()).commonPrefixWith(StringBuilder("nvwmi"), false)
2021-03-12 10:43:52,060 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e695432]]
2021-03-12 10:43:52,060 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e695432]
2021-03-12 10:43:52,180 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:43:52,182 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:43:52,184 [main:117] - GENERATED CALL = ("juxnb".bar()).dropWhile({a: Char -> true})
2021-03-12 10:43:52,185 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3cd33897], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27ff17db]]
2021-03-12 10:43:52,185 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3cd33897]
2021-03-12 10:43:52,305 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:43:52,306 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27ff17db]
2021-03-12 10:43:52,307 [main:117] - GENERATED CALL = ("juxnb".bar()).get(476204397).titlecase()
2021-03-12 10:43:52,307 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51545ae8]]
2021-03-12 10:43:52,307 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51545ae8]
2021-03-12 10:43:52,425 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:43:52,427 [main:117] - GENERATED CALL = ("juxnb".bar()).drop(-999727358)
2021-03-12 10:43:52,427 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@14d954b4], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4203bb7]]
2021-03-12 10:43:52,427 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4203bb7]
2021-03-12 10:43:52,546 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:43:52,548 [main:117] - GENERATED CALL = ("juxnb".bar()).length.toString(1099249521)
2021-03-12 10:43:52,548 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@558a66fc]]
2021-03-12 10:43:52,548 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@558a66fc]
2021-03-12 10:43:52,688 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:43:52,829 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 10:43:52,832 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 10:43:53,110 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 10:43:53,116 [main:95] - GENERATED = StringBuilder("fedhd")
2021-03-12 10:43:53,116 [main:117] - GENERATED CALL = ("juxnb".bar()).removePrefix(StringBuilder("fedhd"))
2021-03-12 10:43:53,116 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77022855]]
2021-03-12 10:43:53,116 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735]
2021-03-12 10:43:53,239 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:43:53,392 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:43:53,394 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77022855]
2021-03-12 10:43:53,541 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:43:53,544 [main:117] - GENERATED CALL = ("juxnb".bar()).subSequence(467000878, -450439896).repeat(-1326515908)
2021-03-12 10:43:53,544 [main:114] - replacement of method of type String is ("juxnb".bar()).length.toString(1099249521)
2021-03-12 10:43:53,665 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:43:53,665 [main:66] - Compilation checking started
2021-03-12 10:43:54,313 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            prope1.fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        prope1.fu12()
    }
    fu1 { require(true)}
    prope1.fu13(numberOfSuspensions = 4)
    prope1.fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = 4)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { it?.methodName?.startsWith(("juxnb".bar()).length.toString(1099249521)) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:43:54,316 [main:107] - replacing (prope3.exceptionOrNull()!!, Throwable)
2021-03-12 10:43:54,317 [main:50] - replacing prope3.exceptionOrNull()!! Throwable
2021-03-12 10:43:54,317 [main:54] - Getting value of type Throwable
2021-03-12 10:43:54,474 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 10:43:54,615 [main:43] - GENERATING CALL OF fun IllegalStateException(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 10:43:54,619 [main:61] - WITHOUT TYPE PARAMS = fun IllegalStateException(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 10:43:54,891 [main:302] - generating value of type = Throwable false depth = 3
2021-03-12 10:43:54,896 [main:95] - GENERATED = IllegalStateException(ConcurrentModificationException())
2021-03-12 10:43:54,896 [main:58] - GENERATED VALUE OF TYPE Throwable = IllegalStateException(ConcurrentModificationException())
2021-03-12 10:43:54,897 [main:61] - GENERATED IS CALL =true
2021-03-12 10:43:55,180 [main:67] - randomType = Kla3<Boolean>
2021-03-12 10:43:55,311 [main:302] - generating value of type = Kla3<Boolean> false depth = 0
2021-03-12 10:43:55,313 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 10:43:55,788 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-12 10:43:55,790 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}
2021-03-12 10:43:55,814 [main:106] - GETTING Throwable from String
2021-03-12 10:43:55,837 [main:114] - replacement of prope3.exceptionOrNull()!! of type Throwable is IllegalStateException(ConcurrentModificationException())
2021-03-12 10:43:55,982 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 10:43:55,985 [main:107] - replacing (it?.methodName?.startsWith(("juxnb".bar()).length.toString(1099249521)) == true, Boolean)
2021-03-12 10:43:55,985 [main:50] - replacing it?.methodName?.startsWith(("juxnb".bar()).length.toString(1099249521)) == true Boolean
2021-03-12 10:43:55,985 [main:54] - Getting value of type Boolean
2021-03-12 10:43:56,120 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:43:56,122 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 10:43:56,122 [main:61] - GENERATED IS CALL =false
2021-03-12 10:43:56,275 [main:67] - randomType = Float
2021-03-12 10:43:56,440 [main:302] - generating value of type = Float true depth = 0
2021-03-12 10:43:56,502 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@99d1af4]
2021-03-12 10:43:56,503 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e3938dc]
2021-03-12 10:43:56,503 [main:78] - Generated call from random type = (0.93175656f).toChar().isUpperCase()
2021-03-12 10:43:56,504 [main:106] - GETTING Boolean from String
2021-03-12 10:43:56,548 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3980420b]]
2021-03-12 10:43:56,548 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735]
2021-03-12 10:43:56,683 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:43:56,833 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:43:56,835 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3980420b]
2021-03-12 10:43:56,836 [main:117] - GENERATED CALL = ("juxnb".bar()).subSequence(-768856414, -1015151510).isEmpty()
2021-03-12 10:43:56,836 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4b992ca0], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4dba01ce]]
2021-03-12 10:43:56,836 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4b992ca0]
2021-03-12 10:43:56,970 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:43:56,970 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4dba01ce]
2021-03-12 10:43:57,108 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:43:57,111 [main:117] - GENERATED CALL = ("juxnb".bar()).equals("aodgg").or(true)
2021-03-12 10:43:57,111 [main:113] - Case = [public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37908f0b]]
2021-03-12 10:43:57,111 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37908f0b]
2021-03-12 10:43:57,111 [main:117] - GENERATED CALL = ("juxnb".bar()).none()
2021-03-12 10:43:57,111 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cb563ce]]
2021-03-12 10:43:57,111 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735]
2021-03-12 10:43:57,271 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:43:57,415 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:43:57,418 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cb563ce]
2021-03-12 10:43:57,418 [main:117] - GENERATED CALL = ("juxnb".bar()).subSequence(1943992320, 424600640).isNotEmpty()
2021-03-12 10:43:57,418 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3cd33897], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@107dd55e]]
2021-03-12 10:43:57,418 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3cd33897]
2021-03-12 10:43:57,544 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:43:57,547 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@107dd55e]
2021-03-12 10:43:57,547 [main:117] - GENERATED CALL = ("juxnb".bar()).get(579586650).isDefined()
2021-03-12 10:43:57,547 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735], public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54f3757f]]
2021-03-12 10:43:57,547 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735]
2021-03-12 10:43:57,686 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:43:57,820 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:43:57,823 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54f3757f]
2021-03-12 10:43:57,949 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:43:57,951 [main:117] - GENERATED CALL = ("juxnb".bar()).subSequence(-1397657442, -777581832).hasSurrogatePairAt(-1086015875)
2021-03-12 10:43:57,951 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cb563ce]]
2021-03-12 10:43:57,951 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cb563ce]
2021-03-12 10:43:57,951 [main:117] - GENERATED CALL = ("juxnb".bar()).isNotEmpty()
2021-03-12 10:43:57,951 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3cd33897], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f470ee8]]
2021-03-12 10:43:57,951 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3cd33897]
2021-03-12 10:43:58,123 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:43:58,126 [main:149] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f470ee8]
2021-03-12 10:43:58,127 [main:117] - GENERATED CALL = ("juxnb".bar()).get(-2147019738).isLetterOrDigit()
2021-03-12 10:43:58,127 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41a4102e]]
2021-03-12 10:43:58,127 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41a4102e]
2021-03-12 10:43:58,128 [main:117] - GENERATED CALL = ("juxnb".bar()).toBoolean()
2021-03-12 10:43:58,128 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3cd33897], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@448be8b3]]
2021-03-12 10:43:58,128 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3cd33897]
2021-03-12 10:43:58,268 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:43:58,271 [main:149] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@448be8b3]
2021-03-12 10:43:58,271 [main:117] - GENERATED CALL = ("juxnb".bar()).get(1767964095).isLetter()
2021-03-12 10:43:58,271 [main:114] - replacement of it?.methodName?.startsWith(("juxnb".bar()).length.toString(1099249521)) == true of type Boolean is ("juxnb".bar()).toBoolean()
2021-03-12 10:43:58,393 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:43:58,394 [main:66] - Compilation checking started
2021-03-12 10:43:59,125 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            prope1.fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        prope1.fu12()
    }
    fu1 { require(true)}
    prope1.fu13(numberOfSuspensions = 4)
    prope1.fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = 4)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:43:59,128 [main:107] - replacing (4, Int)
2021-03-12 10:43:59,128 [main:50] - replacing 4 Int
2021-03-12 10:43:59,128 [main:54] - Getting value of type Int
2021-03-12 10:43:59,257 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:43:59,259 [main:58] - GENERATED VALUE OF TYPE Int = -691293332
2021-03-12 10:43:59,259 [main:61] - GENERATED IS CALL =false
2021-03-12 10:44:00,054 [main:67] - randomType = MutableMap<Boolean, MutableMap<HashSet<Float>, Function1<Kla4, Kla0>>>
2021-03-12 10:44:00,055 [main:106] - GETTING Int from String
2021-03-12 10:44:00,089 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@14d954b4], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@4a98a644]]
2021-03-12 10:44:00,089 [main:117] - GENERATED CALL = ("juxnb".bar()).length.sign
2021-03-12 10:44:00,089 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@590784be], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7ad8bd4d]]
2021-03-12 10:44:00,089 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@590784be]
2021-03-12 10:44:00,089 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7ad8bd4d]
2021-03-12 10:44:00,220 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 10:44:00,223 [main:117] - GENERATED CALL = ("juxnb".bar()).compareTo("juxnb".bar()).minus(-116)
2021-03-12 10:44:00,223 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@14d954b4], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@d384b46]]
2021-03-12 10:44:00,223 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@d384b46]
2021-03-12 10:44:00,355 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:44:00,357 [main:117] - GENERATED CALL = ("juxnb".bar()).length.coerceAtLeast(-680051205)
2021-03-12 10:44:00,357 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@14d954b4], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@c0f2778]]
2021-03-12 10:44:00,358 [main:117] - GENERATED CALL = ("juxnb".bar()).length.absoluteValue
2021-03-12 10:44:00,358 [main:113] - Case = [public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25a76957]]
2021-03-12 10:44:00,358 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25a76957]
2021-03-12 10:44:00,358 [main:117] - GENERATED CALL = ("juxnb".bar()).toInt()
2021-03-12 10:44:00,358 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@14d954b4], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26e729ea]]
2021-03-12 10:44:00,358 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26e729ea]
2021-03-12 10:44:00,358 [main:117] - GENERATED CALL = ("juxnb".bar()).length.inv()
2021-03-12 10:44:00,359 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@590784be], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@4a98a644]]
2021-03-12 10:44:00,359 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@590784be]
2021-03-12 10:44:00,359 [main:117] - GENERATED CALL = ("juxnb".bar()).compareTo("juxnb".bar()).sign
2021-03-12 10:44:00,359 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@590784be], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26e729ea]]
2021-03-12 10:44:00,359 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@590784be]
2021-03-12 10:44:00,510 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:44:00,512 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26e729ea]
2021-03-12 10:44:00,512 [main:117] - GENERATED CALL = ("juxnb".bar()).compareTo("wgdrs").inv()
2021-03-12 10:44:00,512 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@590784be], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d7625db]]
2021-03-12 10:44:00,513 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@590784be]
2021-03-12 10:44:00,513 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d7625db]
2021-03-12 10:44:00,513 [main:117] - GENERATED CALL = ("juxnb".bar()).compareTo("juxnb".bar()).unaryPlus()
2021-03-12 10:44:00,513 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4b992ca0], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@53d1d689]]
2021-03-12 10:44:00,513 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4b992ca0]
2021-03-12 10:44:00,648 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:44:00,649 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@53d1d689]
2021-03-12 10:44:00,774 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:44:00,777 [main:117] - GENERATED CALL = ("juxnb".bar()).equals("gncwu").compareTo(true)
2021-03-12 10:44:00,777 [main:114] - replacement of 4 of type Int is ("juxnb".bar()).compareTo("wgdrs").inv()
2021-03-12 10:44:00,900 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:44:00,901 [main:66] - Compilation checking started
2021-03-12 10:44:01,627 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            prope1.fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        prope1.fu12()
    }
    fu1 { require(true)}
    prope1.fu13(numberOfSuspensions = 4)
    prope1.fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = ("juxnb".bar()).compareTo("wgdrs").inv())
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:44:01,630 [main:107] - replacing (method, String)
2021-03-12 10:44:01,630 [main:50] - replacing method String
2021-03-12 10:44:01,631 [main:54] - Getting value of type String
2021-03-12 10:44:01,785 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:44:01,788 [main:58] - GENERATED VALUE OF TYPE String = "sozno"
2021-03-12 10:44:01,788 [main:61] - GENERATED IS CALL =false
2021-03-12 10:44:01,797 [main:67] - randomType = Kla0
2021-03-12 10:44:01,798 [main:106] - GETTING String from String
2021-03-12 10:44:01,833 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47b0a41d]]
2021-03-12 10:44:01,833 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47b0a41d]
2021-03-12 10:44:01,976 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:44:01,978 [main:117] - GENERATED CALL = ("juxnb".bar()).substringBefore('', "juxnb".bar())
2021-03-12 10:44:01,978 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45051529]]
2021-03-12 10:44:01,978 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45051529]
2021-03-12 10:44:02,111 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:44:02,113 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:44:02,115 [main:117] - GENERATED CALL = ("juxnb".bar()).filter({a: Char -> true})
2021-03-12 10:44:02,115 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64c1f475]]
2021-03-12 10:44:02,115 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64c1f475]
2021-03-12 10:44:02,115 [main:117] - GENERATED CALL = ("juxnb".bar()).trim()
2021-03-12 10:44:02,115 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36df92ac]]
2021-03-12 10:44:02,115 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36df92ac]
2021-03-12 10:44:02,236 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:44:02,363 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:44:02,365 [main:117] - GENERATED CALL = ("juxnb".bar()).commonPrefixWith("zeojl", true)
2021-03-12 10:44:02,365 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3cd33897], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b64cc29]]
2021-03-12 10:44:02,365 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3cd33897]
2021-03-12 10:44:02,510 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:44:02,512 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b64cc29]
2021-03-12 10:44:02,512 [main:117] - GENERATED CALL = ("juxnb".bar()).get(231319885).uppercase()
2021-03-12 10:44:02,512 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@484ded00]]
2021-03-12 10:44:02,512 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@484ded00]
2021-03-12 10:44:02,512 [main:117] - GENERATED CALL = ("juxnb".bar()).toLowerCase()
2021-03-12 10:44:02,513 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e695432]]
2021-03-12 10:44:02,513 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e695432]
2021-03-12 10:44:02,640 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:44:02,642 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:44:02,644 [main:117] - GENERATED CALL = ("juxnb".bar()).dropWhile({a: Char -> false})
2021-03-12 10:44:02,644 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46156f94]]
2021-03-12 10:44:02,644 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46156f94]
2021-03-12 10:44:02,788 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:44:02,929 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:44:02,931 [main:117] - GENERATED CALL = ("juxnb".bar()).replaceAfterLast('', "juxnb".bar(), "ujmjj")
2021-03-12 10:44:02,932 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e510eb0]]
2021-03-12 10:44:02,932 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e510eb0]
2021-03-12 10:44:02,932 [main:117] - GENERATED CALL = ("juxnb".bar()).trimIndent()
2021-03-12 10:44:02,932 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33d934be]]
2021-03-12 10:44:02,932 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33d934be]
2021-03-12 10:44:03,053 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 10:44:03,055 [main:302] - generating value of type = Char true depth = 1
2021-03-12 10:44:03,057 [main:117] - GENERATED CALL = ("juxnb".bar()).replaceFirstChar({a: Char -> '赠'})
2021-03-12 10:44:03,057 [main:114] - replacement of method of type String is ("juxnb".bar()).get(231319885).uppercase()
2021-03-12 10:44:03,176 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:44:03,177 [main:66] - Compilation checking started
2021-03-12 10:44:03,849 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            prope1.fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        prope1.fu12()
    }
    fu1 { require(true)}
    prope1.fu13(numberOfSuspensions = 4)
    prope1.fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = ("juxnb".bar()).compareTo("wgdrs").inv())
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + ("juxnb".bar()).get(231319885).uppercase() + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:44:03,852 [main:107] - replacing (prope1, Kla5)
2021-03-12 10:44:03,852 [main:50] - replacing prope1 Kla5
2021-03-12 10:44:03,853 [main:54] - Getting value of type Kla5
2021-03-12 10:44:03,999 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 10:44:04,000 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 10:44:04,001 [main:58] - GENERATED VALUE OF TYPE Kla5 = Kla5()
2021-03-12 10:44:04,001 [main:61] - GENERATED IS CALL =true
2021-03-12 10:44:04,008 [main:67] - randomType = Kla0
2021-03-12 10:44:04,009 [main:106] - GETTING Kla5 from String
2021-03-12 10:44:04,047 [main:114] - replacement of prope1 of type Kla5 is Kla5()
2021-03-12 10:44:04,174 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 10:44:04,174 [main:66] - Compilation checking started
2021-03-12 10:44:04,836 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            prope1.fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        prope1.fu12()
    }
    fu1 { require(true)}
    prope1.fu13(numberOfSuspensions = 4)
    Kla5().fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = ("juxnb".bar()).compareTo("wgdrs").inv())
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + ("juxnb".bar()).get(231319885).uppercase() + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:44:04,839 [main:107] - replacing ("\n", String)
2021-03-12 10:44:04,839 [main:50] - replacing "\n" String
2021-03-12 10:44:04,840 [main:54] - Getting value of type String
2021-03-12 10:44:04,995 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:44:04,999 [main:58] - GENERATED VALUE OF TYPE String = "jtjdr"
2021-03-12 10:44:04,999 [main:61] - GENERATED IS CALL =false
2021-03-12 10:44:08,089 [main:67] - randomType = Triple<HashSet<Kla4>, Triple<ULong, List<ULong>, Kla6>?, Function2<Function2<ArrayList<Kla4>, UByte, MutableMap<Char?, String>>, HashMap<LinkedHashSet<UInt?>, String>, LinkedHashMap<Double, Kla4>>>?
2021-03-12 10:44:08,219 [main:302] - generating value of type = Triple<HashSet<Kla4>, Triple<ULong, List<ULong>, Kla6>?, Function2<Function2<ArrayList<Kla4>, UByte, MutableMap<Char?, String>>, HashMap<LinkedHashSet<UInt?>, String>, LinkedHashMap<Double, Kla4>>> false depth = 0
2021-03-12 10:44:08,364 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: HashSet<Kla4>, second: Triple<ULong, List<ULong>, Kla6>?, third: Function2<Function2<ArrayList<Kla4>, UByte, MutableMap<Char?, String>>, HashMap<LinkedHashSet<UInt?>, String>, LinkedHashMap<Double, Kla4>>): Triple<HashSet<Kla4>, Triple<ULong, List<ULong>, Kla6>?, Function2<Function2<ArrayList<Kla4>, UByte, MutableMap<Char?, String>>, HashMap<LinkedHashSet<UInt?>, String>, LinkedHashMap<Double, Kla4>>> = TODO()
2021-03-12 10:44:08,367 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: HashSet<Kla4>, second: Triple<ULong, List<ULong>, Kla6>?, third: Function2<Function2<ArrayList<Kla4>, UByte, MutableMap<Char?, String>>, HashMap<LinkedHashSet<UInt?>, String>, LinkedHashMap<Double, Kla4>>): Triple<HashSet<Kla4>, Triple<ULong, List<ULong>, Kla6>?, Function2<Function2<ArrayList<Kla4>, UByte, MutableMap<Char?, String>>, HashMap<LinkedHashSet<UInt?>, String>, LinkedHashMap<Double, Kla4>>> = TODO()
2021-03-12 10:44:08,500 [main:302] - generating value of type = HashSet<Kla4> false depth = 3
2021-03-12 10:44:08,622 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Kla4): HashSet<Kla4> = TODO()
2021-03-12 10:44:08,625 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Kla4): HashSet<Kla4> = TODO()
2021-03-12 10:44:08,809 [main:302] - generating value of type = Kla4 false depth = 6
2021-03-12 10:44:08,811 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + ("juxnb".bar()).get(231319885).uppercase() + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}
2021-03-12 10:44:08,811 [main:95] - GENERATED = linkedSetOf<Kla4>(Kla4())
2021-03-12 10:44:08,812 [main:302] - generating value of type = Triple<ULong, List<ULong>, Kla6> false depth = 3
2021-03-12 10:44:08,979 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: ULong, second: List<ULong>, third: Kla6): Triple<ULong, List<ULong>, Kla6> = TODO()
2021-03-12 10:44:08,982 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: ULong, second: List<ULong>, third: Kla6): Triple<ULong, List<ULong>, Kla6> = TODO()
2021-03-12 10:44:09,111 [main:302] - generating value of type = ULong true depth = 6
2021-03-12 10:44:09,112 [main:302] - generating value of type = List<ULong> false depth = 6
2021-03-12 10:44:09,243 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): List<ULong> = TODO()
2021-03-12 10:44:09,246 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): List<ULong> = TODO()
2021-03-12 10:44:09,380 [main:95] - GENERATED = arrayListOf<ULong>()
2021-03-12 10:44:09,380 [main:302] - generating value of type = Kla6 false depth = 6
2021-03-12 10:44:09,382 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}
2021-03-12 10:44:09,382 [main:95] - GENERATED = Triple<ULong, List<ULong>, Kla6>(2538535917815872984.toULong(), arrayListOf<ULong>(), Kla6)
2021-03-12 10:44:09,382 [main:302] - generating value of type = Function2<Function2<ArrayList<Kla4>, UByte, MutableMap<Char?, String>>, HashMap<LinkedHashSet<UInt?>, String>, LinkedHashMap<Double, Kla4>> false depth = 3
2021-03-12 10:44:09,384 [main:302] - generating value of type = LinkedHashMap<Double, Kla4> false depth = 4
2021-03-12 10:44:09,512 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Double, Kla4> = TODO()
2021-03-12 10:44:09,514 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Double, Kla4> = TODO()
2021-03-12 10:44:09,647 [main:95] - GENERATED = linkedMapOf<Double, Kla4>()
2021-03-12 10:44:09,647 [main:95] - GENERATED = Triple<HashSet<Kla4>, Triple<ULong, List<ULong>, Kla6>?, Function2<Function2<ArrayList<Kla4>, UByte, MutableMap<Char?, String>>, HashMap<LinkedHashSet<UInt?>, String>, LinkedHashMap<Double, Kla4>>>(linkedSetOf<Kla4>(Kla4()), Triple<ULong, List<ULong>, Kla6>(2538535917815872984.toULong(), arrayListOf<ULong>(), Kla6), {a: Function2<ArrayList<Kla4>, UByte, MutableMap<Char?, String>>, b: HashMap<LinkedHashSet<UInt?>, String> -> linkedMapOf<Double, Kla4>()})
2021-03-12 10:44:09,733 [main:106] - GETTING String from String
2021-03-12 10:44:09,766 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a7e2646]]
2021-03-12 10:44:09,766 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a7e2646]
2021-03-12 10:44:09,938 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:44:10,093 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:44:10,216 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:44:10,221 [main:117] - GENERATED CALL = ("juxnb".bar()).replaceRange(339670562, -1435954936, "sknco")
2021-03-12 10:44:10,221 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ddbe661]]
2021-03-12 10:44:10,221 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ddbe661]
2021-03-12 10:44:10,344 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:44:10,472 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:44:10,597 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:44:10,599 [main:117] - GENERATED CALL = ("juxnb".bar()).replaceFirst('抙', 'র', true)
2021-03-12 10:44:10,600 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7afbd7e8]]
2021-03-12 10:44:10,600 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7afbd7e8]
2021-03-12 10:44:10,726 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:44:10,729 [main:117] - GENERATED CALL = ("juxnb".bar()).take(-686749132)
2021-03-12 10:44:10,729 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b32c95b]]
2021-03-12 10:44:10,729 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b32c95b]
2021-03-12 10:44:10,892 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:44:10,894 [main:117] - GENERATED CALL = ("juxnb".bar()).substring(-64456478)
2021-03-12 10:44:10,894 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45051529]]
2021-03-12 10:44:10,894 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45051529]
2021-03-12 10:44:11,069 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:44:11,071 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:44:11,073 [main:117] - GENERATED CALL = ("juxnb".bar()).filter({a: Char -> false})
2021-03-12 10:44:11,073 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51545ae8]]
2021-03-12 10:44:11,073 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51545ae8]
2021-03-12 10:44:11,204 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:44:11,206 [main:117] - GENERATED CALL = ("juxnb".bar()).drop(-1551843504)
2021-03-12 10:44:11,206 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@614b3201]]
2021-03-12 10:44:11,206 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@614b3201]
2021-03-12 10:44:11,206 [main:117] - GENERATED CALL = ("juxnb".bar()).lowercase()
2021-03-12 10:44:11,206 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c79570c]]
2021-03-12 10:44:11,206 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c79570c]
2021-03-12 10:44:11,206 [main:117] - GENERATED CALL = ("juxnb".bar()).trimMargin("juxnb".bar())
2021-03-12 10:44:11,206 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33d934be]]
2021-03-12 10:44:11,207 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33d934be]
2021-03-12 10:44:11,332 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 10:44:11,334 [main:302] - generating value of type = Char true depth = 1
2021-03-12 10:44:11,337 [main:117] - GENERATED CALL = ("juxnb".bar()).replaceFirstChar({a: Char -> ''})
2021-03-12 10:44:11,337 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@595e8470]]
2021-03-12 10:44:11,337 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@595e8470]
2021-03-12 10:44:11,468 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:44:11,598 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:44:11,600 [main:117] - GENERATED CALL = ("juxnb".bar()).padStart(-1744538144, '칩')
2021-03-12 10:44:11,600 [main:114] - replacement of "\n" of type String is ("juxnb".bar()).lowercase()
2021-03-12 10:44:11,730 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:44:11,730 [main:66] - Compilation checking started
2021-03-12 10:44:12,406 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            prope1.fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        prope1.fu12()
    }
    fu1 { require(true)}
    prope1.fu13(numberOfSuspensions = 4)
    Kla5().fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = ("juxnb".bar()).compareTo("wgdrs").inv())
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + ("juxnb".bar()).get(231319885).uppercase() + " has no state-machine " +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:44:12,409 [main:107] - replacing (prope1, Kla5)
2021-03-12 10:44:12,409 [main:50] - replacing prope1 Kla5
2021-03-12 10:44:12,409 [main:54] - Getting value of type Kla5
2021-03-12 10:44:12,578 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 10:44:12,580 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 10:44:12,580 [main:58] - GENERATED VALUE OF TYPE Kla5 = Kla5()
2021-03-12 10:44:12,580 [main:61] - GENERATED IS CALL =true
2021-03-12 10:44:12,866 [main:67] - randomType = Short?
2021-03-12 10:44:12,988 [main:302] - generating value of type = Short true depth = 0
2021-03-12 10:44:13,052 [main:106] - GETTING Kla5 from String
2021-03-12 10:44:13,083 [main:114] - replacement of prope1 of type Kla5 is Kla5()
2021-03-12 10:44:13,204 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 10:44:13,204 [main:66] - Compilation checking started
2021-03-12 10:44:13,854 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            prope1.fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        prope1.fu12()
    }
    fu1 { require(true)}
    prope1.fu13(numberOfSuspensions = 4)
    Kla5().fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = ("juxnb".bar()).compareTo("wgdrs").inv())
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + ("juxnb".bar()).get(231319885).uppercase() + " has no state-machine " +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:44:13,856 [main:107] - replacing ("tail-call optimization hit: method " + ("juxnb".bar()).get(231319885).uppercase(), String)
2021-03-12 10:44:13,857 [main:50] - replacing "tail-call optimization hit: method " + ("juxnb".bar()).get(231319885).uppercase() String
2021-03-12 10:44:13,857 [main:54] - Getting value of type String
2021-03-12 10:44:13,989 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:44:13,991 [main:58] - GENERATED VALUE OF TYPE String = "cycmj"
2021-03-12 10:44:13,991 [main:61] - GENERATED IS CALL =false
2021-03-12 10:44:14,678 [main:67] - randomType = LinkedHashMap<UByte, Map<UByte, Long>>
2021-03-12 10:44:14,837 [main:302] - generating value of type = LinkedHashMap<UByte, Map<UByte, Long>> false depth = 0
2021-03-12 10:44:14,969 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<UByte, Map<UByte, Long>>): LkedHashMap<UByte, Map<UByte, Long>> = TODO()
2021-03-12 10:44:14,972 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<UByte, Map<UByte, Long>>): LkedHashMap<UByte, Map<UByte, Long>> = TODO()
2021-03-12 10:44:15,099 [main:302] - generating value of type = Pair<UByte, Map<UByte, Long>> false depth = 3
2021-03-12 10:44:15,227 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: UByte, second: Map<UByte, Long>): Pair<UByte, Map<UByte, Long>> = TODO()
2021-03-12 10:44:15,230 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: UByte, second: Map<UByte, Long>): Pair<UByte, Map<UByte, Long>> = TODO()
2021-03-12 10:44:15,359 [main:302] - generating value of type = UByte true depth = 6
2021-03-12 10:44:15,361 [main:302] - generating value of type = Map<UByte, Long> false depth = 6
2021-03-12 10:44:15,492 [main:43] - GENERATING CALL OF fun <K, V> buildMap(capacity: kotlin.Int, builderAction: kotlin.collections.MutableMap<UByte, Long>.()->kotlin.Unit): Map<UByte, Long> = TODO()
2021-03-12 10:44:15,495 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> buildMap(capacity: kotlin.Int, builderAction: kotlin.collections.MutableMap<UByte, Long>.()->kotlin.Unit): Map<UByte, Long> = TODO()
2021-03-12 10:44:15,930 [main:302] - generating value of type = Int true depth = 9
2021-03-12 10:44:15,932 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<MutableMap<UByte, Long>, Unit> false depth = 9
2021-03-12 10:44:15,934 [main:302] - generating value of type = Unit false depth = 10
2021-03-12 10:44:16,117 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 10:44:16,121 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 10:44:16,432 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 13
2021-03-12 10:44:16,434 [main:302] - generating value of type = Unit false depth = 14
2021-03-12 10:44:16,569 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 10:44:16,572 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 10:44:16,863 [main:302] - generating value of type = Any false depth = 17
2021-03-12 10:44:16,863 [main:385] - Cant generate call of fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 10:44:16,863 [main:95] - GENERATED = contract({ })
2021-03-12 10:44:16,864 [main:95] - GENERATED = buildMap<UByte, Long>(-2123387154, { contract({ })})
2021-03-12 10:44:16,864 [main:95] - GENERATED = Pair<UByte, Map<UByte, Long>>(27.toUByte(), buildMap<UByte, Long>(-2123387154, { contract({ })}))
2021-03-12 10:44:16,865 [main:95] - GENERATED = linkedMapOf<UByte, Map<UByte, Long>>(Pair<UByte, Map<UByte, Long>>(27.toUByte(), buildMap<UByte, Long>(-2123387154, { contract({ })})))
2021-03-12 10:44:17,069 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4203bb7]
2021-03-12 10:44:17,212 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:44:17,214 [main:78] - Generated call from random type = (linkedMapOf<UByte, Map<UByte, Long>>(Pair<UByte, Map<UByte, Long>>(27.toUByte(), buildMap<UByte, Long>(-2123387154, { contract({ })})))).size.toString(-1985857193)
2021-03-12 10:44:17,214 [main:106] - GETTING String from String
2021-03-12 10:44:17,248 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14cc2fdd]]
2021-03-12 10:44:17,248 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14cc2fdd]
2021-03-12 10:44:17,401 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:44:17,403 [main:117] - GENERATED CALL = ("juxnb".bar()).replaceAfter('鹻', "juxnb".bar(), "juxnb".bar())
2021-03-12 10:44:17,403 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a1e902a]]
2021-03-12 10:44:17,403 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a1e902a]
2021-03-12 10:44:17,403 [main:117] - GENERATED CALL = ("juxnb".bar()).reversed()
2021-03-12 10:44:17,403 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b32c95b]]
2021-03-12 10:44:17,403 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b32c95b]
2021-03-12 10:44:17,528 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:44:17,531 [main:117] - GENERATED CALL = ("juxnb".bar()).substring(-305185095)
2021-03-12 10:44:17,531 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36df92ac]]
2021-03-12 10:44:17,531 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735]
2021-03-12 10:44:17,657 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:44:17,791 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:44:17,794 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36df92ac]
2021-03-12 10:44:17,918 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:44:18,052 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:44:18,054 [main:117] - GENERATED CALL = ("juxnb".bar()).subSequence(2105826094, 56203164).commonPrefixWith("xadnk", true)
2021-03-12 10:44:18,054 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3cd33897], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46c70c5]]
2021-03-12 10:44:18,054 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3cd33897]
2021-03-12 10:44:18,183 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:44:18,185 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46c70c5]
2021-03-12 10:44:18,186 [main:117] - GENERATED CALL = ("juxnb".bar()).get(-973586832).lowercase()
2021-03-12 10:44:18,186 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@590784be], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4203bb7]]
2021-03-12 10:44:18,186 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@590784be]
2021-03-12 10:44:18,186 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4203bb7]
2021-03-12 10:44:18,313 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:44:18,315 [main:117] - GENERATED CALL = ("juxnb".bar()).compareTo("juxnb".bar()).toString(-1012867500)
2021-03-12 10:44:18,315 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52ed3516]]
2021-03-12 10:44:18,315 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52ed3516]
2021-03-12 10:44:18,447 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:44:18,598 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:44:18,600 [main:117] - GENERATED CALL = ("juxnb".bar()).padEnd(-589096338, '཮')
2021-03-12 10:44:18,600 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24f3ed36]]
2021-03-12 10:44:18,600 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24f3ed36]
2021-03-12 10:44:18,749 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:44:18,751 [main:117] - GENERATED CALL = ("juxnb".bar()).prependIndent("hilyj")
2021-03-12 10:44:18,751 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36df92ac]]
2021-03-12 10:44:18,751 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36df92ac]
2021-03-12 10:44:18,890 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:44:19,029 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:44:19,032 [main:117] - GENERATED CALL = ("juxnb".bar()).commonPrefixWith(StringBuilder(), true)
2021-03-12 10:44:19,032 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28299528]]
2021-03-12 10:44:19,032 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28299528]
2021-03-12 10:44:19,158 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:44:19,160 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:44:19,162 [main:117] - GENERATED CALL = ("juxnb".bar()).takeLastWhile({a: Char -> true})
2021-03-12 10:44:19,163 [main:114] - replacement of "tail-call optimization hit: method " + ("juxnb".bar()).get(231319885).uppercase() of type String is ("juxnb".bar()).reversed()
2021-03-12 10:44:19,292 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:44:19,292 [main:66] - Compilation checking started
2021-03-12 10:44:19,901 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            prope1.fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        prope1.fu12()
    }
    fu1 { require(true)}
    prope1.fu13(numberOfSuspensions = 4)
    Kla5().fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = ("juxnb".bar()).compareTo("wgdrs").inv())
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error(("juxnb".bar()).reversed() + " has no state-machine " +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:44:19,904 [main:107] - replacing (prope7, Function0<Unit>)
2021-03-12 10:44:19,904 [main:50] - replacing prope7 Function0<Unit>
2021-03-12 10:44:19,904 [main:54] - Getting value of type Function0<Unit>
2021-03-12 10:44:20,058 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 10:44:20,062 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:44:20,234 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 10:44:20,237 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 10:44:20,667 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 10:44:20,669 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 10:44:20,671 [main:302] - generating value of type = Any false depth = 5
2021-03-12 10:44:20,671 [main:95] - GENERATED = check(false, { "lpqjr"})
2021-03-12 10:44:20,672 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false, { "lpqjr"})}
2021-03-12 10:44:20,672 [main:61] - GENERATED IS CALL =false
2021-03-12 10:44:20,679 [main:67] - randomType = Kla0
2021-03-12 10:44:20,680 [main:106] - GETTING Function0<Unit> from String
2021-03-12 10:44:20,708 [main:114] - replacement of prope7 of type Function0<Unit> is { check(false, { "lpqjr"})}
2021-03-12 10:44:20,831 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 10:44:20,831 [main:66] - Compilation checking started
2021-03-12 10:44:21,218 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            prope1.fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        prope1.fu12()
    }
    fu1 { require(true)}
    prope1.fu13(numberOfSuspensions = 4)
    Kla5().fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = ("juxnb".bar()).compareTo("wgdrs").inv())
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error(("juxnb".bar()).reversed() + " has no state-machine " +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().{ check(false, { "lpqjr"})} = {
            prope1.prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:44:21,221 [main:107] - replacing (c2, SuspendFunction0<Unit>)
2021-03-12 10:44:21,221 [main:50] - replacing c2 SuspendFunction0<Unit>
2021-03-12 10:44:21,221 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-12 10:44:21,346 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-12 10:44:21,348 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:44:21,481 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 10:44:21,484 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 10:44:21,928 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 10:44:21,930 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 10:44:21,932 [main:302] - generating value of type = Any false depth = 5
2021-03-12 10:44:21,932 [main:95] - GENERATED = require(true, { "pshoz"})
2021-03-12 10:44:21,932 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { require(true, { "pshoz"})}
2021-03-12 10:44:21,932 [main:61] - GENERATED IS CALL =false
2021-03-12 10:44:22,081 [main:67] - randomType = Kla2?
2021-03-12 10:44:22,212 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 10:44:22,214 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}
2021-03-12 10:44:22,241 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-12 10:44:22,267 [main:114] - replacement of c2 of type SuspendFunction0<Unit> is { require(true, { "pshoz"})}
2021-03-12 10:44:22,392 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 10:44:22,392 [main:66] - Compilation checking started
2021-03-12 10:44:22,792 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }

        override suspend fun fu5() {
            c2()
            { require(true, { "pshoz"})}()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            prope1.fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        prope1.fu12()
    }
    fu1 { require(true)}
    prope1.fu13(numberOfSuspensions = 4)
    Kla5().fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = ("juxnb".bar()).compareTo("wgdrs").inv())
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error(("juxnb".bar()).reversed() + " has no state-machine " +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:44:22,794 [main:107] - replacing (prope3.getOrThrow(), Ty0)
2021-03-12 10:44:22,794 [main:50] - replacing prope3.getOrThrow() Ty0
2021-03-12 10:44:22,794 [main:54] - Getting value of type Ty0
2021-03-12 10:44:22,930 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 10:44:22,935 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 10:44:23,084 [main:67] - randomType = Kla4?
2021-03-12 10:44:23,235 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 10:44:23,238 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error(("juxnb".bar()).reversed() + " has no state-machine " +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}
2021-03-12 10:44:23,250 [main:106] - GETTING Ty0 from String
2021-03-12 10:44:23,284 [main:111] - Cant find and generate replacement for prope3.getOrThrow() type Ty0
2021-03-12 10:44:23,284 [main:107] - replacing (c, SuspendFunction0<Unit>)
2021-03-12 10:44:23,284 [main:50] - replacing c SuspendFunction0<Unit>
2021-03-12 10:44:23,284 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-12 10:44:23,419 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-12 10:44:23,421 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:44:23,560 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 10:44:23,563 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 10:44:23,988 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 10:44:23,990 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 10:44:23,995 [main:302] - generating value of type = Any false depth = 5
2021-03-12 10:44:23,995 [main:95] - GENERATED = require(false, { "hldrr"})
2021-03-12 10:44:23,995 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { require(false, { "hldrr"})}
2021-03-12 10:44:23,995 [main:61] - GENERATED IS CALL =false
2021-03-12 10:44:24,137 [main:67] - randomType = Kla1?
2021-03-12 10:44:24,267 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 10:44:24,269 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}
2021-03-12 10:44:24,390 [main:194] - Type params = []
2021-03-12 10:44:24,514 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 10:44:24,666 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:44:24,669 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:44:24,966 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 10:44:25,106 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:44:25,109 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:44:25,527 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:44:25,527 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:44:25,547 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-12 10:44:25,571 [main:114] - replacement of c of type SuspendFunction0<Unit> is { require(false, { "hldrr"})}
2021-03-12 10:44:25,701 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 10:44:25,702 [main:66] - Compilation checking started
2021-03-12 10:44:26,110 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            c()
            { require(false, { "hldrr"})}()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            prope1.fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        prope1.fu12()
    }
    fu1 { require(true)}
    prope1.fu13(numberOfSuspensions = 4)
    Kla5().fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = ("juxnb".bar()).compareTo("wgdrs").inv())
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error(("juxnb".bar()).reversed() + " has no state-machine " +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:44:26,113 [main:107] - replacing (fu0(
        {
            prope1.fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        prope1.fu12()
    }, Kla0)
2021-03-12 10:44:26,113 [main:50] - replacing fu0(
        {
            prope1.fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        prope1.fu12()
    } Kla0
2021-03-12 10:44:26,113 [main:54] - Getting value of type Kla0
2021-03-12 10:44:26,276 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 10:44:26,279 [main:112] - generating klass Kla0 text = interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}
2021-03-12 10:44:26,541 [main:58] - GENERATED VALUE OF TYPE Kla0 = TODO()
2021-03-12 10:44:26,541 [main:61] - GENERATED IS CALL =true
2021-03-12 10:44:26,548 [main:67] - randomType = Kla0
2021-03-12 10:44:26,549 [main:106] - GETTING Kla0 from String
2021-03-12 10:44:26,572 [main:114] - replacement of fu0(
        {
            prope1.fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        prope1.fu12()
    } of type Kla0 is TODO()
2021-03-12 10:44:26,694 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 10:44:26,694 [main:66] - Compilation checking started
2021-03-12 10:44:27,070 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = TODO()
    fu1 { require(true)}
    prope1.fu13(numberOfSuspensions = 4)
    Kla5().fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = ("juxnb".bar()).compareTo("wgdrs").inv())
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error(("juxnb".bar()).reversed() + " has no state-machine " +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:44:27,073 [main:107] - replacing (exceptionOrNull(), Throwable?)
2021-03-12 10:44:27,073 [main:50] - replacing exceptionOrNull() Throwable?
2021-03-12 10:44:27,073 [main:54] - Getting value of type Throwable?
2021-03-12 10:44:27,209 [main:58] - GENERATED VALUE OF TYPE Throwable? = null
2021-03-12 10:44:27,209 [main:61] - GENERATED IS CALL =false
2021-03-12 10:44:27,501 [main:67] - randomType = ArrayDeque<UInt>
2021-03-12 10:44:27,655 [main:302] - generating value of type = ArrayDeque<UInt> false depth = 0
2021-03-12 10:44:27,791 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<UInt> = TODO()
2021-03-12 10:44:27,795 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<UInt> = TODO()
2021-03-12 10:44:27,966 [main:95] - GENERATED = ArrayDeque<UInt>()
2021-03-12 10:44:28,177 [main:106] - GETTING Throwable? from String
2021-03-12 10:44:28,215 [main:114] - replacement of exceptionOrNull() of type Throwable? is null
2021-03-12 10:44:28,351 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(NULL)
2021-03-12 10:44:28,352 [main:66] - Compilation checking started
2021-03-12 10:44:28,757 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            prope1.fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        prope1.fu12()
    }
    fu1 { require(true)}
    prope1.fu13(numberOfSuspensions = 4)
    Kla5().fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = ("juxnb".bar()).compareTo("wgdrs").inv())
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.null?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error(("juxnb".bar()).reversed() + " has no state-machine " +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:44:28,760 [main:107] - replacing ({
        prope3.exceptionOrNull()?.let(x)
    }, Unit?)
2021-03-12 10:44:28,761 [main:50] - replacing {
        prope3.exceptionOrNull()?.let(x)
    } Unit?
2021-03-12 10:44:28,761 [main:54] - Getting value of type Unit?
2021-03-12 10:44:28,901 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 10:44:29,044 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 10:44:29,050 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 10:44:29,514 [main:302] - generating value of type = Boolean true depth = 3
2021-03-12 10:44:29,516 [main:302] - generating value of type = Function0<Any> false depth = 3
2021-03-12 10:44:29,518 [main:302] - generating value of type = Any false depth = 4
2021-03-12 10:44:29,518 [main:95] - GENERATED = require(false, { "ukoyh"})
2021-03-12 10:44:29,518 [main:58] - GENERATED VALUE OF TYPE Unit? = require(false, { "ukoyh"})
2021-03-12 10:44:29,518 [main:61] - GENERATED IS CALL =true
2021-03-12 10:44:29,803 [main:67] - randomType = LinkedHashSet<UShort>
2021-03-12 10:44:29,923 [main:302] - generating value of type = LinkedHashSet<UShort> false depth = 0
2021-03-12 10:44:30,051 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: UShort): LkedHashSet<UShort> = TODO()
2021-03-12 10:44:30,054 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: UShort): LkedHashSet<UShort> = TODO()
2021-03-12 10:44:30,185 [main:302] - generating value of type = UShort true depth = 3
2021-03-12 10:44:30,187 [main:95] - GENERATED = linkedSetOf<UShort>(4049.toUShort())
2021-03-12 10:44:30,379 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@236dd1d2]
2021-03-12 10:44:30,379 [main:149] - GENERATING call of type public fun <T> kotlin.Array<out T>.sortWith(comparator: kotlin.Comparator<in T>): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@406a9828]
2021-03-12 10:44:30,515 [main:302] - generating value of type = Comparator<in T> false depth = 0
2021-03-12 10:44:30,658 [main:43] - GENERATING CALL OF fun <T> compareBy(selector: (T)->kotlin.Comparable<*>?): Comparator<T> = TODO()
2021-03-12 10:44:30,662 [main:61] - WITHOUT TYPE PARAMS = fun <T> compareBy(selector: (T)->kotlin.Comparable<*>?): Comparator<T> = TODO()
2021-03-12 10:44:30,939 [main:385] - Cant generate call of fun <T> compareBy(selector: (T)->kotlin.Comparable<*>?): Comparator<T> = TODO()
2021-03-12 10:44:30,939 [main:158] - CANT GENERATE PARAMS FOR public fun <T> kotlin.Array<out T>.sortWith(comparator: kotlin.Comparator<in T>): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@406a9828]
2021-03-12 10:44:30,939 [main:78] - Generated call from random type = (linkedSetOf<UShort>(4049.toUShort())).null
2021-03-12 10:44:30,947 [main:106] - GETTING Unit? from String
2021-03-12 10:44:30,970 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735], public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7686f83f]]
2021-03-12 10:44:30,970 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735]
2021-03-12 10:44:31,094 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:44:31,217 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:44:31,220 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7686f83f]
2021-03-12 10:44:31,380 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-12 10:44:31,383 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:44:31,389 [main:117] - GENERATED CALL = ("juxnb".bar())?.subSequence(-55614285, -1935535038).forEachIndexed({a: Int, b: Char -> println()})
2021-03-12 10:44:31,389 [main:113] - Case = [public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7686f83f]]
2021-03-12 10:44:31,389 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7686f83f]
2021-03-12 10:44:31,515 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-12 10:44:31,517 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:44:31,646 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 10:44:31,649 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 10:44:31,925 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 10:44:31,928 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 10:44:31,933 [main:95] - GENERATED = contract({ println()})
2021-03-12 10:44:31,934 [main:117] - GENERATED CALL = ("juxnb".bar())?.forEachIndexed({a: Int, b: Char -> contract({ println()})})
2021-03-12 10:44:31,934 [main:113] - Case = [public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4eccbe8e]]
2021-03-12 10:44:31,934 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4eccbe8e]
2021-03-12 10:44:32,101 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-12 10:44:32,104 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:44:32,238 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 10:44:32,240 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 10:44:32,514 [main:302] - generating value of type = Any false depth = 4
2021-03-12 10:44:32,514 [main:95] - GENERATED = println("bqefp")
2021-03-12 10:44:32,514 [main:117] - GENERATED CALL = ("juxnb".bar())?.forEach({a: Char -> println("bqefp")})
2021-03-12 10:44:32,514 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735], public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4eccbe8e]]
2021-03-12 10:44:32,514 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735]
2021-03-12 10:44:32,643 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:44:32,782 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:44:32,784 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4eccbe8e]
2021-03-12 10:44:32,920 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-12 10:44:32,922 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:44:33,096 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 10:44:33,100 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 10:44:33,509 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 10:44:33,511 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 10:44:33,513 [main:302] - generating value of type = Any false depth = 5
2021-03-12 10:44:33,513 [main:95] - GENERATED = require(false, { "emqgm"})
2021-03-12 10:44:33,513 [main:117] - GENERATED CALL = ("juxnb".bar())?.subSequence(-395661394, -24335749).forEach({a: Char -> require(false, { "emqgm"})})
2021-03-12 10:44:33,513 [main:114] - replacement of {
        prope3.exceptionOrNull()?.let(x)
    } of type Unit? is ("juxnb".bar())?.subSequence(-395661394, -24335749).forEach({a: Char -> require(false, { "emqgm"})})
2021-03-12 10:44:33,640 [main:33] - Trying to replace BLOCK on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:44:33,640 [main:66] - Compilation checking started
2021-03-12 10:44:33,645 [main:71] - Wrong syntax or breaks conditions
2021-03-12 10:44:33,645 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            prope1.fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        prope1.fu12()
    }
    fu1 { require(true)}
    prope1.fu13(numberOfSuspensions = 4)
    Kla5().fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = ("juxnb".bar()).compareTo("wgdrs").inv())
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) ("juxnb".bar())?.subSequence(-395661394, -24335749).forEach({a: Char -> require(false, { "emqgm"})})
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error(("juxnb".bar()).reversed() + " has no state-machine " +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:44:33,647 [main:107] - replacing ({
        prope3.exceptionOrNull()?.let(x)
    }, Unit?)
2021-03-12 10:44:33,647 [main:50] - replacing {
        prope3.exceptionOrNull()?.let(x)
    } Unit?
2021-03-12 10:44:33,647 [main:54] - Getting value of type Unit?
2021-03-12 10:44:33,773 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 10:44:33,778 [main:58] - GENERATED VALUE OF TYPE Unit? = println()
2021-03-12 10:44:33,778 [main:61] - GENERATED IS CALL =true
2021-03-12 10:44:33,787 [main:67] - randomType = Kla5
2021-03-12 10:44:33,917 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 10:44:33,919 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 10:44:33,931 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.Unit defined in kotlin.Function0[FunctionInvokeDescriptor@67b62632]
2021-03-12 10:44:33,932 [main:78] - Generated call from random type = (Kla5()).prope7.invoke()
2021-03-12 10:44:33,932 [main:114] - replacement of {
        prope3.exceptionOrNull()?.let(x)
    } of type Unit? is (Kla5()).prope7.invoke()
2021-03-12 10:44:34,082 [main:33] - Trying to replace BLOCK on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:44:34,083 [main:66] - Compilation checking started
2021-03-12 10:44:34,089 [main:71] - Wrong syntax or breaks conditions
2021-03-12 10:44:34,090 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            prope1.fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        prope1.fu12()
    }
    fu1 { require(true)}
    prope1.fu13(numberOfSuspensions = 4)
    Kla5().fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = ("juxnb".bar()).compareTo("wgdrs").inv())
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) (Kla5()).prope7.invoke()
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error(("juxnb".bar()).reversed() + " has no state-machine " +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:44:34,092 [main:107] - replacing (prope1, Kla5)
2021-03-12 10:44:34,092 [main:50] - replacing prope1 Kla5
2021-03-12 10:44:34,092 [main:54] - Getting value of type Kla5
2021-03-12 10:44:34,242 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 10:44:34,244 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 10:44:34,245 [main:58] - GENERATED VALUE OF TYPE Kla5 = Kla5()
2021-03-12 10:44:34,245 [main:61] - GENERATED IS CALL =true
2021-03-12 10:44:34,996 [main:67] - randomType = Pair<ArrayDeque<Long>, Boolean>
2021-03-12 10:44:35,196 [main:302] - generating value of type = Pair<ArrayDeque<Long>, Boolean> false depth = 0
2021-03-12 10:44:35,402 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: ArrayDeque<Long>, second: Boolean): Pair<ArrayDeque<Long>, Boolean> = TODO()
2021-03-12 10:44:35,405 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: ArrayDeque<Long>, second: Boolean): Pair<ArrayDeque<Long>, Boolean> = TODO()
2021-03-12 10:44:35,613 [main:302] - generating value of type = ArrayDeque<Long> false depth = 3
2021-03-12 10:44:35,807 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<Long>): ArrayDeque<Long> = TODO()
2021-03-12 10:44:35,811 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<Long>): ArrayDeque<Long> = TODO()
2021-03-12 10:44:36,228 [main:302] - generating value of type = Collection<Long> false depth = 6
2021-03-12 10:44:36,396 [main:43] - GENERATING CALL OF fun <T> listOf(element: Long): Collection<Long> = TODO()
2021-03-12 10:44:36,399 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOf(element: Long): Collection<Long> = TODO()
2021-03-12 10:44:36,568 [main:302] - generating value of type = Long true depth = 9
2021-03-12 10:44:36,570 [main:95] - GENERATED = listOf<Long>(-1675900163206107475)
2021-03-12 10:44:36,570 [main:95] - GENERATED = ArrayDeque<Long>(listOf<Long>(-1675900163206107475))
2021-03-12 10:44:36,571 [main:302] - generating value of type = Boolean true depth = 3
2021-03-12 10:44:36,572 [main:95] - GENERATED = Pair<ArrayDeque<Long>, Boolean>(ArrayDeque<Long>(listOf<Long>(-1675900163206107475)), true)
2021-03-12 10:44:36,602 [main:106] - GETTING Kla5 from String
2021-03-12 10:44:36,647 [main:114] - replacement of prope1 of type Kla5 is Kla5()
2021-03-12 10:44:36,830 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 10:44:36,831 [main:66] - Compilation checking started
2021-03-12 10:44:37,736 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            prope1.fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        prope1.fu12()
    }
    fu1 { require(true)}
    Kla5().fu13(numberOfSuspensions = 4)
    Kla5().fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = ("juxnb".bar()).compareTo("wgdrs").inv())
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error(("juxnb".bar()).reversed() + " has no state-machine " +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:44:37,739 [main:107] - replacing ({ it?.methodName?.startsWith(method) == true }, Function0<Boolean>)
2021-03-12 10:44:37,739 [main:50] - replacing { it?.methodName?.startsWith(method) == true } Function0<Boolean>
2021-03-12 10:44:37,739 [main:54] - Getting value of type Function0<Boolean>
2021-03-12 10:44:37,891 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-12 10:44:37,894 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:44:37,896 [main:58] - GENERATED VALUE OF TYPE Function0<Boolean> = { true}
2021-03-12 10:44:37,897 [main:61] - GENERATED IS CALL =false
2021-03-12 10:44:38,405 [main:67] - randomType = ArrayDeque<UShort?>
2021-03-12 10:44:38,562 [main:302] - generating value of type = ArrayDeque<UShort?> false depth = 0
2021-03-12 10:44:38,723 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<UShort?> = TODO()
2021-03-12 10:44:38,727 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<UShort?> = TODO()
2021-03-12 10:44:38,882 [main:95] - GENERATED = ArrayDeque<UShort?>()
2021-03-12 10:44:39,123 [main:106] - GETTING Function0<Boolean> from String
2021-03-12 10:44:39,159 [main:114] - replacement of { it?.methodName?.startsWith(method) == true } of type Function0<Boolean> is { true}
2021-03-12 10:44:39,339 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 10:44:39,340 [main:66] - Compilation checking started
2021-03-12 10:44:40,168 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            prope1.fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        prope1.fu12()
    }
    fu1 { require(true)}
    Kla5().fu13(numberOfSuspensions = 4)
    Kla5().fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = ("juxnb".bar()).compareTo("wgdrs").inv())
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope4.find { true} ?: error(("juxnb".bar()).reversed() + " has no state-machine " +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:44:40,170 [main:107] - replacing (i, Int)
2021-03-12 10:44:40,171 [main:50] - replacing i Int
2021-03-12 10:44:40,171 [main:54] - Getting value of type Int
2021-03-12 10:44:40,339 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:44:40,341 [main:58] - GENERATED VALUE OF TYPE Int = -828494309
2021-03-12 10:44:40,341 [main:61] - GENERATED IS CALL =false
2021-03-12 10:44:40,345 [main:67] - randomType = Int
2021-03-12 10:44:40,479 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:44:40,535 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1ad5da90]
2021-03-12 10:44:40,535 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7eb81ff1]
2021-03-12 10:44:40,535 [main:78] - Generated call from random type = (1012564291).toByte().countTrailingZeroBits()
2021-03-12 10:44:40,535 [main:114] - replacement of i of type Int is (1012564291).toByte().countTrailingZeroBits()
2021-03-12 10:44:40,662 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:44:40,662 [main:66] - Compilation checking started
2021-03-12 10:44:41,332 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            prope1.fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        prope1.fu12()
    }
    fu1 { require(true)}
    Kla5().fu13(numberOfSuspensions = 4)
    Kla5().fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = ("juxnb".bar()).compareTo("wgdrs").inv())
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope4.find { true} ?: error(("juxnb".bar()).reversed() + " has no state-machine " +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != (1012564291).toByte().countTrailingZeroBits()) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:44:41,335 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 10:44:41,335 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 10:44:41,335 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 10:44:41,501 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 10:44:41,506 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 10:44:41,665 [main:67] - randomType = Float
2021-03-12 10:44:41,788 [main:302] - generating value of type = Float true depth = 0
2021-03-12 10:44:41,847 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 10:44:41,885 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 10:44:41,886 [main:107] - replacing (prope7, Function0<Unit>)
2021-03-12 10:44:41,886 [main:50] - replacing prope7 Function0<Unit>
2021-03-12 10:44:41,886 [main:54] - Getting value of type Function0<Unit>
2021-03-12 10:44:42,020 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 10:44:42,024 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:44:42,162 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 10:44:42,165 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 10:44:42,607 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 10:44:42,609 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 10:44:42,611 [main:302] - generating value of type = Any false depth = 5
2021-03-12 10:44:42,611 [main:95] - GENERATED = check(true, { "udnwg"})
2021-03-12 10:44:42,611 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true, { "udnwg"})}
2021-03-12 10:44:42,611 [main:61] - GENERATED IS CALL =false
2021-03-12 10:44:42,618 [main:67] - randomType = Kla6
2021-03-12 10:44:42,745 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 10:44:42,747 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}
2021-03-12 10:44:42,778 [main:106] - GETTING Function0<Unit> from String
2021-03-12 10:44:42,807 [main:114] - replacement of prope7 of type Function0<Unit> is { check(true, { "udnwg"})}
2021-03-12 10:44:42,928 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 10:44:42,929 [main:66] - Compilation checking started
2021-03-12 10:44:43,327 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            prope1.fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        prope1.fu12()
    }
    fu1 { require(true)}
    Kla5().fu13(numberOfSuspensions = 4)
    Kla5().fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = ("juxnb".bar()).compareTo("wgdrs").inv())
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope4.find { true} ?: error(("juxnb".bar()).reversed() + " has no state-machine " +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        { check(true, { "udnwg"})} = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != (1012564291).toByte().countTrailingZeroBits()) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:44:43,329 [main:107] - replacing (c, Continuation<*>)
2021-03-12 10:44:43,329 [main:50] - replacing c Continuation<*>
2021-03-12 10:44:43,329 [main:54] - Getting value of type Continuation<*>
2021-03-12 10:44:43,462 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-12 10:44:43,616 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 10:44:43,620 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 10:44:44,069 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 10:44:44,210 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:44:44,213 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:44:44,623 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 10:44:44,799 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:44:44,803 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:44:45,362 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 9
2021-03-12 10:44:45,527 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 10:44:45,531 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 10:44:46,111 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 10:44:46,112 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:44:46,112 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:44:46,112 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 10:44:46,112 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-12 10:44:46,853 [main:67] - randomType = Sequence<ULong?>?
2021-03-12 10:44:46,855 [main:106] - GETTING Continuation<*> from String
2021-03-12 10:44:46,897 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-12 10:44:46,897 [main:107] - replacing ({ c.resume(Unit) }, Function0<Unit>)
2021-03-12 10:44:46,897 [main:50] - replacing { c.resume(Unit) } Function0<Unit>
2021-03-12 10:44:46,897 [main:54] - Getting value of type Function0<Unit>
2021-03-12 10:44:47,058 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 10:44:47,060 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:44:47,221 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 10:44:47,224 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 10:44:47,714 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 10:44:47,717 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 10:44:47,719 [main:302] - generating value of type = Any false depth = 5
2021-03-12 10:44:47,720 [main:95] - GENERATED = check(false, { "ijslw"})
2021-03-12 10:44:47,720 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false, { "ijslw"})}
2021-03-12 10:44:47,720 [main:61] - GENERATED IS CALL =false
2021-03-12 10:44:48,321 [main:67] - randomType = LinkedHashSet<HashMap<Double, Short>>
2021-03-12 10:44:48,456 [main:302] - generating value of type = LinkedHashSet<HashMap<Double, Short>> false depth = 0
2021-03-12 10:44:48,601 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<HashMap<Double, Short>> = TODO()
2021-03-12 10:44:48,604 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<HashMap<Double, Short>> = TODO()
2021-03-12 10:44:48,754 [main:95] - GENERATED = linkedSetOf<HashMap<Double, Short>>()
2021-03-12 10:44:49,009 [main:106] - GETTING Function0<Unit> from String
2021-03-12 10:44:49,032 [main:114] - replacement of { c.resume(Unit) } of type Function0<Unit> is { check(false, { "ijslw"})}
2021-03-12 10:44:49,167 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 10:44:49,168 [main:66] - Compilation checking started
2021-03-12 10:44:49,963 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            prope1.fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        prope1.fu12()
    }
    fu1 { require(true)}
    Kla5().fu13(numberOfSuspensions = 4)
    Kla5().fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = ("juxnb".bar()).compareTo("wgdrs").inv())
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope4.find { true} ?: error(("juxnb".bar()).reversed() + " has no state-machine " +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { check(false, { "ijslw"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != (1012564291).toByte().countTrailingZeroBits()) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 10:44:49,966 [main:107] - replacing (exception, Throwable)
2021-03-12 10:44:49,966 [main:50] - replacing exception Throwable
2021-03-12 10:44:49,966 [main:54] - Getting value of type Throwable
2021-03-12 10:44:50,140 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 10:44:50,146 [main:58] - GENERATED VALUE OF TYPE Throwable = ClassCastException()
2021-03-12 10:44:50,147 [main:61] - GENERATED IS CALL =true
2021-03-12 10:44:50,332 [main:67] - randomType = Float
2021-03-12 10:44:50,509 [main:302] - generating value of type = Float true depth = 0
2021-03-12 10:44:50,563 [main:106] - GETTING Throwable from String
2021-03-12 10:44:50,590 [main:114] - replacement of exception of type Throwable is ClassCastException()
2021-03-12 10:44:50,737 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 10:44:50,738 [main:66] - Compilation checking started
2021-03-12 10:44:51,477 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            prope1.fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        prope1.fu12()
    }
    fu1 { require(true)}
    Kla5().fu13(numberOfSuspensions = 4)
    Kla5().fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = ("juxnb".bar()).compareTo("wgdrs").inv())
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope4.find { true} ?: error(("juxnb".bar()).reversed() + " has no state-machine " +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { check(false, { "ijslw"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != (1012564291).toByte().countTrailingZeroBits()) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw ClassCastException()
    }
}


2021-03-12 10:44:51,479 [main:107] - replacing ("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n"), String)
2021-03-12 10:44:51,480 [main:50] - replacing "tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n") String
2021-03-12 10:44:51,480 [main:54] - Getting value of type String
2021-03-12 10:44:51,641 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:44:51,643 [main:58] - GENERATED VALUE OF TYPE String = "anvpe"
2021-03-12 10:44:51,644 [main:61] - GENERATED IS CALL =false
2021-03-12 10:44:51,652 [main:67] - randomType = Kla4
2021-03-12 10:44:51,783 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 10:44:51,785 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope4.find { true} ?: error(("juxnb".bar()).reversed() + " has no state-machine " +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}
2021-03-12 10:44:51,791 [main:106] - GETTING String from String
2021-03-12 10:44:51,829 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5655e036]]
2021-03-12 10:44:51,829 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5655e036]
2021-03-12 10:44:51,961 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:44:51,963 [main:117] - GENERATED CALL = ("juxnb".bar()).substringAfter('⥄', "juxnb".bar())
2021-03-12 10:44:51,963 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@484ded00]]
2021-03-12 10:44:51,963 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@484ded00]
2021-03-12 10:44:51,963 [main:117] - GENERATED CALL = ("juxnb".bar()).toLowerCase()
2021-03-12 10:44:51,963 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3cd33897], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b64cc29]]
2021-03-12 10:44:51,963 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3cd33897]
2021-03-12 10:44:52,091 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:44:52,094 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b64cc29]
2021-03-12 10:44:52,094 [main:117] - GENERATED CALL = ("juxnb".bar()).get(-910862398).uppercase()
2021-03-12 10:44:52,094 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@14d954b4], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4203bb7]]
2021-03-12 10:44:52,094 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4203bb7]
2021-03-12 10:44:52,218 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:44:52,220 [main:117] - GENERATED CALL = ("juxnb".bar()).length.toString(263308141)
2021-03-12 10:44:52,220 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a1e902a]]
2021-03-12 10:44:52,220 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a1e902a]
2021-03-12 10:44:52,220 [main:117] - GENERATED CALL = ("juxnb".bar()).reversed()
2021-03-12 10:44:52,220 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6861604f]]
2021-03-12 10:44:52,220 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6861604f]
2021-03-12 10:44:52,220 [main:117] - GENERATED CALL = ("juxnb".bar()).trimEnd()
2021-03-12 10:44:52,221 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65a1f3c7]]
2021-03-12 10:44:52,221 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65a1f3c7]
2021-03-12 10:44:52,349 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 10:44:52,353 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:44:52,357 [main:117] - GENERATED CALL = ("juxnb".bar()).filterIndexed({a: Int, b: Char -> true})
2021-03-12 10:44:52,357 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3295bad5]]
2021-03-12 10:44:52,357 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3295bad5]
2021-03-12 10:44:52,499 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:44:52,633 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:44:52,635 [main:117] - GENERATED CALL = ("juxnb".bar()).removeRange(2004961391, -1381718420)
2021-03-12 10:44:52,635 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@701b1a8a]]
2021-03-12 10:44:52,635 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@701b1a8a]
2021-03-12 10:44:52,636 [main:117] - GENERATED CALL = ("juxnb".bar()).trimStart()
2021-03-12 10:44:52,636 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@595e8470]]
2021-03-12 10:44:52,636 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@595e8470]
2021-03-12 10:44:52,785 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:44:52,913 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:44:52,915 [main:117] - GENERATED CALL = ("juxnb".bar()).padStart(1940777981, '엋')
2021-03-12 10:44:52,915 [main:114] - replacement of "tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n") of type String is ("juxnb".bar()).substringAfter('⥄', "juxnb".bar())
2021-03-12 10:44:53,042 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:44:53,043 [main:66] - Compilation checking started
2021-03-12 10:44:53,790 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            prope1.fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        prope1.fu12()
    }
    fu1 { require(true)}
    Kla5().fu13(numberOfSuspensions = 4)
    Kla5().fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = ("juxnb".bar()).compareTo("wgdrs").inv())
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error(("juxnb".bar()).substringAfter('⥄', "juxnb".bar())) }
    }

    fun fu10(method: String) {
        prope4.find { true} ?: error(("juxnb".bar()).reversed() + " has no state-machine " +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { check(false, { "ijslw"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != (1012564291).toByte().countTrailingZeroBits()) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw ClassCastException()
    }
}


2021-03-12 10:44:53,793 [main:107] - replacing (prope3, Result<Any?>)
2021-03-12 10:44:53,793 [main:50] - replacing prope3 Result<Any?>
2021-03-12 10:44:53,793 [main:54] - Getting value of type Result<Any?>
2021-03-12 10:44:53,975 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-12 10:44:54,120 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 10:44:54,123 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 10:44:54,474 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-12 10:44:54,477 [main:302] - generating value of type = Any false depth = 4
2021-03-12 10:44:54,477 [main:95] - GENERATED = runCatching<Any?>({ "vtmvd"})
2021-03-12 10:44:54,477 [main:58] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ "vtmvd"})
2021-03-12 10:44:54,477 [main:61] - GENERATED IS CALL =true
2021-03-12 10:44:54,485 [main:67] - randomType = Kla5
2021-03-12 10:44:54,621 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 10:44:54,623 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { check(false, { "ijslw"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != (1012564291).toByte().countTrailingZeroBits()) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 10:44:54,637 [main:106] - GETTING Result<Any?> from String
2021-03-12 10:44:54,682 [main:114] - replacement of prope3 of type Result<Any?> is runCatching<Any?>({ "vtmvd"})
2021-03-12 10:44:54,814 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 10:44:54,814 [main:66] - Compilation checking started
2021-03-12 10:44:55,553 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            prope1.fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        prope1.fu12()
    }
    fu1 { require(true)}
    Kla5().fu13(numberOfSuspensions = 4)
    Kla5().fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = ("juxnb".bar()).compareTo("wgdrs").inv())
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        runCatching<Any?>({ "vtmvd"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error(("juxnb".bar()).substringAfter('⥄', "juxnb".bar())) }
    }

    fun fu10(method: String) {
        prope4.find { true} ?: error(("juxnb".bar()).reversed() + " has no state-machine " +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { check(false, { "ijslw"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != (1012564291).toByte().countTrailingZeroBits()) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw ClassCastException()
    }
}


2021-03-12 10:44:55,555 [main:107] - replacing (", got ", String)
2021-03-12 10:44:55,555 [main:50] - replacing ", got " String
2021-03-12 10:44:55,555 [main:54] - Getting value of type String
2021-03-12 10:44:55,685 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:44:55,687 [main:58] - GENERATED VALUE OF TYPE String = "izsuw"
2021-03-12 10:44:55,687 [main:61] - GENERATED IS CALL =false
2021-03-12 10:44:55,694 [main:67] - randomType = Kla4
2021-03-12 10:44:55,811 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 10:44:55,813 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error(("juxnb".bar()).substringAfter('⥄', "juxnb".bar())) }
    }

    fun fu10(method: String) {
        prope4.find { true} ?: error(("juxnb".bar()).reversed() + " has no state-machine " +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}
2021-03-12 10:44:55,821 [main:106] - GETTING String from String
2021-03-12 10:44:55,847 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e510eb0]]
2021-03-12 10:44:55,847 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e510eb0]
2021-03-12 10:44:55,848 [main:117] - GENERATED CALL = ("juxnb".bar()).trimIndent()
2021-03-12 10:44:55,848 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@236610cf]]
2021-03-12 10:44:55,848 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@236610cf]
2021-03-12 10:44:55,848 [main:117] - GENERATED CALL = ("juxnb".bar()).capitalize()
2021-03-12 10:44:55,848 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@614b3201]]
2021-03-12 10:44:55,848 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@614b3201]
2021-03-12 10:44:55,848 [main:117] - GENERATED CALL = ("juxnb".bar()).lowercase()
2021-03-12 10:44:55,848 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24f3ed36]]
2021-03-12 10:44:55,848 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24f3ed36]
2021-03-12 10:44:55,848 [main:117] - GENERATED CALL = ("juxnb".bar()).prependIndent("juxnb".bar())
2021-03-12 10:44:55,848 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@98faf2d]]
2021-03-12 10:44:55,848 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@98faf2d]
2021-03-12 10:44:55,966 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:44:55,969 [main:117] - GENERATED CALL = ("juxnb".bar()).replaceIndent("rxoum")
2021-03-12 10:44:55,969 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@596aee2c]]
2021-03-12 10:44:55,969 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@596aee2c]
2021-03-12 10:44:55,969 [main:117] - GENERATED CALL = ("juxnb".bar()).decapitalize()
2021-03-12 10:44:55,969 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@701b1a8a]]
2021-03-12 10:44:55,969 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@701b1a8a]
2021-03-12 10:44:55,969 [main:117] - GENERATED CALL = ("juxnb".bar()).trimStart()
2021-03-12 10:44:55,969 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3cd33897], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b64cc29]]
2021-03-12 10:44:55,969 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3cd33897]
2021-03-12 10:44:56,090 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:44:56,092 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b64cc29]
2021-03-12 10:44:56,093 [main:117] - GENERATED CALL = ("juxnb".bar()).get(37823539).uppercase()
2021-03-12 10:44:56,093 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@595e8470]]
2021-03-12 10:44:56,093 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@595e8470]
2021-03-12 10:44:56,226 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:44:56,353 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:44:56,355 [main:117] - GENERATED CALL = ("juxnb".bar()).padStart(-700413770, '⎛')
2021-03-12 10:44:56,355 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a0d92f4]]
2021-03-12 10:44:56,355 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a0d92f4]
2021-03-12 10:44:56,355 [main:117] - GENERATED CALL = ("juxnb".bar()).concat("juxnb".bar())
2021-03-12 10:44:56,355 [main:114] - replacement of ", got " of type String is "izsuw"
2021-03-12 10:44:56,495 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 10:44:56,495 [main:66] - Compilation checking started
2021-03-12 10:44:57,213 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            prope1.fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        prope1.fu12()
    }
    fu1 { require(true)}
    Kla5().fu13(numberOfSuspensions = 4)
    Kla5().fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = ("juxnb".bar()).compareTo("wgdrs").inv())
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        runCatching<Any?>({ "vtmvd"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error(("juxnb".bar()).substringAfter('⥄', "juxnb".bar())) }
    }

    fun fu10(method: String) {
        prope4.find { true} ?: error(("juxnb".bar()).reversed() + " has no state-machine " +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { check(false, { "ijslw"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != (1012564291).toByte().countTrailingZeroBits()) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "izsuw" + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw ClassCastException()
    }
}


2021-03-12 10:44:57,215 [main:107] - replacing (prope1, Kla5)
2021-03-12 10:44:57,216 [main:50] - replacing prope1 Kla5
2021-03-12 10:44:57,216 [main:54] - Getting value of type Kla5
2021-03-12 10:44:57,363 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 10:44:57,365 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { check(false, { "ijslw"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != (1012564291).toByte().countTrailingZeroBits()) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "izsuw" + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 10:44:57,365 [main:58] - GENERATED VALUE OF TYPE Kla5 = Kla5()
2021-03-12 10:44:57,365 [main:61] - GENERATED IS CALL =true
2021-03-12 10:44:57,705 [main:67] - randomType = ArrayDeque<UInt>
2021-03-12 10:44:57,832 [main:302] - generating value of type = ArrayDeque<UInt> false depth = 0
2021-03-12 10:44:57,962 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<UInt> = TODO()
2021-03-12 10:44:57,965 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<UInt> = TODO()
2021-03-12 10:44:58,231 [main:302] - generating value of type = Int true depth = 3
2021-03-12 10:44:58,234 [main:95] - GENERATED = ArrayDeque<UInt>(538780476)
2021-03-12 10:44:58,421 [main:106] - GETTING Kla5 from String
2021-03-12 10:44:58,438 [main:114] - replacement of prope1 of type Kla5 is Kla5()
2021-03-12 10:44:58,558 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 10:44:58,558 [main:66] - Compilation checking started
2021-03-12 10:44:59,181 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            prope1.fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        Kla5().fu12()
    }
    fu1 { require(true)}
    Kla5().fu13(numberOfSuspensions = 4)
    Kla5().fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = ("juxnb".bar()).compareTo("wgdrs").inv())
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        runCatching<Any?>({ "vtmvd"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error(("juxnb".bar()).substringAfter('⥄', "juxnb".bar())) }
    }

    fun fu10(method: String) {
        prope4.find { true} ?: error(("juxnb".bar()).reversed() + " has no state-machine " +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { check(false, { "ijslw"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != (1012564291).toByte().countTrailingZeroBits()) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "izsuw" + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw ClassCastException()
    }
}


2021-03-12 10:44:59,183 [main:107] - replacing (prope5 != (1012564291).toByte().countTrailingZeroBits(), Boolean)
2021-03-12 10:44:59,183 [main:50] - replacing prope5 != (1012564291).toByte().countTrailingZeroBits() Boolean
2021-03-12 10:44:59,183 [main:54] - Getting value of type Boolean
2021-03-12 10:44:59,319 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:44:59,321 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 10:44:59,321 [main:61] - GENERATED IS CALL =false
2021-03-12 10:44:59,325 [main:67] - randomType = String
2021-03-12 10:44:59,440 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:44:59,459 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3cd33897]
2021-03-12 10:44:59,573 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:44:59,575 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@463c49ac]
2021-03-12 10:44:59,689 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:44:59,806 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:44:59,808 [main:78] - Generated call from random type = ("ookni").get(-931123101).equals('䙄', false)
2021-03-12 10:44:59,809 [main:106] - GETTING Boolean from String
2021-03-12 10:44:59,828 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4b992ca0], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@48e8470d]]
2021-03-12 10:44:59,828 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4b992ca0]
2021-03-12 10:44:59,943 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:44:59,943 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@48e8470d]
2021-03-12 10:45:00,058 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:45:00,060 [main:117] - GENERATED CALL = ("juxnb".bar()).equals("bzouy").and(false)
2021-03-12 10:45:00,060 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41a4102e]]
2021-03-12 10:45:00,060 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41a4102e]
2021-03-12 10:45:00,060 [main:117] - GENERATED CALL = ("juxnb".bar()).toBoolean()
2021-03-12 10:45:00,060 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4b992ca0], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1002f8d9]]
2021-03-12 10:45:00,060 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4b992ca0]
2021-03-12 10:45:00,177 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:45:00,177 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1002f8d9]
2021-03-12 10:45:00,177 [main:117] - GENERATED CALL = ("juxnb".bar()).equals("etuyq").not()
2021-03-12 10:45:00,177 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4b992ca0], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4dba01ce]]
2021-03-12 10:45:00,177 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4b992ca0]
2021-03-12 10:45:00,291 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:45:00,292 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4dba01ce]
2021-03-12 10:45:00,411 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:45:00,413 [main:117] - GENERATED CALL = ("juxnb".bar()).equals("soimn").or(true)
2021-03-12 10:45:00,413 [main:113] - Case = [public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51096a70]]
2021-03-12 10:45:00,413 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51096a70]
2021-03-12 10:45:00,533 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:45:00,651 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:45:00,653 [main:117] - GENERATED CALL = ("juxnb".bar()).contains('蝫', true)
2021-03-12 10:45:00,653 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3cd33897], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e3938dc]]
2021-03-12 10:45:00,653 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3cd33897]
2021-03-12 10:45:00,771 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:00,774 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e3938dc]
2021-03-12 10:45:00,774 [main:117] - GENERATED CALL = ("juxnb".bar()).get(-391542279).isUpperCase()
2021-03-12 10:45:00,774 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735], public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2769edd3]]
2021-03-12 10:45:00,774 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735]
2021-03-12 10:45:00,901 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:01,075 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:01,077 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2769edd3]
2021-03-12 10:45:01,077 [main:117] - GENERATED CALL = ("juxnb".bar()).subSequence(1515681677, 889427463).isBlank()
2021-03-12 10:45:01,077 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4b992ca0], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7d1e40f3]]
2021-03-12 10:45:01,077 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4b992ca0]
2021-03-12 10:45:01,239 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:45:01,239 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7d1e40f3]
2021-03-12 10:45:01,359 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:45:01,361 [main:117] - GENERATED CALL = ("juxnb".bar()).equals("fwnzk").xor(true)
2021-03-12 10:45:01,361 [main:113] - Case = [public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7708deed]]
2021-03-12 10:45:01,361 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7708deed]
2021-03-12 10:45:01,362 [main:117] - GENERATED CALL = ("juxnb".bar()).any()
2021-03-12 10:45:01,362 [main:113] - Case = [public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13f79989]]
2021-03-12 10:45:01,362 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13f79989]
2021-03-12 10:45:01,499 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:45:01,501 [main:117] - GENERATED CALL = ("juxnb".bar()).endsWith("juxnb".bar(), false)
2021-03-12 10:45:01,501 [main:114] - replacement of prope5 != (1012564291).toByte().countTrailingZeroBits() of type Boolean is ("juxnb".bar()).toBoolean()
2021-03-12 10:45:01,627 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:45:01,627 [main:66] - Compilation checking started
2021-03-12 10:45:02,264 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            prope1.fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        Kla5().fu12()
    }
    fu1 { require(true)}
    Kla5().fu13(numberOfSuspensions = 4)
    Kla5().fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = ("juxnb".bar()).compareTo("wgdrs").inv())
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        runCatching<Any?>({ "vtmvd"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error(("juxnb".bar()).substringAfter('⥄', "juxnb".bar())) }
    }

    fun fu10(method: String) {
        prope4.find { true} ?: error(("juxnb".bar()).reversed() + " has no state-machine " +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { check(false, { "ijslw"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (("juxnb".bar()).toBoolean()) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "izsuw" + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw ClassCastException()
    }
}


2021-03-12 10:45:02,266 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 10:45:02,266 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 10:45:02,266 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 10:45:02,400 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 10:45:02,409 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 10:45:02,568 [main:67] - randomType = Double
2021-03-12 10:45:02,703 [main:302] - generating value of type = Double true depth = 0
2021-03-12 10:45:02,750 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 10:45:02,773 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 10:45:02,773 [main:107] - replacing (prope1, Kla5)
2021-03-12 10:45:02,773 [main:50] - replacing prope1 Kla5
2021-03-12 10:45:02,773 [main:54] - Getting value of type Kla5
2021-03-12 10:45:02,932 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 10:45:02,934 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { check(false, { "ijslw"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (("juxnb".bar()).toBoolean()) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "izsuw" + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 10:45:02,934 [main:58] - GENERATED VALUE OF TYPE Kla5 = Kla5()
2021-03-12 10:45:02,934 [main:61] - GENERATED IS CALL =true
2021-03-12 10:45:03,207 [main:67] - randomType = UByte?
2021-03-12 10:45:03,322 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 10:45:03,355 [main:106] - GETTING Kla5 from String
2021-03-12 10:45:03,371 [main:114] - replacement of prope1 of type Kla5 is Kla5()
2021-03-12 10:45:03,486 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 10:45:03,486 [main:66] - Compilation checking started
2021-03-12 10:45:04,017 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            prope1.fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        Kla5().fu12()
    }
    fu1 { require(true)}
    Kla5().fu13(numberOfSuspensions = 4)
    Kla5().fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = ("juxnb".bar()).compareTo("wgdrs").inv())
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        runCatching<Any?>({ "vtmvd"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error(("juxnb".bar()).substringAfter('⥄', "juxnb".bar())) }
    }

    fun fu10(method: String) {
        prope4.find { true} ?: error(("juxnb".bar()).reversed() + " has no state-machine " +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { check(false, { "ijslw"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (("juxnb".bar()).toBoolean()) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "izsuw" + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw ClassCastException()
    }
}


2021-03-12 10:45:04,020 [main:107] - replacing (prope7, Function0<Unit>)
2021-03-12 10:45:04,020 [main:50] - replacing prope7 Function0<Unit>
2021-03-12 10:45:04,020 [main:54] - Getting value of type Function0<Unit>
2021-03-12 10:45:04,149 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 10:45:04,151 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:45:04,269 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 10:45:04,271 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 10:45:04,518 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 10:45:04,520 [main:95] - GENERATED = require(false)
2021-03-12 10:45:04,520 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false)}
2021-03-12 10:45:04,520 [main:61] - GENERATED IS CALL =false
2021-03-12 10:45:05,059 [main:67] - randomType = Triple<Kla3<UShort>, Kla6, Double>
2021-03-12 10:45:05,171 [main:302] - generating value of type = Triple<Kla3<UShort>, Kla6, Double> false depth = 0
2021-03-12 10:45:05,309 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Kla3<UShort>, second: Kla6, third: Double): Triple<Kla3<UShort>, Kla6, Double> = TODO()
2021-03-12 10:45:05,314 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Kla3<UShort>, second: Kla6, third: Double): Triple<Kla3<UShort>, Kla6, Double> = TODO()
2021-03-12 10:45:05,443 [main:302] - generating value of type = Kla3<UShort> false depth = 3
2021-03-12 10:45:05,445 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 10:45:05,816 [main:302] - generating value of type = Kla6 false depth = 5
2021-03-12 10:45:05,818 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw ClassCastException()
    }
}
2021-03-12 10:45:05,818 [main:302] - generating value of type = Kla6 false depth = 3
2021-03-12 10:45:05,820 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw ClassCastException()
    }
}
2021-03-12 10:45:05,820 [main:302] - generating value of type = Double true depth = 3
2021-03-12 10:45:05,822 [main:95] - GENERATED = Triple<Kla3<UShort>, Kla6, Double>(Kla6, Kla6, 0.41532118218050995)
2021-03-12 10:45:05,838 [main:106] - GETTING Function0<Unit> from String
2021-03-12 10:45:05,854 [main:114] - replacement of prope7 of type Function0<Unit> is { require(false)}
2021-03-12 10:45:05,969 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 10:45:05,969 [main:66] - Compilation checking started
2021-03-12 10:45:06,348 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            prope1.fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        Kla5().fu12()
    }
    fu1 { require(true)}
    Kla5().fu13(numberOfSuspensions = 4)
    Kla5().fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = ("juxnb".bar()).compareTo("wgdrs").inv())
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        runCatching<Any?>({ "vtmvd"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error(("juxnb".bar()).substringAfter('⥄', "juxnb".bar())) }
    }

    fun fu10(method: String) {
        prope4.find { true} ?: error(("juxnb".bar()).reversed() + " has no state-machine " +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { check(false, { "ijslw"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (("juxnb".bar()).toBoolean()) error(("juxnb".bar()).replace('', '常', true) + prope5)
            { require(false)}()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + "izsuw" + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw ClassCastException()
    }
}


2021-03-12 10:45:06,350 [main:107] - replacing ("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions, String)
2021-03-12 10:45:06,350 [main:50] - replacing "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions String
2021-03-12 10:45:06,350 [main:54] - Getting value of type String
2021-03-12 10:45:06,492 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:45:06,494 [main:58] - GENERATED VALUE OF TYPE String = "zlgmo"
2021-03-12 10:45:06,494 [main:61] - GENERATED IS CALL =false
2021-03-12 10:45:07,295 [main:67] - randomType = Function2<Array<LinkedHashSet<Kla0>>, Function1<Short, Kla2>, Double>
2021-03-12 10:45:07,295 [main:106] - GETTING String from String
2021-03-12 10:45:07,317 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@33f341c7]]
2021-03-12 10:45:07,317 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@33f341c7]
2021-03-12 10:45:07,428 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:45:07,428 [main:117] - GENERATED CALL = ("juxnb".bar()).plus("yggvh")
2021-03-12 10:45:07,429 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46156f94]]
2021-03-12 10:45:07,429 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46156f94]
2021-03-12 10:45:07,540 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:45:07,542 [main:117] - GENERATED CALL = ("juxnb".bar()).replaceAfterLast('䶣', "juxnb".bar(), "juxnb".bar())
2021-03-12 10:45:07,542 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77022855]]
2021-03-12 10:45:07,542 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735]
2021-03-12 10:45:07,655 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:07,769 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:07,772 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77022855]
2021-03-12 10:45:07,907 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:07,909 [main:117] - GENERATED CALL = ("juxnb".bar()).subSequence(94881365, -905569749).repeat(1458434714)
2021-03-12 10:45:07,909 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28299528]]
2021-03-12 10:45:07,909 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28299528]
2021-03-12 10:45:08,032 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:45:08,035 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:45:08,038 [main:117] - GENERATED CALL = ("juxnb".bar()).takeLastWhile({a: Char -> true})
2021-03-12 10:45:08,038 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32388b9b]]
2021-03-12 10:45:08,038 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32388b9b]
2021-03-12 10:45:08,156 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:45:08,157 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:45:08,159 [main:117] - GENERATED CALL = ("juxnb".bar()).dropLastWhile({a: Char -> false})
2021-03-12 10:45:08,159 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36df92ac]]
2021-03-12 10:45:08,160 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735]
2021-03-12 10:45:08,271 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:08,384 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:08,386 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36df92ac]
2021-03-12 10:45:08,496 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:45:08,616 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:45:08,618 [main:117] - GENERATED CALL = ("juxnb".bar()).subSequence(-1290294902, -1546586810).commonPrefixWith("zmwkp", false)
2021-03-12 10:45:08,618 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c79570c]]
2021-03-12 10:45:08,618 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c79570c]
2021-03-12 10:45:08,729 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:45:08,731 [main:117] - GENERATED CALL = ("juxnb".bar()).trimMargin("mqsrx")
2021-03-12 10:45:08,731 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@14d954b4], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4203bb7]]
2021-03-12 10:45:08,731 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4203bb7]
2021-03-12 10:45:08,842 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:08,844 [main:117] - GENERATED CALL = ("juxnb".bar()).length.toString(96283317)
2021-03-12 10:45:08,844 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e23f4b4]]
2021-03-12 10:45:08,844 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e23f4b4]
2021-03-12 10:45:08,956 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:45:09,077 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:45:09,191 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:45:09,193 [main:117] - GENERATED CALL = ("juxnb".bar()).replace('?', '', false)
2021-03-12 10:45:09,193 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6090e155]]
2021-03-12 10:45:09,193 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735]
2021-03-12 10:45:09,304 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:09,449 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:09,452 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6090e155]
2021-03-12 10:45:09,589 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:09,707 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:09,709 [main:117] - GENERATED CALL = ("juxnb".bar()).subSequence(-1405506882, -1841973300).substring(-1190396283, -1091228420)
2021-03-12 10:45:09,709 [main:114] - replacement of "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions of type String is ("juxnb".bar()).subSequence(-1405506882, -1841973300).substring(-1190396283, -1091228420)
2021-03-12 10:45:09,820 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:45:09,820 [main:66] - Compilation checking started
2021-03-12 10:45:10,434 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            prope1.fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        Kla5().fu12()
    }
    fu1 { require(true)}
    Kla5().fu13(numberOfSuspensions = 4)
    Kla5().fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = ("juxnb".bar()).compareTo("wgdrs").inv())
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        runCatching<Any?>({ "vtmvd"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error(("juxnb".bar()).substringAfter('⥄', "juxnb".bar())) }
    }

    fun fu10(method: String) {
        prope4.find { true} ?: error(("juxnb".bar()).reversed() + " has no state-machine " +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { check(false, { "ijslw"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (("juxnb".bar()).toBoolean()) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error(("juxnb".bar()).subSequence(-1405506882, -1841973300).substring(-1190396283, -1091228420) + "izsuw" + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw ClassCastException()
    }
}


2021-03-12 10:45:10,437 [main:107] - replacing (prope3.getOrThrow(), Ty0)
2021-03-12 10:45:10,437 [main:50] - replacing prope3.getOrThrow() Ty0
2021-03-12 10:45:10,437 [main:54] - Getting value of type Ty0
2021-03-12 10:45:10,584 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 10:45:10,589 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 10:45:10,593 [main:67] - randomType = Boolean
2021-03-12 10:45:10,725 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:45:10,738 [main:106] - GETTING Ty0 from String
2021-03-12 10:45:10,758 [main:111] - Cant find and generate replacement for prope3.getOrThrow() type Ty0
2021-03-12 10:45:10,758 [main:107] - replacing (runCatching<Any?>({ "vtmvd"}).getOrThrow(), Any?)
2021-03-12 10:45:10,758 [main:50] - replacing runCatching<Any?>({ "vtmvd"}).getOrThrow() Any?
2021-03-12 10:45:10,758 [main:54] - Getting value of type Any?
2021-03-12 10:45:10,884 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:45:10,885 [main:58] - GENERATED VALUE OF TYPE Any? = "swyml"
2021-03-12 10:45:10,885 [main:61] - GENERATED IS CALL =false
2021-03-12 10:45:11,036 [main:67] - randomType = Kla4?
2021-03-12 10:45:11,151 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 10:45:11,152 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error(("juxnb".bar()).substringAfter('⥄', "juxnb".bar())) }
    }

    fun fu10(method: String) {
        prope4.find { true} ?: error(("juxnb".bar()).reversed() + " has no state-machine " +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}
2021-03-12 10:45:11,159 [main:106] - GETTING Any? from String
2021-03-12 10:45:11,175 [main:114] - replacement of runCatching<Any?>({ "vtmvd"}).getOrThrow() of type Any? is "swyml"
2021-03-12 10:45:11,317 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 10:45:11,318 [main:66] - Compilation checking started
2021-03-12 10:45:12,028 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            prope1.fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        Kla5().fu12()
    }
    fu1 { require(true)}
    Kla5().fu13(numberOfSuspensions = 4)
    Kla5().fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = ("juxnb".bar()).compareTo("wgdrs").inv())
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        "swyml"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error(("juxnb".bar()).substringAfter('⥄', "juxnb".bar())) }
    }

    fun fu10(method: String) {
        prope4.find { true} ?: error(("juxnb".bar()).reversed() + " has no state-machine " +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { check(false, { "ijslw"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (("juxnb".bar()).toBoolean()) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error(("juxnb".bar()).subSequence(-1405506882, -1841973300).substring(-1190396283, -1091228420) + "izsuw" + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw ClassCastException()
    }
}


2021-03-12 10:45:12,031 [main:107] - replacing (prope5, Int)
2021-03-12 10:45:12,032 [main:50] - replacing prope5 Int
2021-03-12 10:45:12,032 [main:54] - Getting value of type Int
2021-03-12 10:45:12,201 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:12,203 [main:58] - GENERATED VALUE OF TYPE Int = -1441845268
2021-03-12 10:45:12,203 [main:61] - GENERATED IS CALL =false
2021-03-12 10:45:12,828 [main:67] - randomType = HashSet<Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>>
2021-03-12 10:45:12,952 [main:302] - generating value of type = HashSet<Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>> false depth = 0
2021-03-12 10:45:13,086 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>): HashSet<Triple<UShort, Function2<Strg, Kla5, Kla4>, Kla2>> = TODO()
2021-03-12 10:45:13,090 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>): HashSet<Triple<UShort, Function2<Strg, Kla5, Kla4>, Kla2>> = TODO()
2021-03-12 10:45:13,229 [main:302] - generating value of type = Triple<UShort, Function2<String, Kla5, Kla4>, Kla2> false depth = 3
2021-03-12 10:45:13,384 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: UShort, second: Function2<String, Kla5, Kla4>, third: Kla2): Triple<UShort, Function2<String, Kla5, Kla4>, Kla2> = TODO()
2021-03-12 10:45:13,387 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: UShort, second: Function2<String, Kla5, Kla4>, third: Kla2): Triple<UShort, Function2<String, Kla5, Kla4>, Kla2> = TODO()
2021-03-12 10:45:13,513 [main:302] - generating value of type = UShort true depth = 6
2021-03-12 10:45:13,515 [main:302] - generating value of type = Function2<String, Kla5, Kla4> false depth = 6
2021-03-12 10:45:13,517 [main:302] - generating value of type = Kla4 false depth = 7
2021-03-12 10:45:13,518 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error(("juxnb".bar()).substringAfter('⥄', "juxnb".bar())) }
    }

    fun fu10(method: String) {
        prope4.find { true} ?: error(("juxnb".bar()).reversed() + " has no state-machine " +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}
2021-03-12 10:45:13,519 [main:302] - generating value of type = Kla2 false depth = 6
2021-03-12 10:45:13,521 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}
2021-03-12 10:45:13,521 [main:95] - GENERATED = Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>(9530.toUShort(), {a: String, b: Kla5 -> Kla4()}, Kla2())
2021-03-12 10:45:13,521 [main:95] - GENERATED = hashSetOf<Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>>(Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>(9530.toUShort(), {a: String, b: Kla5 -> Kla4()}, Kla2()))
2021-03-12 10:45:13,741 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f5efaf8]
2021-03-12 10:45:13,741 [main:78] - Generated call from random type = (hashSetOf<Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>>(Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>(9530.toUShort(), {a: String, b: Kla5 -> Kla4()}, Kla2()))).size.unaryMinus()
2021-03-12 10:45:13,741 [main:114] - replacement of prope5 of type Int is (hashSetOf<Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>>(Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>(9530.toUShort(), {a: String, b: Kla5 -> Kla4()}, Kla2()))).size.unaryMinus()
2021-03-12 10:45:13,865 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:45:13,866 [main:66] - Compilation checking started
2021-03-12 10:45:14,569 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            prope1.fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        Kla5().fu12()
    }
    fu1 { require(true)}
    Kla5().fu13(numberOfSuspensions = 4)
    Kla5().fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = ("juxnb".bar()).compareTo("wgdrs").inv())
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        "swyml"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error(("juxnb".bar()).substringAfter('⥄', "juxnb".bar())) }
    }

    fun fu10(method: String) {
        prope4.find { true} ?: error(("juxnb".bar()).reversed() + " has no state-machine " +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { check(false, { "ijslw"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (("juxnb".bar()).toBoolean()) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error(("juxnb".bar()).subSequence(-1405506882, -1841973300).substring(-1190396283, -1091228420) + "izsuw" + (hashSetOf<Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>>(Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>(9530.toUShort(), {a: String, b: Kla5 -> Kla4()}, Kla2()))).size.unaryMinus())
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw ClassCastException()
    }
}


2021-03-12 10:45:14,571 [main:107] - replacing (prope6, Boolean)
2021-03-12 10:45:14,571 [main:50] - replacing prope6 Boolean
2021-03-12 10:45:14,571 [main:54] - Getting value of type Boolean
2021-03-12 10:45:14,723 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:45:14,727 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 10:45:14,727 [main:61] - GENERATED IS CALL =false
2021-03-12 10:45:14,739 [main:67] - randomType = Kla5
2021-03-12 10:45:14,906 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 10:45:14,910 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { check(false, { "ijslw"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (("juxnb".bar()).toBoolean()) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error(("juxnb".bar()).subSequence(-1405506882, -1841973300).substring(-1190396283, -1091228420) + "izsuw" + (hashSetOf<Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>>(Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>(9530.toUShort(), {a: String, b: Kla5 -> Kla4()}, Kla2()))).size.unaryMinus())
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 10:45:14,919 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@54df485]
2021-03-12 10:45:15,080 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:45:15,080 [main:78] - Generated call from random type = (Kla5()).prope6.equals("eucmd")
2021-03-12 10:45:15,082 [main:106] - GETTING Boolean from String
2021-03-12 10:45:15,114 [main:113] - Case = [public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7708deed]]
2021-03-12 10:45:15,114 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7708deed]
2021-03-12 10:45:15,114 [main:117] - GENERATED CALL = ("juxnb".bar()).any()
2021-03-12 10:45:15,114 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3cd33897], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f470ee8]]
2021-03-12 10:45:15,115 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3cd33897]
2021-03-12 10:45:15,255 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:15,258 [main:149] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f470ee8]
2021-03-12 10:45:15,258 [main:117] - GENERATED CALL = ("juxnb".bar()).get(-1237479535).isLetterOrDigit()
2021-03-12 10:45:15,258 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735], public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c297204]]
2021-03-12 10:45:15,258 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735]
2021-03-12 10:45:15,384 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:15,542 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:15,545 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c297204]
2021-03-12 10:45:15,682 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:15,817 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:45:15,958 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:16,086 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:16,224 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:45:16,227 [main:117] - GENERATED CALL = ("juxnb".bar()).subSequence(1362341452, -1568035898).regionMatches(447068408, "ypmdq", -2132533325, 1873140969, false)
2021-03-12 10:45:16,228 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4b992ca0], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@48e8470d]]
2021-03-12 10:45:16,228 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4b992ca0]
2021-03-12 10:45:16,357 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:45:16,357 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@48e8470d]
2021-03-12 10:45:16,485 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:45:16,488 [main:117] - GENERATED CALL = ("juxnb".bar()).equals("grciq").and(true)
2021-03-12 10:45:16,488 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735], public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51096a70]]
2021-03-12 10:45:16,488 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735]
2021-03-12 10:45:16,645 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:16,802 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:16,806 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51096a70]
2021-03-12 10:45:16,953 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:45:17,083 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:45:17,086 [main:117] - GENERATED CALL = ("juxnb".bar()).subSequence(417426085, 1375577957).contains('䒿', true)
2021-03-12 10:45:17,086 [main:113] - Case = [public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54f3757f]]
2021-03-12 10:45:17,086 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54f3757f]
2021-03-12 10:45:17,213 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:17,216 [main:117] - GENERATED CALL = ("juxnb".bar()).hasSurrogatePairAt(-1044618621)
2021-03-12 10:45:17,216 [main:113] - Case = [public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13f79989]]
2021-03-12 10:45:17,216 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13f79989]
2021-03-12 10:45:17,383 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:45:17,563 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:45:17,568 [main:117] - GENERATED CALL = ("juxnb".bar()).endsWith("rfyuh", true)
2021-03-12 10:45:17,568 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735], public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f7f7d45]]
2021-03-12 10:45:17,569 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735]
2021-03-12 10:45:17,708 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:17,835 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:17,838 [main:149] - GENERATING call of type public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f7f7d45]
2021-03-12 10:45:17,968 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:45:18,093 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:45:18,097 [main:117] - GENERATED CALL = ("juxnb".bar()).subSequence(1498362413, -145961991).startsWith('莅', false)
2021-03-12 10:45:18,097 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a9d57ca]]
2021-03-12 10:45:18,097 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735]
2021-03-12 10:45:18,235 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:18,380 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:18,383 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a9d57ca]
2021-03-12 10:45:18,383 [main:117] - GENERATED CALL = ("juxnb".bar()).subSequence(-1887212081, 1155601598).isNotBlank()
2021-03-12 10:45:18,383 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3cd33897], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3bb3beac]]
2021-03-12 10:45:18,383 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3cd33897]
2021-03-12 10:45:18,516 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:18,519 [main:149] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3bb3beac]
2021-03-12 10:45:18,519 [main:117] - GENERATED CALL = ("juxnb".bar()).get(202294352).isLowerCase()
2021-03-12 10:45:18,520 [main:114] - replacement of prope6 of type Boolean is ("juxnb".bar()).subSequence(-1887212081, 1155601598).isNotBlank()
2021-03-12 10:45:18,653 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:45:18,653 [main:66] - Compilation checking started
2021-03-12 10:45:19,253 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            prope1.fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        Kla5().fu12()
    }
    fu1 { require(true)}
    Kla5().fu13(numberOfSuspensions = 4)
    Kla5().fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = ("juxnb".bar()).compareTo("wgdrs").inv())
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        "swyml"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error(("juxnb".bar()).substringAfter('⥄', "juxnb".bar())) }
    }

    fun fu10(method: String) {
        prope4.find { true} ?: error(("juxnb".bar()).reversed() + " has no state-machine " +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { check(false, { "ijslw"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (("juxnb".bar()).toBoolean()) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error(("juxnb".bar()).subSequence(-1405506882, -1841973300).substring(-1190396283, -1091228420) + "izsuw" + (hashSetOf<Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>>(Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>(9530.toUShort(), {a: String, b: Kla5 -> Kla4()}, Kla2()))).size.unaryMinus())
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !("juxnb".bar()).subSequence(-1887212081, 1155601598).isNotBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw ClassCastException()
    }
}


2021-03-12 10:45:19,256 [main:107] - replacing (1, Int)
2021-03-12 10:45:19,257 [main:50] - replacing 1 Int
2021-03-12 10:45:19,257 [main:54] - Getting value of type Int
2021-03-12 10:45:19,438 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:19,441 [main:58] - GENERATED VALUE OF TYPE Int = -1431368548
2021-03-12 10:45:19,442 [main:61] - GENERATED IS CALL =false
2021-03-12 10:45:19,447 [main:67] - randomType = Int
2021-03-12 10:45:19,582 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:19,647 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@71f0098a]
2021-03-12 10:45:19,647 [main:78] - Generated call from random type = (639155085).toInt().absoluteValue
2021-03-12 10:45:19,649 [main:106] - GETTING Int from String
2021-03-12 10:45:19,682 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@14d954b4], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@74ac4815]]
2021-03-12 10:45:19,682 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@74ac4815]
2021-03-12 10:45:19,818 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:19,820 [main:117] - GENERATED CALL = ("juxnb".bar()).length.xor(-676137375)
2021-03-12 10:45:19,820 [main:113] - Case = [public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@536947f6]]
2021-03-12 10:45:19,821 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@536947f6]
2021-03-12 10:45:19,954 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:45:19,959 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:45:19,964 [main:117] - GENERATED CALL = ("juxnb".bar()).indexOfLast({a: Char -> true})
2021-03-12 10:45:19,964 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@590784be], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26e729ea]]
2021-03-12 10:45:19,964 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@590784be]
2021-03-12 10:45:20,096 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:45:20,099 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@26e729ea]
2021-03-12 10:45:20,099 [main:117] - GENERATED CALL = ("juxnb".bar()).compareTo("itgdz").inv()
2021-03-12 10:45:20,099 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@14d954b4]]
2021-03-12 10:45:20,100 [main:117] - GENERATED CALL = ("juxnb".bar()).length
2021-03-12 10:45:20,100 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735], public abstract val length: kotlin.Int defined in kotlin.CharSequence[DeserializedPropertyDescriptor@79303624]]
2021-03-12 10:45:20,100 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735]
2021-03-12 10:45:20,235 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:20,365 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:20,368 [main:117] - GENERATED CALL = ("juxnb".bar()).subSequence(-1123821264, 1026585885).length
2021-03-12 10:45:20,369 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735], public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11c40377]]
2021-03-12 10:45:20,369 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735]
2021-03-12 10:45:20,491 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:20,615 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:20,617 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11c40377]
2021-03-12 10:45:20,742 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:45:20,745 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:45:20,747 [main:117] - GENERATED CALL = ("juxnb".bar()).subSequence(-1638271772, 860608309).indexOfFirst({a: Char -> false})
2021-03-12 10:45:20,747 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@590784be], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79a89995]]
2021-03-12 10:45:20,748 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@590784be]
2021-03-12 10:45:20,876 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:45:20,879 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@79a89995]
2021-03-12 10:45:21,004 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:21,007 [main:117] - GENERATED CALL = ("juxnb".bar()).compareTo("tfctu").ushr(-1337850045)
2021-03-12 10:45:21,007 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21f8d19f]]
2021-03-12 10:45:21,007 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735]
2021-03-12 10:45:21,162 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:21,329 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:21,334 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21f8d19f]
2021-03-12 10:45:21,334 [main:117] - GENERATED CALL = ("juxnb".bar()).subSequence(-1316846873, -1080401706).count()
2021-03-12 10:45:21,334 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@590784be], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5b72fe6b]]
2021-03-12 10:45:21,334 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@590784be]
2021-03-12 10:45:21,334 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5b72fe6b]
2021-03-12 10:45:21,471 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:21,474 [main:117] - GENERATED CALL = ("juxnb".bar()).compareTo("juxnb".bar()).rotateRight(755601479)
2021-03-12 10:45:21,474 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3cd33897], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@33b5af2b]]
2021-03-12 10:45:21,474 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3cd33897]
2021-03-12 10:45:21,595 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:21,598 [main:117] - GENERATED CALL = ("juxnb".bar()).get(-2020318145).code
2021-03-12 10:45:21,598 [main:114] - replacement of 1 of type Int is ("juxnb".bar()).compareTo("tfctu").ushr(-1337850045)
2021-03-12 10:45:21,719 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:45:21,719 [main:66] - Compilation checking started
2021-03-12 10:45:22,361 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            prope1.fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        Kla5().fu12()
    }
    fu1 { require(true)}
    Kla5().fu13(numberOfSuspensions = 4)
    Kla5().fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = ("juxnb".bar()).compareTo("wgdrs").inv())
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        "swyml"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error(("juxnb".bar()).substringAfter('⥄', "juxnb".bar())) }
    }

    fun fu10(method: String) {
        prope4.find { true} ?: error(("juxnb".bar()).reversed() + " has no state-machine " +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { check(false, { "ijslw"})}
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in ("juxnb".bar()).compareTo("tfctu").ushr(-1337850045)..numberOfSuspensions) {
            if (("juxnb".bar()).toBoolean()) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error(("juxnb".bar()).subSequence(-1405506882, -1841973300).substring(-1190396283, -1091228420) + "izsuw" + (hashSetOf<Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>>(Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>(9530.toUShort(), {a: String, b: Kla5 -> Kla4()}, Kla2()))).size.unaryMinus())
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !("juxnb".bar()).subSequence(-1887212081, 1155601598).isNotBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw ClassCastException()
    }
}


2021-03-12 10:45:22,363 [main:107] - replacing ({ c ->
        prope5++
        prope7 = { check(false, { "ijslw"})}
    }, Function1<Continuation<Unit>, Unit>)
2021-03-12 10:45:22,363 [main:50] - replacing { c ->
        prope5++
        prope7 = { check(false, { "ijslw"})}
    } Function1<Continuation<Unit>, Unit>
2021-03-12 10:45:22,363 [main:54] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-12 10:45:22,485 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-12 10:45:22,487 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:45:22,616 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 10:45:22,619 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 10:45:22,898 [main:302] - generating value of type = Any false depth = 4
2021-03-12 10:45:22,898 [main:95] - GENERATED = print("nwsgt")
2021-03-12 10:45:22,898 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> print("nwsgt")}
2021-03-12 10:45:22,898 [main:61] - GENERATED IS CALL =false
2021-03-12 10:45:22,904 [main:67] - randomType = Char
2021-03-12 10:45:23,033 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:45:23,082 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 10:45:23,106 [main:114] - replacement of { c ->
        prope5++
        prope7 = { check(false, { "ijslw"})}
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> print("nwsgt")}
2021-03-12 10:45:23,235 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 10:45:23,235 [main:66] - Compilation checking started
2021-03-12 10:45:23,820 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            prope1.fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        Kla5().fu12()
    }
    fu1 { require(true)}
    Kla5().fu13(numberOfSuspensions = 4)
    Kla5().fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = ("juxnb".bar()).compareTo("wgdrs").inv())
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        "swyml"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error(("juxnb".bar()).substringAfter('⥄', "juxnb".bar())) }
    }

    fun fu10(method: String) {
        prope4.find { true} ?: error(("juxnb".bar()).reversed() + " has no state-machine " +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> print("nwsgt")}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in ("juxnb".bar()).compareTo("tfctu").ushr(-1337850045)..numberOfSuspensions) {
            if (("juxnb".bar()).toBoolean()) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error(("juxnb".bar()).subSequence(-1405506882, -1841973300).substring(-1190396283, -1091228420) + "izsuw" + (hashSetOf<Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>>(Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>(9530.toUShort(), {a: String, b: Kla5 -> Kla4()}, Kla2()))).size.unaryMinus())
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !("juxnb".bar()).subSequence(-1887212081, 1155601598).isNotBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw ClassCastException()
    }
}


2021-03-12 10:45:23,822 [main:107] - replacing (prope3, Result<Ty0>)
2021-03-12 10:45:23,823 [main:50] - replacing prope3 Result<Ty0>
2021-03-12 10:45:23,823 [main:54] - Getting value of type Result<Ty0>
2021-03-12 10:45:23,955 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-12 10:45:24,089 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 10:45:24,093 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 10:45:24,384 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 10:45:24,384 [main:58] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-12 10:45:24,537 [main:67] - randomType = Kla1?
2021-03-12 10:45:24,658 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 10:45:24,661 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        "swyml"
    }
}
2021-03-12 10:45:24,787 [main:194] - Type params = []
2021-03-12 10:45:24,907 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 10:45:25,034 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:45:25,038 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:45:25,351 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 10:45:25,487 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:45:25,490 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:45:25,913 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 8
2021-03-12 10:45:26,048 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 10:45:26,052 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 10:45:26,480 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 10:45:26,480 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 10:45:26,480 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 10:45:26,494 [main:106] - GETTING Result<Ty0> from String
2021-03-12 10:45:26,515 [main:111] - Cant find and generate replacement for prope3 type Result<Ty0>
2021-03-12 10:45:26,515 [main:107] - replacing (c, SuspendFunction0<Unit>)
2021-03-12 10:45:26,515 [main:50] - replacing c SuspendFunction0<Unit>
2021-03-12 10:45:26,515 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-12 10:45:26,636 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-12 10:45:26,639 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:45:26,771 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 10:45:26,775 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 10:45:27,073 [main:302] - generating value of type = Any false depth = 4
2021-03-12 10:45:27,074 [main:95] - GENERATED = print("bkobo")
2021-03-12 10:45:27,074 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { print("bkobo")}
2021-03-12 10:45:27,074 [main:61] - GENERATED IS CALL =false
2021-03-12 10:45:27,236 [main:67] - randomType = Pair<String, Kla5>
2021-03-12 10:45:27,369 [main:302] - generating value of type = Pair<String, Kla5> false depth = 0
2021-03-12 10:45:27,500 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: String, second: Kla5): Pair<String, Kla5> = TODO()
2021-03-12 10:45:27,504 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: String, second: Kla5): Pair<String, Kla5> = TODO()
2021-03-12 10:45:27,632 [main:302] - generating value of type = String true depth = 3
2021-03-12 10:45:27,635 [main:302] - generating value of type = Kla5 false depth = 3
2021-03-12 10:45:27,637 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> print("nwsgt")}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in ("juxnb".bar()).compareTo("tfctu").ushr(-1337850045)..numberOfSuspensions) {
            if (("juxnb".bar()).toBoolean()) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error(("juxnb".bar()).subSequence(-1405506882, -1841973300).substring(-1190396283, -1091228420) + "izsuw" + (hashSetOf<Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>>(Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>(9530.toUShort(), {a: String, b: Kla5 -> Kla4()}, Kla2()))).size.unaryMinus())
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !("juxnb".bar()).subSequence(-1887212081, 1155601598).isNotBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 10:45:27,637 [main:95] - GENERATED = Pair<String, Kla5>("vamzo", Kla5())
2021-03-12 10:45:27,653 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-12 10:45:27,671 [main:114] - replacement of c of type SuspendFunction0<Unit> is { print("bkobo")}
2021-03-12 10:45:27,798 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 10:45:27,798 [main:66] - Compilation checking started
2021-03-12 10:45:28,260 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    { print("bkobo")}.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            prope1.fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        Kla5().fu12()
    }
    fu1 { require(true)}
    Kla5().fu13(numberOfSuspensions = 4)
    Kla5().fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = ("juxnb".bar()).compareTo("wgdrs").inv())
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        "swyml"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error(("juxnb".bar()).substringAfter('⥄', "juxnb".bar())) }
    }

    fun fu10(method: String) {
        prope4.find { true} ?: error(("juxnb".bar()).reversed() + " has no state-machine " +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> print("nwsgt")}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in ("juxnb".bar()).compareTo("tfctu").ushr(-1337850045)..numberOfSuspensions) {
            if (("juxnb".bar()).toBoolean()) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error(("juxnb".bar()).subSequence(-1405506882, -1841973300).substring(-1190396283, -1091228420) + "izsuw" + (hashSetOf<Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>>(Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>(9530.toUShort(), {a: String, b: Kla5 -> Kla4()}, Kla2()))).size.unaryMinus())
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !("juxnb".bar()).subSequence(-1887212081, 1155601598).isNotBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw ClassCastException()
    }
}


2021-03-12 10:45:28,262 [main:107] - replacing (Kla5().prope7, Function0<Unit>)
2021-03-12 10:45:28,262 [main:50] - replacing Kla5().prope7 Function0<Unit>
2021-03-12 10:45:28,263 [main:54] - Getting value of type Function0<Unit>
2021-03-12 10:45:28,388 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 10:45:28,390 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:45:28,519 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 10:45:28,523 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 10:45:28,810 [main:302] - generating value of type = Any false depth = 4
2021-03-12 10:45:28,810 [main:95] - GENERATED = print("vsvrt")
2021-03-12 10:45:28,810 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { print("vsvrt")}
2021-03-12 10:45:28,810 [main:61] - GENERATED IS CALL =false
2021-03-12 10:45:30,109 [main:67] - randomType = ArrayDeque<Function2<Kla3<String?>, Function2<Kla5, Kla1, Kla2>, ArrayDeque<UInt>>>
2021-03-12 10:45:30,230 [main:302] - generating value of type = ArrayDeque<Function2<Kla3<String?>, Function2<Kla5, Kla1, Kla2>, ArrayDeque<UInt>>> false depth = 0
2021-03-12 10:45:30,364 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<Function2<Kla3<String?>, Function2<Kla5, Kla1, Kla2>, ArrayDeque<UInt>>> = TODO()
2021-03-12 10:45:30,368 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<Function2<Kla3<String?>, Function2<Kla5, Kla1, Kla2>, ArrayDeque<UInt>>> = TODO()
2021-03-12 10:45:30,521 [main:95] - GENERATED = ArrayDeque<Function2<Kla3<String?>, Function2<Kla5, Kla1, Kla2>, ArrayDeque<UInt>>>()
2021-03-12 10:45:30,872 [main:106] - GETTING Function0<Unit> from String
2021-03-12 10:45:30,893 [main:114] - replacement of Kla5().prope7 of type Function0<Unit> is { print("vsvrt")}
2021-03-12 10:45:31,032 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 10:45:31,033 [main:66] - Compilation checking started
2021-03-12 10:45:31,429 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            prope1.fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        Kla5().fu12()
    }
    fu1 { require(true)}
    Kla5().fu13(numberOfSuspensions = 4)
    Kla5().fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = ("juxnb".bar()).compareTo("wgdrs").inv())
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        "swyml"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error(("juxnb".bar()).substringAfter('⥄', "juxnb".bar())) }
    }

    fun fu10(method: String) {
        prope4.find { true} ?: error(("juxnb".bar()).reversed() + " has no state-machine " +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> print("nwsgt")}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in ("juxnb".bar()).compareTo("tfctu").ushr(-1337850045)..numberOfSuspensions) {
            if (("juxnb".bar()).toBoolean()) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error(("juxnb".bar()).subSequence(-1405506882, -1841973300).substring(-1190396283, -1091228420) + "izsuw" + (hashSetOf<Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>>(Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>(9530.toUShort(), {a: String, b: Kla5 -> Kla4()}, Kla2()))).size.unaryMinus())
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !("juxnb".bar()).subSequence(-1887212081, 1155601598).isNotBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        { print("vsvrt")} = {
            Kla5().prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw ClassCastException()
    }
}


2021-03-12 10:45:31,431 [main:107] - replacing (prope3.getOrThrow(), Ty0)
2021-03-12 10:45:31,432 [main:50] - replacing prope3.getOrThrow() Ty0
2021-03-12 10:45:31,432 [main:54] - Getting value of type Ty0
2021-03-12 10:45:31,554 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 10:45:31,560 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 10:45:31,871 [main:67] - randomType = List<Kla6?>
2021-03-12 10:45:31,872 [main:106] - GETTING Ty0 from String
2021-03-12 10:45:31,901 [main:111] - Cant find and generate replacement for prope3.getOrThrow() type Ty0
2021-03-12 10:45:31,902 [main:107] - replacing (c, SuspendFunction0<Unit>)
2021-03-12 10:45:31,902 [main:50] - replacing c SuspendFunction0<Unit>
2021-03-12 10:45:31,902 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-12 10:45:32,030 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-12 10:45:32,033 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:45:32,162 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 10:45:32,165 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 10:45:32,585 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 10:45:32,588 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 10:45:32,591 [main:302] - generating value of type = Any false depth = 5
2021-03-12 10:45:32,591 [main:95] - GENERATED = require(true, { "eybns"})
2021-03-12 10:45:32,591 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { require(true, { "eybns"})}
2021-03-12 10:45:32,591 [main:61] - GENERATED IS CALL =false
2021-03-12 10:45:33,236 [main:67] - randomType = Triple<Kla4, LinkedHashSet<Kla4>, Kla4?>
2021-03-12 10:45:33,358 [main:302] - generating value of type = Triple<Kla4, LinkedHashSet<Kla4>, Kla4?> false depth = 0
2021-03-12 10:45:33,488 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Kla4, second: LinkedHashSet<Kla4>, third: Kla4?): Triple<Kla4, LinkedHashSet<Kla4>, Kla4?> = TODO()
2021-03-12 10:45:33,492 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Kla4, second: LinkedHashSet<Kla4>, third: Kla4?): Triple<Kla4, LinkedHashSet<Kla4>, Kla4?> = TODO()
2021-03-12 10:45:33,620 [main:302] - generating value of type = Kla4 false depth = 3
2021-03-12 10:45:33,623 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error(("juxnb".bar()).substringAfter('⥄', "juxnb".bar())) }
    }

    fun fu10(method: String) {
        prope4.find { true} ?: error(("juxnb".bar()).reversed() + " has no state-machine " +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}
2021-03-12 10:45:33,623 [main:302] - generating value of type = LinkedHashSet<Kla4> false depth = 3
2021-03-12 10:45:33,752 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<Kla4> = TODO()
2021-03-12 10:45:33,755 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<Kla4> = TODO()
2021-03-12 10:45:33,882 [main:95] - GENERATED = linkedSetOf<Kla4>()
2021-03-12 10:45:33,882 [main:302] - generating value of type = Kla4 false depth = 3
2021-03-12 10:45:33,885 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error(("juxnb".bar()).substringAfter('⥄', "juxnb".bar())) }
    }

    fun fu10(method: String) {
        prope4.find { true} ?: error(("juxnb".bar()).reversed() + " has no state-machine " +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}
2021-03-12 10:45:33,885 [main:95] - GENERATED = Triple<Kla4, LinkedHashSet<Kla4>, Kla4?>(Kla4(), linkedSetOf<Kla4>(), Kla4())
2021-03-12 10:45:33,906 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-12 10:45:33,927 [main:114] - replacement of c of type SuspendFunction0<Unit> is { require(true, { "eybns"})}
2021-03-12 10:45:34,047 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 10:45:34,048 [main:66] - Compilation checking started
2021-03-12 10:45:34,658 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            { require(true, { "eybns"})}()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            prope1.fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        Kla5().fu12()
    }
    fu1 { require(true)}
    Kla5().fu13(numberOfSuspensions = 4)
    Kla5().fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = ("juxnb".bar()).compareTo("wgdrs").inv())
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        "swyml"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error(("juxnb".bar()).substringAfter('⥄', "juxnb".bar())) }
    }

    fun fu10(method: String) {
        prope4.find { true} ?: error(("juxnb".bar()).reversed() + " has no state-machine " +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> print("nwsgt")}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in ("juxnb".bar()).compareTo("tfctu").ushr(-1337850045)..numberOfSuspensions) {
            if (("juxnb".bar()).toBoolean()) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error(("juxnb".bar()).subSequence(-1405506882, -1841973300).substring(-1190396283, -1091228420) + "izsuw" + (hashSetOf<Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>>(Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>(9530.toUShort(), {a: String, b: Kla5 -> Kla4()}, Kla2()))).size.unaryMinus())
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !("juxnb".bar()).subSequence(-1887212081, 1155601598).isNotBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw ClassCastException()
    }
}


2021-03-12 10:45:34,661 [main:107] - replacing (checkFinished, Boolean)
2021-03-12 10:45:34,662 [main:50] - replacing checkFinished Boolean
2021-03-12 10:45:34,662 [main:54] - Getting value of type Boolean
2021-03-12 10:45:34,790 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:45:34,793 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 10:45:34,793 [main:61] - GENERATED IS CALL =false
2021-03-12 10:45:34,798 [main:67] - randomType = Int
2021-03-12 10:45:34,920 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:34,982 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@769ac34f]
2021-03-12 10:45:35,106 [main:302] - generating value of type = Double true depth = 0
2021-03-12 10:45:35,109 [main:149] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@2febad2e]
2021-03-12 10:45:35,109 [main:78] - Generated call from random type = (-1970424322).div(0.7345452989636654).isNaN()
2021-03-12 10:45:35,110 [main:106] - GETTING Boolean from String
2021-03-12 10:45:35,130 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4b992ca0], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@48e8470d]]
2021-03-12 10:45:35,130 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4b992ca0]
2021-03-12 10:45:35,250 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:45:35,251 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@48e8470d]
2021-03-12 10:45:35,394 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:45:35,397 [main:117] - GENERATED CALL = ("juxnb".bar()).equals("wykme").and(false)
2021-03-12 10:45:35,397 [main:113] - Case = [public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c297204]]
2021-03-12 10:45:35,397 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c297204]
2021-03-12 10:45:35,519 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:35,641 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:45:35,769 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:35,895 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:36,021 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:45:36,023 [main:117] - GENERATED CALL = ("juxnb".bar()).regionMatches(2095889548, "jhibk", -1475142494, 337639585, false)
2021-03-12 10:45:36,024 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3cd33897], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53a46ee1]]
2021-03-12 10:45:36,024 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3cd33897]
2021-03-12 10:45:36,145 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:36,148 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53a46ee1]
2021-03-12 10:45:36,148 [main:117] - GENERATED CALL = ("juxnb".bar()).get(-413798491).isTitleCase()
2021-03-12 10:45:36,148 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3980420b]]
2021-03-12 10:45:36,148 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3980420b]
2021-03-12 10:45:36,148 [main:117] - GENERATED CALL = ("juxnb".bar()).isEmpty()
2021-03-12 10:45:36,149 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735], @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@242b507d]]
2021-03-12 10:45:36,149 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735]
2021-03-12 10:45:36,284 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:36,405 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:36,408 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@242b507d]
2021-03-12 10:45:36,534 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 10:45:36,674 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 10:45:36,678 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 10:45:37,111 [main:302] - generating value of type = String true depth = 3
2021-03-12 10:45:37,114 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-12 10:45:37,241 [main:43] - GENERATING CALL OF fun <T> setOfNotNull(elements: RegexOption): Set<RegexOption> = TODO()
2021-03-12 10:45:37,246 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOfNotNull(elements: RegexOption): Set<RegexOption> = TODO()
2021-03-12 10:45:37,408 [main:302] - generating value of type = RegexOption false depth = 6
2021-03-12 10:45:37,412 [main:95] - GENERATED = setOfNotNull<RegexOption>(kotlin.text.RegexOption.IGNORE_CASE)
2021-03-12 10:45:37,412 [main:95] - GENERATED = Regex("wvzoh", setOfNotNull<RegexOption>(kotlin.text.RegexOption.IGNORE_CASE))
2021-03-12 10:45:37,412 [main:117] - GENERATED CALL = ("juxnb".bar()).subSequence(-359318472, 1538853601).matches(Regex("wvzoh", setOfNotNull<RegexOption>(kotlin.text.RegexOption.IGNORE_CASE)))
2021-03-12 10:45:37,412 [main:113] - Case = [public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b11bc01]]
2021-03-12 10:45:37,412 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b11bc01]
2021-03-12 10:45:37,534 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:45:37,537 [main:117] - GENERATED CALL = ("juxnb".bar()).startsWith("juxnb".bar(), false)
2021-03-12 10:45:37,537 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735], public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f7f7d45]]
2021-03-12 10:45:37,537 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735]
2021-03-12 10:45:37,658 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:37,784 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:37,787 [main:149] - GENERATING call of type public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f7f7d45]
2021-03-12 10:45:37,908 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:45:38,035 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:45:38,038 [main:117] - GENERATED CALL = ("juxnb".bar()).subSequence(176093033, -1347465441).startsWith('壵', false)
2021-03-12 10:45:38,038 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735], public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c297204]]
2021-03-12 10:45:38,038 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735]
2021-03-12 10:45:38,169 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:38,296 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:38,299 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c297204]
2021-03-12 10:45:38,425 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:38,548 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:45:38,673 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 10:45:38,676 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 10:45:38,953 [main:302] - generating value of type = String true depth = 3
2021-03-12 10:45:38,956 [main:95] - GENERATED = StringBuilder("lnwcb")
2021-03-12 10:45:39,080 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:39,206 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:39,328 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:45:39,332 [main:117] - GENERATED CALL = ("juxnb".bar()).subSequence(2019057844, -360265216).regionMatches(-614682555, StringBuilder("lnwcb"), 447366254, 254892895, false)
2021-03-12 10:45:39,332 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4b992ca0], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4dba01ce]]
2021-03-12 10:45:39,332 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4b992ca0]
2021-03-12 10:45:39,503 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:45:39,503 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4dba01ce]
2021-03-12 10:45:39,687 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:45:39,690 [main:117] - GENERATED CALL = ("juxnb".bar()).equals("pdajd").or(true)
2021-03-12 10:45:39,690 [main:113] - Case = [public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37908f0b]]
2021-03-12 10:45:39,690 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37908f0b]
2021-03-12 10:45:39,690 [main:117] - GENERATED CALL = ("juxnb".bar()).none()
2021-03-12 10:45:39,691 [main:114] - replacement of checkFinished of type Boolean is ("juxnb".bar()).none()
2021-03-12 10:45:39,818 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:45:39,818 [main:66] - Compilation checking started
2021-03-12 10:45:40,418 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            { require(true, { "eybns"})}()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            prope1.fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        Kla5().fu12()
    }
    fu1 { require(true)}
    Kla5().fu13(numberOfSuspensions = 4)
    Kla5().fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = ("juxnb".bar()).compareTo("wgdrs").inv())
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        "swyml"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error(("juxnb".bar()).substringAfter('⥄', "juxnb".bar())) }
    }

    fun fu10(method: String) {
        prope4.find { true} ?: error(("juxnb".bar()).reversed() + " has no state-machine " +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> print("nwsgt")}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in ("juxnb".bar()).compareTo("tfctu").ushr(-1337850045)..numberOfSuspensions) {
            if (("juxnb".bar()).toBoolean()) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error(("juxnb".bar()).subSequence(-1405506882, -1841973300).substring(-1190396283, -1091228420) + "izsuw" + (hashSetOf<Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>>(Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>(9530.toUShort(), {a: String, b: Kla5 -> Kla4()}, Kla2()))).size.unaryMinus())
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (("juxnb".bar()).none() && !("juxnb".bar()).subSequence(-1887212081, 1155601598).isNotBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw ClassCastException()
    }
}


2021-03-12 10:45:40,420 [main:107] - replacing (prope1, Kla5)
2021-03-12 10:45:40,420 [main:50] - replacing prope1 Kla5
2021-03-12 10:45:40,420 [main:54] - Getting value of type Kla5
2021-03-12 10:45:40,547 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 10:45:40,550 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> print("nwsgt")}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in ("juxnb".bar()).compareTo("tfctu").ushr(-1337850045)..numberOfSuspensions) {
            if (("juxnb".bar()).toBoolean()) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error(("juxnb".bar()).subSequence(-1405506882, -1841973300).substring(-1190396283, -1091228420) + "izsuw" + (hashSetOf<Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>>(Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>(9530.toUShort(), {a: String, b: Kla5 -> Kla4()}, Kla2()))).size.unaryMinus())
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (("juxnb".bar()).none() && !("juxnb".bar()).subSequence(-1887212081, 1155601598).isNotBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 10:45:40,550 [main:58] - GENERATED VALUE OF TYPE Kla5 = Kla5()
2021-03-12 10:45:40,550 [main:61] - GENERATED IS CALL =true
2021-03-12 10:45:40,561 [main:67] - randomType = Kla2
2021-03-12 10:45:40,684 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 10:45:40,686 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}
2021-03-12 10:45:40,707 [main:106] - GETTING Kla5 from String
2021-03-12 10:45:40,728 [main:114] - replacement of prope1 of type Kla5 is Kla5()
2021-03-12 10:45:40,852 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 10:45:40,853 [main:66] - Compilation checking started
2021-03-12 10:45:41,444 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            { require(true, { "eybns"})}()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            Kla5().fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        Kla5().fu12()
    }
    fu1 { require(true)}
    Kla5().fu13(numberOfSuspensions = 4)
    Kla5().fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = ("juxnb".bar()).compareTo("wgdrs").inv())
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        "swyml"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error(("juxnb".bar()).substringAfter('⥄', "juxnb".bar())) }
    }

    fun fu10(method: String) {
        prope4.find { true} ?: error(("juxnb".bar()).reversed() + " has no state-machine " +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> print("nwsgt")}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in ("juxnb".bar()).compareTo("tfctu").ushr(-1337850045)..numberOfSuspensions) {
            if (("juxnb".bar()).toBoolean()) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error(("juxnb".bar()).subSequence(-1405506882, -1841973300).substring(-1190396283, -1091228420) + "izsuw" + (hashSetOf<Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>>(Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>(9530.toUShort(), {a: String, b: Kla5 -> Kla4()}, Kla2()))).size.unaryMinus())
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (("juxnb".bar()).none() && !("juxnb".bar()).subSequence(-1887212081, 1155601598).isNotBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw ClassCastException()
    }
}


2021-03-12 10:45:41,447 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 10:45:41,447 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 10:45:41,448 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 10:45:41,593 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 10:45:41,599 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 10:45:41,610 [main:67] - randomType = Kla4
2021-03-12 10:45:41,762 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 10:45:41,765 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error(("juxnb".bar()).substringAfter('⥄', "juxnb".bar())) }
    }

    fun fu10(method: String) {
        prope4.find { true} ?: error(("juxnb".bar()).reversed() + " has no state-machine " +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}
2021-03-12 10:45:41,774 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 10:45:41,794 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 10:45:41,794 [main:107] - replacing (false, Boolean)
2021-03-12 10:45:41,794 [main:50] - replacing false Boolean
2021-03-12 10:45:41,794 [main:54] - Getting value of type Boolean
2021-03-12 10:45:41,921 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:45:41,924 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 10:45:41,924 [main:61] - GENERATED IS CALL =false
2021-03-12 10:45:42,084 [main:67] - randomType = Kla3<Kla6>
2021-03-12 10:45:42,212 [main:302] - generating value of type = Kla3<Kla6> false depth = 0
2021-03-12 10:45:42,215 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 10:45:42,927 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-12 10:45:42,930 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw ClassCastException()
    }
}
2021-03-12 10:45:42,945 [main:149] - GENERATING call of type public open fun resumeWith(prope3: kotlin.Result<Kla6>): kotlin.Unit defined in Kla3[SimpleFunctionDescriptorImpl@3c01332a]
2021-03-12 10:45:43,068 [main:302] - generating value of type = Result<Kla6> false depth = 0
2021-03-12 10:45:43,201 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Kla6): Result<Kla6> = TODO()
2021-03-12 10:45:43,205 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Kla6): Result<Kla6> = TODO()
2021-03-12 10:45:43,477 [main:302] - generating value of type = Function0<Kla6> false depth = 3
2021-03-12 10:45:43,479 [main:302] - generating value of type = Kla6 false depth = 4
2021-03-12 10:45:43,482 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw ClassCastException()
    }
}
2021-03-12 10:45:43,482 [main:95] - GENERATED = runCatching<Kla6>({ Kla6})
2021-03-12 10:45:43,482 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@7faf5e26]
2021-03-12 10:45:43,631 [main:302] - generating value of type = Any false depth = 0
2021-03-12 10:45:43,632 [main:78] - Generated call from random type = (Kla6).resumeWith(runCatching<Kla6>({ Kla6})).equals("cmbal")
2021-03-12 10:45:43,632 [main:106] - GETTING Boolean from String
2021-03-12 10:45:43,651 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41a4102e]]
2021-03-12 10:45:43,651 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41a4102e]
2021-03-12 10:45:43,651 [main:117] - GENERATED CALL = ("juxnb".bar()).toBoolean()
2021-03-12 10:45:43,651 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a9d57ca]]
2021-03-12 10:45:43,652 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735]
2021-03-12 10:45:43,774 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:43,903 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:43,906 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a9d57ca]
2021-03-12 10:45:43,906 [main:117] - GENERATED CALL = ("juxnb".bar()).subSequence(-1048124371, 1176003251).isNotBlank()
2021-03-12 10:45:43,906 [main:113] - Case = [public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54f3757f]]
2021-03-12 10:45:43,907 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54f3757f]
2021-03-12 10:45:44,028 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:44,031 [main:117] - GENERATED CALL = ("juxnb".bar()).hasSurrogatePairAt(-1763475534)
2021-03-12 10:45:44,031 [main:113] - Case = [public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51096a70]]
2021-03-12 10:45:44,032 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51096a70]
2021-03-12 10:45:44,162 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:45:44,288 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:45:44,291 [main:117] - GENERATED CALL = ("juxnb".bar()).contains('㗜', true)
2021-03-12 10:45:44,291 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3cd33897], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6035298d]]
2021-03-12 10:45:44,291 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3cd33897]
2021-03-12 10:45:44,411 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:44,413 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6035298d]
2021-03-12 10:45:44,414 [main:117] - GENERATED CALL = ("juxnb".bar()).get(207015509).isLowSurrogate()
2021-03-12 10:45:44,414 [main:113] - Case = [public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c297204]]
2021-03-12 10:45:44,414 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c297204]
2021-03-12 10:45:44,535 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:44,658 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:45:44,788 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:44,915 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:45,040 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:45:45,042 [main:117] - GENERATED CALL = ("juxnb".bar()).regionMatches(-857697195, "lpmbr", 1288675903, 2040232987, false)
2021-03-12 10:45:45,043 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3cd33897], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@715e3577]]
2021-03-12 10:45:45,043 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3cd33897]
2021-03-12 10:45:45,166 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:45,169 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@715e3577]
2021-03-12 10:45:45,169 [main:117] - GENERATED CALL = ("juxnb".bar()).get(158499449).isSurrogate()
2021-03-12 10:45:45,169 [main:113] - Case = [public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b11bc01]]
2021-03-12 10:45:45,169 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b11bc01]
2021-03-12 10:45:45,330 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:45:45,333 [main:117] - GENERATED CALL = ("juxnb".bar()).startsWith("juxnb".bar(), true)
2021-03-12 10:45:45,333 [main:113] - Case = [public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13f79989]]
2021-03-12 10:45:45,333 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13f79989]
2021-03-12 10:45:45,496 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:45:45,500 [main:117] - GENERATED CALL = ("juxnb".bar()).endsWith("juxnb".bar(), false)
2021-03-12 10:45:45,500 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735], public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7708deed]]
2021-03-12 10:45:45,500 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735]
2021-03-12 10:45:45,631 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:45,762 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:45,765 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7708deed]
2021-03-12 10:45:45,766 [main:117] - GENERATED CALL = ("juxnb".bar()).subSequence(-1392773171, -576853236).any()
2021-03-12 10:45:45,766 [main:114] - replacement of false of type Boolean is ("juxnb".bar()).toBoolean()
2021-03-12 10:45:45,889 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:45:45,890 [main:66] - Compilation checking started
2021-03-12 10:45:46,458 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            { require(true, { "eybns"})}()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            Kla5().fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        Kla5().fu12()
    }
    fu1 { require(true)}
    Kla5().fu13(numberOfSuspensions = 4)
    Kla5().fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = ("juxnb".bar()).compareTo("wgdrs").inv())
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        "swyml"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error(("juxnb".bar()).substringAfter('⥄', "juxnb".bar())) }
    }

    fun fu10(method: String) {
        prope4.find { true} ?: error(("juxnb".bar()).reversed() + " has no state-machine " +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = ("juxnb".bar()).toBoolean()

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> print("nwsgt")}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in ("juxnb".bar()).compareTo("tfctu").ushr(-1337850045)..numberOfSuspensions) {
            if (("juxnb".bar()).toBoolean()) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error(("juxnb".bar()).subSequence(-1405506882, -1841973300).substring(-1190396283, -1091228420) + "izsuw" + (hashSetOf<Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>>(Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>(9530.toUShort(), {a: String, b: Kla5 -> Kla4()}, Kla2()))).size.unaryMinus())
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (("juxnb".bar()).none() && !("juxnb".bar()).subSequence(-1887212081, 1155601598).isNotBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw ClassCastException()
    }
}


2021-03-12 10:45:46,461 [main:107] - replacing (prope2, Kla0)
2021-03-12 10:45:46,462 [main:50] - replacing prope2 Kla0
2021-03-12 10:45:46,462 [main:54] - Getting value of type Kla0
2021-03-12 10:45:46,602 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 10:45:46,605 [main:112] - generating klass Kla0 text = interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}
2021-03-12 10:45:46,877 [main:58] - GENERATED VALUE OF TYPE Kla0 = TODO()
2021-03-12 10:45:46,877 [main:61] - GENERATED IS CALL =true
2021-03-12 10:45:49,093 [main:67] - randomType = Set<Map<Kla6, Function2<HashMap<UInt, MutableMap<Kla1, List<Double>>>, Array<Long>, Set<ArrayDeque<Boolean>>>>?>
2021-03-12 10:45:49,094 [main:106] - GETTING Kla0 from String
2021-03-12 10:45:49,113 [main:114] - replacement of prope2 of type Kla0 is TODO()
2021-03-12 10:45:49,234 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 10:45:49,235 [main:66] - Compilation checking started
2021-03-12 10:45:49,640 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            { require(true, { "eybns"})}()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            Kla5().fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        Kla5().fu12()
    }
    fu1 { require(true)}
    Kla5().fu13(numberOfSuspensions = 4)
    Kla5().fu11()
    fu1 {
        TODO().fu5()
    }
    Kla5().fu13(numberOfSuspensions = ("juxnb".bar()).compareTo("wgdrs").inv())
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        "swyml"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error(("juxnb".bar()).substringAfter('⥄', "juxnb".bar())) }
    }

    fun fu10(method: String) {
        prope4.find { true} ?: error(("juxnb".bar()).reversed() + " has no state-machine " +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = ("juxnb".bar()).toBoolean()

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> print("nwsgt")}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in ("juxnb".bar()).compareTo("tfctu").ushr(-1337850045)..numberOfSuspensions) {
            if (("juxnb".bar()).toBoolean()) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error(("juxnb".bar()).subSequence(-1405506882, -1841973300).substring(-1190396283, -1091228420) + "izsuw" + (hashSetOf<Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>>(Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>(9530.toUShort(), {a: String, b: Kla5 -> Kla4()}, Kla2()))).size.unaryMinus())
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (("juxnb".bar()).none() && !("juxnb".bar()).subSequence(-1887212081, 1155601598).isNotBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw ClassCastException()
    }
}


2021-03-12 10:45:49,642 [main:107] - replacing (" has no state-machine ", String)
2021-03-12 10:45:49,642 [main:50] - replacing " has no state-machine " String
2021-03-12 10:45:49,642 [main:54] - Getting value of type String
2021-03-12 10:45:49,774 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:45:49,777 [main:58] - GENERATED VALUE OF TYPE String = "xpomh"
2021-03-12 10:45:49,777 [main:61] - GENERATED IS CALL =false
2021-03-12 10:45:50,222 [main:67] - randomType = Kla3<Sequence<Kla0>>
2021-03-12 10:45:50,350 [main:302] - generating value of type = Kla3<Sequence<Kla0>> false depth = 0
2021-03-12 10:45:50,353 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 10:45:51,065 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-12 10:45:51,068 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw ClassCastException()
    }
}
2021-03-12 10:45:51,083 [main:106] - GETTING String from String
2021-03-12 10:45:51,103 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36df92ac]]
2021-03-12 10:45:51,103 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36df92ac]
2021-03-12 10:45:51,224 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 10:45:51,353 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:45:51,356 [main:117] - GENERATED CALL = ("juxnb".bar()).commonPrefixWith(StringBuilder(), false)
2021-03-12 10:45:51,357 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77022855]]
2021-03-12 10:45:51,357 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77022855]
2021-03-12 10:45:51,513 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:51,516 [main:117] - GENERATED CALL = ("juxnb".bar()).repeat(-314940753)
2021-03-12 10:45:51,516 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ddbe661]]
2021-03-12 10:45:51,517 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ddbe661]
2021-03-12 10:45:51,642 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:45:51,773 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:45:51,902 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 10:45:51,905 [main:117] - GENERATED CALL = ("juxnb".bar()).replaceFirst('≷', '㈴', true)
2021-03-12 10:45:51,905 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@97e5e03]]
2021-03-12 10:45:51,905 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735]
2021-03-12 10:45:52,027 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:52,153 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:52,156 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@97e5e03]
2021-03-12 10:45:52,279 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 10:45:52,409 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 10:45:52,412 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 10:45:52,820 [main:302] - generating value of type = String true depth = 3
2021-03-12 10:45:52,823 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 10:45:52,826 [main:95] - GENERATED = Regex("cfugm", kotlin.text.RegexOption.MULTILINE)
2021-03-12 10:45:52,826 [main:117] - GENERATED CALL = ("juxnb".bar()).subSequence(-1262872770, 1940240444).replaceFirst(Regex("cfugm", kotlin.text.RegexOption.MULTILINE), "juxnb".bar())
2021-03-12 10:45:52,826 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e510eb0]]
2021-03-12 10:45:52,826 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e510eb0]
2021-03-12 10:45:52,826 [main:117] - GENERATED CALL = ("juxnb".bar()).trimIndent()
2021-03-12 10:45:52,826 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@98faf2d]]
2021-03-12 10:45:52,826 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@98faf2d]
2021-03-12 10:45:52,826 [main:117] - GENERATED CALL = ("juxnb".bar()).replaceIndent("juxnb".bar())
2021-03-12 10:45:52,826 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14cc2fdd]]
2021-03-12 10:45:52,827 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14cc2fdd]
2021-03-12 10:45:52,952 [main:302] - generating value of type = Char true depth = 0
2021-03-12 10:45:53,075 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:45:53,078 [main:117] - GENERATED CALL = ("juxnb".bar()).replaceAfter('㊆', "rxehf", "juxnb".bar())
2021-03-12 10:45:53,078 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71c97784]]
2021-03-12 10:45:53,078 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71c97784]
2021-03-12 10:45:53,078 [main:117] - GENERATED CALL = ("juxnb".bar()).uppercase()
2021-03-12 10:45:53,078 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@506938cf]]
2021-03-12 10:45:53,078 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@506938cf]
2021-03-12 10:45:53,201 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 10:45:53,203 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 10:45:53,206 [main:117] - GENERATED CALL = ("juxnb".bar()).takeWhile({a: Char -> true})
2021-03-12 10:45:53,206 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@14d954b4], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4203bb7]]
2021-03-12 10:45:53,206 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4203bb7]
2021-03-12 10:45:53,335 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:53,338 [main:117] - GENERATED CALL = ("juxnb".bar()).length.toString(-458544442)
2021-03-12 10:45:53,338 [main:114] - replacement of " has no state-machine " of type String is ("juxnb".bar()).length.toString(-458544442)
2021-03-12 10:45:53,495 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:45:53,496 [main:66] - Compilation checking started
2021-03-12 10:45:54,142 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            { require(true, { "eybns"})}()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            Kla5().fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        Kla5().fu12()
    }
    fu1 { require(true)}
    Kla5().fu13(numberOfSuspensions = 4)
    Kla5().fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = ("juxnb".bar()).compareTo("wgdrs").inv())
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        "swyml"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error(("juxnb".bar()).substringAfter('⥄', "juxnb".bar())) }
    }

    fun fu10(method: String) {
        prope4.find { true} ?: error(("juxnb".bar()).reversed() + ("juxnb".bar()).length.toString(-458544442) +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = ("juxnb".bar()).toBoolean()

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> print("nwsgt")}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in ("juxnb".bar()).compareTo("tfctu").ushr(-1337850045)..numberOfSuspensions) {
            if (("juxnb".bar()).toBoolean()) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error(("juxnb".bar()).subSequence(-1405506882, -1841973300).substring(-1190396283, -1091228420) + "izsuw" + (hashSetOf<Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>>(Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>(9530.toUShort(), {a: String, b: Kla5 -> Kla4()}, Kla2()))).size.unaryMinus())
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (("juxnb".bar()).none() && !("juxnb".bar()).subSequence(-1887212081, 1155601598).isNotBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw ClassCastException()
    }
}


2021-03-12 10:45:54,144 [main:107] - replacing (prope3.getOrThrow(), Ty0)
2021-03-12 10:45:54,144 [main:50] - replacing prope3.getOrThrow() Ty0
2021-03-12 10:45:54,144 [main:54] - Getting value of type Ty0
2021-03-12 10:45:54,275 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 10:45:54,280 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 10:45:54,423 [main:67] - randomType = ULong
2021-03-12 10:45:54,547 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 10:45:54,582 [main:106] - GETTING Ty0 from String
2021-03-12 10:45:54,604 [main:111] - Cant find and generate replacement for prope3.getOrThrow() type Ty0
2021-03-12 10:45:54,605 [main:107] - replacing (c2, SuspendFunction0<Unit>)
2021-03-12 10:45:54,605 [main:50] - replacing c2 SuspendFunction0<Unit>
2021-03-12 10:45:54,605 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-12 10:45:54,729 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-12 10:45:54,733 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:45:54,863 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 10:45:54,868 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 10:45:55,284 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 10:45:55,287 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 10:45:55,290 [main:302] - generating value of type = Any false depth = 5
2021-03-12 10:45:55,290 [main:95] - GENERATED = check(false, { "xqubs"})
2021-03-12 10:45:55,290 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { check(false, { "xqubs"})}
2021-03-12 10:45:55,290 [main:61] - GENERATED IS CALL =false
2021-03-12 10:45:55,612 [main:67] - randomType = Collection<Kla2>
2021-03-12 10:45:55,613 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-12 10:45:55,632 [main:114] - replacement of c2 of type SuspendFunction0<Unit> is { check(false, { "xqubs"})}
2021-03-12 10:45:55,757 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 10:45:55,757 [main:66] - Compilation checking started
2021-03-12 10:45:56,138 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            { require(true, { "eybns"})}()
            c()
        }

        override suspend fun fu5() {
            c2()
            { check(false, { "xqubs"})}()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            Kla5().fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        Kla5().fu12()
    }
    fu1 { require(true)}
    Kla5().fu13(numberOfSuspensions = 4)
    Kla5().fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = ("juxnb".bar()).compareTo("wgdrs").inv())
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        "swyml"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error(("juxnb".bar()).substringAfter('⥄', "juxnb".bar())) }
    }

    fun fu10(method: String) {
        prope4.find { true} ?: error(("juxnb".bar()).reversed() + ("juxnb".bar()).length.toString(-458544442) +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = ("juxnb".bar()).toBoolean()

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> print("nwsgt")}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in ("juxnb".bar()).compareTo("tfctu").ushr(-1337850045)..numberOfSuspensions) {
            if (("juxnb".bar()).toBoolean()) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error(("juxnb".bar()).subSequence(-1405506882, -1841973300).substring(-1190396283, -1091228420) + "izsuw" + (hashSetOf<Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>>(Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>(9530.toUShort(), {a: String, b: Kla5 -> Kla4()}, Kla2()))).size.unaryMinus())
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (("juxnb".bar()).none() && !("juxnb".bar()).subSequence(-1887212081, 1155601598).isNotBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw ClassCastException()
    }
}


2021-03-12 10:45:56,141 [main:107] - replacing (("juxnb".bar()).compareTo("tfctu").ushr(-1337850045)..numberOfSuspensions, IntRange)
2021-03-12 10:45:56,142 [main:50] - replacing ("juxnb".bar()).compareTo("tfctu").ushr(-1337850045)..numberOfSuspensions IntRange
2021-03-12 10:45:56,142 [main:54] - Getting value of type IntRange
2021-03-12 10:45:56,265 [main:302] - generating value of type = IntRange false depth = 0
2021-03-12 10:45:56,394 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-12 10:45:56,398 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-12 10:45:56,805 [main:302] - generating value of type = Int true depth = 3
2021-03-12 10:45:56,808 [main:302] - generating value of type = Int true depth = 3
2021-03-12 10:45:56,810 [main:95] - GENERATED = IntRange(-1135944659, 171159085)
2021-03-12 10:45:56,811 [main:58] - GENERATED VALUE OF TYPE IntRange = IntRange(-1135944659, 171159085)
2021-03-12 10:45:56,811 [main:61] - GENERATED IS CALL =true
2021-03-12 10:45:57,580 [main:67] - randomType = Kla3<Map<Short?, Kla3<Kla4>>>
2021-03-12 10:45:57,702 [main:302] - generating value of type = Kla3<Map<Short?, Kla3<Kla4>>> false depth = 0
2021-03-12 10:45:57,705 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 10:45:58,139 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-12 10:45:58,142 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw ClassCastException()
    }
}
2021-03-12 10:45:58,163 [main:106] - GETTING IntRange from String
2021-03-12 10:45:58,185 [main:113] - Case = [public val kotlin.CharSequence.indices: kotlin.ranges.IntRange defined in kotlin.text[DeserializedPropertyDescriptor@3b51d5fa]]
2021-03-12 10:45:58,185 [main:117] - GENERATED CALL = ("juxnb".bar()).indices
2021-03-12 10:45:58,185 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@14d954b4], public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6c9ff4dd]]
2021-03-12 10:45:58,185 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6c9ff4dd]
2021-03-12 10:45:58,310 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 10:45:58,314 [main:117] - GENERATED CALL = ("juxnb".bar()).length.until(-1)
2021-03-12 10:45:58,314 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@14d954b4], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2904bb45]]
2021-03-12 10:45:58,314 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2904bb45]
2021-03-12 10:45:58,439 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 10:45:58,442 [main:117] - GENERATED CALL = ("juxnb".bar()).length.rangeTo(-41)
2021-03-12 10:45:58,442 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@590784be], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2904bb45]]
2021-03-12 10:45:58,442 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@590784be]
2021-03-12 10:45:58,566 [main:302] - generating value of type = String true depth = 0
2021-03-12 10:45:58,569 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2904bb45]
2021-03-12 10:45:58,692 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 10:45:58,695 [main:117] - GENERATED CALL = ("juxnb".bar()).compareTo("ejznl").rangeTo(15)
2021-03-12 10:45:58,695 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735], public val kotlin.CharSequence.indices: kotlin.ranges.IntRange defined in kotlin.text[DeserializedPropertyDescriptor@3b51d5fa]]
2021-03-12 10:45:58,695 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@310d9735]
2021-03-12 10:45:58,816 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:58,944 [main:302] - generating value of type = Int true depth = 0
2021-03-12 10:45:58,947 [main:117] - GENERATED CALL = ("juxnb".bar()).subSequence(320883358, 576617168).indices
2021-03-12 10:45:58,947 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@590784be], public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6c9ff4dd]]
2021-03-12 10:45:58,947 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@590784be]
2021-03-12 10:45:58,947 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6c9ff4dd]
2021-03-12 10:45:59,123 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 10:45:59,126 [main:117] - GENERATED CALL = ("juxnb".bar()).compareTo("juxnb".bar()).until(59)
2021-03-12 10:45:59,126 [main:114] - replacement of ("juxnb".bar()).compareTo("tfctu").ushr(-1337850045)..numberOfSuspensions of type IntRange is ("juxnb".bar()).length.until(-1)
2021-03-12 10:45:59,272 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 10:45:59,273 [main:66] - Compilation checking started
2021-03-12 10:45:59,915 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            { require(true, { "eybns"})}()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            Kla5().fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        Kla5().fu12()
    }
    fu1 { require(true)}
    Kla5().fu13(numberOfSuspensions = 4)
    Kla5().fu11()
    fu1 {
        prope2.fu5()
    }
    Kla5().fu13(numberOfSuspensions = ("juxnb".bar()).compareTo("wgdrs").inv())
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        "swyml"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error(("juxnb".bar()).substringAfter('⥄', "juxnb".bar())) }
    }

    fun fu10(method: String) {
        prope4.find { true} ?: error(("juxnb".bar()).reversed() + ("juxnb".bar()).length.toString(-458544442) +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = ("juxnb".bar()).toBoolean()

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> print("nwsgt")}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in ("juxnb".bar()).length.until(-1)) {
            if (("juxnb".bar()).toBoolean()) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error(("juxnb".bar()).subSequence(-1405506882, -1841973300).substring(-1190396283, -1091228420) + "izsuw" + (hashSetOf<Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>>(Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>(9530.toUShort(), {a: String, b: Kla5 -> Kla4()}, Kla2()))).size.unaryMinus())
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (("juxnb".bar()).none() && !("juxnb".bar()).subSequence(-1887212081, 1155601598).isNotBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw ClassCastException()
    }
}


2021-03-12 10:45:59,918 [main:107] - replacing ({
        prope2.fu5()
    }, SuspendFunction0<Unit>)
2021-03-12 10:45:59,919 [main:50] - replacing {
        prope2.fu5()
    } SuspendFunction0<Unit>
2021-03-12 10:45:59,919 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-12 10:46:00,045 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-12 10:46:00,049 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 10:46:00,179 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 10:46:00,183 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 10:46:00,479 [main:302] - generating value of type = Any false depth = 4
2021-03-12 10:46:00,479 [main:95] - GENERATED = print("hvtwn")
2021-03-12 10:46:00,479 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { print("hvtwn")}
2021-03-12 10:46:00,479 [main:61] - GENERATED IS CALL =false
2021-03-12 10:46:00,491 [main:67] - randomType = Kla5
2021-03-12 10:46:00,622 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 10:46:00,625 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope5 = 0
    var prope6 = ("juxnb".bar()).toBoolean()

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> print("nwsgt")}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in ("juxnb".bar()).length.until(-1)) {
            if (("juxnb".bar()).toBoolean()) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error(("juxnb".bar()).subSequence(-1405506882, -1841973300).substring(-1190396283, -1091228420) + "izsuw" + (hashSetOf<Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>>(Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>(9530.toUShort(), {a: String, b: Kla5 -> Kla4()}, Kla2()))).size.unaryMinus())
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (("juxnb".bar()).none() && !("juxnb".bar()).subSequence(-1887212081, 1155601598).isNotBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 10:46:00,633 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-12 10:46:00,659 [main:114] - replacement of {
        prope2.fu5()
    } of type SuspendFunction0<Unit> is { print("hvtwn")}
2021-03-12 10:46:00,788 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 10:46:00,788 [main:66] - Compilation checking started
2021-03-12 10:46:01,384 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            { require(true, { "eybns"})}()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            Kla5().fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        Kla5().fu12()
    }
    fu1 { require(true)}
    Kla5().fu13(numberOfSuspensions = 4)
    Kla5().fu11()
    fu1 { print("hvtwn")}
    Kla5().fu13(numberOfSuspensions = ("juxnb".bar()).compareTo("wgdrs").inv())
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        "swyml"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error(("juxnb".bar()).substringAfter('⥄', "juxnb".bar())) }
    }

    fun fu10(method: String) {
        prope4.find { true} ?: error(("juxnb".bar()).reversed() + ("juxnb".bar()).length.toString(-458544442) +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = ("juxnb".bar()).toBoolean()

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> print("nwsgt")}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in ("juxnb".bar()).length.until(-1)) {
            if (("juxnb".bar()).toBoolean()) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error(("juxnb".bar()).subSequence(-1405506882, -1841973300).substring(-1190396283, -1091228420) + "izsuw" + (hashSetOf<Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>>(Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>(9530.toUShort(), {a: String, b: Kla5 -> Kla4()}, Kla2()))).size.unaryMinus())
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (("juxnb".bar()).none() && !("juxnb".bar()).subSequence(-1887212081, 1155601598).isNotBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw ClassCastException()
    }
}


2021-03-12 10:46:01,387 [main:107] - replacing (this, Kla2)
2021-03-12 10:46:01,387 [main:50] - replacing this Kla2
2021-03-12 10:46:01,387 [main:54] - Getting value of type Kla2
2021-03-12 10:46:01,514 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 10:46:01,517 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}
2021-03-12 10:46:01,517 [main:58] - GENERATED VALUE OF TYPE Kla2 = Kla2()
2021-03-12 10:46:01,517 [main:61] - GENERATED IS CALL =true
2021-03-12 10:46:02,126 [main:67] - randomType = MutableMap<Double?, Short>
2021-03-12 10:46:02,127 [main:106] - GETTING Kla2 from String
2021-03-12 10:46:02,157 [main:114] - replacement of this of type Kla2 is Kla2()
2021-03-12 10:46:02,286 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 10:46:02,286 [main:66] - Compilation checking started
2021-03-12 10:46:02,867 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
fun String.bar(): String {
    open class Local {
        fun result() = this@bar
    }

    class Outer {
        inner class Inner : Local() {
            fun outer() = this@Outer
        }
    }

    return Outer().Inner().result()
}

fun box() = "OK".bar()

interface Kla0 {
    suspend fun fu4()
    suspend fun fu5()
}

inline fun fu0(crossinline c: suspend () -> Unit, crossinline c2: suspend () -> Unit) =
    object : Kla0 {
        override suspend fun fu4() {
            { require(true, { "eybns"})}()
            c()
        }

        override suspend fun fu5() {
            c2()
            c2()
        }
    }

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box999(): String {
    val prope2 = fu0(
        {
            Kla5().fu12()
            prope1.fu12()
        }
    ) {
        prope1.fu12()
        Kla5().fu12()
    }
    fu1 { require(true)}
    Kla5().fu13(numberOfSuspensions = 4)
    Kla5().fu11()
    fu1 { print("hvtwn")}
    Kla5().fu13(numberOfSuspensions = ("juxnb".bar()).compareTo("wgdrs").inv())
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        "swyml"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla2().prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu6(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error(("juxnb".bar()).subSequence(-1371992925, 1862023628).replaceFirst(Regex("dqlyh", kotlin.text.RegexOption.IGNORE_CASE), "dbwiv"))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu9(method: String) {
        prope4.find { ("juxnb".bar()).toBoolean() }?.let { error(("juxnb".bar()).substringAfter('⥄', "juxnb".bar())) }
    }

    fun fu10(method: String) {
        prope4.find { true} ?: error(("juxnb".bar()).reversed() + ("juxnb".bar()).length.toString(-458544442) +
                prope4.joinToString(separator = ("juxnb".bar()).lowercase()))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = ("juxnb".bar()).toBoolean()

    var prope7: () -> Unit = { print("dxjme")}

    fun fu11() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> {a: Continuation<Unit> -> print("nwsgt")}

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in ("juxnb".bar()).length.until(-1)) {
            if (("juxnb".bar()).toBoolean()) error(("juxnb".bar()).replace('', '常', true) + prope5)
            prope7()
        }
        if (("juxnb".bar()).length.rotateLeft(387076538) != numberOfSuspensions)
            error(("juxnb".bar()).subSequence(-1405506882, -1841973300).substring(-1190396283, -1091228420) + "izsuw" + (hashSetOf<Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>>(Triple<UShort, Function2<String, Kla5, Kla4>, Kla2>(9530.toUShort(), {a: String, b: Kla5 -> Kla4()}, Kla2()))).size.unaryMinus())
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (("juxnb".bar()).none() && !("juxnb".bar()).subSequence(-1887212081, 1155601598).isNotBlank()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope7 = {
            Kla5().prope6 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw ClassCastException()
    }
}


2021-03-12 10:46:02,869 [main:107] - replacing ({
        prope3.exceptionOrNull()?.let(x)
    }, Unit?)
2021-03-12 10:46:02,869 [main:50] - replacing {
        prope3.exceptionOrNull()?.let(x)
    } Unit?
2021-03-12 10:46:02,870 [main:54] - Getting value of type Unit?
