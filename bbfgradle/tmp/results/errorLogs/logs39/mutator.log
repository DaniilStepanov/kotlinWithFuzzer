2021-03-11 22:19:58,460 [main:66] - Compilation checking started
2021-03-11 22:19:59,533 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 22:19:59,534 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 22:20:00,175 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 22:20:00,197 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 22:20:00,497 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 22:20:00,500 [main:95] - GENERATED = require(false)
2021-03-11 22:20:00,500 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 22:20:00,501 [main:66] - Compilation checking started
2021-03-11 22:20:00,505 [main:71] - Wrong syntax or breaks conditions
2021-03-11 22:20:00,506 [main:49] - Result = false
Text:
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit = { require(false)}) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}


2021-03-11 22:20:00,740 [main:112] - generating klass A text = class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}
2021-03-11 22:20:00,745 [main:112] - generating klass Companion text = companion object {
        val s = "OK"
        var v = "NOT OK"
    }
2021-03-11 22:20:01,060 [main:45] - Trying to change 10 nodes
2021-03-11 22:20:01,064 [main:53] - replacing ("NOT OK", String)
2021-03-11 22:20:01,064 [main:50] - replacing "NOT OK" String
2021-03-11 22:20:01,064 [main:54] - Getting value of type String
2021-03-11 22:20:01,177 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:20:01,179 [main:58] - GENERATED VALUE OF TYPE String = "bbxji"
2021-03-11 22:20:01,179 [main:61] - GENERATED IS CALL =false
2021-03-11 22:20:01,558 [main:67] - randomType = Collection<Collection<A>>
2021-03-11 22:20:01,558 [main:106] - GETTING String from String
2021-03-11 22:20:01,641 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e220c0c]]
2021-03-11 22:20:01,642 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:20:01,773 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:01,873 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:01,874 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e220c0c]
2021-03-11 22:20:01,982 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:02,072 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:02,074 [main:117] - GENERATED CALL = (A.s).subSequence(1883875909, 1671104327).substring(-1287319477, 1276706317)
2021-03-11 22:20:02,074 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc3b4e]]
2021-03-11 22:20:02,074 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc3b4e]
2021-03-11 22:20:02,166 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:20:02,167 [main:117] - GENERATED CALL = (A.s).substringBefore('夈', A.v)
2021-03-11 22:20:02,169 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56e6ff40]]
2021-03-11 22:20:02,169 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56e6ff40]
2021-03-11 22:20:02,248 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 22:20:02,249 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:20:02,250 [main:117] - GENERATED CALL = (A.s).filterIndexed({a: Int, b: Char -> true})
2021-03-11 22:20:02,251 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54523220]]
2021-03-11 22:20:02,251 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:20:02,330 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:02,330 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54523220]
2021-03-11 22:20:02,409 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:20:02,410 [main:117] - GENERATED CALL = (A.s).get(-831035663).plus("medvh")
2021-03-11 22:20:02,411 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cd1d7f5]]
2021-03-11 22:20:02,411 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cd1d7f5]
2021-03-11 22:20:02,497 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:02,501 [main:117] - GENERATED CALL = (A.s).takeLast(765379412)
2021-03-11 22:20:02,501 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51edcdcb]]
2021-03-11 22:20:02,502 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51edcdcb]
2021-03-11 22:20:02,581 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:20:02,659 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:20:02,660 [main:117] - GENERATED CALL = (A.s).substringAfter('몯', "epvuu")
2021-03-11 22:20:02,661 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ffb7dce]]
2021-03-11 22:20:02,661 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ffb7dce]
2021-03-11 22:20:02,738 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 22:20:02,738 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:20:02,740 [main:117] - GENERATED CALL = (A.s).filter({a: Char -> false})
2021-03-11 22:20:02,740 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c93a6b6]]
2021-03-11 22:20:02,740 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:20:02,823 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:02,910 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:02,911 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c93a6b6]
2021-03-11 22:20:02,998 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 22:20:03,091 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-11 22:20:03,093 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-11 22:20:03,387 [main:302] - generating value of type = String true depth = 3
2021-03-11 22:20:03,387 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-11 22:20:03,392 [main:95] - GENERATED = Regex("hzlvi", kotlin.text.RegexOption.MULTILINE)
2021-03-11 22:20:03,393 [main:117] - GENERATED CALL = (A.s).subSequence(769693772, 658117142).replaceFirst(Regex("hzlvi", kotlin.text.RegexOption.MULTILINE), A.s)
2021-03-11 22:20:03,393 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26020a41]]
2021-03-11 22:20:03,393 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26020a41]
2021-03-11 22:20:03,474 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:20:03,475 [main:117] - GENERATED CALL = (A.s).substringAfterLast('뉶', A().f())
2021-03-11 22:20:03,476 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2df1636b]]
2021-03-11 22:20:03,476 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2df1636b]
2021-03-11 22:20:03,577 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:03,579 [main:117] - GENERATED CALL = (A.s).repeat(-113786098)
2021-03-11 22:20:03,579 [main:61] - replacement of "NOT OK" of type String is (A.s).filter({a: Char -> false})
2021-03-11 22:20:03,682 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:20:03,682 [main:66] - Compilation checking started
2021-03-11 22:20:04,189 [main:53] - Result = true
Text:
class A {
    companion object {
        val s = "OK"
        var v = (A.s).filter({a: Char -> false})
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}


2021-03-11 22:20:04,191 [main:53] - replacing (v, String)
2021-03-11 22:20:04,191 [main:50] - replacing v String
2021-03-11 22:20:04,191 [main:54] - Getting value of type String
2021-03-11 22:20:04,293 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:20:04,293 [main:58] - GENERATED VALUE OF TYPE String = "ncflq"
2021-03-11 22:20:04,294 [main:61] - GENERATED IS CALL =false
2021-03-11 22:20:04,503 [main:67] - randomType = Boolean?
2021-03-11 22:20:04,598 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:20:04,644 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3867e848]
2021-03-11 22:20:04,735 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:20:04,736 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7df7fef2]
2021-03-11 22:20:04,824 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:04,826 [main:78] - Generated call from random type = (true)?.compareTo(false).toString(-1229850341)
2021-03-11 22:20:04,826 [main:106] - GETTING String from String
2021-03-11 22:20:04,866 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@261d48cc]]
2021-03-11 22:20:04,866 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@261d48cc]
2021-03-11 22:20:04,867 [main:117] - GENERATED CALL = (s).trimIndent()
2021-03-11 22:20:04,867 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280b3f43]]
2021-03-11 22:20:04,867 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280b3f43]
2021-03-11 22:20:04,867 [main:117] - GENERATED CALL = (s).reversed()
2021-03-11 22:20:04,867 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43739c43]]
2021-03-11 22:20:04,868 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43739c43]
2021-03-11 22:20:04,986 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:05,076 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:20:05,077 [main:117] - GENERATED CALL = (s).padEnd(-729962617, 'ꚶ')
2021-03-11 22:20:05,077 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ab9e242]]
2021-03-11 22:20:05,078 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ab9e242]
2021-03-11 22:20:05,166 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:20:05,262 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:20:05,264 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:20:05,463 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 22:20:05,560 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:20:05,563 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:20:05,772 [main:302] - generating value of type = String true depth = 6
2021-03-11 22:20:05,772 [main:95] - GENERATED = StringBuilder("gplbe")
2021-03-11 22:20:05,773 [main:95] - GENERATED = StringBuilder(StringBuilder("gplbe"))
2021-03-11 22:20:05,880 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:20:05,881 [main:117] - GENERATED CALL = (s).commonSuffixWith(StringBuilder(StringBuilder("gplbe")), true)
2021-03-11 22:20:05,882 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56e6ff40]]
2021-03-11 22:20:05,882 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56e6ff40]
2021-03-11 22:20:05,974 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 22:20:05,974 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:20:05,975 [main:117] - GENERATED CALL = (s).filterIndexed({a: Int, b: Char -> false})
2021-03-11 22:20:05,975 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63deed18]]
2021-03-11 22:20:05,975 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63deed18]
2021-03-11 22:20:06,060 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:20:06,066 [main:117] - GENERATED CALL = (s).removeSurrounding("ombam")
2021-03-11 22:20:06,066 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f04138c]]
2021-03-11 22:20:06,067 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f04138c]
2021-03-11 22:20:06,150 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:20:06,155 [main:117] - GENERATED CALL = (s).removeSuffix(StringBuilder())
2021-03-11 22:20:06,155 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7eeb1661]]
2021-03-11 22:20:06,155 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7eeb1661]
2021-03-11 22:20:06,156 [main:117] - GENERATED CALL = (s).trimStart()
2021-03-11 22:20:06,156 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c6ada31]]
2021-03-11 22:20:06,156 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c6ada31]
2021-03-11 22:20:06,156 [main:117] - GENERATED CALL = (s).concat(A.v)
2021-03-11 22:20:06,157 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7dd25ac5]]
2021-03-11 22:20:06,157 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7dd25ac5]
2021-03-11 22:20:06,157 [main:117] - GENERATED CALL = (s).decapitalize()
2021-03-11 22:20:06,157 [main:61] - replacement of v of type String is (s).trimStart()
2021-03-11 22:20:06,242 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:20:06,242 [main:66] - Compilation checking started
2021-03-11 22:20:06,529 [main:49] - Result = false
Text:
class A {
    companion object {
        val s = "OK"
        var v = (A.s).filter({a: Char -> false})
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            (s).trimStart() = "OK"
        }
    }
}


2021-03-11 22:20:06,531 [main:53] - replacing (s, String)
2021-03-11 22:20:06,531 [main:50] - replacing s String
2021-03-11 22:20:06,531 [main:54] - Getting value of type String
2021-03-11 22:20:06,652 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:20:06,652 [main:58] - GENERATED VALUE OF TYPE String = "fmefb"
2021-03-11 22:20:06,653 [main:61] - GENERATED IS CALL =false
2021-03-11 22:20:07,365 [main:67] - randomType = Pair<Char?, Pair<Boolean?, ArrayList<A>>?>
2021-03-11 22:20:07,467 [main:302] - generating value of type = Pair<Char?, Pair<Boolean?, ArrayList<A>>?> false depth = 0
2021-03-11 22:20:07,580 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Char?, second: Pair<Boolean?, ArrayList<A>>?): Pair<Char?, Pair<Boolean?, ArrayList<A>>?> = TODO()
2021-03-11 22:20:07,583 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Char?, second: Pair<Boolean?, ArrayList<A>>?): Pair<Char?, Pair<Boolean?, ArrayList<A>>?> = TODO()
2021-03-11 22:20:07,697 [main:302] - generating value of type = Char true depth = 3
2021-03-11 22:20:07,697 [main:302] - generating value of type = Pair<Boolean?, ArrayList<A>> false depth = 3
2021-03-11 22:20:07,800 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Boolean?, second: ArrayList<A>): Pair<Boolean?, ArrayList<A>> = TODO()
2021-03-11 22:20:07,802 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Boolean?, second: ArrayList<A>): Pair<Boolean?, ArrayList<A>> = TODO()
2021-03-11 22:20:07,890 [main:302] - generating value of type = Boolean true depth = 6
2021-03-11 22:20:07,890 [main:302] - generating value of type = ArrayList<A> false depth = 6
2021-03-11 22:20:08,019 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<A> = TODO()
2021-03-11 22:20:08,022 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<A> = TODO()
2021-03-11 22:20:08,157 [main:95] - GENERATED = arrayListOf<A>()
2021-03-11 22:20:08,157 [main:95] - GENERATED = Pair<Boolean?, ArrayList<A>>(true, arrayListOf<A>())
2021-03-11 22:20:08,158 [main:95] - GENERATED = Pair<Char?, Pair<Boolean?, ArrayList<A>>?>('盈', Pair<Boolean?, ArrayList<A>>(true, arrayListOf<A>()))
2021-03-11 22:20:08,197 [main:106] - GETTING String from String
2021-03-11 22:20:08,229 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43739c43]]
2021-03-11 22:20:08,229 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43739c43]
2021-03-11 22:20:08,312 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:08,397 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:20:08,398 [main:117] - GENERATED CALL = (s).padEnd(-1435683377, '㹃')
2021-03-11 22:20:08,398 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@272c9357]]
2021-03-11 22:20:08,398 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@272c9357]
2021-03-11 22:20:08,480 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 22:20:08,592 [main:43] - GENERATING CALL OF fun <T> listOfNotNull(element: Int): Iterable<Int> = TODO()
2021-03-11 22:20:08,594 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOfNotNull(element: Int): Iterable<Int> = TODO()
2021-03-11 22:20:08,706 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:20:08,707 [main:95] - GENERATED = listOfNotNull<Int>(-1837021884)
2021-03-11 22:20:08,708 [main:117] - GENERATED CALL = (s).slice(listOfNotNull<Int>(-1837021884))
2021-03-11 22:20:08,708 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2df1636b]]
2021-03-11 22:20:08,708 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:20:08,806 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:08,890 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:08,891 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2df1636b]
2021-03-11 22:20:08,985 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:08,986 [main:117] - GENERATED CALL = (s).subSequence(-1186066740, -1088080385).repeat(30468390)
2021-03-11 22:20:08,986 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4833974d]]
2021-03-11 22:20:08,986 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4833974d]
2021-03-11 22:20:09,078 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:20:09,079 [main:117] - GENERATED CALL = (s).replaceAfterLast('뺕', s, s)
2021-03-11 22:20:09,080 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3dfe6f92]]
2021-03-11 22:20:09,080 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:20:09,200 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:09,200 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3dfe6f92]
2021-03-11 22:20:09,201 [main:117] - GENERATED CALL = (s).get(1559869426).titlecase()
2021-03-11 22:20:09,201 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74196470]]
2021-03-11 22:20:09,201 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74196470]
2021-03-11 22:20:09,201 [main:117] - GENERATED CALL = (s).trim()
2021-03-11 22:20:09,201 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@230963c]]
2021-03-11 22:20:09,201 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@230963c]
2021-03-11 22:20:09,281 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 22:20:09,281 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:20:09,282 [main:117] - GENERATED CALL = (s).takeWhile({a: Char -> true})
2021-03-11 22:20:09,283 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2df1636b]]
2021-03-11 22:20:09,283 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2df1636b]
2021-03-11 22:20:09,371 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:09,372 [main:117] - GENERATED CALL = (s).repeat(-361315591)
2021-03-11 22:20:09,372 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cd1d7f5]]
2021-03-11 22:20:09,372 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cd1d7f5]
2021-03-11 22:20:09,450 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:09,451 [main:117] - GENERATED CALL = (s).takeLast(-258922176)
2021-03-11 22:20:09,451 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ab9e242]]
2021-03-11 22:20:09,451 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ab9e242]
2021-03-11 22:20:09,537 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:20:09,628 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:20:09,631 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:20:09,800 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:20:09,801 [main:95] - GENERATED = StringBuilder(164163197)
2021-03-11 22:20:09,879 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:20:09,880 [main:117] - GENERATED CALL = (s).commonSuffixWith(StringBuilder(164163197), false)
2021-03-11 22:20:09,880 [main:61] - replacement of s of type String is (s).subSequence(-1186066740, -1088080385).repeat(30468390)
2021-03-11 22:20:09,968 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:20:09,968 [main:66] - Compilation checking started
2021-03-11 22:20:10,394 [main:53] - Result = true
Text:
class A {
    companion object {
        val s = "OK"
        var v = (A.s).filter({a: Char -> false})
    }

    fun f(): String = (s).subSequence(-1186066740, -1088080385).repeat(30468390)

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}


2021-03-11 22:20:10,394 [main:53] - replacing ("OK", String)
2021-03-11 22:20:10,395 [main:50] - replacing "OK" String
2021-03-11 22:20:10,395 [main:54] - Getting value of type String
2021-03-11 22:20:10,487 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:20:10,488 [main:58] - GENERATED VALUE OF TYPE String = "oqdud"
2021-03-11 22:20:10,488 [main:61] - GENERATED IS CALL =false
2021-03-11 22:20:10,615 [main:67] - randomType = Float
2021-03-11 22:20:10,695 [main:302] - generating value of type = Float true depth = 0
2021-03-11 22:20:10,765 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@76d4d6e3]
2021-03-11 22:20:10,765 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7df7fef2]
2021-03-11 22:20:10,853 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:10,854 [main:78] - Generated call from random type = (0.4688521f).toInt().toString(-878843502)
2021-03-11 22:20:10,854 [main:106] - GETTING String from String
2021-03-11 22:20:10,876 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc3b4e]]
2021-03-11 22:20:10,876 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc3b4e]
2021-03-11 22:20:10,964 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:20:11,053 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:20:11,054 [main:117] - GENERATED CALL = (s).substringBefore('斶', "jpdbs")
2021-03-11 22:20:11,054 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5aed59aa]]
2021-03-11 22:20:11,054 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5aed59aa]
2021-03-11 22:20:11,145 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:11,227 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:11,311 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:20:11,318 [main:117] - GENERATED CALL = (s).replaceRange(1339873615, -1638640279, "jouwq")
2021-03-11 22:20:11,318 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ab2b222]]
2021-03-11 22:20:11,319 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ab2b222]
2021-03-11 22:20:11,433 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:20:11,530 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:20:11,531 [main:117] - GENERATED CALL = (s).replaceBeforeLast('썩', "yvggk", A.s)
2021-03-11 22:20:11,531 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26020a41]]
2021-03-11 22:20:11,531 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26020a41]
2021-03-11 22:20:11,611 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:20:11,612 [main:117] - GENERATED CALL = (s).substringAfterLast('Ԕ', A.s)
2021-03-11 22:20:11,612 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@127a9e58]]
2021-03-11 22:20:11,613 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@127a9e58]
2021-03-11 22:20:11,694 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:11,695 [main:117] - GENERATED CALL = (s).dropLast(-352443488)
2021-03-11 22:20:11,695 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16fcd2c4]]
2021-03-11 22:20:11,695 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16fcd2c4]
2021-03-11 22:20:11,696 [main:117] - GENERATED CALL = (s).lowercase()
2021-03-11 22:20:11,696 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ffb7dce]]
2021-03-11 22:20:11,696 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ffb7dce]
2021-03-11 22:20:11,775 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 22:20:11,776 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:20:11,776 [main:117] - GENERATED CALL = (s).filter({a: Char -> false})
2021-03-11 22:20:11,777 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@272c9357]]
2021-03-11 22:20:11,777 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@272c9357]
2021-03-11 22:20:11,870 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 22:20:11,976 [main:43] - GENERATING CALL OF fun <T> hashSetOf(): Iterable<Int> = TODO()
2021-03-11 22:20:11,978 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(): Iterable<Int> = TODO()
2021-03-11 22:20:12,072 [main:95] - GENERATED = hashSetOf<Int>()
2021-03-11 22:20:12,073 [main:117] - GENERATED CALL = (s).slice(hashSetOf<Int>())
2021-03-11 22:20:12,073 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ab9e242]]
2021-03-11 22:20:12,073 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:20:12,158 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:12,237 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:12,238 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ab9e242]
2021-03-11 22:20:12,329 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:20:12,423 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:20:12,424 [main:117] - GENERATED CALL = (s).subSequence(2104793819, 1646570596).commonSuffixWith(StringBuilder(), false)
2021-03-11 22:20:12,424 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280b3f43]]
2021-03-11 22:20:12,424 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280b3f43]
2021-03-11 22:20:12,424 [main:117] - GENERATED CALL = (s).reversed()
2021-03-11 22:20:12,424 [main:61] - replacement of "OK" of type String is (s).filter({a: Char -> false})
2021-03-11 22:20:12,503 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:20:12,504 [main:66] - Compilation checking started
2021-03-11 22:20:12,705 [main:49] - Result = false
Text:
class A {
    companion object {
        val s = (s).filter({a: Char -> false})
        var v = (A.s).filter({a: Char -> false})
    }

    fun f(): String = (s).subSequence(-1186066740, -1088080385).repeat(30468390)

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}


2021-03-11 22:20:12,705 [main:53] - replacing ("NOT OK", String)
2021-03-11 22:20:12,705 [main:50] - replacing "NOT OK" String
2021-03-11 22:20:12,705 [main:54] - Getting value of type String
2021-03-11 22:20:12,786 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:20:12,786 [main:58] - GENERATED VALUE OF TYPE String = "vdwrr"
2021-03-11 22:20:12,787 [main:61] - GENERATED IS CALL =false
2021-03-11 22:20:12,870 [main:67] - randomType = A
2021-03-11 22:20:12,978 [main:302] - generating value of type = A false depth = 0
2021-03-11 22:20:12,978 [main:112] - generating klass A text = class A {
    companion object {
        val s = "OK"
        var v = (A.s).filter({a: Char -> false})
    }

    fun f(): String = (s).subSequence(-1186066740, -1088080385).repeat(30468390)

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}


2021-03-11 22:20:12,988 [main:149] - GENERATING call of type public final fun f(): kotlin.String defined in A[SimpleFunctionDescriptorImpl@204fccc5]
2021-03-11 22:20:12,988 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b8aa177]
2021-03-11 22:20:12,989 [main:78] - Generated call from random type = (A()).f().prependIndent(A.v)
2021-03-11 22:20:12,989 [main:106] - GETTING String from String
2021-03-11 22:20:13,030 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@304551d8], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7df7fef2]]
2021-03-11 22:20:13,031 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7df7fef2]
2021-03-11 22:20:13,113 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:13,114 [main:117] - GENERATED CALL = (A.s).length.toString(289038713)
2021-03-11 22:20:13,114 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e220c0c]]
2021-03-11 22:20:13,114 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:20:13,196 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:13,292 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:13,292 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e220c0c]
2021-03-11 22:20:13,370 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:13,448 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:13,449 [main:117] - GENERATED CALL = (A.s).subSequence(-1177058279, -1537561149).substring(1653463139, 19596730)
2021-03-11 22:20:13,449 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@230963c]]
2021-03-11 22:20:13,449 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@230963c]
2021-03-11 22:20:13,540 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 22:20:13,541 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:20:13,542 [main:117] - GENERATED CALL = (A.s).takeWhile({a: Char -> true})
2021-03-11 22:20:13,542 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ccc1de7]]
2021-03-11 22:20:13,542 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ccc1de7]
2021-03-11 22:20:13,637 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:20:13,718 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:20:13,798 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:20:13,799 [main:117] - GENERATED CALL = (A.s).replaceFirst('꛵', 'ㄠ', true)
2021-03-11 22:20:13,799 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2df1636b]]
2021-03-11 22:20:13,799 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:20:13,880 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:13,972 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:13,973 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2df1636b]
2021-03-11 22:20:14,058 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:14,059 [main:117] - GENERATED CALL = (A.s).subSequence(2066040206, -2005736087).repeat(-1485779609)
2021-03-11 22:20:14,059 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3dfe6f92]]
2021-03-11 22:20:14,059 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:20:14,141 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:14,142 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3dfe6f92]
2021-03-11 22:20:14,142 [main:117] - GENERATED CALL = (A.s).get(927882795).titlecase()
2021-03-11 22:20:14,143 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4833974d]]
2021-03-11 22:20:14,143 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4833974d]
2021-03-11 22:20:14,222 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:20:14,222 [main:117] - GENERATED CALL = (A.s).replaceAfterLast('ፆ', A.s, A.s)
2021-03-11 22:20:14,223 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e2a9fc1]]
2021-03-11 22:20:14,223 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e2a9fc1]
2021-03-11 22:20:14,223 [main:117] - GENERATED CALL = (A.s).capitalize()
2021-03-11 22:20:14,223 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@127a9e58]]
2021-03-11 22:20:14,223 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@127a9e58]
2021-03-11 22:20:14,303 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:14,303 [main:117] - GENERATED CALL = (A.s).dropLast(-1641424013)
2021-03-11 22:20:14,303 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fe69a85]]
2021-03-11 22:20:14,304 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fe69a85]
2021-03-11 22:20:14,399 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 22:20:14,400 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:20:14,401 [main:117] - GENERATED CALL = (A.s).filterNot({a: Char -> true})
2021-03-11 22:20:14,401 [main:61] - replacement of "NOT OK" of type String is (A.s).capitalize()
2021-03-11 22:20:14,491 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:20:14,491 [main:53] - replacing ("NOT OK", String)
2021-03-11 22:20:14,491 [main:50] - replacing "NOT OK" String
2021-03-11 22:20:14,491 [main:54] - Getting value of type String
2021-03-11 22:20:14,568 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:20:14,568 [main:58] - GENERATED VALUE OF TYPE String = "dcnxm"
2021-03-11 22:20:14,568 [main:61] - GENERATED IS CALL =false
2021-03-11 22:20:14,741 [main:67] - randomType = UByte?
2021-03-11 22:20:14,842 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 22:20:14,917 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@4dfa5763]
2021-03-11 22:20:15,001 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 22:20:15,002 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2814a4a]
2021-03-11 22:20:15,095 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:15,096 [main:78] - Generated call from random type = (83.toUByte())?.div(93.toUByte()).toString(-1818826917)
2021-03-11 22:20:15,096 [main:106] - GETTING String from String
2021-03-11 22:20:15,130 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@abc67a]]
2021-03-11 22:20:15,130 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@abc67a]
2021-03-11 22:20:15,209 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:20:15,210 [main:117] - GENERATED CALL = (A.s).plus("kkpsp")
2021-03-11 22:20:15,210 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50f17df8]]
2021-03-11 22:20:15,210 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:20:15,289 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:15,366 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:15,366 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50f17df8]
2021-03-11 22:20:15,468 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:20:15,579 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:20:15,580 [main:117] - GENERATED CALL = (A.s).subSequence(808926816, -798533936).commonPrefixWith("avpri", false)
2021-03-11 22:20:15,580 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63deed18]]
2021-03-11 22:20:15,580 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63deed18]
2021-03-11 22:20:15,672 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:20:15,773 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:20:15,774 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:20:15,978 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 22:20:16,076 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:20:16,078 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:20:16,246 [main:302] - generating value of type = Int true depth = 6
2021-03-11 22:20:16,247 [main:95] - GENERATED = StringBuilder(-777532574)
2021-03-11 22:20:16,247 [main:95] - GENERATED = StringBuilder(StringBuilder(-777532574))
2021-03-11 22:20:16,247 [main:117] - GENERATED CALL = (A.s).removeSurrounding(StringBuilder(StringBuilder(-777532574)))
2021-03-11 22:20:16,247 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ccc1de7]]
2021-03-11 22:20:16,247 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ccc1de7]
2021-03-11 22:20:16,324 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:20:16,443 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:20:16,545 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:20:16,546 [main:117] - GENERATED CALL = (A.s).replaceFirst('띰', '윂', true)
2021-03-11 22:20:16,547 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1b5d65]]
2021-03-11 22:20:16,547 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1b5d65]
2021-03-11 22:20:16,633 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-11 22:20:16,634 [main:302] - generating value of type = Char true depth = 1
2021-03-11 22:20:16,635 [main:117] - GENERATED CALL = (A.s).replaceFirstChar({a: Char -> ''})
2021-03-11 22:20:16,635 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5aed59aa]]
2021-03-11 22:20:16,635 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5aed59aa]
2021-03-11 22:20:16,714 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:16,791 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:16,869 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:20:16,972 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:20:16,973 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:20:17,140 [main:302] - generating value of type = String true depth = 3
2021-03-11 22:20:17,141 [main:95] - GENERATED = StringBuilder("kiiih")
2021-03-11 22:20:17,141 [main:117] - GENERATED CALL = (A.s).replaceRange(-830715360, 1328938417, StringBuilder("kiiih"))
2021-03-11 22:20:17,141 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39f6f63f]]
2021-03-11 22:20:17,141 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39f6f63f]
2021-03-11 22:20:17,142 [main:117] - GENERATED CALL = (A.s).uppercase()
2021-03-11 22:20:17,142 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e45f41]]
2021-03-11 22:20:17,142 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e45f41]
2021-03-11 22:20:17,218 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:20:17,218 [main:117] - GENERATED CALL = (A.s).substringBeforeLast('㸾', A.s)
2021-03-11 22:20:17,219 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cd1d7f5]]
2021-03-11 22:20:17,219 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cd1d7f5]
2021-03-11 22:20:17,295 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:17,296 [main:117] - GENERATED CALL = (A.s).takeLast(-1652879287)
2021-03-11 22:20:17,296 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c281616]]
2021-03-11 22:20:17,296 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c281616]
2021-03-11 22:20:17,371 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:17,460 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:20:17,461 [main:117] - GENERATED CALL = (A.s).padStart(1603852634, '왂')
2021-03-11 22:20:17,461 [main:61] - replacement of "NOT OK" of type String is (A.s).replaceFirstChar({a: Char -> ''})
2021-03-11 22:20:17,543 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:20:17,544 [main:53] - replacing (v, String)
2021-03-11 22:20:17,544 [main:50] - replacing v String
2021-03-11 22:20:17,544 [main:54] - Getting value of type String
2021-03-11 22:20:17,621 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:20:17,622 [main:58] - GENERATED VALUE OF TYPE String = "hakne"
2021-03-11 22:20:17,622 [main:61] - GENERATED IS CALL =false
2021-03-11 22:20:17,878 [main:67] - randomType = Function1<Int, Double?>
2021-03-11 22:20:17,879 [main:106] - GETTING String from String
2021-03-11 22:20:17,910 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7eeb1661]]
2021-03-11 22:20:17,911 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7eeb1661]
2021-03-11 22:20:17,911 [main:117] - GENERATED CALL = (A().f()).trimStart()
2021-03-11 22:20:17,911 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5aed59aa]]
2021-03-11 22:20:17,911 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5aed59aa]
2021-03-11 22:20:17,999 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:18,078 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:18,155 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:20:18,236 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:20:18,237 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:20:18,448 [main:302] - generating value of type = String true depth = 3
2021-03-11 22:20:18,449 [main:95] - GENERATED = StringBuilder("rfyun")
2021-03-11 22:20:18,450 [main:117] - GENERATED CALL = (A().f()).replaceRange(88306285, -949572755, StringBuilder("rfyun"))
2021-03-11 22:20:18,451 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c93a6b6]]
2021-03-11 22:20:18,451 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:20:18,547 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:18,632 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:18,632 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c93a6b6]
2021-03-11 22:20:18,709 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 22:20:18,812 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 22:20:18,813 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 22:20:19,001 [main:302] - generating value of type = String true depth = 3
2021-03-11 22:20:19,002 [main:95] - GENERATED = Regex("fkbuo")
2021-03-11 22:20:19,083 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:20:19,084 [main:117] - GENERATED CALL = (A().f()).subSequence(-1302070158, 1005821508).replaceFirst(Regex("fkbuo"), "lqeyn")
2021-03-11 22:20:19,084 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48f66f29]]
2021-03-11 22:20:19,085 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48f66f29]
2021-03-11 22:20:19,085 [main:117] - GENERATED CALL = (A().f()).replaceIndent(s)
2021-03-11 22:20:19,085 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@127a9e58]]
2021-03-11 22:20:19,085 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@127a9e58]
2021-03-11 22:20:19,162 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:19,163 [main:117] - GENERATED CALL = (A().f()).dropLast(-1297709707)
2021-03-11 22:20:19,163 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e2a9fc1]]
2021-03-11 22:20:19,163 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e2a9fc1]
2021-03-11 22:20:19,164 [main:117] - GENERATED CALL = (A().f()).capitalize()
2021-03-11 22:20:19,164 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ee5c5fb]]
2021-03-11 22:20:19,164 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ee5c5fb]
2021-03-11 22:20:19,239 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:20:19,313 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:20:19,314 [main:117] - GENERATED CALL = (A().f()).replaceBefore('閩', s, "razrj")
2021-03-11 22:20:19,314 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ab2b222]]
2021-03-11 22:20:19,314 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ab2b222]
2021-03-11 22:20:19,404 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:20:19,405 [main:117] - GENERATED CALL = (A().f()).replaceBeforeLast('豕', s, A.v)
2021-03-11 22:20:19,405 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50f17df8]]
2021-03-11 22:20:19,405 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:20:19,489 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:19,565 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:19,565 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50f17df8]
2021-03-11 22:20:19,641 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:20:19,719 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:20:19,720 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:20:19,901 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:20:19,902 [main:95] - GENERATED = StringBuilder(-390761769)
2021-03-11 22:20:19,983 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:20:19,983 [main:117] - GENERATED CALL = (A().f()).subSequence(137123950, -1235308391).commonPrefixWith(StringBuilder(-390761769), false)
2021-03-11 22:20:19,984 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51edcdcb]]
2021-03-11 22:20:19,984 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51edcdcb]
2021-03-11 22:20:20,064 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:20:20,065 [main:117] - GENERATED CALL = (A().f()).substringAfter('璏', s)
2021-03-11 22:20:20,065 [main:61] - replacement of v of type String is (A().f()).subSequence(137123950, -1235308391).commonPrefixWith(StringBuilder(-390761769), false)
2021-03-11 22:20:20,143 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:20:20,143 [main:66] - Compilation checking started
2021-03-11 22:20:20,380 [main:49] - Result = false
Text:
class A {
    companion object {
        val s = "OK"
        var v = (A.s).filter({a: Char -> false})
    }

    fun f(): String = (s).subSequence(-1186066740, -1088080385).repeat(30468390)

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            (A().f()).subSequence(137123950, -1235308391).commonPrefixWith(StringBuilder(-390761769), false) = "OK"
        }
    }
}


2021-03-11 22:20:20,474 [main:119] - TRYING TO REPLACE CONSTANT false
2021-03-11 22:20:20,555 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-11 22:20:20,555 [main:66] - Compilation checking started
2021-03-11 22:20:20,927 [main:119] - TRYING TO REPLACE CONSTANT 30468390
2021-03-11 22:20:21,009 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 22:20:21,010 [main:66] - Compilation checking started
2021-03-11 22:20:21,343 [main:53] - Result = true
Text:
class A {
    companion object {
        val s = "OK"
        var v = (A.s).filter({a: Char -> false})
    }

    fun f(): String = (s).subSequence(-1186066740, -1088080385).repeat(1186066740)

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}


2021-03-11 22:20:21,343 [main:119] - TRYING TO REPLACE CONSTANT 1186066740
2021-03-11 22:20:21,420 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 22:20:21,421 [main:66] - Compilation checking started
2021-03-11 22:20:21,763 [main:53] - Result = true
Text:
class A {
    companion object {
        val s = "OK"
        var v = (A.s).filter({a: Char -> false})
    }

    fun f(): String = (s).subSequence(1186066740, -1088080385).repeat(1186066740)

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}


2021-03-11 22:20:21,763 [main:119] - TRYING TO REPLACE CONSTANT 1088080385
2021-03-11 22:20:21,870 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 22:20:21,870 [main:66] - Compilation checking started
2021-03-11 22:20:22,174 [main:53] - Result = true
Text:
class A {
    companion object {
        val s = "OK"
        var v = (A.s).filter({a: Char -> false})
    }

    fun f(): String = (s).subSequence(1186066740, 1088080385).repeat(1186066740)

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}


2021-03-11 22:20:22,196 [main:41] - AFTER TRY 0 res = class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}
2021-03-11 22:20:22,334 [main:112] - generating klass A text = class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}
2021-03-11 22:20:22,334 [main:112] - generating klass Companion text = companion object {
        val s = "OK"
        var v = "NOT OK"
    }
2021-03-11 22:20:22,518 [main:43] - Try №0
2021-03-11 22:20:34,835 [main:48] - Already checked
2021-03-11 22:20:39,607 [main:69] - Trying to insert fun fu7(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }
2021-03-11 22:20:39,694 [main:66] - Compilation checking started
2021-03-11 22:20:40,678 [main:103] - Trying to change 181 nodes
2021-03-11 22:20:40,678 [main:107] - replacing (prope8, Function0<Unit>)
2021-03-11 22:20:40,678 [main:50] - replacing prope8 Function0<Unit>
2021-03-11 22:20:40,678 [main:54] - Getting value of type Function0<Unit>
2021-03-11 22:20:40,830 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 22:20:40,832 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 22:20:41,026 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 22:20:41,029 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 22:20:41,368 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 22:20:41,371 [main:95] - GENERATED = check(true)
2021-03-11 22:20:41,371 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true)}
2021-03-11 22:20:41,371 [main:61] - GENERATED IS CALL =false
2021-03-11 22:20:41,535 [main:67] - randomType = Kla3<Kla5>
2021-03-11 22:20:41,674 [main:302] - generating value of type = Kla3<Kla5> false depth = 0
2021-03-11 22:20:41,676 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}
2021-03-11 22:20:42,543 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 22:20:42,545 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}
2021-03-11 22:20:42,568 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:20:42,599 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:20:42,600 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:20:42,600 [main:114] - replacement of prope8 of type Function0<Unit> is { check(true)}
2021-03-11 22:20:42,740 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 22:20:42,741 [main:66] - Compilation checking started
2021-03-11 22:20:43,147 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(prope3, Kla1)
    return prope3.prope2
}

fun box216(): String {
    var prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += prope10
        } while (fu3(prope10++) < 3)
        prope2 += "."
    }
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += fu3(prope10)
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if (prope4 != "1;2;3;.") return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        { check(true)} = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:20:43,150 [main:107] - replacing (prope4 != "1;2;3;.", Boolean)
2021-03-11 22:20:43,150 [main:50] - replacing prope4 != "1;2;3;." Boolean
2021-03-11 22:20:43,150 [main:54] - Getting value of type Boolean
2021-03-11 22:20:43,282 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:20:43,284 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 22:20:43,284 [main:61] - GENERATED IS CALL =false
2021-03-11 22:20:43,291 [main:67] - randomType = Kla1
2021-03-11 22:20:43,441 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 22:20:43,443 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}
2021-03-11 22:20:43,578 [main:194] - Type params = []
2021-03-11 22:20:43,709 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 22:20:43,846 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:20:43,849 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:20:44,141 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 22:20:44,292 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:20:44,295 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:20:44,792 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 8
2021-03-11 22:20:44,940 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 22:20:44,943 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 22:20:45,433 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 11
2021-03-11 22:20:45,571 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:20:45,574 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:20:46,012 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 14
2021-03-11 22:20:46,149 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:20:46,152 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:20:46,649 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:20:46,649 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:20:46,649 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 22:20:46,650 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:20:46,650 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:20:46,669 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1[DeserializedSimpleFunctionDescriptor@143978]
2021-03-11 22:20:46,796 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:20:46,797 [main:78] - Generated call from random type = (Kla1()).equals("xjkki")
2021-03-11 22:20:46,798 [main:106] - GETTING Boolean from String
2021-03-11 22:20:46,825 [main:113] - Case = [public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ba36d74]]
2021-03-11 22:20:46,825 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ba36d74]
2021-03-11 22:20:46,962 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:20:47,174 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:20:47,177 [main:117] - GENERATED CALL = (A.s).contains('陏', false)
2021-03-11 22:20:47,177 [main:113] - Case = [public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14b0d912]]
2021-03-11 22:20:47,177 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14b0d912]
2021-03-11 22:20:47,323 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:47,325 [main:117] - GENERATED CALL = (A.s).hasSurrogatePairAt(-426289459)
2021-03-11 22:20:47,325 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f1f6355]]
2021-03-11 22:20:47,325 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:20:47,453 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:47,455 [main:149] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f1f6355]
2021-03-11 22:20:47,455 [main:117] - GENERATED CALL = (A.s).get(-1030964161).isHighSurrogate()
2021-03-11 22:20:47,455 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@795ef724]]
2021-03-11 22:20:47,455 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@795ef724]
2021-03-11 22:20:47,456 [main:117] - GENERATED CALL = (A.s).isNotEmpty()
2021-03-11 22:20:47,456 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42087911]]
2021-03-11 22:20:47,456 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:20:47,588 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:47,741 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:47,743 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42087911]
2021-03-11 22:20:47,743 [main:117] - GENERATED CALL = (A.s).subSequence(1330355352, -677062172).any()
2021-03-11 22:20:47,743 [main:113] - Case = [public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cace456]]
2021-03-11 22:20:47,743 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cace456]
2021-03-11 22:20:47,876 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 22:20:47,878 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:20:47,880 [main:117] - GENERATED CALL = (A.s).all({a: Char -> false})
2021-03-11 22:20:47,880 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c82af08]]
2021-03-11 22:20:47,880 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:20:48,010 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:48,012 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c82af08]
2021-03-11 22:20:48,012 [main:117] - GENERATED CALL = (A.s).get(-2035430561).isTitleCase()
2021-03-11 22:20:48,012 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a0f8dce]]
2021-03-11 22:20:48,012 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:20:48,150 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:48,152 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a0f8dce]
2021-03-11 22:20:48,153 [main:117] - GENERATED CALL = (A.s).get(402941181).isDigit()
2021-03-11 22:20:48,153 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282699f]]
2021-03-11 22:20:48,153 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:20:48,329 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:48,331 [main:149] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282699f]
2021-03-11 22:20:48,332 [main:117] - GENERATED CALL = (A.s).get(-1727307280).isLetter()
2021-03-11 22:20:48,332 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5dadcec2]]
2021-03-11 22:20:48,332 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:20:48,457 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:48,584 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:48,586 [main:149] - GENERATING call of type public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5dadcec2]
2021-03-11 22:20:48,729 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:20:48,868 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:20:48,870 [main:117] - GENERATED CALL = (A.s).subSequence(853974344, 674271110).startsWith('‛', true)
2021-03-11 22:20:48,870 [main:114] - replacement of prope4 != "1;2;3;." of type Boolean is (A.s).contains('陏', false)
2021-03-11 22:20:48,999 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:20:48,999 [main:66] - Compilation checking started
2021-03-11 22:20:49,711 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(prope3, Kla1)
    return prope3.prope2
}

fun box216(): String {
    var prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += prope10
        } while (fu3(prope10++) < 3)
        prope2 += "."
    }
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += fu3(prope10)
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:20:49,713 [main:107] - replacing (true, Boolean)
2021-03-11 22:20:49,713 [main:50] - replacing true Boolean
2021-03-11 22:20:49,713 [main:54] - Getting value of type Boolean
2021-03-11 22:20:49,864 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:20:49,866 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 22:20:49,867 [main:61] - GENERATED IS CALL =false
2021-03-11 22:20:50,747 [main:67] - randomType = Pair<Map<Kla1, Long>, String?>
2021-03-11 22:20:50,884 [main:302] - generating value of type = Pair<Map<Kla1, Long>, String?> false depth = 0
2021-03-11 22:20:51,051 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Map<Kla1, Long>, second: String?): Pair<Map<Kla1, Long>, String?> = TODO()
2021-03-11 22:20:51,054 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Map<Kla1, Long>, second: String?): Pair<Map<Kla1, Long>, String?> = TODO()
2021-03-11 22:20:51,187 [main:302] - generating value of type = Map<Kla1, Long> false depth = 3
2021-03-11 22:20:51,355 [main:43] - GENERATING CALL OF fun <K, V> HashMap(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): Map<Kla1, Long> = TODO()
2021-03-11 22:20:51,360 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> HashMap(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): Map<Kla1, Long> = TODO()
2021-03-11 22:20:51,818 [main:302] - generating value of type = Int true depth = 6
2021-03-11 22:20:51,820 [main:302] - generating value of type = Float true depth = 6
2021-03-11 22:20:51,822 [main:95] - GENERATED = HashMap<Kla1, Long>(1144843435, 0.28642076f)
2021-03-11 22:20:51,822 [main:302] - generating value of type = String true depth = 3
2021-03-11 22:20:51,824 [main:95] - GENERATED = Pair<Map<Kla1, Long>, String?>(HashMap<Kla1, Long>(1144843435, 0.28642076f), "onvzi")
2021-03-11 22:20:51,842 [main:149] - GENERATING call of type public fun <K, V> kotlin.collections.Map<out K, V>.any(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6c7114db]
2021-03-11 22:20:51,843 [main:78] - Generated call from random type = (Pair<Map<Kla1, Long>, String?>(HashMap<Kla1, Long>(1144843435, 0.28642076f), "onvzi")).first.any()
2021-03-11 22:20:51,844 [main:106] - GETTING Boolean from String
2021-03-11 22:20:51,865 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@204d5820]]
2021-03-11 22:20:51,865 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:20:52,021 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:52,152 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:52,154 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@204d5820]
2021-03-11 22:20:52,154 [main:117] - GENERATED CALL = (A.s).subSequence(-1062641099, 420747403).none()
2021-03-11 22:20:52,154 [main:113] - Case = [public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42087911]]
2021-03-11 22:20:52,154 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42087911]
2021-03-11 22:20:52,154 [main:117] - GENERATED CALL = (A.s).any()
2021-03-11 22:20:52,154 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f1f6355]]
2021-03-11 22:20:52,154 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:20:52,297 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:52,308 [main:149] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f1f6355]
2021-03-11 22:20:52,308 [main:117] - GENERATED CALL = (A.s).get(-1383712732).isHighSurrogate()
2021-03-11 22:20:52,308 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@2608d45d]]
2021-03-11 22:20:52,308 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:20:52,444 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:52,618 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:52,620 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@2608d45d]
2021-03-11 22:20:52,752 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:20:52,753 [main:117] - GENERATED CALL = (A.s).subSequence(1496802812, 568936889).equals("bmcgv")
2021-03-11 22:20:52,753 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282699f]]
2021-03-11 22:20:52,753 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:20:52,914 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:52,917 [main:149] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282699f]
2021-03-11 22:20:52,918 [main:117] - GENERATED CALL = (A.s).get(-2125883856).isLetter()
2021-03-11 22:20:52,918 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7fcce319]]
2021-03-11 22:20:52,918 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:20:53,060 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:53,062 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7fcce319]
2021-03-11 22:20:53,062 [main:117] - GENERATED CALL = (A.s).get(905672190).isISOControl()
2021-03-11 22:20:53,062 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da89baf]]
2021-03-11 22:20:53,062 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:20:53,209 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:53,366 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:53,368 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da89baf]
2021-03-11 22:20:53,368 [main:117] - GENERATED CALL = (A.s).subSequence(-514936453, -42928408).isBlank()
2021-03-11 22:20:53,368 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c82af08]]
2021-03-11 22:20:53,368 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:20:53,534 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:53,537 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c82af08]
2021-03-11 22:20:53,537 [main:117] - GENERATED CALL = (A.s).get(1580623881).isTitleCase()
2021-03-11 22:20:53,537 [main:113] - Case = [public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ba36d74]]
2021-03-11 22:20:53,537 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ba36d74]
2021-03-11 22:20:53,688 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:20:53,898 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:20:53,900 [main:117] - GENERATED CALL = (A.s).contains('蟪', true)
2021-03-11 22:20:53,900 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c4a710c], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@58a5cd83]]
2021-03-11 22:20:53,900 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c4a710c]
2021-03-11 22:20:54,025 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:20:54,025 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@58a5cd83]
2021-03-11 22:20:54,172 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:20:54,173 [main:117] - GENERATED CALL = (A.s).equals("wbfwm").equals("mzxim")
2021-03-11 22:20:54,173 [main:114] - replacement of true of type Boolean is (A.s).get(-2125883856).isLetter()
2021-03-11 22:20:54,301 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:20:54,301 [main:66] - Compilation checking started
2021-03-11 22:20:54,917 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(prope3, Kla1)
    return prope3.prope2
}

fun box216(): String {
    var prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += prope10
        } while (fu3(prope10++) < 3)
        prope2 += "."
    }
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += fu3(prope10)
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A.s).get(-2125883856).isLetter() } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:20:54,920 [main:107] - replacing (c, Continuation<*>)
2021-03-11 22:20:54,920 [main:50] - replacing c Continuation<*>
2021-03-11 22:20:54,920 [main:54] - Getting value of type Continuation<*>
2021-03-11 22:20:55,105 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 22:20:55,258 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 22:20:55,261 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 22:20:55,776 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 22:20:55,920 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:20:55,924 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:20:56,263 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 22:20:56,428 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:20:56,431 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:20:56,943 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:20:56,943 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:20:56,943 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 22:20:56,943 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 22:20:57,128 [main:67] - randomType = Boolean?
2021-03-11 22:20:57,294 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:20:57,317 [main:106] - GETTING Continuation<*> from String
2021-03-11 22:20:57,352 [main:106] - GETTING Continuation<*> from String
2021-03-11 22:20:57,354 [main:106] - GETTING Continuation<*> from String
2021-03-11 22:20:57,354 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-11 22:20:57,354 [main:107] - replacing (prope4, String)
2021-03-11 22:20:57,354 [main:50] - replacing prope4 String
2021-03-11 22:20:57,354 [main:54] - Getting value of type String
2021-03-11 22:20:57,508 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:20:57,510 [main:58] - GENERATED VALUE OF TYPE String = "lcurc"
2021-03-11 22:20:57,510 [main:61] - GENERATED IS CALL =false
2021-03-11 22:20:57,682 [main:67] - randomType = Long
2021-03-11 22:20:57,828 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:20:57,893 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@76d4d6e3]
2021-03-11 22:20:57,893 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7df7fef2]
2021-03-11 22:20:58,030 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:58,034 [main:78] - Generated call from random type = (4221100558772785159).toInt().toString(671329244)
2021-03-11 22:20:58,034 [main:114] - replacement of prope4 of type String is (4221100558772785159).toInt().toString(671329244)
2021-03-11 22:20:58,179 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:20:58,179 [main:66] - Compilation checking started
2021-03-11 22:20:58,590 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(prope3, Kla1)
    return prope3.prope2
}

fun box216(): String {
    var prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += prope10
        } while (fu3(prope10++) < 3)
        prope2 += "."
    }
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    (4221100558772785159).toInt().toString(671329244) = fu0 {
        var prope10 = 1
        do {
            prope2 += fu3(prope10)
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A.s).get(-2125883856).isLetter() } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:20:58,593 [main:107] - replacing ("tail-call optimization hit: method " + method + " has no state-machine ", String)
2021-03-11 22:20:58,593 [main:50] - replacing "tail-call optimization hit: method " + method + " has no state-machine " String
2021-03-11 22:20:58,593 [main:54] - Getting value of type String
2021-03-11 22:20:58,740 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:20:58,742 [main:58] - GENERATED VALUE OF TYPE String = "hvhri"
2021-03-11 22:20:58,742 [main:61] - GENERATED IS CALL =false
2021-03-11 22:20:58,887 [main:67] - randomType = A
2021-03-11 22:20:59,028 [main:302] - generating value of type = A false depth = 0
2021-03-11 22:20:59,030 [main:112] - generating klass A text = class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}
2021-03-11 22:20:59,038 [main:149] - GENERATING call of type public final fun f(): kotlin.String defined in A[SimpleFunctionDescriptorImpl@7b7390ad]
2021-03-11 22:20:59,038 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16fcd2c4]
2021-03-11 22:20:59,038 [main:78] - Generated call from random type = (A()).f().lowercase()
2021-03-11 22:20:59,038 [main:106] - GETTING String from String
2021-03-11 22:20:59,074 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b70aa8a]]
2021-03-11 22:20:59,074 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b70aa8a]
2021-03-11 22:20:59,200 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:59,202 [main:117] - GENERATED CALL = (A().f()).substring(-909807108)
2021-03-11 22:20:59,202 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26020a41]]
2021-03-11 22:20:59,203 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26020a41]
2021-03-11 22:20:59,357 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:20:59,359 [main:117] - GENERATED CALL = (A().f()).substringAfterLast('ዳ', A.s)
2021-03-11 22:20:59,359 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc3b4e]]
2021-03-11 22:20:59,359 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc3b4e]
2021-03-11 22:20:59,498 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:20:59,658 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:20:59,660 [main:117] - GENERATED CALL = (A().f()).substringBefore('葑', "mhwnb")
2021-03-11 22:20:59,660 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74196470]]
2021-03-11 22:20:59,661 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74196470]
2021-03-11 22:20:59,661 [main:117] - GENERATED CALL = (A().f()).trim()
2021-03-11 22:20:59,661 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c6ada31]]
2021-03-11 22:20:59,661 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c6ada31]
2021-03-11 22:20:59,661 [main:117] - GENERATED CALL = (A().f()).concat(A.s)
2021-03-11 22:20:59,661 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@261d48cc]]
2021-03-11 22:20:59,661 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@261d48cc]
2021-03-11 22:20:59,661 [main:117] - GENERATED CALL = (A().f()).trimIndent()
2021-03-11 22:20:59,661 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280b3f43]]
2021-03-11 22:20:59,661 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280b3f43]
2021-03-11 22:20:59,661 [main:117] - GENERATED CALL = (A().f()).reversed()
2021-03-11 22:20:59,662 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6866c30c]]
2021-03-11 22:20:59,662 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:20:59,789 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:20:59,791 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6866c30c]
2021-03-11 22:20:59,791 [main:117] - GENERATED CALL = (A().f()).get(-944246952).lowercase()
2021-03-11 22:20:59,791 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62b8e389]]
2021-03-11 22:20:59,791 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62b8e389]
2021-03-11 22:20:59,792 [main:117] - GENERATED CALL = (A().f()).trimMargin(A.v)
2021-03-11 22:20:59,792 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48fa8c6d]]
2021-03-11 22:20:59,792 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48fa8c6d]
2021-03-11 22:20:59,792 [main:117] - GENERATED CALL = (A().f()).replaceIndentByMargin(A.v, A().f())
2021-03-11 22:20:59,792 [main:114] - replacement of "tail-call optimization hit: method " + method + " has no state-machine " of type String is (A().f()).trimMargin(A.v)
2021-03-11 22:20:59,946 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:20:59,947 [main:66] - Compilation checking started
2021-03-11 22:21:00,542 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(prope3, Kla1)
    return prope3.prope2
}

fun box216(): String {
    var prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += prope10
        } while (fu3(prope10++) < 3)
        prope2 += "."
    }
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += fu3(prope10)
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A.s).get(-2125883856).isLetter() } ?: error((A().f()).trimMargin(A.v) +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:21:00,544 [main:107] - replacing (true, Boolean)
2021-03-11 22:21:00,545 [main:50] - replacing true Boolean
2021-03-11 22:21:00,545 [main:54] - Getting value of type Boolean
2021-03-11 22:21:00,684 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:21:00,686 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 22:21:00,686 [main:61] - GENERATED IS CALL =false
2021-03-11 22:21:01,025 [main:67] - randomType = HashSet<Int>
2021-03-11 22:21:01,189 [main:302] - generating value of type = HashSet<Int> false depth = 0
2021-03-11 22:21:01,361 [main:43] - GENERATING CALL OF fun <E> HashSet(initialCapacity: kotlin.Int): HashSet<Int> = TODO()
2021-03-11 22:21:01,365 [main:61] - WITHOUT TYPE PARAMS = fun <E> HashSet(initialCapacity: kotlin.Int): HashSet<Int> = TODO()
2021-03-11 22:21:01,671 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:21:01,673 [main:95] - GENERATED = HashSet<Int>(1255970877)
2021-03-11 22:21:01,846 [main:149] - GENERATING call of type public open fun add(element: kotlin.Int): kotlin.Boolean defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@32d4c4c]
2021-03-11 22:21:02,006 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:02,008 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@503c6c4d]
2021-03-11 22:21:02,161 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:21:02,163 [main:78] - Generated call from random type = (HashSet<Int>(1255970877)).add(1754951143).and(false)
2021-03-11 22:21:02,164 [main:106] - GETTING Boolean from String
2021-03-11 22:21:02,186 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6098db]]
2021-03-11 22:21:02,187 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6098db]
2021-03-11 22:21:02,187 [main:117] - GENERATED CALL = (A().f()).isNotBlank()
2021-03-11 22:21:02,187 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c82af08]]
2021-03-11 22:21:02,187 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:21:02,336 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:02,338 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c82af08]
2021-03-11 22:21:02,338 [main:117] - GENERATED CALL = (A().f()).get(-1688950498).isTitleCase()
2021-03-11 22:21:02,338 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282699f]]
2021-03-11 22:21:02,338 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:21:02,473 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:02,474 [main:149] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282699f]
2021-03-11 22:21:02,475 [main:117] - GENERATED CALL = (A().f()).get(1590997489).isLetter()
2021-03-11 22:21:02,475 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@640a443f]]
2021-03-11 22:21:02,475 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:21:02,626 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:02,628 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@640a443f]
2021-03-11 22:21:02,628 [main:117] - GENERATED CALL = (A().f()).get(680983941).isUpperCase()
2021-03-11 22:21:02,628 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7fcce319]]
2021-03-11 22:21:02,628 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:21:02,755 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:02,756 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7fcce319]
2021-03-11 22:21:02,757 [main:117] - GENERATED CALL = (A().f()).get(-1633121352).isISOControl()
2021-03-11 22:21:02,757 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c4a710c]]
2021-03-11 22:21:02,757 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c4a710c]
2021-03-11 22:21:02,900 [main:117] - GENERATED CALL = (A().f()).equals(null)
2021-03-11 22:21:02,900 [main:113] - Case = [public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cace456]]
2021-03-11 22:21:02,900 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cace456]
2021-03-11 22:21:03,045 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 22:21:03,046 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:21:03,048 [main:117] - GENERATED CALL = (A().f()).all({a: Char -> true})
2021-03-11 22:21:03,048 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6098db]]
2021-03-11 22:21:03,049 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:21:03,212 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:03,343 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:03,345 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6098db]
2021-03-11 22:21:03,346 [main:117] - GENERATED CALL = (A().f()).subSequence(-1610128331, 540918736).isNotBlank()
2021-03-11 22:21:03,346 [main:113] - Case = [public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47854e48]]
2021-03-11 22:21:03,346 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47854e48]
2021-03-11 22:21:03,519 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:21:03,521 [main:117] - GENERATED CALL = (A().f()).endsWith(A().f(), false)
2021-03-11 22:21:03,521 [main:113] - Case = [public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14b0d912]]
2021-03-11 22:21:03,521 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14b0d912]
2021-03-11 22:21:03,645 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:03,647 [main:117] - GENERATED CALL = (A().f()).hasSurrogatePairAt(-589585939)
2021-03-11 22:21:03,647 [main:114] - replacement of true of type Boolean is (A().f()).isNotBlank()
2021-03-11 22:21:03,812 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:21:03,813 [main:66] - Compilation checking started
2021-03-11 22:21:04,379 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(prope3, Kla1)
    return prope3.prope2
}

fun box216(): String {
    var prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += prope10
        } while (fu3(prope10++) < 3)
        prope2 += "."
    }
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += fu3(prope10)
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A().f()).isNotBlank() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A.s).get(-2125883856).isLetter() } ?: error((A().f()).trimMargin(A.v) +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:21:04,382 [main:107] - replacing (", got ", String)
2021-03-11 22:21:04,382 [main:50] - replacing ", got " String
2021-03-11 22:21:04,382 [main:54] - Getting value of type String
2021-03-11 22:21:04,526 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:21:04,536 [main:58] - GENERATED VALUE OF TYPE String = "zonnp"
2021-03-11 22:21:04,537 [main:61] - GENERATED IS CALL =false
2021-03-11 22:21:04,676 [main:67] - randomType = Float
2021-03-11 22:21:04,822 [main:302] - generating value of type = Float true depth = 0
2021-03-11 22:21:04,866 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@4f89ca96]
2021-03-11 22:21:04,990 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:21:04,992 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7df7fef2]
2021-03-11 22:21:05,147 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:05,149 [main:78] - Generated call from random type = (0.8096954f).compareTo(-87).toString(808129286)
2021-03-11 22:21:05,149 [main:114] - replacement of ", got " of type String is (0.8096954f).compareTo(-87).toString(808129286)
2021-03-11 22:21:05,274 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:21:05,274 [main:66] - Compilation checking started
2021-03-11 22:21:05,874 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(prope3, Kla1)
    return prope3.prope2
}

fun box216(): String {
    var prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += prope10
        } while (fu3(prope10++) < 3)
        prope2 += "."
    }
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += fu3(prope10)
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A().f()).isNotBlank() }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A.s).get(-2125883856).isLetter() } ?: error((A().f()).trimMargin(A.v) +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (0.8096954f).compareTo(-87).toString(808129286) + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:21:05,877 [main:107] - replacing ("tail-call optimization miss: method at " + it + " has state-machine ", String)
2021-03-11 22:21:05,877 [main:50] - replacing "tail-call optimization miss: method at " + it + " has state-machine " String
2021-03-11 22:21:05,877 [main:54] - Getting value of type String
2021-03-11 22:21:06,034 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:21:06,036 [main:58] - GENERATED VALUE OF TYPE String = "jabsk"
2021-03-11 22:21:06,036 [main:61] - GENERATED IS CALL =false
2021-03-11 22:21:06,197 [main:67] - randomType = UByte
2021-03-11 22:21:06,351 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 22:21:06,395 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@3d8f659a]
2021-03-11 22:21:06,540 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 22:21:06,542 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2814a4a]
2021-03-11 22:21:06,693 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:06,695 [main:78] - Generated call from random type = (35.toUByte()).div(12.toUByte()).toString(-1716133727)
2021-03-11 22:21:06,696 [main:106] - GETTING String from String
2021-03-11 22:21:06,722 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42a651dc]]
2021-03-11 22:21:06,722 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42a651dc]
2021-03-11 22:21:06,846 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:06,848 [main:117] - GENERATED CALL = (A().f()).drop(886010669)
2021-03-11 22:21:06,848 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b70aa8a]]
2021-03-11 22:21:06,848 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b70aa8a]
2021-03-11 22:21:07,006 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:07,008 [main:117] - GENERATED CALL = (A().f()).substring(394825939)
2021-03-11 22:21:07,008 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6913f0ba]]
2021-03-11 22:21:07,008 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6913f0ba]
2021-03-11 22:21:07,138 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 22:21:07,140 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:21:07,142 [main:117] - GENERATED CALL = (A().f()).dropLastWhile({a: Char -> true})
2021-03-11 22:21:07,142 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@490367ed]]
2021-03-11 22:21:07,142 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@490367ed]
2021-03-11 22:21:07,282 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:21:07,285 [main:117] - GENERATED CALL = (A().f()).replaceAfter('麎', A.s, A.v)
2021-03-11 22:21:07,285 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7eeb1661]]
2021-03-11 22:21:07,285 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7eeb1661]
2021-03-11 22:21:07,285 [main:117] - GENERATED CALL = (A().f()).trimStart()
2021-03-11 22:21:07,285 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fe69a85]]
2021-03-11 22:21:07,285 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fe69a85]
2021-03-11 22:21:07,421 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 22:21:07,423 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:21:07,425 [main:117] - GENERATED CALL = (A().f()).filterNot({a: Char -> true})
2021-03-11 22:21:07,425 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ab9e242]]
2021-03-11 22:21:07,425 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:21:07,589 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:07,721 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:07,723 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ab9e242]
2021-03-11 22:21:07,862 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:21:08,001 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:21:08,003 [main:117] - GENERATED CALL = (A().f()).subSequence(233522690, 1906667073).commonSuffixWith("opbea", true)
2021-03-11 22:21:08,003 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63deed18]]
2021-03-11 22:21:08,004 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63deed18]
2021-03-11 22:21:08,199 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:21:08,207 [main:117] - GENERATED CALL = (A().f()).removeSurrounding("ypwxu")
2021-03-11 22:21:08,207 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54523220]]
2021-03-11 22:21:08,207 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:21:08,362 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:08,364 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54523220]
2021-03-11 22:21:08,364 [main:117] - GENERATED CALL = (A().f()).get(425064006).plus(A.s)
2021-03-11 22:21:08,364 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ab2b222]]
2021-03-11 22:21:08,364 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ab2b222]
2021-03-11 22:21:08,538 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:21:08,665 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:21:08,814 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:21:08,816 [main:117] - GENERATED CALL = (A().f()).replaceBeforeLast('୪', "cwkft", "xvrvy")
2021-03-11 22:21:08,817 [main:114] - replacement of "tail-call optimization miss: method at " + it + " has state-machine " of type String is (A().f()).trimStart()
2021-03-11 22:21:08,952 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:21:08,953 [main:66] - Compilation checking started
2021-03-11 22:21:09,524 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(prope3, Kla1)
    return prope3.prope2
}

fun box216(): String {
    var prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += prope10
        } while (fu3(prope10++) < 3)
        prope2 += "."
    }
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += fu3(prope10)
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A().f()).isNotBlank() }?.let { error((A().f()).trimStart() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A.s).get(-2125883856).isLetter() } ?: error((A().f()).trimMargin(A.v) +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (0.8096954f).compareTo(-87).toString(808129286) + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:21:09,528 [main:107] - replacing (checkFinished && !prope7, Boolean)
2021-03-11 22:21:09,528 [main:50] - replacing checkFinished && !prope7 Boolean
2021-03-11 22:21:09,528 [main:54] - Getting value of type Boolean
2021-03-11 22:21:09,681 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:21:09,683 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 22:21:09,683 [main:61] - GENERATED IS CALL =false
2021-03-11 22:21:10,319 [main:67] - randomType = Kla3<Sequence<Boolean>>?
2021-03-11 22:21:10,486 [main:302] - generating value of type = Kla3<Sequence<Boolean>> false depth = 0
2021-03-11 22:21:10,487 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}
2021-03-11 22:21:11,122 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 22:21:11,124 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}
2021-03-11 22:21:11,146 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@25cd8b4e]
2021-03-11 22:21:11,292 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:21:11,292 [main:78] - Generated call from random type = (Kla6)?.context.equals("qpsfi")
2021-03-11 22:21:11,302 [main:106] - GETTING Boolean from String
2021-03-11 22:21:11,328 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20a07d96]]
2021-03-11 22:21:11,329 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:21:11,453 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:11,455 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20a07d96]
2021-03-11 22:21:11,455 [main:117] - GENERATED CALL = (A.v).get(-1204938945).isSurrogate()
2021-03-11 22:21:11,455 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282699f]]
2021-03-11 22:21:11,455 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:21:11,618 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:11,620 [main:149] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282699f]
2021-03-11 22:21:11,621 [main:117] - GENERATED CALL = (A.v).get(-1921775683).isLetter()
2021-03-11 22:21:11,621 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@795ef724]]
2021-03-11 22:21:11,621 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:21:11,751 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:11,899 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:11,911 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@795ef724]
2021-03-11 22:21:11,911 [main:117] - GENERATED CALL = (A.v).subSequence(249250820, -1843649769).isNotEmpty()
2021-03-11 22:21:11,911 [main:113] - Case = [public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cace456]]
2021-03-11 22:21:11,911 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cace456]
2021-03-11 22:21:12,041 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 22:21:12,043 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:21:12,045 [main:117] - GENERATED CALL = (A.v).all({a: Char -> false})
2021-03-11 22:21:12,045 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@376f85c1]]
2021-03-11 22:21:12,045 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:21:12,189 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:12,192 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@376f85c1]
2021-03-11 22:21:12,192 [main:117] - GENERATED CALL = (A.v).get(-259788726).isDefined()
2021-03-11 22:21:12,192 [main:113] - Case = [public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@204d5820]]
2021-03-11 22:21:12,192 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@204d5820]
2021-03-11 22:21:12,192 [main:117] - GENERATED CALL = (A.v).none()
2021-03-11 22:21:12,192 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c4a710c], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@467e6dc2]]
2021-03-11 22:21:12,192 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c4a710c]
2021-03-11 22:21:12,326 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:21:12,326 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@467e6dc2]
2021-03-11 22:21:12,467 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:21:12,469 [main:117] - GENERATED CALL = (A.v).equals("nvkfv").or(false)
2021-03-11 22:21:12,469 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d08b00b]]
2021-03-11 22:21:12,469 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:21:12,609 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:12,611 [main:149] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d08b00b]
2021-03-11 22:21:12,611 [main:117] - GENERATED CALL = (A.v).get(1666214031).isLowerCase()
2021-03-11 22:21:12,611 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@2608d45d]]
2021-03-11 22:21:12,611 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:21:12,755 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:12,892 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:12,894 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@2608d45d]
2021-03-11 22:21:13,050 [main:117] - GENERATED CALL = (A.v).subSequence(-554357704, 103059286).equals(null)
2021-03-11 22:21:13,050 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79722e6d]]
2021-03-11 22:21:13,050 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:21:13,206 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:13,209 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79722e6d]
2021-03-11 22:21:13,369 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:21:13,508 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:21:13,511 [main:117] - GENERATED CALL = (A.v).get(-44115123).equals('眺', false)
2021-03-11 22:21:13,511 [main:114] - replacement of checkFinished && !prope7 of type Boolean is (A.v).subSequence(249250820, -1843649769).isNotEmpty()
2021-03-11 22:21:13,660 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:21:13,660 [main:66] - Compilation checking started
2021-03-11 22:21:14,266 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(prope3, Kla1)
    return prope3.prope2
}

fun box216(): String {
    var prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += prope10
        } while (fu3(prope10++) < 3)
        prope2 += "."
    }
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += fu3(prope10)
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A().f()).isNotBlank() }?.let { error((A().f()).trimStart() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A.s).get(-2125883856).isLetter() } ?: error((A().f()).trimMargin(A.v) +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (0.8096954f).compareTo(-87).toString(808129286) + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:21:14,268 [main:107] - replacing (getOrThrow(), Ty0)
2021-03-11 22:21:14,268 [main:50] - replacing getOrThrow() Ty0
2021-03-11 22:21:14,268 [main:54] - Getting value of type Ty0
2021-03-11 22:21:14,444 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 22:21:14,449 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 22:21:14,457 [main:67] - randomType = Kla1
2021-03-11 22:21:14,583 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 22:21:14,585 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}
2021-03-11 22:21:14,732 [main:194] - Type params = []
2021-03-11 22:21:14,883 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 22:21:15,031 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:21:15,034 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:21:15,356 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 22:21:15,498 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:21:15,501 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:21:16,029 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 8
2021-03-11 22:21:16,188 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:21:16,191 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:21:16,704 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 11
2021-03-11 22:21:16,849 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 22:21:16,852 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 22:21:17,396 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 22:21:17,396 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:21:17,396 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:21:17,396 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:21:17,413 [main:106] - GETTING Ty0 from String
2021-03-11 22:21:17,436 [main:106] - GETTING Ty0 from String
2021-03-11 22:21:17,437 [main:106] - GETTING Ty0 from String
2021-03-11 22:21:17,437 [main:111] - Cant find and generate replacement for getOrThrow() type Ty0
2021-03-11 22:21:17,437 [main:107] - replacing (prope2.getOrThrow(), Ty0)
2021-03-11 22:21:17,437 [main:50] - replacing prope2.getOrThrow() Ty0
2021-03-11 22:21:17,437 [main:54] - Getting value of type Ty0
2021-03-11 22:21:17,583 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 22:21:17,589 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 22:21:17,932 [main:67] - randomType = Kla3<Long>
2021-03-11 22:21:18,054 [main:302] - generating value of type = Kla3<Long> false depth = 0
2021-03-11 22:21:18,056 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}
2021-03-11 22:21:18,461 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 22:21:18,463 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}
2021-03-11 22:21:18,477 [main:106] - GETTING Ty0 from String
2021-03-11 22:21:18,494 [main:106] - GETTING Ty0 from String
2021-03-11 22:21:18,494 [main:106] - GETTING Ty0 from String
2021-03-11 22:21:18,494 [main:111] - Cant find and generate replacement for prope2.getOrThrow() type Ty0
2021-03-11 22:21:18,494 [main:107] - replacing (prope6, Int)
2021-03-11 22:21:18,494 [main:50] - replacing prope6 Int
2021-03-11 22:21:18,494 [main:54] - Getting value of type Int
2021-03-11 22:21:18,620 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:18,622 [main:58] - GENERATED VALUE OF TYPE Int = 1601526637
2021-03-11 22:21:18,622 [main:61] - GENERATED IS CALL =false
2021-03-11 22:21:18,900 [main:67] - randomType = Kla3<ULong>
2021-03-11 22:21:19,087 [main:302] - generating value of type = Kla3<ULong> false depth = 0
2021-03-11 22:21:19,089 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}
2021-03-11 22:21:19,510 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 22:21:19,512 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}
2021-03-11 22:21:19,525 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla3[DeserializedSimpleFunctionDescriptor@22c31cd5]
2021-03-11 22:21:19,648 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:21:19,648 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3867e848]
2021-03-11 22:21:19,770 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:21:19,772 [main:78] - Generated call from random type = (Kla6).equals("rminn").compareTo(false)
2021-03-11 22:21:19,773 [main:106] - GETTING Int from String
2021-03-11 22:21:19,799 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@639aa001]]
2021-03-11 22:21:19,799 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de]
2021-03-11 22:21:19,799 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@639aa001]
2021-03-11 22:21:19,799 [main:117] - GENERATED CALL = (A.v).compareTo(A.v).toInt()
2021-03-11 22:21:19,799 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38daad85]]
2021-03-11 22:21:19,799 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38daad85]
2021-03-11 22:21:19,800 [main:117] - GENERATED CALL = (A.v).count()
2021-03-11 22:21:19,800 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5158826b]]
2021-03-11 22:21:19,800 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:21:19,926 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:20,063 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:20,065 [main:149] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5158826b]
2021-03-11 22:21:20,189 [main:302] - generating value of type = CharArray false depth = 0
2021-03-11 22:21:20,316 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 22:21:20,319 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 22:21:20,465 [main:302] - generating value of type = Char true depth = 3
2021-03-11 22:21:20,467 [main:95] - GENERATED = charArrayOf('얾')
2021-03-11 22:21:20,613 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:20,765 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:21:20,768 [main:117] - GENERATED CALL = (A.v).subSequence(-528175351, -892588368).lastIndexOfAny(charArrayOf('얾'), 30747696, true)
2021-03-11 22:21:20,768 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6fc06ec4]]
2021-03-11 22:21:20,768 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de]
2021-03-11 22:21:20,768 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6fc06ec4]
2021-03-11 22:21:20,902 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:21:20,904 [main:117] - GENERATED CALL = (A.v).compareTo(A.v).plus(123)
2021-03-11 22:21:20,904 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@304551d8], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4fc1f04e]]
2021-03-11 22:21:20,904 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4fc1f04e]
2021-03-11 22:21:21,048 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:21,195 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:21,198 [main:117] - GENERATED CALL = (A.v).length.coerceIn(-2046721739, 2076406972)
2021-03-11 22:21:21,198 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@304551d8], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1af24856]]
2021-03-11 22:21:21,198 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1af24856]
2021-03-11 22:21:21,198 [main:117] - GENERATED CALL = (A.v).length.unaryMinus()
2021-03-11 22:21:21,198 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a4d8be]]
2021-03-11 22:21:21,198 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a4d8be]
2021-03-11 22:21:21,341 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-11 22:21:21,343 [main:302] - generating value of type = Int true depth = 1
2021-03-11 22:21:21,346 [main:117] - GENERATED CALL = (A.v).sumOf({a: Char -> -700759857})
2021-03-11 22:21:21,346 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@304551d8], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61e02857]]
2021-03-11 22:21:21,346 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61e02857]
2021-03-11 22:21:21,490 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:21,492 [main:117] - GENERATED CALL = (A.v).length.xor(-573557068)
2021-03-11 22:21:21,492 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], public abstract val length: kotlin.Int defined in kotlin.CharSequence[DeserializedPropertyDescriptor@7c06c9ed]]
2021-03-11 22:21:21,492 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:21:21,637 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:21,793 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:21,795 [main:117] - GENERATED CALL = (A.v).subSequence(-125310828, -115326530).length
2021-03-11 22:21:21,797 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@304551d8], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@639aa001]]
2021-03-11 22:21:21,797 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@639aa001]
2021-03-11 22:21:21,798 [main:117] - GENERATED CALL = (A.v).length.toInt()
2021-03-11 22:21:21,798 [main:114] - replacement of prope6 of type Int is (Kla6).equals("rminn").compareTo(false)
2021-03-11 22:21:21,970 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:21:21,971 [main:66] - Compilation checking started
2021-03-11 22:21:22,352 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(prope3, Kla1)
    return prope3.prope2
}

fun box216(): String {
    var prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += prope10
        } while (fu3(prope10++) < 3)
        prope2 += "."
    }
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += fu3(prope10)
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A().f()).isNotBlank() }?.let { error((A().f()).trimStart() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A.s).get(-2125883856).isLetter() } ?: error((A().f()).trimMargin(A.v) +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        (Kla6).equals("rminn").compareTo(false) = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (0.8096954f).compareTo(-87).toString(808129286) + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:21:22,355 [main:107] - replacing (prope2.getOrThrow(), Ty0)
2021-03-11 22:21:22,355 [main:50] - replacing prope2.getOrThrow() Ty0
2021-03-11 22:21:22,355 [main:54] - Getting value of type Ty0
2021-03-11 22:21:22,501 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 22:21:22,505 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 22:21:22,817 [main:67] - randomType = UInt?
2021-03-11 22:21:22,955 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 22:21:22,992 [main:106] - GETTING Ty0 from String
2021-03-11 22:21:23,009 [main:106] - GETTING Ty0 from String
2021-03-11 22:21:23,010 [main:106] - GETTING Ty0 from String
2021-03-11 22:21:23,010 [main:111] - Cant find and generate replacement for prope2.getOrThrow() type Ty0
2021-03-11 22:21:23,010 [main:107] - replacing (prope2.getOrThrow(), Any?)
2021-03-11 22:21:23,010 [main:50] - replacing prope2.getOrThrow() Any?
2021-03-11 22:21:23,010 [main:54] - Getting value of type Any?
2021-03-11 22:21:23,168 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:21:23,168 [main:58] - GENERATED VALUE OF TYPE Any? = "uauqp"
2021-03-11 22:21:23,168 [main:61] - GENERATED IS CALL =false
2021-03-11 22:21:23,328 [main:67] - randomType = Kla3<A>
2021-03-11 22:21:23,471 [main:302] - generating value of type = Kla3<A> false depth = 0
2021-03-11 22:21:23,473 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}
2021-03-11 22:21:24,961 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 22:21:24,963 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}
2021-03-11 22:21:24,979 [main:106] - GETTING Any? from String
2021-03-11 22:21:25,000 [main:106] - GETTING Any? from String
2021-03-11 22:21:25,001 [main:106] - GETTING Any? from String
2021-03-11 22:21:25,001 [main:114] - replacement of prope2.getOrThrow() of type Any? is "uauqp"
2021-03-11 22:21:25,143 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 22:21:25,144 [main:66] - Compilation checking started
2021-03-11 22:21:25,738 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(prope3, Kla1)
    return prope3.prope2
}

fun box216(): String {
    var prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += prope10
        } while (fu3(prope10++) < 3)
        prope2 += "."
    }
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += fu3(prope10)
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A().f()).isNotBlank() }?.let { error((A().f()).trimStart() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A.s).get(-2125883856).isLetter() } ?: error((A().f()).trimMargin(A.v) +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (0.8096954f).compareTo(-87).toString(808129286) + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:21:25,740 [main:107] - replacing (fu3(prope10++) < 3, Boolean)
2021-03-11 22:21:25,741 [main:50] - replacing fu3(prope10++) < 3 Boolean
2021-03-11 22:21:25,741 [main:54] - Getting value of type Boolean
2021-03-11 22:21:25,946 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:21:25,949 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 22:21:25,950 [main:61] - GENERATED IS CALL =false
2021-03-11 22:21:26,136 [main:67] - randomType = UShort
2021-03-11 22:21:26,279 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 22:21:26,327 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@15f1f08a]
2021-03-11 22:21:26,453 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 22:21:26,455 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@23b046a8]
2021-03-11 22:21:26,596 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:21:26,596 [main:78] - Generated call from random type = (28149.toUShort()).compareTo(90.toUByte()).equals("qhtzz")
2021-03-11 22:21:26,597 [main:106] - GETTING Boolean from String
2021-03-11 22:21:26,619 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1db4235]]
2021-03-11 22:21:26,620 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:21:26,755 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:26,902 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:26,904 [main:149] - GENERATING call of type public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1db4235]
2021-03-11 22:21:27,042 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:21:27,190 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:21:27,193 [main:117] - GENERATED CALL = (A().f()).subSequence(1507253492, 1404676454).endsWith('സ', true)
2021-03-11 22:21:27,193 [main:113] - Case = [public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ba36d74]]
2021-03-11 22:21:27,193 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ba36d74]
2021-03-11 22:21:27,332 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:21:27,490 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:21:27,492 [main:117] - GENERATED CALL = (A().f()).contains('ꢟ', false)
2021-03-11 22:21:27,492 [main:113] - Case = [public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@202842fb]]
2021-03-11 22:21:27,492 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@202842fb]
2021-03-11 22:21:27,492 [main:117] - GENERATED CALL = (A().f()).matches(A().f())
2021-03-11 22:21:27,492 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@640a443f]]
2021-03-11 22:21:27,492 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:21:27,625 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:27,627 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@640a443f]
2021-03-11 22:21:27,627 [main:117] - GENERATED CALL = (A().f()).get(2089351823).isUpperCase()
2021-03-11 22:21:27,627 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ebfab7]]
2021-03-11 22:21:27,627 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:21:27,770 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:27,772 [main:149] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ebfab7]
2021-03-11 22:21:27,772 [main:117] - GENERATED CALL = (A().f()).get(-171878756).isLetterOrDigit()
2021-03-11 22:21:27,772 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6098db]]
2021-03-11 22:21:27,772 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:21:27,915 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:28,057 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:28,059 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6098db]
2021-03-11 22:21:28,060 [main:117] - GENERATED CALL = (A().f()).subSequence(-338095685, 1560652369).isNotBlank()
2021-03-11 22:21:28,060 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7757be0c]]
2021-03-11 22:21:28,060 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:21:28,197 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:28,199 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7757be0c]
2021-03-11 22:21:28,199 [main:117] - GENERATED CALL = (A().f()).get(99979852).isWhitespace()
2021-03-11 22:21:28,199 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7fcce319]]
2021-03-11 22:21:28,199 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:21:28,343 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:28,345 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7fcce319]
2021-03-11 22:21:28,345 [main:117] - GENERATED CALL = (A().f()).get(1347247848).isISOControl()
2021-03-11 22:21:28,345 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c4a710c], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4fef2259]]
2021-03-11 22:21:28,345 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c4a710c]
2021-03-11 22:21:28,490 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:21:28,491 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4fef2259]
2021-03-11 22:21:28,636 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:21:28,638 [main:117] - GENERATED CALL = (A().f()).equals("vnfui").xor(true)
2021-03-11 22:21:28,638 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dae008e]]
2021-03-11 22:21:28,638 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:21:28,774 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:28,916 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:28,919 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dae008e]
2021-03-11 22:21:28,919 [main:117] - GENERATED CALL = (A().f()).subSequence(2011432537, -68812536).isEmpty()
2021-03-11 22:21:28,919 [main:114] - replacement of fu3(prope10++) < 3 of type Boolean is (A().f()).get(1347247848).isISOControl()
2021-03-11 22:21:29,054 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:21:29,054 [main:66] - Compilation checking started
2021-03-11 22:21:29,631 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(prope3, Kla1)
    return prope3.prope2
}

fun box216(): String {
    var prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += prope10
        } while ((A().f()).get(1347247848).isISOControl())
        prope2 += "."
    }
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += fu3(prope10)
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A().f()).isNotBlank() }?.let { error((A().f()).trimStart() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A.s).get(-2125883856).isLetter() } ?: error((A().f()).trimMargin(A.v) +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (0.8096954f).compareTo(-87).toString(808129286) + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:21:29,634 [main:107] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (0.8096954f).compareTo(-87).toString(808129286), String)
2021-03-11 22:21:29,634 [main:50] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (0.8096954f).compareTo(-87).toString(808129286) String
2021-03-11 22:21:29,634 [main:54] - Getting value of type String
2021-03-11 22:21:29,772 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:21:29,774 [main:58] - GENERATED VALUE OF TYPE String = "ktzsf"
2021-03-11 22:21:29,774 [main:61] - GENERATED IS CALL =false
2021-03-11 22:21:30,144 [main:67] - randomType = LinkedHashSet<Array<Float>>
2021-03-11 22:21:30,289 [main:302] - generating value of type = LinkedHashSet<Array<Float>> false depth = 0
2021-03-11 22:21:30,445 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<Array<Float>> = TODO()
2021-03-11 22:21:30,448 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<Array<Float>> = TODO()
2021-03-11 22:21:30,589 [main:95] - GENERATED = linkedSetOf<Array<Float>>()
2021-03-11 22:21:30,770 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@623f76ba]
2021-03-11 22:21:30,771 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@26049ca2]
2021-03-11 22:21:30,771 [main:78] - Generated call from random type = (linkedSetOf<Array<Float>>()).toArray().contentToString()
2021-03-11 22:21:30,771 [main:106] - GETTING String from String
2021-03-11 22:21:30,787 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f04138c]]
2021-03-11 22:21:30,788 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f04138c]
2021-03-11 22:21:30,928 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:21:30,933 [main:117] - GENERATED CALL = (A().f()).removeSuffix(StringBuilder())
2021-03-11 22:21:30,933 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1b5d65]]
2021-03-11 22:21:30,933 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1b5d65]
2021-03-11 22:21:31,078 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-11 22:21:31,080 [main:302] - generating value of type = Char true depth = 1
2021-03-11 22:21:31,082 [main:117] - GENERATED CALL = (A().f()).replaceFirstChar({a: Char -> '⻰'})
2021-03-11 22:21:31,082 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d2b29c6]]
2021-03-11 22:21:31,082 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d2b29c6]
2021-03-11 22:21:31,222 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:21:31,360 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:21:31,509 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:21:31,511 [main:117] - GENERATED CALL = (A().f()).replace('რ', '梨', true)
2021-03-11 22:21:31,512 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fe69a85]]
2021-03-11 22:21:31,512 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fe69a85]
2021-03-11 22:21:31,646 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 22:21:31,648 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:21:31,650 [main:117] - GENERATED CALL = (A().f()).filterNot({a: Char -> false})
2021-03-11 22:21:31,650 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2df1636b]]
2021-03-11 22:21:31,651 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:21:31,790 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:31,927 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:31,929 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2df1636b]
2021-03-11 22:21:32,229 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:32,231 [main:117] - GENERATED CALL = (A().f()).subSequence(-1616321493, 1526955630).repeat(-1784985379)
2021-03-11 22:21:32,231 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34acae1a]]
2021-03-11 22:21:32,231 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34acae1a]
2021-03-11 22:21:32,367 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:32,508 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:32,510 [main:117] - GENERATED CALL = (A().f()).removeRange(-1719420997, -743670794)
2021-03-11 22:21:32,510 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c281616]]
2021-03-11 22:21:32,510 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c281616]
2021-03-11 22:21:32,645 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:32,786 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:21:32,789 [main:117] - GENERATED CALL = (A().f()).padStart(411440416, '')
2021-03-11 22:21:32,789 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e45f41]]
2021-03-11 22:21:32,789 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e45f41]
2021-03-11 22:21:32,923 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:21:32,926 [main:117] - GENERATED CALL = (A().f()).substringBeforeLast('', A.s)
2021-03-11 22:21:32,926 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6866c30c]]
2021-03-11 22:21:32,926 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:21:33,073 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:33,076 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6866c30c]
2021-03-11 22:21:33,077 [main:117] - GENERATED CALL = (A().f()).get(1823316869).lowercase()
2021-03-11 22:21:33,077 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ab9e242]]
2021-03-11 22:21:33,077 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:21:33,211 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:33,362 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:33,365 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ab9e242]
2021-03-11 22:21:33,507 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:21:33,652 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:21:33,654 [main:117] - GENERATED CALL = (A().f()).subSequence(1897434997, -154452299).commonSuffixWith("jguhp", true)
2021-03-11 22:21:33,654 [main:114] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (0.8096954f).compareTo(-87).toString(808129286) of type String is (A().f()).replace('რ', '梨', true)
2021-03-11 22:21:33,801 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:21:33,801 [main:66] - Compilation checking started
2021-03-11 22:21:34,342 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(prope3, Kla1)
    return prope3.prope2
}

fun box216(): String {
    var prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += prope10
        } while ((A().f()).get(1347247848).isISOControl())
        prope2 += "."
    }
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += fu3(prope10)
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A().f()).isNotBlank() }?.let { error((A().f()).trimStart() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A.s).get(-2125883856).isLetter() } ?: error((A().f()).trimMargin(A.v) +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error((A().f()).replace('რ', '梨', true) + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:21:34,343 [main:107] - replacing (prope3, Kla0)
2021-03-11 22:21:34,343 [main:50] - replacing prope3 Kla0
2021-03-11 22:21:34,344 [main:54] - Getting value of type Kla0
2021-03-11 22:21:34,480 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 22:21:34,483 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}
2021-03-11 22:21:34,483 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0()
2021-03-11 22:21:34,483 [main:61] - GENERATED IS CALL =true
2021-03-11 22:21:34,792 [main:67] - randomType = Long?
2021-03-11 22:21:34,937 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:21:34,985 [main:106] - GETTING Kla0 from String
2021-03-11 22:21:35,001 [main:106] - GETTING Kla0 from String
2021-03-11 22:21:35,002 [main:106] - GETTING Kla0 from String
2021-03-11 22:21:35,002 [main:114] - replacement of prope3 of type Kla0 is Kla0()
2021-03-11 22:21:35,142 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 22:21:35,142 [main:66] - Compilation checking started
2021-03-11 22:21:35,701 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return prope3.prope2
}

fun box216(): String {
    var prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += prope10
        } while ((A().f()).get(1347247848).isISOControl())
        prope2 += "."
    }
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += fu3(prope10)
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A().f()).isNotBlank() }?.let { error((A().f()).trimStart() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A.s).get(-2125883856).isLetter() } ?: error((A().f()).trimMargin(A.v) +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error((A().f()).replace('რ', '梨', true) + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:21:35,702 [main:107] - replacing (true, Boolean)
2021-03-11 22:21:35,702 [main:50] - replacing true Boolean
2021-03-11 22:21:35,702 [main:54] - Getting value of type Boolean
2021-03-11 22:21:35,896 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:21:35,899 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 22:21:35,899 [main:61] - GENERATED IS CALL =false
2021-03-11 22:21:36,073 [main:67] - randomType = UInt
2021-03-11 22:21:36,216 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 22:21:36,263 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@226ed9ac]
2021-03-11 22:21:36,389 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:21:36,389 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@58a5cd83]
2021-03-11 22:21:36,528 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:21:36,529 [main:78] - Generated call from random type = (849173647.toUInt()).equals("zspec").equals("nsvmr")
2021-03-11 22:21:36,530 [main:106] - GETTING Boolean from String
2021-03-11 22:21:36,552 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f1f6355]]
2021-03-11 22:21:36,552 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:21:36,686 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:36,688 [main:149] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f1f6355]
2021-03-11 22:21:36,688 [main:117] - GENERATED CALL = (A.s).get(-1017410089).isHighSurrogate()
2021-03-11 22:21:36,688 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42087911]]
2021-03-11 22:21:36,688 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:21:36,829 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:36,966 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:36,968 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42087911]
2021-03-11 22:21:36,968 [main:117] - GENERATED CALL = (A.s).subSequence(1419713083, -1453732781).any()
2021-03-11 22:21:36,968 [main:113] - Case = [public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47854e48]]
2021-03-11 22:21:36,968 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47854e48]
2021-03-11 22:21:37,108 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:21:37,110 [main:117] - GENERATED CALL = (A.s).endsWith(A().f(), false)
2021-03-11 22:21:37,110 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@640a443f]]
2021-03-11 22:21:37,110 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:21:37,243 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:37,245 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@640a443f]
2021-03-11 22:21:37,245 [main:117] - GENERATED CALL = (A.s).get(-1049244328).isUpperCase()
2021-03-11 22:21:37,246 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@23b046a8]]
2021-03-11 22:21:37,246 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de]
2021-03-11 22:21:37,246 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@23b046a8]
2021-03-11 22:21:37,367 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:21:37,367 [main:117] - GENERATED CALL = (A.s).compareTo(A.s).equals("wsjrd")
2021-03-11 22:21:37,367 [main:113] - Case = [public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@707af378]]
2021-03-11 22:21:37,367 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@707af378]
2021-03-11 22:21:37,503 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:21:37,505 [main:117] - GENERATED CALL = (A.s).startsWith(A.v, true)
2021-03-11 22:21:37,506 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bf69766]]
2021-03-11 22:21:37,506 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:21:37,641 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:37,780 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:37,782 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bf69766]
2021-03-11 22:21:37,917 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:38,058 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:21:38,207 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:21:38,210 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:21:38,504 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:21:38,506 [main:95] - GENERATED = StringBuilder(-1619314887)
2021-03-11 22:21:38,647 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:38,785 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:38,925 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:21:38,927 [main:117] - GENERATED CALL = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
2021-03-11 22:21:38,928 [main:113] - Case = [public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@204d5820]]
2021-03-11 22:21:38,928 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@204d5820]
2021-03-11 22:21:38,928 [main:117] - GENERATED CALL = (A.s).none()
2021-03-11 22:21:38,928 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@376f85c1]]
2021-03-11 22:21:38,928 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:21:39,063 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:39,066 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@376f85c1]
2021-03-11 22:21:39,066 [main:117] - GENERATED CALL = (A.s).get(238574985).isDefined()
2021-03-11 22:21:39,066 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c4a710c], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@58a5cd83]]
2021-03-11 22:21:39,067 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c4a710c]
2021-03-11 22:21:39,211 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:21:39,211 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@58a5cd83]
2021-03-11 22:21:39,344 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:21:39,344 [main:117] - GENERATED CALL = (A.s).equals("nwauo").equals("llxmb")
2021-03-11 22:21:39,344 [main:114] - replacement of true of type Boolean is (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
2021-03-11 22:21:39,499 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:21:39,499 [main:66] - Compilation checking started
2021-03-11 22:21:40,100 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return prope3.prope2
}

fun box216(): String {
    var prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += prope10
        } while ((A().f()).get(1347247848).isISOControl())
        prope2 += "."
    }
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += fu3(prope10)
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A().f()).isNotBlank() }?.let { error((A().f()).trimStart() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A.s).get(-2125883856).isLetter() } ?: error((A().f()).trimMargin(A.v) +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error((A().f()).replace('რ', '梨', true) + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:21:40,103 [main:107] - replacing (prope8, Function0<Unit>)
2021-03-11 22:21:40,103 [main:50] - replacing prope8 Function0<Unit>
2021-03-11 22:21:40,103 [main:54] - Getting value of type Function0<Unit>
2021-03-11 22:21:40,250 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 22:21:40,252 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 22:21:40,400 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 22:21:40,403 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 22:21:40,900 [main:302] - generating value of type = Int true depth = 4
2021-03-11 22:21:40,902 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 22:21:40,904 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 22:21:41,054 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 22:21:41,058 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 22:21:41,391 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 22:21:41,393 [main:95] - GENERATED = require(true)
2021-03-11 22:21:41,393 [main:95] - GENERATED = repeat(-4728771, {a: Int -> require(true)})
2021-03-11 22:21:41,393 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(-4728771, {a: Int -> require(true)})}
2021-03-11 22:21:41,393 [main:61] - GENERATED IS CALL =false
2021-03-11 22:21:41,559 [main:67] - randomType = Double
2021-03-11 22:21:41,720 [main:302] - generating value of type = Double true depth = 0
2021-03-11 22:21:41,753 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:21:41,776 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:21:41,777 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:21:41,777 [main:114] - replacement of prope8 of type Function0<Unit> is { repeat(-4728771, {a: Int -> require(true)})}
2021-03-11 22:21:41,922 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 22:21:41,922 [main:66] - Compilation checking started
2021-03-11 22:21:42,342 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return prope3.prope2
}

fun box216(): String {
    var prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += prope10
        } while ((A().f()).get(1347247848).isISOControl())
        prope2 += "."
    }
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += fu3(prope10)
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A().f()).isNotBlank() }?.let { error((A().f()).trimStart() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A.s).get(-2125883856).isLetter() } ?: error((A().f()).trimMargin(A.v) +
                prope5.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        { repeat(-4728771, {a: Int -> require(true)})} = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error((A().f()).replace('რ', '梨', true) + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:21:42,344 [main:107] - replacing (c, Continuation<*>)
2021-03-11 22:21:42,344 [main:50] - replacing c Continuation<*>
2021-03-11 22:21:42,344 [main:54] - Getting value of type Continuation<*>
2021-03-11 22:21:42,475 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 22:21:42,618 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 22:21:42,621 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 22:21:43,079 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 22:21:43,244 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:21:43,247 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:21:43,558 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 22:21:43,709 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:21:43,712 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:21:44,206 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 9
2021-03-11 22:21:44,377 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:21:44,381 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:21:44,874 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 12
2021-03-11 22:21:45,019 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:21:45,022 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:21:45,491 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:21:45,491 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:21:45,491 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:21:45,491 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:21:45,491 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 22:21:45,491 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 22:21:45,498 [main:67] - randomType = Kla4
2021-03-11 22:21:45,638 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 22:21:45,640 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A().f()).isNotBlank() }?.let { error((A().f()).trimStart() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A.s).get(-2125883856).isLetter() } ?: error((A().f()).trimMargin(A.v) +
                prope5.joinToString(separator = "\n"))
    }
}
2021-03-11 22:21:45,649 [main:106] - GETTING Continuation<*> from String
2021-03-11 22:21:45,679 [main:106] - GETTING Continuation<*> from String
2021-03-11 22:21:45,680 [main:106] - GETTING Continuation<*> from String
2021-03-11 22:21:45,680 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-11 22:21:45,680 [main:107] - replacing (prope2.exceptionOrNull()!!, Throwable)
2021-03-11 22:21:45,680 [main:50] - replacing prope2.exceptionOrNull()!! Throwable
2021-03-11 22:21:45,680 [main:54] - Getting value of type Throwable
2021-03-11 22:21:45,822 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 22:21:45,966 [main:43] - GENERATING CALL OF fun RuntimeException(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 22:21:45,969 [main:61] - WITHOUT TYPE PARAMS = fun RuntimeException(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 22:21:46,266 [main:302] - generating value of type = Throwable false depth = 3
2021-03-11 22:21:46,410 [main:43] - GENERATING CALL OF fun UnsupportedOperationException(message: kotlin.String?): Throwable = TODO()
2021-03-11 22:21:46,413 [main:61] - WITHOUT TYPE PARAMS = fun UnsupportedOperationException(message: kotlin.String?): Throwable = TODO()
2021-03-11 22:21:46,733 [main:302] - generating value of type = String true depth = 6
2021-03-11 22:21:46,735 [main:95] - GENERATED = UnsupportedOperationException("vvxks")
2021-03-11 22:21:46,735 [main:95] - GENERATED = RuntimeException(UnsupportedOperationException("vvxks"))
2021-03-11 22:21:46,735 [main:58] - GENERATED VALUE OF TYPE Throwable = RuntimeException(UnsupportedOperationException("vvxks"))
2021-03-11 22:21:46,735 [main:61] - GENERATED IS CALL =true
2021-03-11 22:21:47,203 [main:67] - randomType = ArrayList<UByte>
2021-03-11 22:21:47,340 [main:302] - generating value of type = ArrayList<UByte> false depth = 0
2021-03-11 22:21:47,487 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<UByte> = TODO()
2021-03-11 22:21:47,490 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<UByte> = TODO()
2021-03-11 22:21:47,644 [main:95] - GENERATED = arrayListOf<UByte>()
2021-03-11 22:21:47,795 [main:106] - GETTING Throwable from String
2021-03-11 22:21:47,813 [main:106] - GETTING Throwable from String
2021-03-11 22:21:47,814 [main:106] - GETTING Throwable from String
2021-03-11 22:21:47,814 [main:114] - replacement of prope2.exceptionOrNull()!! of type Throwable is RuntimeException(UnsupportedOperationException("vvxks"))
2021-03-11 22:21:47,956 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 22:21:47,958 [main:107] - replacing ((A().f()).trimMargin(A.v) +
                prope5.joinToString(separator = "\n"), String)
2021-03-11 22:21:47,958 [main:50] - replacing (A().f()).trimMargin(A.v) +
                prope5.joinToString(separator = "\n") String
2021-03-11 22:21:47,958 [main:54] - Getting value of type String
2021-03-11 22:21:48,105 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:21:48,107 [main:58] - GENERATED VALUE OF TYPE String = "ydytw"
2021-03-11 22:21:48,107 [main:61] - GENERATED IS CALL =false
2021-03-11 22:21:48,273 [main:67] - randomType = UShort
2021-03-11 22:21:48,409 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 22:21:48,454 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@32f17e49]
2021-03-11 22:21:48,454 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23615b37]
2021-03-11 22:21:48,581 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:48,583 [main:78] - Generated call from random type = (13910.toUShort()).toLong().toString(733953317)
2021-03-11 22:21:48,583 [main:106] - GETTING String from String
2021-03-11 22:21:48,603 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@272c9357]]
2021-03-11 22:21:48,603 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@272c9357]
2021-03-11 22:21:48,743 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 22:21:48,884 [main:43] - GENERATING CALL OF fun <T> List(size: kotlin.Int, init: (index: kotlin.Int)->Int): Iterable<Int> = TODO()
2021-03-11 22:21:48,887 [main:61] - WITHOUT TYPE PARAMS = fun <T> List(size: kotlin.Int, init: (index: kotlin.Int)->Int): Iterable<Int> = TODO()
2021-03-11 22:21:49,354 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:21:49,356 [main:302] - generating value of type = Function1<[@kotlin.ParameterName] Int, Int> false depth = 3
2021-03-11 22:21:49,358 [main:302] - generating value of type = Int true depth = 4
2021-03-11 22:21:49,360 [main:95] - GENERATED = List<Int>(-1816371399, {a: Int -> -231673932})
2021-03-11 22:21:49,360 [main:117] - GENERATED CALL = (A.s).slice(List<Int>(-1816371399, {a: Int -> -231673932}))
2021-03-11 22:21:49,360 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5aed59aa]]
2021-03-11 22:21:49,360 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5aed59aa]
2021-03-11 22:21:49,498 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:49,622 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:49,766 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:21:49,772 [main:117] - GENERATED CALL = (A.s).replaceRange(1805208495, 1302944625, "xfhlt")
2021-03-11 22:21:49,772 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ab2b222]]
2021-03-11 22:21:49,772 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ab2b222]
2021-03-11 22:21:49,913 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:21:50,038 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:21:50,040 [main:117] - GENERATED CALL = (A.s).replaceBeforeLast('滳', "jtupb", A.v)
2021-03-11 22:21:50,040 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e28298e]]
2021-03-11 22:21:50,040 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:21:50,190 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:50,193 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e28298e]
2021-03-11 22:21:50,193 [main:117] - GENERATED CALL = (A.s).get(-664031355).uppercase()
2021-03-11 22:21:50,193 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54523220]]
2021-03-11 22:21:50,194 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:21:50,362 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:50,364 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54523220]
2021-03-11 22:21:50,364 [main:117] - GENERATED CALL = (A.s).get(-1462001147).plus(A.s)
2021-03-11 22:21:50,365 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e062264]]
2021-03-11 22:21:50,365 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e062264]
2021-03-11 22:21:50,365 [main:117] - GENERATED CALL = (A.s).toUpperCase()
2021-03-11 22:21:50,365 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b66a306]]
2021-03-11 22:21:50,365 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b66a306]
2021-03-11 22:21:50,506 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 22:21:50,508 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:21:50,510 [main:117] - GENERATED CALL = (A.s).dropWhile({a: Char -> false})
2021-03-11 22:21:50,510 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7df7fef2]]
2021-03-11 22:21:50,510 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de]
2021-03-11 22:21:50,510 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7df7fef2]
2021-03-11 22:21:50,646 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:50,648 [main:117] - GENERATED CALL = (A.s).compareTo(A.s).toString(1269324310)
2021-03-11 22:21:50,648 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@490367ed]]
2021-03-11 22:21:50,648 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@490367ed]
2021-03-11 22:21:50,774 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:21:50,776 [main:117] - GENERATED CALL = (A.s).replaceAfter('ꚪ', A.s, A.v)
2021-03-11 22:21:50,776 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7dd25ac5]]
2021-03-11 22:21:50,776 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7dd25ac5]
2021-03-11 22:21:50,777 [main:117] - GENERATED CALL = (A.s).decapitalize()
2021-03-11 22:21:50,777 [main:114] - replacement of (A().f()).trimMargin(A.v) +
                prope5.joinToString(separator = "\n") of type String is (A.s).replaceAfter('ꚪ', A.s, A.v)
2021-03-11 22:21:50,921 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:21:50,921 [main:66] - Compilation checking started
2021-03-11 22:21:51,506 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return prope3.prope2
}

fun box216(): String {
    var prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += prope10
        } while ((A().f()).get(1347247848).isISOControl())
        prope2 += "."
    }
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += fu3(prope10)
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A().f()).isNotBlank() }?.let { error((A().f()).trimStart() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A.s).get(-2125883856).isLetter() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error((A().f()).replace('რ', '梨', true) + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:21:51,508 [main:107] - replacing (prope1.prope7, Boolean)
2021-03-11 22:21:51,508 [main:50] - replacing prope1.prope7 Boolean
2021-03-11 22:21:51,508 [main:54] - Getting value of type Boolean
2021-03-11 22:21:51,645 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:21:51,646 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 22:21:51,647 [main:61] - GENERATED IS CALL =false
2021-03-11 22:21:51,794 [main:67] - randomType = UShort
2021-03-11 22:21:51,935 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 22:21:52,001 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@29a64df5]
2021-03-11 22:21:52,001 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5c59bea7]
2021-03-11 22:21:52,126 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:21:52,126 [main:78] - Generated call from random type = (3476.toUShort()).toDouble().equals("pocbh")
2021-03-11 22:21:52,127 [main:106] - GETTING Boolean from String
2021-03-11 22:21:52,145 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cf33aef]]
2021-03-11 22:21:52,145 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cf33aef]
2021-03-11 22:21:52,145 [main:117] - GENERATED CALL = (A.v).toBoolean()
2021-03-11 22:21:52,145 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c4a710c], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@503c6c4d]]
2021-03-11 22:21:52,145 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c4a710c]
2021-03-11 22:21:52,301 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:21:52,301 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@503c6c4d]
2021-03-11 22:21:52,434 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:21:52,436 [main:117] - GENERATED CALL = (A.v).equals("pppgt").and(false)
2021-03-11 22:21:52,436 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@795ef724]]
2021-03-11 22:21:52,436 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@795ef724]
2021-03-11 22:21:52,436 [main:117] - GENERATED CALL = (A.v).isNotEmpty()
2021-03-11 22:21:52,436 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c4a710c], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@58a5cd83]]
2021-03-11 22:21:52,436 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c4a710c]
2021-03-11 22:21:52,577 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:21:52,578 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@58a5cd83]
2021-03-11 22:21:52,715 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:21:52,715 [main:117] - GENERATED CALL = (A.v).equals("hhrxc").equals("sjkeg")
2021-03-11 22:21:52,715 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f1f6355]]
2021-03-11 22:21:52,715 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:21:52,867 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:52,869 [main:149] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f1f6355]
2021-03-11 22:21:52,870 [main:117] - GENERATED CALL = (A.v).get(-597615408).isHighSurrogate()
2021-03-11 22:21:52,870 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fa931be]]
2021-03-11 22:21:52,870 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:21:53,006 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:53,008 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fa931be]
2021-03-11 22:21:53,008 [main:117] - GENERATED CALL = (A.v).get(668642912).isLowSurrogate()
2021-03-11 22:21:53,008 [main:113] - Case = [public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bf69766]]
2021-03-11 22:21:53,008 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bf69766]
2021-03-11 22:21:53,132 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:53,274 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:21:53,414 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:53,557 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:53,694 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:21:53,696 [main:117] - GENERATED CALL = (A.v).regionMatches(-1113616187, "dzqiv", 1919692557, 1002680068, true)
2021-03-11 22:21:53,696 [main:113] - Case = [public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14b0d912]]
2021-03-11 22:21:53,696 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14b0d912]
2021-03-11 22:21:53,819 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:53,821 [main:117] - GENERATED CALL = (A.v).hasSurrogatePairAt(7419185)
2021-03-11 22:21:53,821 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6098db]]
2021-03-11 22:21:53,821 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:21:53,962 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:54,108 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:54,110 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6098db]
2021-03-11 22:21:54,110 [main:117] - GENERATED CALL = (A.v).subSequence(-1340095135, -1602539763).isNotBlank()
2021-03-11 22:21:54,110 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ebfab7]]
2021-03-11 22:21:54,110 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:21:54,251 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:54,253 [main:149] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ebfab7]
2021-03-11 22:21:54,253 [main:117] - GENERATED CALL = (A.v).get(-1474608782).isLetterOrDigit()
2021-03-11 22:21:54,253 [main:114] - replacement of prope1.prope7 of type Boolean is (A.v).get(668642912).isLowSurrogate()
2021-03-11 22:21:54,390 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:21:54,390 [main:66] - Compilation checking started
2021-03-11 22:21:54,746 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return prope3.prope2
}

fun box216(): String {
    var prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += prope10
        } while ((A().f()).get(1347247848).isISOControl())
        prope2 += "."
    }
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += fu3(prope10)
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A().f()).isNotBlank() }?.let { error((A().f()).trimStart() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A.s).get(-2125883856).isLetter() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error((A().f()).replace('რ', '梨', true) + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            (A.v).get(668642912).isLowSurrogate() = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:21:54,748 [main:107] - replacing (prope10, Int)
2021-03-11 22:21:54,748 [main:50] - replacing prope10 Int
2021-03-11 22:21:54,749 [main:54] - Getting value of type Int
2021-03-11 22:21:54,892 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:54,894 [main:58] - GENERATED VALUE OF TYPE Int = 1320242556
2021-03-11 22:21:54,894 [main:61] - GENERATED IS CALL =false
2021-03-11 22:21:55,206 [main:67] - randomType = HashSet<Byte>
2021-03-11 22:21:55,342 [main:302] - generating value of type = HashSet<Byte> false depth = 0
2021-03-11 22:21:55,487 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: Byte): HashSet<Byte> = TODO()
2021-03-11 22:21:55,490 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: Byte): HashSet<Byte> = TODO()
2021-03-11 22:21:55,632 [main:302] - generating value of type = Byte true depth = 3
2021-03-11 22:21:55,634 [main:95] - GENERATED = hashSetOf<Byte>(15)
2021-03-11 22:21:55,763 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3e9ac53f]
2021-03-11 22:21:55,908 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:55,910 [main:78] - Generated call from random type = (hashSetOf<Byte>(15)).size.ushr(-890992587)
2021-03-11 22:21:55,911 [main:106] - GETTING Int from String
2021-03-11 22:21:55,942 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@304551d8], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@639aa001]]
2021-03-11 22:21:55,942 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@639aa001]
2021-03-11 22:21:55,942 [main:117] - GENERATED CALL = (A().f()).length.toInt()
2021-03-11 22:21:55,943 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@304551d8], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6882d1ea]]
2021-03-11 22:21:55,943 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6882d1ea]
2021-03-11 22:21:55,943 [main:117] - GENERATED CALL = (A().f()).length.countOneBits()
2021-03-11 22:21:55,943 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7440b7d3]]
2021-03-11 22:21:55,943 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de]
2021-03-11 22:21:55,943 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7440b7d3]
2021-03-11 22:21:56,081 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:56,083 [main:117] - GENERATED CALL = (A().f()).compareTo(A().f()).and(-1510607088)
2021-03-11 22:21:56,084 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@7016957d]]
2021-03-11 22:21:56,084 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de]
2021-03-11 22:21:56,084 [main:117] - GENERATED CALL = (A().f()).compareTo(A.s).absoluteValue
2021-03-11 22:21:56,084 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7dddd554]]
2021-03-11 22:21:56,084 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de]
2021-03-11 22:21:56,084 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7dddd554]
2021-03-11 22:21:56,224 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:21:56,226 [main:117] - GENERATED CALL = (A().f()).compareTo(A.s).minus(95)
2021-03-11 22:21:56,226 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@304551d8], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3e9ac53f]]
2021-03-11 22:21:56,226 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3e9ac53f]
2021-03-11 22:21:56,361 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:56,363 [main:117] - GENERATED CALL = (A().f()).length.ushr(-2012923948)
2021-03-11 22:21:56,363 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@304551d8], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5ddae4c5]]
2021-03-11 22:21:56,363 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5ddae4c5]
2021-03-11 22:21:56,503 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:56,505 [main:117] - GENERATED CALL = (A().f()).length.coerceAtLeast(-1058865427)
2021-03-11 22:21:56,505 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1f60412a]]
2021-03-11 22:21:56,505 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de]
2021-03-11 22:21:56,506 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1f60412a]
2021-03-11 22:21:56,506 [main:117] - GENERATED CALL = (A().f()).compareTo(A.s).takeLowestOneBit()
2021-03-11 22:21:56,506 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2181b1cd]]
2021-03-11 22:21:56,506 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:21:56,653 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:56,778 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:56,780 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2181b1cd]
2021-03-11 22:21:56,920 [main:302] - generating value of type = CharArray false depth = 0
2021-03-11 22:21:57,060 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 22:21:57,063 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 22:21:57,213 [main:302] - generating value of type = Char true depth = 3
2021-03-11 22:21:57,215 [main:95] - GENERATED = charArrayOf('욄')
2021-03-11 22:21:57,352 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:21:57,477 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:21:57,479 [main:117] - GENERATED CALL = (A().f()).subSequence(-1268435523, -843237049).indexOfAny(charArrayOf('욄'), 1272776549, true)
2021-03-11 22:21:57,479 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e8c4518]]
2021-03-11 22:21:57,479 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e8c4518]
2021-03-11 22:21:57,619 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:21:57,756 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:21:57,758 [main:117] - GENERATED CALL = (A().f()).compareTo("lpevu", true)
2021-03-11 22:21:57,758 [main:114] - replacement of prope10 of type Int is (A().f()).length.toInt()
2021-03-11 22:21:57,880 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:21:57,881 [main:66] - Compilation checking started
2021-03-11 22:21:58,469 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return prope3.prope2
}

fun box216(): String {
    var prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += prope10
        } while ((A().f()).get(1347247848).isISOControl())
        prope2 += "."
    }
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += fu3((A().f()).length.toInt())
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A().f()).isNotBlank() }?.let { error((A().f()).trimStart() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A.s).get(-2125883856).isLetter() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error((A().f()).replace('რ', '梨', true) + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:21:58,472 [main:107] - replacing (prope8, Function0<Unit>)
2021-03-11 22:21:58,472 [main:50] - replacing prope8 Function0<Unit>
2021-03-11 22:21:58,472 [main:54] - Getting value of type Function0<Unit>
2021-03-11 22:21:58,676 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 22:21:58,679 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 22:21:58,836 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 22:21:58,839 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 22:21:59,127 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 22:21:59,129 [main:95] - GENERATED = require(true)
2021-03-11 22:21:59,129 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true)}
2021-03-11 22:21:59,130 [main:61] - GENERATED IS CALL =false
2021-03-11 22:21:59,432 [main:67] - randomType = Float?
2021-03-11 22:21:59,567 [main:302] - generating value of type = Float true depth = 0
2021-03-11 22:21:59,617 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:21:59,634 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:21:59,635 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:21:59,635 [main:114] - replacement of prope8 of type Function0<Unit> is { require(true)}
2021-03-11 22:21:59,772 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 22:21:59,772 [main:66] - Compilation checking started
2021-03-11 22:22:00,166 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return prope3.prope2
}

fun box216(): String {
    var prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += prope10
        } while ((A().f()).get(1347247848).isISOControl())
        prope2 += "."
    }
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += fu3((A().f()).length.toInt())
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A().f()).isNotBlank() }?.let { error((A().f()).trimStart() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A.s).get(-2125883856).isLetter() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error((A().f()).replace('რ', '梨', true) + prope6)
            { require(true)}()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:22:00,168 [main:107] - replacing ({
        var prope10 = 1
        do {
            prope2 += prope10
        } while ((A().f()).get(1347247848).isISOControl())
        prope2 += "."
    }, [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit>)
2021-03-11 22:22:00,168 [main:50] - replacing {
        var prope10 = 1
        do {
            prope2 += prope10
        } while ((A().f()).get(1347247848).isISOControl())
        prope2 += "."
    } [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit>
2021-03-11 22:22:00,168 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit>
2021-03-11 22:22:00,355 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> false depth = 0
2021-03-11 22:22:00,358 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 22:22:00,363 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> = {a: Kla0 -> println()}
2021-03-11 22:22:00,363 [main:61] - GENERATED IS CALL =false
2021-03-11 22:22:00,537 [main:67] - randomType = HashSet<Kla2>
2021-03-11 22:22:00,662 [main:302] - generating value of type = HashSet<Kla2> false depth = 0
2021-03-11 22:22:00,789 [main:43] - GENERATING CALL OF fun <T> hashSetOf(): HashSet<Kla2> = TODO()
2021-03-11 22:22:00,792 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(): HashSet<Kla2> = TODO()
2021-03-11 22:22:00,919 [main:95] - GENERATED = hashSetOf<Kla2>()
2021-03-11 22:22:01,025 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> from String
2021-03-11 22:22:01,057 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> from String
2021-03-11 22:22:01,061 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> from String
2021-03-11 22:22:01,061 [main:114] - replacement of {
        var prope10 = 1
        do {
            prope2 += prope10
        } while ((A().f()).get(1347247848).isISOControl())
        prope2 += "."
    } of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> is {a: Kla0 -> println()}
2021-03-11 22:22:01,195 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 22:22:01,196 [main:66] - Compilation checking started
2021-03-11 22:22:01,576 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return prope3.prope2
}

fun box216(): String {
    var prope4 = fu0 {a: Kla0 -> println()}
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += fu3((A().f()).length.toInt())
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A().f()).isNotBlank() }?.let { error((A().f()).trimStart() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A.s).get(-2125883856).isLetter() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error((A().f()).replace('რ', '梨', true) + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:22:01,578 [main:107] - replacing ("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions, String)
2021-03-11 22:22:01,578 [main:50] - replacing "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions String
2021-03-11 22:22:01,578 [main:54] - Getting value of type String
2021-03-11 22:22:01,705 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:22:01,707 [main:58] - GENERATED VALUE OF TYPE String = "uynrv"
2021-03-11 22:22:01,707 [main:61] - GENERATED IS CALL =false
2021-03-11 22:22:02,022 [main:67] - randomType = Triple<String, Char?, Boolean>
2021-03-11 22:22:02,152 [main:302] - generating value of type = Triple<String, Char?, Boolean> false depth = 0
2021-03-11 22:22:02,280 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: String, second: Char?, third: Boolean): Triple<String, Char?, Boolean> = TODO()
2021-03-11 22:22:02,283 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: String, second: Char?, third: Boolean): Triple<String, Char?, Boolean> = TODO()
2021-03-11 22:22:02,410 [main:302] - generating value of type = String true depth = 3
2021-03-11 22:22:02,412 [main:302] - generating value of type = Char true depth = 3
2021-03-11 22:22:02,414 [main:302] - generating value of type = Boolean true depth = 3
2021-03-11 22:22:02,416 [main:95] - GENERATED = Triple<String, Char?, Boolean>("anmfr", '鐑', true)
2021-03-11 22:22:02,430 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c281616]
2021-03-11 22:22:02,554 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:02,677 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:22:02,679 [main:78] - Generated call from random type = (Triple<String, Char?, Boolean>("anmfr", '鐑', true)).first.padStart(-1562584856, '顆')
2021-03-11 22:22:02,679 [main:106] - GETTING String from String
2021-03-11 22:22:02,697 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e2a9fc1]]
2021-03-11 22:22:02,697 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e2a9fc1]
2021-03-11 22:22:02,697 [main:117] - GENERATED CALL = (A().f()).capitalize()
2021-03-11 22:22:02,697 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@abc67a]]
2021-03-11 22:22:02,697 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@abc67a]
2021-03-11 22:22:02,820 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:22:02,820 [main:117] - GENERATED CALL = (A().f()).plus("kgqds")
2021-03-11 22:22:02,820 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26020a41]]
2021-03-11 22:22:02,820 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26020a41]
2021-03-11 22:22:02,946 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:22:02,948 [main:117] - GENERATED CALL = (A().f()).substringAfterLast('畐', A().f())
2021-03-11 22:22:02,948 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56e6ff40]]
2021-03-11 22:22:02,948 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56e6ff40]
2021-03-11 22:22:03,084 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 22:22:03,086 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:22:03,088 [main:117] - GENERATED CALL = (A().f()).filterIndexed({a: Int, b: Char -> true})
2021-03-11 22:22:03,088 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4833974d]]
2021-03-11 22:22:03,088 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4833974d]
2021-03-11 22:22:03,225 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:22:03,227 [main:117] - GENERATED CALL = (A().f()).replaceAfterLast('', A.s, A.v)
2021-03-11 22:22:03,227 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@261d48cc]]
2021-03-11 22:22:03,227 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@261d48cc]
2021-03-11 22:22:03,228 [main:117] - GENERATED CALL = (A().f()).trimIndent()
2021-03-11 22:22:03,228 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c281616]]
2021-03-11 22:22:03,228 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c281616]
2021-03-11 22:22:03,379 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:03,523 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:22:03,525 [main:117] - GENERATED CALL = (A().f()).padStart(-1872383683, '㡮')
2021-03-11 22:22:03,525 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39f6f63f]]
2021-03-11 22:22:03,525 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39f6f63f]
2021-03-11 22:22:03,525 [main:117] - GENERATED CALL = (A().f()).uppercase()
2021-03-11 22:22:03,526 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63deed18]]
2021-03-11 22:22:03,526 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63deed18]
2021-03-11 22:22:03,650 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:22:03,776 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:22:03,778 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:22:04,041 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:22:04,044 [main:95] - GENERATED = StringBuilder(-978152723)
2021-03-11 22:22:04,044 [main:117] - GENERATED CALL = (A().f()).removeSurrounding(StringBuilder(-978152723))
2021-03-11 22:22:04,044 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ab2b222]]
2021-03-11 22:22:04,044 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ab2b222]
2021-03-11 22:22:04,167 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:22:04,169 [main:117] - GENERATED CALL = (A().f()).replaceBeforeLast('逊', A().f(), A.v)
2021-03-11 22:22:04,169 [main:114] - replacement of "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions of type String is (A().f()).filterIndexed({a: Int, b: Char -> true})
2021-03-11 22:22:04,291 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:22:04,291 [main:66] - Compilation checking started
2021-03-11 22:22:04,862 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return prope3.prope2
}

fun box216(): String {
    var prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += prope10
        } while ((A().f()).get(1347247848).isISOControl())
        prope2 += "."
    }
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += fu3((A().f()).length.toInt())
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A().f()).isNotBlank() }?.let { error((A().f()).trimStart() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A.s).get(-2125883856).isLetter() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error((A().f()).replace('რ', '梨', true) + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((A().f()).filterIndexed({a: Int, b: Char -> true}) + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:22:04,865 [main:107] - replacing (prope10, Int)
2021-03-11 22:22:04,866 [main:50] - replacing prope10 Int
2021-03-11 22:22:04,866 [main:54] - Getting value of type Int
2021-03-11 22:22:05,021 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:05,023 [main:58] - GENERATED VALUE OF TYPE Int = -1384271235
2021-03-11 22:22:05,023 [main:61] - GENERATED IS CALL =false
2021-03-11 22:22:05,334 [main:67] - randomType = Long?
2021-03-11 22:22:05,457 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:22:05,491 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@708dd6e3]
2021-03-11 22:22:05,491 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@4caebb]
2021-03-11 22:22:05,491 [main:78] - Generated call from random type = (-5408710374888219464)?.toByte().toInt()
2021-03-11 22:22:05,491 [main:114] - replacement of prope10 of type Int is (-5408710374888219464)?.toByte().toInt()
2021-03-11 22:22:05,612 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:22:05,613 [main:66] - Compilation checking started
2021-03-11 22:22:06,218 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return prope3.prope2
}

fun box216(): String {
    var prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += (-5408710374888219464)?.toByte().toInt()
        } while ((A().f()).get(1347247848).isISOControl())
        prope2 += "."
    }
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += fu3((A().f()).length.toInt())
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A().f()).isNotBlank() }?.let { error((A().f()).trimStart() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A.s).get(-2125883856).isLetter() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error((A().f()).replace('რ', '梨', true) + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((A().f()).filterIndexed({a: Int, b: Char -> true}) + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:22:06,221 [main:107] - replacing ("Wrong state-machine generated: it is finished early", String)
2021-03-11 22:22:06,222 [main:50] - replacing "Wrong state-machine generated: it is finished early" String
2021-03-11 22:22:06,222 [main:54] - Getting value of type String
2021-03-11 22:22:06,364 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:22:06,366 [main:58] - GENERATED VALUE OF TYPE String = "izyll"
2021-03-11 22:22:06,366 [main:61] - GENERATED IS CALL =false
2021-03-11 22:22:06,375 [main:67] - randomType = Kla2
2021-03-11 22:22:06,501 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-11 22:22:06,503 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}
2021-03-11 22:22:06,518 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@4cb9209b]
2021-03-11 22:22:06,518 [main:78] - Generated call from random type = (Kla2()).prope2?.toString()!!
2021-03-11 22:22:06,519 [main:114] - replacement of "Wrong state-machine generated: it is finished early" of type String is (Kla2()).prope2?.toString()!!
2021-03-11 22:22:06,643 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(POSTFIX_EXPRESSION)
2021-03-11 22:22:06,644 [main:66] - Compilation checking started
2021-03-11 22:22:07,270 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return prope3.prope2
}

fun box216(): String {
    var prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += (-5408710374888219464)?.toByte().toInt()
        } while ((A().f()).get(1347247848).isISOControl())
        prope2 += "."
    }
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += fu3((A().f()).length.toInt())
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A().f()).isNotBlank() }?.let { error((A().f()).trimStart() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A.s).get(-2125883856).isLetter() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error((A().f()).replace('რ', '梨', true) + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((A().f()).filterIndexed({a: Int, b: Char -> true}) + ", got " + prope6)
        if (prope7) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:22:07,273 [main:107] - replacing (", got ", String)
2021-03-11 22:22:07,274 [main:50] - replacing ", got " String
2021-03-11 22:22:07,274 [main:54] - Getting value of type String
2021-03-11 22:22:07,412 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:22:07,414 [main:58] - GENERATED VALUE OF TYPE String = "fxzbf"
2021-03-11 22:22:07,415 [main:61] - GENERATED IS CALL =false
2021-03-11 22:22:07,583 [main:67] - randomType = Long
2021-03-11 22:22:07,725 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:22:07,781 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@76d4d6e3]
2021-03-11 22:22:07,781 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7df7fef2]
2021-03-11 22:22:07,923 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:07,925 [main:78] - Generated call from random type = (296508231945634976).toInt().toString(1561907922)
2021-03-11 22:22:07,925 [main:106] - GETTING String from String
2021-03-11 22:22:07,953 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39f6f63f]]
2021-03-11 22:22:07,953 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39f6f63f]
2021-03-11 22:22:07,954 [main:117] - GENERATED CALL = (A.v).uppercase()
2021-03-11 22:22:07,954 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ab2b222]]
2021-03-11 22:22:07,954 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ab2b222]
2021-03-11 22:22:08,115 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:22:08,118 [main:117] - GENERATED CALL = (A.v).replaceBeforeLast('쬴', A.s, A.v)
2021-03-11 22:22:08,118 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ab9e242]]
2021-03-11 22:22:08,118 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:22:08,260 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:08,402 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:08,404 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ab9e242]
2021-03-11 22:22:08,530 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:22:08,674 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:22:08,676 [main:117] - GENERATED CALL = (A.v).subSequence(290137374, 154331609).commonSuffixWith("ovbkm", true)
2021-03-11 22:22:08,676 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b70aa8a]]
2021-03-11 22:22:08,676 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b70aa8a]
2021-03-11 22:22:08,816 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:08,818 [main:117] - GENERATED CALL = (A.v).substring(-1535671462)
2021-03-11 22:22:08,818 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fe69a85]]
2021-03-11 22:22:08,818 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fe69a85]
2021-03-11 22:22:08,944 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 22:22:08,946 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:22:08,948 [main:117] - GENERATED CALL = (A.v).filterNot({a: Char -> true})
2021-03-11 22:22:08,948 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d93281e]]
2021-03-11 22:22:08,948 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d93281e]
2021-03-11 22:22:08,948 [main:117] - GENERATED CALL = (A.v).trimEnd()
2021-03-11 22:22:08,948 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@255f0213]]
2021-03-11 22:22:08,948 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@255f0213]
2021-03-11 22:22:09,088 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:09,090 [main:117] - GENERATED CALL = (A.v).take(2034037437)
2021-03-11 22:22:09,090 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74196470]]
2021-03-11 22:22:09,090 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74196470]
2021-03-11 22:22:09,091 [main:117] - GENERATED CALL = (A.v).trim()
2021-03-11 22:22:09,091 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7eeb1661]]
2021-03-11 22:22:09,091 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7eeb1661]
2021-03-11 22:22:09,091 [main:117] - GENERATED CALL = (A.v).trimStart()
2021-03-11 22:22:09,091 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e28298e]]
2021-03-11 22:22:09,091 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:22:09,231 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:09,233 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e28298e]
2021-03-11 22:22:09,233 [main:117] - GENERATED CALL = (A.v).get(-523603477).uppercase()
2021-03-11 22:22:09,233 [main:114] - replacement of ", got " of type String is (A.v).filterNot({a: Char -> true})
2021-03-11 22:22:09,359 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:22:09,359 [main:66] - Compilation checking started
2021-03-11 22:22:09,910 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return prope3.prope2
}

fun box216(): String {
    var prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += (-5408710374888219464)?.toByte().toInt()
        } while ((A().f()).get(1347247848).isISOControl())
        prope2 += "."
    }
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += fu3((A().f()).length.toInt())
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A().f()).isNotBlank() }?.let { error((A().f()).trimStart() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A.s).get(-2125883856).isLetter() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error((A().f()).replace('რ', '梨', true) + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((A().f()).filterIndexed({a: Int, b: Char -> true}) + (A.v).filterNot({a: Char -> true}) + prope6)
        if (prope7) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:22:09,914 [main:107] - replacing (prope2, Result<Any?>)
2021-03-11 22:22:09,914 [main:50] - replacing prope2 Result<Any?>
2021-03-11 22:22:09,914 [main:54] - Getting value of type Result<Any?>
2021-03-11 22:22:10,070 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-11 22:22:10,224 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 22:22:10,228 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 22:22:10,545 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-11 22:22:10,547 [main:302] - generating value of type = Any false depth = 4
2021-03-11 22:22:10,547 [main:95] - GENERATED = runCatching<Any?>({ "vqwwd"})
2021-03-11 22:22:10,548 [main:58] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ "vqwwd"})
2021-03-11 22:22:10,548 [main:61] - GENERATED IS CALL =true
2021-03-11 22:22:10,705 [main:67] - randomType = UShort
2021-03-11 22:22:10,838 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 22:22:10,886 [main:106] - GETTING Result<Any?> from String
2021-03-11 22:22:10,917 [main:106] - GETTING Result<Any?> from String
2021-03-11 22:22:10,918 [main:106] - GETTING Result<Any?> from String
2021-03-11 22:22:10,919 [main:114] - replacement of prope2 of type Result<Any?> is runCatching<Any?>({ "vqwwd"})
2021-03-11 22:22:11,067 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 22:22:11,067 [main:66] - Compilation checking started
2021-03-11 22:22:11,659 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return prope3.prope2
}

fun box216(): String {
    var prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += (-5408710374888219464)?.toByte().toInt()
        } while ((A().f()).get(1347247848).isISOControl())
        prope2 += "."
    }
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += fu3((A().f()).length.toInt())
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vqwwd"}).exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A().f()).isNotBlank() }?.let { error((A().f()).trimStart() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A.s).get(-2125883856).isLetter() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error((A().f()).replace('რ', '梨', true) + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((A().f()).filterIndexed({a: Int, b: Char -> true}) + (A.v).filterNot({a: Char -> true}) + prope6)
        if (prope7) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:22:11,662 [main:107] - replacing ({ c.resume(Unit) }, Function0<Unit>)
2021-03-11 22:22:11,662 [main:50] - replacing { c.resume(Unit) } Function0<Unit>
2021-03-11 22:22:11,662 [main:54] - Getting value of type Function0<Unit>
2021-03-11 22:22:11,887 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 22:22:11,910 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 22:22:12,054 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 22:22:12,057 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 22:22:12,377 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 22:22:12,380 [main:95] - GENERATED = require(true)
2021-03-11 22:22:12,380 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true)}
2021-03-11 22:22:12,380 [main:61] - GENERATED IS CALL =false
2021-03-11 22:22:12,550 [main:67] - randomType = UByte
2021-03-11 22:22:12,700 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 22:22:12,743 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:22:12,760 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:22:12,761 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:22:12,761 [main:114] - replacement of { c.resume(Unit) } of type Function0<Unit> is { require(true)}
2021-03-11 22:22:12,907 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 22:22:12,908 [main:66] - Compilation checking started
2021-03-11 22:22:13,550 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return prope3.prope2
}

fun box216(): String {
    var prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += (-5408710374888219464)?.toByte().toInt()
        } while ((A().f()).get(1347247848).isISOControl())
        prope2 += "."
    }
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += fu3((A().f()).length.toInt())
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vqwwd"}).exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A().f()).isNotBlank() }?.let { error((A().f()).trimStart() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A.s).get(-2125883856).isLetter() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error((A().f()).replace('რ', '梨', true) + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((A().f()).filterIndexed({a: Int, b: Char -> true}) + (A.v).filterNot({a: Char -> true}) + prope6)
        if (prope7) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:22:13,552 [main:107] - replacing (prope4, String)
2021-03-11 22:22:13,553 [main:50] - replacing prope4 String
2021-03-11 22:22:13,553 [main:54] - Getting value of type String
2021-03-11 22:22:13,727 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:22:13,729 [main:58] - GENERATED VALUE OF TYPE String = "lghup"
2021-03-11 22:22:13,729 [main:61] - GENERATED IS CALL =false
2021-03-11 22:22:13,889 [main:67] - randomType = Kla6
2021-03-11 22:22:14,055 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 22:22:14,059 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}
2021-03-11 22:22:14,102 [main:106] - GETTING String from String
2021-03-11 22:22:14,152 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c281616]]
2021-03-11 22:22:14,152 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c281616]
2021-03-11 22:22:14,295 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:14,445 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:22:14,447 [main:117] - GENERATED CALL = (A().f()).padStart(-101524121, '௑')
2021-03-11 22:22:14,447 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@261d48cc]]
2021-03-11 22:22:14,447 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@261d48cc]
2021-03-11 22:22:14,447 [main:117] - GENERATED CALL = (A().f()).trimIndent()
2021-03-11 22:22:14,447 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5aed59aa]]
2021-03-11 22:22:14,448 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5aed59aa]
2021-03-11 22:22:14,592 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:14,721 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:14,872 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:22:14,878 [main:117] - GENERATED CALL = (A().f()).replaceRange(845477895, 1327840441, "wffno")
2021-03-11 22:22:14,878 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc3b4e]]
2021-03-11 22:22:14,878 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc3b4e]
2021-03-11 22:22:15,021 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:22:15,024 [main:117] - GENERATED CALL = (A().f()).substringBefore('羞', A.v)
2021-03-11 22:22:15,024 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ab2b222]]
2021-03-11 22:22:15,024 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ab2b222]
2021-03-11 22:22:15,162 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:22:15,164 [main:117] - GENERATED CALL = (A().f()).replaceBeforeLast('搒', A.s, A.v)
2021-03-11 22:22:15,164 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b56b568]]
2021-03-11 22:22:15,164 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b56b568]
2021-03-11 22:22:15,313 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:22:15,318 [main:117] - GENERATED CALL = (A().f()).removePrefix("bapmj")
2021-03-11 22:22:15,319 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7dd25ac5]]
2021-03-11 22:22:15,319 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7dd25ac5]
2021-03-11 22:22:15,319 [main:117] - GENERATED CALL = (A().f()).decapitalize()
2021-03-11 22:22:15,319 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51edcdcb]]
2021-03-11 22:22:15,319 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51edcdcb]
2021-03-11 22:22:15,463 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:22:15,466 [main:117] - GENERATED CALL = (A().f()).substringAfter('䃙', A.s)
2021-03-11 22:22:15,466 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7eeb1661]]
2021-03-11 22:22:15,466 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7eeb1661]
2021-03-11 22:22:15,466 [main:117] - GENERATED CALL = (A().f()).trimStart()
2021-03-11 22:22:15,466 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d93281e]]
2021-03-11 22:22:15,466 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d93281e]
2021-03-11 22:22:15,466 [main:117] - GENERATED CALL = (A().f()).trimEnd()
2021-03-11 22:22:15,466 [main:114] - replacement of prope4 of type String is A().f()
2021-03-11 22:22:15,593 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:22:15,594 [main:66] - Compilation checking started
2021-03-11 22:22:15,959 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return prope3.prope2
}

fun box216(): String {
    var prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += (-5408710374888219464)?.toByte().toInt()
        } while ((A().f()).get(1347247848).isISOControl())
        prope2 += "."
    }
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    A().f() = fu0 {
        var prope10 = 1
        do {
            prope2 += fu3((A().f()).length.toInt())
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vqwwd"}).exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A().f()).isNotBlank() }?.let { error((A().f()).trimStart() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A.s).get(-2125883856).isLetter() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error((A().f()).replace('რ', '梨', true) + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((A().f()).filterIndexed({a: Int, b: Char -> true}) + (A.v).filterNot({a: Char -> true}) + prope6)
        if (prope7) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:22:15,962 [main:107] - replacing ((A().f()).filterIndexed({a: Int, b: Char -> true}) + (A.v).filterNot({a: Char -> true}), String)
2021-03-11 22:22:15,962 [main:50] - replacing (A().f()).filterIndexed({a: Int, b: Char -> true}) + (A.v).filterNot({a: Char -> true}) String
2021-03-11 22:22:15,962 [main:54] - Getting value of type String
2021-03-11 22:22:16,130 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:22:16,132 [main:58] - GENERATED VALUE OF TYPE String = "vsyyb"
2021-03-11 22:22:16,132 [main:61] - GENERATED IS CALL =false
2021-03-11 22:22:17,018 [main:67] - randomType = LinkedHashMap<UInt?, UShort>?
2021-03-11 22:22:17,169 [main:302] - generating value of type = LinkedHashMap<UInt?, UShort> false depth = 0
2021-03-11 22:22:17,323 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<UInt?, UShort>): LkedHashMap<UInt?, UShort> = TODO()
2021-03-11 22:22:17,326 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<UInt?, UShort>): LkedHashMap<UInt?, UShort> = TODO()
2021-03-11 22:22:17,460 [main:302] - generating value of type = Pair<UInt?, UShort> false depth = 3
2021-03-11 22:22:17,616 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: UInt?, second: UShort): Pair<UInt?, UShort> = TODO()
2021-03-11 22:22:17,619 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: UInt?, second: UShort): Pair<UInt?, UShort> = TODO()
2021-03-11 22:22:17,776 [main:302] - generating value of type = UInt true depth = 6
2021-03-11 22:22:17,778 [main:302] - generating value of type = UShort true depth = 6
2021-03-11 22:22:17,780 [main:95] - GENERATED = Pair<UInt?, UShort>(1713827257.toUInt(), 22003.toUShort())
2021-03-11 22:22:17,780 [main:95] - GENERATED = linkedMapOf<UInt?, UShort>(Pair<UInt?, UShort>(1713827257.toUInt(), 22003.toUShort()))
2021-03-11 22:22:17,956 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7df7fef2]
2021-03-11 22:22:18,141 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:18,143 [main:78] - Generated call from random type = (linkedMapOf<UInt?, UShort>(Pair<UInt?, UShort>(1713827257.toUInt(), 22003.toUShort())))?.size.toString(-1765953359)
2021-03-11 22:22:18,144 [main:106] - GETTING String from String
2021-03-11 22:22:18,175 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ccc1de7]]
2021-03-11 22:22:18,175 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ccc1de7]
2021-03-11 22:22:18,336 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:22:18,482 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:22:18,646 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:22:18,648 [main:117] - GENERATED CALL = (A().f()).replaceFirst('빪', '촃', true)
2021-03-11 22:22:18,649 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26020a41]]
2021-03-11 22:22:18,649 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26020a41]
2021-03-11 22:22:18,799 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:22:18,802 [main:117] - GENERATED CALL = (A().f()).substringAfterLast('歊', A.v)
2021-03-11 22:22:18,802 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74196470]]
2021-03-11 22:22:18,802 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74196470]
2021-03-11 22:22:18,802 [main:117] - GENERATED CALL = (A().f()).trim()
2021-03-11 22:22:18,802 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2df1636b]]
2021-03-11 22:22:18,802 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:22:18,934 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:19,096 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:19,098 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2df1636b]
2021-03-11 22:22:19,254 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:19,256 [main:117] - GENERATED CALL = (A().f()).subSequence(536886553, 1072414894).repeat(-73028326)
2021-03-11 22:22:19,257 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@304551d8], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7df7fef2]]
2021-03-11 22:22:19,257 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7df7fef2]
2021-03-11 22:22:19,417 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:19,420 [main:117] - GENERATED CALL = (A().f()).length.toString(639853157)
2021-03-11 22:22:19,421 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e28298e]]
2021-03-11 22:22:19,421 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:22:19,578 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:19,581 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e28298e]
2021-03-11 22:22:19,581 [main:117] - GENERATED CALL = (A().f()).get(963141011).uppercase()
2021-03-11 22:22:19,581 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4833974d]]
2021-03-11 22:22:19,581 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4833974d]
2021-03-11 22:22:19,730 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:22:19,878 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:22:19,881 [main:117] - GENERATED CALL = (A().f()).replaceAfterLast('紷', "eciss", A.s)
2021-03-11 22:22:19,881 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6913f0ba]]
2021-03-11 22:22:19,881 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6913f0ba]
2021-03-11 22:22:20,011 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 22:22:20,013 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:22:20,015 [main:117] - GENERATED CALL = (A().f()).dropLastWhile({a: Char -> true})
2021-03-11 22:22:20,015 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e220c0c]]
2021-03-11 22:22:20,015 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:22:20,165 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:20,321 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:20,323 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e220c0c]
2021-03-11 22:22:20,451 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:20,602 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:20,605 [main:117] - GENERATED CALL = (A().f()).subSequence(396452373, -1481503808).substring(1885669010, 1338391806)
2021-03-11 22:22:20,605 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ffb7dce]]
2021-03-11 22:22:20,605 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ffb7dce]
2021-03-11 22:22:20,753 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 22:22:20,755 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:22:20,757 [main:117] - GENERATED CALL = (A().f()).filter({a: Char -> true})
2021-03-11 22:22:20,757 [main:114] - replacement of (A().f()).filterIndexed({a: Int, b: Char -> true}) + (A.v).filterNot({a: Char -> true}) of type String is (A().f()).dropLastWhile({a: Char -> true})
2021-03-11 22:22:20,886 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:22:20,886 [main:66] - Compilation checking started
2021-03-11 22:22:21,436 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return prope3.prope2
}

fun box216(): String {
    var prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += (-5408710374888219464)?.toByte().toInt()
        } while ((A().f()).get(1347247848).isISOControl())
        prope2 += "."
    }
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += fu3((A().f()).length.toInt())
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vqwwd"}).exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A().f()).isNotBlank() }?.let { error((A().f()).trimStart() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A.s).get(-2125883856).isLetter() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error((A().f()).replace('რ', '梨', true) + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((A().f()).dropLastWhile({a: Char -> true}) + prope6)
        if (prope7) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:22:21,438 [main:107] - replacing (prope3, Kla0)
2021-03-11 22:22:21,438 [main:50] - replacing prope3 Kla0
2021-03-11 22:22:21,438 [main:54] - Getting value of type Kla0
2021-03-11 22:22:21,595 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 22:22:21,597 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}
2021-03-11 22:22:21,597 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0()
2021-03-11 22:22:21,597 [main:61] - GENERATED IS CALL =true
2021-03-11 22:22:21,761 [main:67] - randomType = Kla2?
2021-03-11 22:22:21,912 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-11 22:22:21,914 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}
2021-03-11 22:22:21,929 [main:106] - GETTING Kla0 from String
2021-03-11 22:22:21,950 [main:106] - GETTING Kla0 from String
2021-03-11 22:22:21,951 [main:106] - GETTING Kla0 from String
2021-03-11 22:22:21,951 [main:114] - replacement of prope3 of type Kla0 is Kla0()
2021-03-11 22:22:22,102 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 22:22:22,103 [main:66] - Compilation checking started
2021-03-11 22:22:22,685 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return Kla0().prope2
}

fun box216(): String {
    var prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += (-5408710374888219464)?.toByte().toInt()
        } while ((A().f()).get(1347247848).isISOControl())
        prope2 += "."
    }
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += fu3((A().f()).length.toInt())
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vqwwd"}).exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A().f()).isNotBlank() }?.let { error((A().f()).trimStart() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A.s).get(-2125883856).isLetter() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error((A().f()).replace('რ', '梨', true) + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((A().f()).dropLastWhile({a: Char -> true}) + prope6)
        if (prope7) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:22:22,687 [main:107] - replacing (prope8, Function0<Unit>)
2021-03-11 22:22:22,687 [main:50] - replacing prope8 Function0<Unit>
2021-03-11 22:22:22,687 [main:54] - Getting value of type Function0<Unit>
2021-03-11 22:22:22,835 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 22:22:22,837 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 22:22:22,986 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 22:22:22,988 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 22:22:23,292 [main:302] - generating value of type = Any false depth = 4
2021-03-11 22:22:23,293 [main:95] - GENERATED = print("rjjts")
2021-03-11 22:22:23,293 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { print("rjjts")}
2021-03-11 22:22:23,293 [main:61] - GENERATED IS CALL =false
2021-03-11 22:22:23,607 [main:67] - randomType = Float?
2021-03-11 22:22:23,747 [main:302] - generating value of type = Float true depth = 0
2021-03-11 22:22:23,801 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:22:23,829 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:22:23,830 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:22:23,830 [main:114] - replacement of prope8 of type Function0<Unit> is { print("rjjts")}
2021-03-11 22:22:23,973 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 22:22:23,974 [main:66] - Compilation checking started
2021-03-11 22:22:24,405 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return Kla0().prope2
}

fun box216(): String {
    var prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += (-5408710374888219464)?.toByte().toInt()
        } while ((A().f()).get(1347247848).isISOControl())
        prope2 += "."
    }
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += fu3((A().f()).length.toInt())
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vqwwd"}).exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A().f()).isNotBlank() }?.let { error((A().f()).trimStart() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A.s).get(-2125883856).isLetter() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        { print("rjjts")} = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error((A().f()).replace('რ', '梨', true) + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((A().f()).dropLastWhile({a: Char -> true}) + prope6)
        if (prope7) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:22:24,408 [main:107] - replacing (1, Int)
2021-03-11 22:22:24,408 [main:50] - replacing 1 Int
2021-03-11 22:22:24,408 [main:54] - Getting value of type Int
2021-03-11 22:22:24,564 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:24,566 [main:58] - GENERATED VALUE OF TYPE Int = 479493327
2021-03-11 22:22:24,567 [main:61] - GENERATED IS CALL =false
2021-03-11 22:22:24,913 [main:67] - randomType = Kla3<Kla4>
2021-03-11 22:22:25,055 [main:302] - generating value of type = Kla3<Kla4> false depth = 0
2021-03-11 22:22:25,057 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}
2021-03-11 22:22:25,835 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 22:22:25,837 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}
2021-03-11 22:22:25,857 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla3[DeserializedSimpleFunctionDescriptor@1f85ae42]
2021-03-11 22:22:25,982 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:22:25,982 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3867e848]
2021-03-11 22:22:26,128 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:22:26,130 [main:78] - Generated call from random type = (Kla6).equals("xhdvi").compareTo(true)
2021-03-11 22:22:26,131 [main:106] - GETTING Int from String
2021-03-11 22:22:26,155 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bc551d8]]
2021-03-11 22:22:26,155 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:22:26,301 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:26,425 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:26,427 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bc551d8]
2021-03-11 22:22:26,572 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 22:22:26,574 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:22:26,577 [main:117] - GENERATED CALL = (A().f()).subSequence(1294927056, 1671124007).indexOfFirst({a: Char -> false})
2021-03-11 22:22:26,577 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@304551d8], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@259e3034]]
2021-03-11 22:22:26,577 [main:117] - GENERATED CALL = (A().f()).length.sign
2021-03-11 22:22:26,577 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1f70c1b8]]
2021-03-11 22:22:26,577 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:22:26,717 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:26,719 [main:149] - GENERATING call of type public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1f70c1b8]
2021-03-11 22:22:26,720 [main:117] - GENERATED CALL = (A().f()).get(-1519303056).toInt()
2021-03-11 22:22:26,720 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@259e3034]]
2021-03-11 22:22:26,720 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de]
2021-03-11 22:22:26,720 [main:117] - GENERATED CALL = (A().f()).compareTo(A.v).sign
2021-03-11 22:22:26,720 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@304551d8], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@7016957d]]
2021-03-11 22:22:26,720 [main:117] - GENERATED CALL = (A().f()).length.absoluteValue
2021-03-11 22:22:26,720 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@352bc6e0]]
2021-03-11 22:22:26,720 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:22:26,846 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:26,997 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:26,999 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@352bc6e0]
2021-03-11 22:22:27,144 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 22:22:27,146 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:22:27,148 [main:117] - GENERATED CALL = (A().f()).subSequence(188197629, -1823447566).indexOfLast({a: Char -> true})
2021-03-11 22:22:27,148 [main:113] - Case = [public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@413a646b]]
2021-03-11 22:22:27,148 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@413a646b]
2021-03-11 22:22:27,276 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-11 22:22:27,278 [main:302] - generating value of type = Int true depth = 1
2021-03-11 22:22:27,280 [main:117] - GENERATED CALL = (A().f()).sumBy({a: Char -> -628686698})
2021-03-11 22:22:27,280 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1284c698]]
2021-03-11 22:22:27,280 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de]
2021-03-11 22:22:27,424 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:22:27,426 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1284c698]
2021-03-11 22:22:27,566 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:27,568 [main:117] - GENERATED CALL = (A().f()).compareTo("lxoqj").coerceAtMost(228960666)
2021-03-11 22:22:27,568 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38daad85]]
2021-03-11 22:22:27,568 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38daad85]
2021-03-11 22:22:27,569 [main:117] - GENERATED CALL = (A().f()).count()
2021-03-11 22:22:27,569 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a4d8be]]
2021-03-11 22:22:27,569 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:22:27,694 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:27,856 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:27,858 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71a4d8be]
2021-03-11 22:22:28,003 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-11 22:22:28,005 [main:302] - generating value of type = Int true depth = 1
2021-03-11 22:22:28,007 [main:117] - GENERATED CALL = (A().f()).subSequence(-1288234604, 732402766).sumOf({a: Char -> 822859440})
2021-03-11 22:22:28,007 [main:114] - replacement of 1 of type Int is (A().f()).count()
2021-03-11 22:22:28,135 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:22:28,136 [main:66] - Compilation checking started
2021-03-11 22:22:28,691 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return Kla0().prope2
}

fun box216(): String {
    var prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += (-5408710374888219464)?.toByte().toInt()
        } while ((A().f()).get(1347247848).isISOControl())
        prope2 += "."
    }
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += fu3((A().f()).length.toInt())
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vqwwd"}).exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A().f()).isNotBlank() }?.let { error((A().f()).trimStart() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A.s).get(-2125883856).isLetter() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (A().f()).count()..numberOfSuspensions) {
            if (prope6 != i) error((A().f()).replace('რ', '梨', true) + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((A().f()).dropLastWhile({a: Char -> true}) + prope6)
        if (prope7) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:22:28,692 [main:107] - replacing (i, Int)
2021-03-11 22:22:28,693 [main:50] - replacing i Int
2021-03-11 22:22:28,693 [main:54] - Getting value of type Int
2021-03-11 22:22:28,901 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:28,904 [main:58] - GENERATED VALUE OF TYPE Int = 1199780723
2021-03-11 22:22:28,904 [main:61] - GENERATED IS CALL =false
2021-03-11 22:22:28,911 [main:67] - randomType = Long
2021-03-11 22:22:29,088 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:22:29,145 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@1730aec6]
2021-03-11 22:22:29,288 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:22:29,290 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f1ac8f3]
2021-03-11 22:22:29,291 [main:78] - Generated call from random type = (-5492812332748959435).compareTo(-18).unaryPlus()
2021-03-11 22:22:29,292 [main:106] - GETTING Int from String
2021-03-11 22:22:29,316 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@304551d8], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5cf95d65]]
2021-03-11 22:22:29,316 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5cf95d65]
2021-03-11 22:22:29,316 [main:117] - GENERATED CALL = (A.v).length.inv()
2021-03-11 22:22:29,316 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@304551d8], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7dddd554]]
2021-03-11 22:22:29,316 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7dddd554]
2021-03-11 22:22:29,456 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:22:29,458 [main:117] - GENERATED CALL = (A.v).length.minus(14)
2021-03-11 22:22:29,459 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e8c4518]]
2021-03-11 22:22:29,459 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e8c4518]
2021-03-11 22:22:29,589 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:22:29,796 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:22:29,799 [main:117] - GENERATED CALL = (A.v).compareTo("bzjgv", true)
2021-03-11 22:22:29,800 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@639aa001]]
2021-03-11 22:22:29,800 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de]
2021-03-11 22:22:29,800 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@639aa001]
2021-03-11 22:22:29,800 [main:117] - GENERATED CALL = (A.v).compareTo(A().f()).toInt()
2021-03-11 22:22:29,800 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7440b7d3]]
2021-03-11 22:22:29,800 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de]
2021-03-11 22:22:29,951 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:22:29,953 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7440b7d3]
2021-03-11 22:22:30,086 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:30,088 [main:117] - GENERATED CALL = (A.v).compareTo("uyrpu").and(203433507)
2021-03-11 22:22:30,088 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2c3d4bc1]]
2021-03-11 22:22:30,088 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de]
2021-03-11 22:22:30,232 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:22:30,234 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2c3d4bc1]
2021-03-11 22:22:30,378 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:22:30,380 [main:117] - GENERATED CALL = (A.v).compareTo("checp").rem(126)
2021-03-11 22:22:30,380 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7dddd554]]
2021-03-11 22:22:30,380 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de]
2021-03-11 22:22:30,380 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7dddd554]
2021-03-11 22:22:30,505 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:22:30,507 [main:117] - GENERATED CALL = (A.v).compareTo(A().f()).minus(81)
2021-03-11 22:22:30,508 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2181b1cd]]
2021-03-11 22:22:30,508 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:22:30,651 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:30,796 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:30,798 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2181b1cd]
2021-03-11 22:22:30,926 [main:302] - generating value of type = CharArray false depth = 0
2021-03-11 22:22:31,080 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 22:22:31,084 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 22:22:31,233 [main:302] - generating value of type = Char true depth = 3
2021-03-11 22:22:31,235 [main:95] - GENERATED = charArrayOf('ຎ')
2021-03-11 22:22:31,361 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:31,519 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:22:31,521 [main:117] - GENERATED CALL = (A.v).subSequence(1529721423, 1111098981).indexOfAny(charArrayOf('ຎ'), 757657197, true)
2021-03-11 22:22:31,521 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5ddae4c5]]
2021-03-11 22:22:31,521 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de]
2021-03-11 22:22:31,522 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5ddae4c5]
2021-03-11 22:22:31,666 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:31,668 [main:117] - GENERATED CALL = (A.v).compareTo(A.s).coerceAtLeast(115096001)
2021-03-11 22:22:31,668 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@304551d8], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@799ace5b]]
2021-03-11 22:22:31,668 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@799ace5b]
2021-03-11 22:22:31,796 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:22:31,798 [main:117] - GENERATED CALL = (A.v).length.div(40)
2021-03-11 22:22:31,798 [main:114] - replacement of i of type Int is (A.v).compareTo(A.s).coerceAtLeast(115096001)
2021-03-11 22:22:31,941 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:22:31,941 [main:66] - Compilation checking started
2021-03-11 22:22:32,593 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return Kla0().prope2
}

fun box216(): String {
    var prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += (-5408710374888219464)?.toByte().toInt()
        } while ((A().f()).get(1347247848).isISOControl())
        prope2 += "."
    }
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += fu3((A().f()).length.toInt())
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vqwwd"}).exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A().f()).isNotBlank() }?.let { error((A().f()).trimStart() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A.s).get(-2125883856).isLetter() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (A().f()).count()..numberOfSuspensions) {
            if (prope6 != (A.v).compareTo(A.s).coerceAtLeast(115096001)) error((A().f()).replace('რ', '梨', true) + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((A().f()).dropLastWhile({a: Char -> true}) + prope6)
        if (prope7) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:22:32,595 [main:107] - replacing (prope2.getOrThrow(), Ty0)
2021-03-11 22:22:32,596 [main:50] - replacing prope2.getOrThrow() Ty0
2021-03-11 22:22:32,596 [main:54] - Getting value of type Ty0
2021-03-11 22:22:32,799 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 22:22:32,804 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 22:22:34,035 [main:67] - randomType = Function2<Kla4, Kla5, Function2<Map<Double, Kla0>, Float, Kla6?>>
2021-03-11 22:22:34,037 [main:106] - GETTING Ty0 from String
2021-03-11 22:22:34,069 [main:106] - GETTING Ty0 from String
2021-03-11 22:22:34,070 [main:106] - GETTING Ty0 from String
2021-03-11 22:22:34,070 [main:111] - Cant find and generate replacement for prope2.getOrThrow() type Ty0
2021-03-11 22:22:34,070 [main:107] - replacing (prope2, Result<Ty0>)
2021-03-11 22:22:34,070 [main:50] - replacing prope2 Result<Ty0>
2021-03-11 22:22:34,070 [main:54] - Getting value of type Result<Ty0>
2021-03-11 22:22:34,240 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-11 22:22:34,404 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 22:22:34,409 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 22:22:34,738 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 22:22:34,738 [main:58] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-11 22:22:35,400 [main:67] - randomType = Function1<MutableMap<Short, Byte>, Kla5?>
2021-03-11 22:22:35,402 [main:106] - GETTING Result<Ty0> from String
2021-03-11 22:22:35,423 [main:106] - GETTING Result<Ty0> from String
2021-03-11 22:22:35,424 [main:106] - GETTING Result<Ty0> from String
2021-03-11 22:22:35,424 [main:111] - Cant find and generate replacement for prope2 type Result<Ty0>
2021-03-11 22:22:35,424 [main:107] - replacing (fu3((A().f()).length.toInt()), Int)
2021-03-11 22:22:35,424 [main:50] - replacing fu3((A().f()).length.toInt()) Int
2021-03-11 22:22:35,424 [main:54] - Getting value of type Int
2021-03-11 22:22:35,572 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:35,574 [main:58] - GENERATED VALUE OF TYPE Int = -843422011
2021-03-11 22:22:35,574 [main:61] - GENERATED IS CALL =false
2021-03-11 22:22:35,875 [main:67] - randomType = ULong?
2021-03-11 22:22:36,027 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 22:22:36,068 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@11e8a7b]
2021-03-11 22:22:36,069 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.UShort.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7f98aaa8]
2021-03-11 22:22:36,069 [main:78] - Generated call from random type = (1502536482668596417.toULong())?.toUShort().countLeadingZeroBits()
2021-03-11 22:22:36,070 [main:106] - GETTING Int from String
2021-03-11 22:22:36,097 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@799ace5b]]
2021-03-11 22:22:36,098 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de]
2021-03-11 22:22:36,098 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@799ace5b]
2021-03-11 22:22:36,241 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:22:36,243 [main:117] - GENERATED CALL = (A().f()).compareTo(A.v).div(-16)
2021-03-11 22:22:36,243 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@304551d8]]
2021-03-11 22:22:36,243 [main:117] - GENERATED CALL = (A().f()).length
2021-03-11 22:22:36,243 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1af24856]]
2021-03-11 22:22:36,243 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de]
2021-03-11 22:22:36,409 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:22:36,411 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1af24856]
2021-03-11 22:22:36,411 [main:117] - GENERATED CALL = (A().f()).compareTo("uhmww").unaryMinus()
2021-03-11 22:22:36,411 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38daad85]]
2021-03-11 22:22:36,411 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:22:36,555 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:36,694 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:36,696 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38daad85]
2021-03-11 22:22:36,696 [main:117] - GENERATED CALL = (A().f()).subSequence(1830559217, 587309328).count()
2021-03-11 22:22:36,696 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@3cd2fd3d]]
2021-03-11 22:22:36,696 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:22:36,853 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:36,855 [main:117] - GENERATED CALL = (A().f()).get(-1328132329).code
2021-03-11 22:22:36,855 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1284c698]]
2021-03-11 22:22:36,855 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de]
2021-03-11 22:22:37,000 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:22:37,002 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1284c698]
2021-03-11 22:22:37,137 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:37,140 [main:117] - GENERATED CALL = (A().f()).compareTo("xmxut").coerceAtMost(1455391682)
2021-03-11 22:22:37,140 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2c3d4bc1]]
2021-03-11 22:22:37,140 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de]
2021-03-11 22:22:37,289 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:22:37,291 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2c3d4bc1]
2021-03-11 22:22:37,451 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:22:37,453 [main:117] - GENERATED CALL = (A().f()).compareTo("fbjpi").rem(93)
2021-03-11 22:22:37,454 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@304551d8], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5cf95d65]]
2021-03-11 22:22:37,454 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5cf95d65]
2021-03-11 22:22:37,454 [main:117] - GENERATED CALL = (A().f()).length.inv()
2021-03-11 22:22:37,454 [main:113] - Case = [public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36fe9e47]]
2021-03-11 22:22:37,454 [main:149] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36fe9e47]
2021-03-11 22:22:37,583 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:22:37,735 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:37,882 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:22:37,885 [main:117] - GENERATED CALL = (A().f()).lastIndexOf('ᕮ', -232476311, false)
2021-03-11 22:22:38,046 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@304551d8], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4fc1f04e]]
2021-03-11 22:22:38,046 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4fc1f04e]
2021-03-11 22:22:38,198 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:38,346 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:38,349 [main:117] - GENERATED CALL = (A().f()).length.coerceIn(-1235116946, -2069333937)
2021-03-11 22:22:38,349 [main:114] - replacement of fu3((A().f()).length.toInt()) of type Int is (A().f()).compareTo("uhmww").unaryMinus()
2021-03-11 22:22:38,477 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:22:38,478 [main:66] - Compilation checking started
2021-03-11 22:22:39,007 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return Kla0().prope2
}

fun box216(): String {
    var prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += (-5408710374888219464)?.toByte().toInt()
        } while ((A().f()).get(1347247848).isISOControl())
        prope2 += "."
    }
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += (A().f()).compareTo("uhmww").unaryMinus()
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vqwwd"}).exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A().f()).isNotBlank() }?.let { error((A().f()).trimStart() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A.s).get(-2125883856).isLetter() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (A().f()).count()..numberOfSuspensions) {
            if (prope6 != (A.v).compareTo(A.s).coerceAtLeast(115096001)) error((A().f()).replace('რ', '梨', true) + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((A().f()).dropLastWhile({a: Char -> true}) + prope6)
        if (prope7) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:22:39,009 [main:107] - replacing (prope2, Result<Any?>)
2021-03-11 22:22:39,009 [main:50] - replacing prope2 Result<Any?>
2021-03-11 22:22:39,009 [main:54] - Getting value of type Result<Any?>
2021-03-11 22:22:39,159 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-11 22:22:39,311 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 22:22:39,314 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 22:22:39,632 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-11 22:22:39,634 [main:302] - generating value of type = Any false depth = 4
2021-03-11 22:22:39,635 [main:95] - GENERATED = runCatching<Any?>({ "mzfyc"})
2021-03-11 22:22:39,635 [main:58] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ "mzfyc"})
2021-03-11 22:22:39,635 [main:61] - GENERATED IS CALL =true
2021-03-11 22:22:39,643 [main:67] - randomType = Kla1
2021-03-11 22:22:39,799 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 22:22:39,801 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}
2021-03-11 22:22:39,938 [main:194] - Type params = []
2021-03-11 22:22:40,104 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 22:22:40,254 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:22:40,257 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:22:40,568 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 22:22:40,722 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:22:40,725 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:22:41,243 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:22:41,243 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:22:41,273 [main:106] - GETTING Result<Any?> from String
2021-03-11 22:22:41,296 [main:106] - GETTING Result<Any?> from String
2021-03-11 22:22:41,297 [main:106] - GETTING Result<Any?> from String
2021-03-11 22:22:41,297 [main:114] - replacement of prope2 of type Result<Any?> is runCatching<Any?>({ "mzfyc"})
2021-03-11 22:22:41,454 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 22:22:41,454 [main:66] - Compilation checking started
2021-03-11 22:22:42,037 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return Kla0().prope2
}

fun box216(): String {
    var prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += (-5408710374888219464)?.toByte().toInt()
        } while ((A().f()).get(1347247848).isISOControl())
        prope2 += "."
    }
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += (A().f()).compareTo("uhmww").unaryMinus()
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vqwwd"}).exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "mzfyc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A().f()).isNotBlank() }?.let { error((A().f()).trimStart() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A.s).get(-2125883856).isLetter() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (A().f()).count()..numberOfSuspensions) {
            if (prope6 != (A.v).compareTo(A.s).coerceAtLeast(115096001)) error((A().f()).replace('რ', '梨', true) + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((A().f()).dropLastWhile({a: Char -> true}) + prope6)
        if (prope7) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:22:42,039 [main:107] - replacing (numberOfSuspensions, Int)
2021-03-11 22:22:42,039 [main:50] - replacing numberOfSuspensions Int
2021-03-11 22:22:42,039 [main:54] - Getting value of type Int
2021-03-11 22:22:42,236 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:42,239 [main:58] - GENERATED VALUE OF TYPE Int = 1483165024
2021-03-11 22:22:42,239 [main:61] - GENERATED IS CALL =false
2021-03-11 22:22:42,741 [main:67] - randomType = LinkedHashMap<Kla3<Long>, Kla2>
2021-03-11 22:22:42,887 [main:302] - generating value of type = LinkedHashMap<Kla3<Long>, Kla2> false depth = 0
2021-03-11 22:22:43,023 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Kla3<Long>, Kla2>): LkedHashMap<Kla3<Long>, Kla2> = TODO()
2021-03-11 22:22:43,026 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Kla3<Long>, Kla2>): LkedHashMap<Kla3<Long>, Kla2> = TODO()
2021-03-11 22:22:43,182 [main:302] - generating value of type = Pair<Kla3<Long>, Kla2> false depth = 3
2021-03-11 22:22:43,333 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Kla3<Long>, second: Kla2): Pair<Kla3<Long>, Kla2> = TODO()
2021-03-11 22:22:43,336 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Kla3<Long>, second: Kla2): Pair<Kla3<Long>, Kla2> = TODO()
2021-03-11 22:22:43,471 [main:302] - generating value of type = Kla3<Long> false depth = 6
2021-03-11 22:22:43,473 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}
2021-03-11 22:22:43,935 [main:302] - generating value of type = Kla6 false depth = 8
2021-03-11 22:22:43,937 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}
2021-03-11 22:22:43,937 [main:302] - generating value of type = Kla2 false depth = 6
2021-03-11 22:22:43,939 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}
2021-03-11 22:22:43,939 [main:95] - GENERATED = Pair<Kla3<Long>, Kla2>(Kla6, Kla2())
2021-03-11 22:22:43,939 [main:95] - GENERATED = linkedMapOf<Kla3<Long>, Kla2>(Pair<Kla3<Long>, Kla2>(Kla6, Kla2()))
2021-03-11 22:22:44,072 [main:78] - Generated call from random type = (linkedMapOf<Kla3<Long>, Kla2>(Pair<Kla3<Long>, Kla2>(Kla6, Kla2()))).size.sign
2021-03-11 22:22:44,073 [main:106] - GETTING Int from String
2021-03-11 22:22:44,090 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@304551d8], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6fc06ec4]]
2021-03-11 22:22:44,090 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6fc06ec4]
2021-03-11 22:22:44,250 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:22:44,252 [main:117] - GENERATED CALL = (A.v).length.plus(27)
2021-03-11 22:22:44,253 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@304551d8], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1284c698]]
2021-03-11 22:22:44,253 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1284c698]
2021-03-11 22:22:44,407 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:44,410 [main:117] - GENERATED CALL = (A.v).length.coerceAtMost(-1582562667)
2021-03-11 22:22:44,410 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@639aa001]]
2021-03-11 22:22:44,410 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de]
2021-03-11 22:22:44,410 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@639aa001]
2021-03-11 22:22:44,410 [main:117] - GENERATED CALL = (A.v).compareTo(A().f()).toInt()
2021-03-11 22:22:44,410 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], public val kotlin.CharSequence.lastIndex: kotlin.Int defined in kotlin.text[DeserializedPropertyDescriptor@42d4cec4]]
2021-03-11 22:22:44,410 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:22:44,539 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:44,688 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:44,691 [main:117] - GENERATED CALL = (A.v).subSequence(2070941723, -152590264).lastIndex
2021-03-11 22:22:44,691 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@304551d8], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1f60412a]]
2021-03-11 22:22:44,691 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1f60412a]
2021-03-11 22:22:44,691 [main:117] - GENERATED CALL = (A.v).length.takeLowestOneBit()
2021-03-11 22:22:44,691 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@352bc6e0]]
2021-03-11 22:22:44,691 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:22:44,835 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:44,966 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:44,968 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@352bc6e0]
2021-03-11 22:22:45,117 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 22:22:45,120 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:22:45,122 [main:117] - GENERATED CALL = (A.v).subSequence(-1647475211, -1905274522).indexOfLast({a: Char -> false})
2021-03-11 22:22:45,122 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@304551d8], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@30bffa35]]
2021-03-11 22:22:45,122 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@30bffa35]
2021-03-11 22:22:45,122 [main:117] - GENERATED CALL = (A.v).length.countTrailingZeroBits()
2021-03-11 22:22:45,122 [main:113] - Case = [public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bc551d8]]
2021-03-11 22:22:45,122 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bc551d8]
2021-03-11 22:22:45,267 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 22:22:45,269 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:22:45,271 [main:117] - GENERATED CALL = (A.v).indexOfFirst({a: Char -> true})
2021-03-11 22:22:45,271 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4285e6ae]]
2021-03-11 22:22:45,271 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de]
2021-03-11 22:22:45,271 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4285e6ae]
2021-03-11 22:22:45,399 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:45,401 [main:117] - GENERATED CALL = (A.v).compareTo(A.v).rotateRight(-1028618463)
2021-03-11 22:22:45,401 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@3cd2fd3d]]
2021-03-11 22:22:45,401 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:22:45,549 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:45,551 [main:117] - GENERATED CALL = (A.v).get(113428140).code
2021-03-11 22:22:45,551 [main:114] - replacement of numberOfSuspensions of type Int is (A.v).compareTo(A().f()).toInt()
2021-03-11 22:22:45,695 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:22:45,696 [main:66] - Compilation checking started
2021-03-11 22:22:46,242 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return Kla0().prope2
}

fun box216(): String {
    var prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += (-5408710374888219464)?.toByte().toInt()
        } while ((A().f()).get(1347247848).isISOControl())
        prope2 += "."
    }
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += (A().f()).compareTo("uhmww").unaryMinus()
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vqwwd"}).exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "mzfyc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A().f()).isNotBlank() }?.let { error((A().f()).trimStart() +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A.s).get(-2125883856).isLetter() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (A().f()).count()..(A.v).compareTo(A().f()).toInt()) {
            if (prope6 != (A.v).compareTo(A.s).coerceAtLeast(115096001)) error((A().f()).replace('რ', '梨', true) + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((A().f()).dropLastWhile({a: Char -> true}) + prope6)
        if (prope7) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:22:46,244 [main:107] - replacing ({ error((A().f()).trimStart() +
                prope5.joinToString(separator = "\n")) }, Function0<Nothing>)
2021-03-11 22:22:46,244 [main:50] - replacing { error((A().f()).trimStart() +
                prope5.joinToString(separator = "\n")) } Function0<Nothing>
2021-03-11 22:22:46,244 [main:54] - Getting value of type Function0<Nothing>
2021-03-11 22:22:46,396 [main:302] - generating value of type = Function0<Nothing> false depth = 0
2021-03-11 22:22:46,398 [main:302] - generating value of type = Nothing false depth = 1
2021-03-11 22:22:46,547 [main:43] - GENERATING CALL OF fun TODO(reason: kotlin.String): Nothg = TODO()
2021-03-11 22:22:46,550 [main:61] - WITHOUT TYPE PARAMS = fun TODO(reason: kotlin.String): Nothg = TODO()
2021-03-11 22:22:46,851 [main:302] - generating value of type = String true depth = 4
2021-03-11 22:22:46,853 [main:95] - GENERATED = TODO("mamun")
2021-03-11 22:22:46,853 [main:58] - GENERATED VALUE OF TYPE Function0<Nothing> = { TODO("mamun")}
2021-03-11 22:22:46,853 [main:61] - GENERATED IS CALL =false
2021-03-11 22:22:47,020 [main:67] - randomType = A?
2021-03-11 22:22:47,158 [main:302] - generating value of type = A false depth = 0
2021-03-11 22:22:47,160 [main:112] - generating klass A text = class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}
2021-03-11 22:22:47,167 [main:106] - GETTING Function0<Nothing> from String
2021-03-11 22:22:47,184 [main:106] - GETTING Function0<Nothing> from String
2021-03-11 22:22:47,186 [main:106] - GETTING Function0<Nothing> from String
2021-03-11 22:22:47,186 [main:114] - replacement of { error((A().f()).trimStart() +
                prope5.joinToString(separator = "\n")) } of type Function0<Nothing> is { TODO("mamun")}
2021-03-11 22:22:47,336 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 22:22:47,337 [main:66] - Compilation checking started
2021-03-11 22:22:47,900 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return Kla0().prope2
}

fun box216(): String {
    var prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += (-5408710374888219464)?.toByte().toInt()
        } while ((A().f()).get(1347247848).isISOControl())
        prope2 += "."
    }
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += (A().f()).compareTo("uhmww").unaryMinus()
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vqwwd"}).exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "mzfyc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A().f()).isNotBlank() }?.let { TODO("mamun")}
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A.s).get(-2125883856).isLetter() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (A().f()).count()..(A.v).compareTo(A().f()).toInt()) {
            if (prope6 != (A.v).compareTo(A.s).coerceAtLeast(115096001)) error((A().f()).replace('რ', '梨', true) + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((A().f()).dropLastWhile({a: Char -> true}) + prope6)
        if (prope7) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:22:47,903 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 22:22:47,903 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 22:22:47,903 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-11 22:22:48,051 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 22:22:48,060 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 22:22:48,073 [main:67] - randomType = A
2021-03-11 22:22:48,223 [main:302] - generating value of type = A false depth = 0
2021-03-11 22:22:48,225 [main:112] - generating klass A text = class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}
2021-03-11 22:22:48,234 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:22:48,261 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:22:48,262 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:22:48,262 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 22:22:48,262 [main:107] - replacing (prope4, Ty0)
2021-03-11 22:22:48,262 [main:50] - replacing prope4 Ty0
2021-03-11 22:22:48,262 [main:54] - Getting value of type Ty0
2021-03-11 22:22:48,389 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 22:22:48,394 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 22:22:48,575 [main:67] - randomType = HashMap<Kla0, Byte>
2021-03-11 22:22:48,718 [main:302] - generating value of type = HashMap<Kla0, Byte> false depth = 0
2021-03-11 22:22:48,852 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(pairs: Pair<Kla0, Byte>): HashMap<Kla0, Byte> = TODO()
2021-03-11 22:22:48,855 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(pairs: Pair<Kla0, Byte>): HashMap<Kla0, Byte> = TODO()
2021-03-11 22:22:49,012 [main:302] - generating value of type = Pair<Kla0, Byte> false depth = 3
2021-03-11 22:22:49,162 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Kla0, second: Byte): Pair<Kla0, Byte> = TODO()
2021-03-11 22:22:49,165 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Kla0, second: Byte): Pair<Kla0, Byte> = TODO()
2021-03-11 22:22:49,299 [main:302] - generating value of type = Kla0 false depth = 6
2021-03-11 22:22:49,301 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}
2021-03-11 22:22:49,301 [main:302] - generating value of type = Byte true depth = 6
2021-03-11 22:22:49,303 [main:95] - GENERATED = Pair<Kla0, Byte>(Kla0(), -62)
2021-03-11 22:22:49,303 [main:95] - GENERATED = hashMapOf<Kla0, Byte>(Pair<Kla0, Byte>(Kla0(), -62))
2021-03-11 22:22:49,395 [main:106] - GETTING Ty0 from String
2021-03-11 22:22:49,412 [main:106] - GETTING Ty0 from String
2021-03-11 22:22:49,412 [main:106] - GETTING Ty0 from String
2021-03-11 22:22:49,412 [main:111] - Cant find and generate replacement for prope4 type Ty0
2021-03-11 22:22:49,412 [main:107] - replacing (Kla1, Kla7)
2021-03-11 22:22:49,412 [main:50] - replacing Kla1 Kla7
2021-03-11 22:22:49,412 [main:54] - Getting value of type Kla7
2021-03-11 22:22:49,581 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-11 22:22:49,583 [main:112] - generating klass Kla7 text = companion object Kla7 : Kla1()
2021-03-11 22:22:49,583 [main:58] - GENERATED VALUE OF TYPE Kla7 = 
2021-03-11 22:22:51,560 [main:67] - randomType = Function2<Kla2, Function1<Triple<Long?, Byte?, Kla2>, Function2<Kla4?, Kla4?, HashSet<Kla0?>>>, ArrayDeque<UInt>>
2021-03-11 22:22:51,561 [main:106] - GETTING Kla7 from String
2021-03-11 22:22:51,583 [main:106] - GETTING Kla7 from String
2021-03-11 22:22:51,584 [main:106] - GETTING Kla7 from String
2021-03-11 22:22:51,584 [main:111] - Cant find and generate replacement for Kla1 type Kla7
2021-03-11 22:22:51,584 [main:107] - replacing (prope6, Int)
2021-03-11 22:22:51,584 [main:50] - replacing prope6 Int
2021-03-11 22:22:51,584 [main:54] - Getting value of type Int
2021-03-11 22:22:51,725 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:51,727 [main:58] - GENERATED VALUE OF TYPE Int = 909244939
2021-03-11 22:22:51,728 [main:61] - GENERATED IS CALL =false
2021-03-11 22:22:51,732 [main:67] - randomType = String
2021-03-11 22:22:51,859 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:22:51,878 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@330bba7c]
2021-03-11 22:22:51,878 [main:78] - Generated call from random type = ("gyeca").length.inc()
2021-03-11 22:22:51,879 [main:106] - GETTING Int from String
2021-03-11 22:22:51,895 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@413a646b]]
2021-03-11 22:22:51,895 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:22:52,043 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:52,194 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:52,196 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@413a646b]
2021-03-11 22:22:52,326 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-11 22:22:52,328 [main:302] - generating value of type = Int true depth = 1
2021-03-11 22:22:52,330 [main:117] - GENERATED CALL = (A.s).subSequence(-1506912823, 1888789367).sumBy({a: Char -> 306634083})
2021-03-11 22:22:52,330 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1f70c1b8]]
2021-03-11 22:22:52,330 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:22:52,475 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:52,477 [main:149] - GENERATING call of type public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1f70c1b8]
2021-03-11 22:22:52,477 [main:117] - GENERATED CALL = (A.s).get(-73172080).toInt()
2021-03-11 22:22:52,477 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@639aa001]]
2021-03-11 22:22:52,477 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de]
2021-03-11 22:22:52,623 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:22:52,625 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@639aa001]
2021-03-11 22:22:52,626 [main:117] - GENERATED CALL = (A.s).compareTo("etebb").toInt()
2021-03-11 22:22:52,626 [main:113] - Case = [public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5158826b]]
2021-03-11 22:22:52,626 [main:149] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5158826b]
2021-03-11 22:22:52,756 [main:302] - generating value of type = CharArray false depth = 0
2021-03-11 22:22:52,907 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 22:22:52,910 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 22:22:53,206 [main:302] - generating value of type = Char true depth = 3
2021-03-11 22:22:53,208 [main:95] - GENERATED = charArrayOf('ఖ')
2021-03-11 22:22:53,354 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:53,501 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:22:53,503 [main:117] - GENERATED CALL = (A.s).lastIndexOfAny(charArrayOf('ఖ'), -1810809068, true)
2021-03-11 22:22:53,503 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@304551d8], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@330bba7c]]
2021-03-11 22:22:53,503 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@330bba7c]
2021-03-11 22:22:53,503 [main:117] - GENERATED CALL = (A.s).length.inc()
2021-03-11 22:22:53,504 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@304551d8], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@30bffa35]]
2021-03-11 22:22:53,504 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@30bffa35]
2021-03-11 22:22:53,504 [main:117] - GENERATED CALL = (A.s).length.countTrailingZeroBits()
2021-03-11 22:22:53,504 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@304551d8], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7440b7d3]]
2021-03-11 22:22:53,504 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7440b7d3]
2021-03-11 22:22:53,633 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:53,635 [main:117] - GENERATED CALL = (A.s).length.and(-867223521)
2021-03-11 22:22:53,635 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fbf5c22]]
2021-03-11 22:22:53,635 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de]
2021-03-11 22:22:53,635 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fbf5c22]
2021-03-11 22:22:53,781 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:22:53,783 [main:117] - GENERATED CALL = (A.s).compareTo(A().f()).compareTo(84)
2021-03-11 22:22:53,783 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6fc06ec4]]
2021-03-11 22:22:53,783 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de]
2021-03-11 22:22:53,783 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6fc06ec4]
2021-03-11 22:22:53,926 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:22:53,928 [main:117] - GENERATED CALL = (A.s).compareTo(A.v).plus(9)
2021-03-11 22:22:53,928 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@330bba7c]]
2021-03-11 22:22:53,928 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de]
2021-03-11 22:22:53,928 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@330bba7c]
2021-03-11 22:22:53,928 [main:117] - GENERATED CALL = (A.s).compareTo(A.v).inc()
2021-03-11 22:22:53,928 [main:114] - replacement of prope6 of type Int is 909244939
2021-03-11 22:22:54,057 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 22:22:54,057 [main:66] - Compilation checking started
2021-03-11 22:22:54,568 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return Kla0().prope2
}

fun box216(): String {
    var prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += (-5408710374888219464)?.toByte().toInt()
        } while ((A().f()).get(1347247848).isISOControl())
        prope2 += "."
    }
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += (A().f()).compareTo("uhmww").unaryMinus()
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vqwwd"}).exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "mzfyc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A().f()).isNotBlank() }?.let { TODO("mamun")}
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A.s).get(-2125883856).isLetter() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (A().f()).count()..(A.v).compareTo(A().f()).toInt()) {
            if (909244939 != (A.v).compareTo(A.s).coerceAtLeast(115096001)) error((A().f()).replace('რ', '梨', true) + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((A().f()).dropLastWhile({a: Char -> true}) + prope6)
        if (prope7) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:22:54,570 [main:107] - replacing (fu0 {
        var prope10 = 1
        do {
            prope2 += (-5408710374888219464)?.toByte().toInt()
        } while ((A().f()).get(1347247848).isISOControl())
        prope2 += "."
    }, String)
2021-03-11 22:22:54,570 [main:50] - replacing fu0 {
        var prope10 = 1
        do {
            prope2 += (-5408710374888219464)?.toByte().toInt()
        } while ((A().f()).get(1347247848).isISOControl())
        prope2 += "."
    } String
2021-03-11 22:22:54,570 [main:54] - Getting value of type String
2021-03-11 22:22:54,732 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:22:54,735 [main:58] - GENERATED VALUE OF TYPE String = "aquuz"
2021-03-11 22:22:54,735 [main:61] - GENERATED IS CALL =false
2021-03-11 22:22:54,748 [main:67] - randomType = Kla5
2021-03-11 22:22:54,910 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 22:22:54,913 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (A().f()).count()..(A.v).compareTo(A().f()).toInt()) {
            if (909244939 != (A.v).compareTo(A.s).coerceAtLeast(115096001)) error((A().f()).replace('რ', '梨', true) + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((A().f()).dropLastWhile({a: Char -> true}) + prope6)
        if (prope7) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 22:22:54,928 [main:106] - GETTING String from String
2021-03-11 22:22:54,964 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@abc67a]]
2021-03-11 22:22:54,965 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@abc67a]
2021-03-11 22:22:55,118 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:22:55,118 [main:117] - GENERATED CALL = (A.s).plus("feskt")
2021-03-11 22:22:55,118 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b66a306]]
2021-03-11 22:22:55,118 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b66a306]
2021-03-11 22:22:55,260 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 22:22:55,262 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:22:55,264 [main:117] - GENERATED CALL = (A.s).dropWhile({a: Char -> true})
2021-03-11 22:22:55,265 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ab9e242]]
2021-03-11 22:22:55,265 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ab9e242]
2021-03-11 22:22:55,413 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:22:55,606 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:22:55,610 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:22:55,901 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 22:22:55,906 [main:95] - GENERATED = StringBuilder("kevvp")
2021-03-11 22:22:56,053 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:22:56,056 [main:117] - GENERATED CALL = (A.s).commonSuffixWith(StringBuilder("kevvp"), false)
2021-03-11 22:22:56,056 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ab2b222]]
2021-03-11 22:22:56,056 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ab2b222]
2021-03-11 22:22:56,203 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:22:56,205 [main:117] - GENERATED CALL = (A.s).replaceBeforeLast('', A.v, A().f())
2021-03-11 22:22:56,205 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc3b4e]]
2021-03-11 22:22:56,205 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27cc3b4e]
2021-03-11 22:22:56,335 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:22:56,494 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:22:56,496 [main:117] - GENERATED CALL = (A.s).substringBefore('䩟', "rolrk")
2021-03-11 22:22:56,496 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2df1636b]]
2021-03-11 22:22:56,496 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:22:56,643 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:56,778 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:56,780 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2df1636b]
2021-03-11 22:22:56,929 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:22:56,932 [main:117] - GENERATED CALL = (A.s).subSequence(-735373376, -604960540).repeat(-711698033)
2021-03-11 22:22:56,932 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@261d48cc]]
2021-03-11 22:22:56,932 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@261d48cc]
2021-03-11 22:22:56,932 [main:117] - GENERATED CALL = (A.s).trimIndent()
2021-03-11 22:22:56,932 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74196470]]
2021-03-11 22:22:56,932 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74196470]
2021-03-11 22:22:56,932 [main:117] - GENERATED CALL = (A.s).trim()
2021-03-11 22:22:56,932 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ccc1de7]]
2021-03-11 22:22:56,932 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ccc1de7]
2021-03-11 22:22:57,090 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:22:57,225 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:22:57,386 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:22:57,388 [main:117] - GENERATED CALL = (A.s).replaceFirst('珜', '⧐', false)
2021-03-11 22:22:57,388 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@272c9357]]
2021-03-11 22:22:57,388 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@272c9357]
2021-03-11 22:22:57,532 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 22:22:57,667 [main:43] - GENERATING CALL OF fun UShortArray(size: kotlin.Int): Iterable<Int> = TODO()
2021-03-11 22:22:57,670 [main:61] - WITHOUT TYPE PARAMS = fun UShortArray(size: kotlin.Int): Iterable<Int> = TODO()
2021-03-11 22:22:57,983 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:22:57,986 [main:95] - GENERATED = UShortArray(-860829301)
2021-03-11 22:22:57,986 [main:117] - GENERATED CALL = (A.s).slice(UShortArray(-860829301))
2021-03-11 22:22:57,986 [main:114] - replacement of fu0 {
        var prope10 = 1
        do {
            prope2 += (-5408710374888219464)?.toByte().toInt()
        } while ((A().f()).get(1347247848).isISOControl())
        prope2 += "."
    } of type String is (A.s).replaceBeforeLast('', A.v, A().f())
2021-03-11 22:22:58,120 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:22:58,121 [main:66] - Compilation checking started
2021-03-11 22:22:58,665 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return Kla0().prope2
}

fun box216(): String {
    var prope4 = (A.s).replaceBeforeLast('', A.v, A().f())
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += (A().f()).compareTo("uhmww").unaryMinus()
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vqwwd"}).exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "mzfyc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A().f()).isNotBlank() }?.let { TODO("mamun")}
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A.s).get(-2125883856).isLetter() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (A().f()).count()..(A.v).compareTo(A().f()).toInt()) {
            if (909244939 != (A.v).compareTo(A.s).coerceAtLeast(115096001)) error((A().f()).replace('რ', '梨', true) + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((A().f()).dropLastWhile({a: Char -> true}) + prope6)
        if (prope7) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:22:58,667 [main:107] - replacing (prope8, Function0<Unit>)
2021-03-11 22:22:58,667 [main:50] - replacing prope8 Function0<Unit>
2021-03-11 22:22:58,667 [main:54] - Getting value of type Function0<Unit>
2021-03-11 22:22:58,808 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 22:22:58,810 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 22:22:58,955 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 22:22:58,958 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 22:22:59,254 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 22:22:59,256 [main:95] - GENERATED = require(false)
2021-03-11 22:22:59,256 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false)}
2021-03-11 22:22:59,257 [main:61] - GENERATED IS CALL =false
2021-03-11 22:22:59,410 [main:67] - randomType = ULong
2021-03-11 22:22:59,535 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 22:22:59,564 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:22:59,581 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:22:59,582 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:22:59,582 [main:114] - replacement of prope8 of type Function0<Unit> is { require(false)}
2021-03-11 22:22:59,722 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 22:22:59,722 [main:66] - Compilation checking started
2021-03-11 22:23:00,096 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return Kla0().prope2
}

fun box216(): String {
    var prope4 = (A.s).replaceBeforeLast('', A.v, A().f())
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += (A().f()).compareTo("uhmww").unaryMinus()
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vqwwd"}).exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "mzfyc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A().f()).isNotBlank() }?.let { TODO("mamun")}
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A.s).get(-2125883856).isLetter() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (A().f()).count()..(A.v).compareTo(A().f()).toInt()) {
            if (909244939 != (A.v).compareTo(A.s).coerceAtLeast(115096001)) error((A().f()).replace('რ', '梨', true) + prope6)
            { require(false)}()
        }
        if (prope6 != numberOfSuspensions)
            error((A().f()).dropLastWhile({a: Char -> true}) + prope6)
        if (prope7) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:23:00,098 [main:107] - replacing (prope9 != null, Boolean)
2021-03-11 22:23:00,098 [main:50] - replacing prope9 != null Boolean
2021-03-11 22:23:00,098 [main:54] - Getting value of type Boolean
2021-03-11 22:23:00,245 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:23:00,247 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 22:23:00,248 [main:61] - GENERATED IS CALL =false
2021-03-11 22:23:00,729 [main:67] - randomType = ArrayList<Kla6>
2021-03-11 22:23:00,867 [main:302] - generating value of type = ArrayList<Kla6> false depth = 0
2021-03-11 22:23:00,999 [main:43] - GENERATING CALL OF fun <E> ArrayList(initialCapacity: kotlin.Int): ArrayList<Kla6> = TODO()
2021-03-11 22:23:01,002 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(initialCapacity: kotlin.Int): ArrayList<Kla6> = TODO()
2021-03-11 22:23:01,316 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:23:01,318 [main:95] - GENERATED = ArrayList<Kla6>(1060254698)
2021-03-11 22:23:01,465 [main:149] - GENERATING call of type public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<Kla6> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@8e4edad]
2021-03-11 22:23:01,606 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:01,748 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:01,750 [main:149] - GENERATING call of type public fun <T> kotlin.collections.MutableList<T>.removeAll(predicate: (T) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@42e60139]
2021-03-11 22:23:01,877 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-11 22:23:01,878 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:23:01,881 [main:78] - Generated call from random type = (ArrayList<Kla6>(1060254698)).subList(1782290226, 1233847133).removeAll({a: T -> true})
2021-03-11 22:23:01,881 [main:114] - replacement of prope9 != null of type Boolean is (ArrayList<Kla6>(1060254698)).subList(1782290226, 1233847133).removeAll({a: T -> true})
2021-03-11 22:23:02,035 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:23:02,036 [main:66] - Compilation checking started
2021-03-11 22:23:02,464 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return Kla0().prope2
}

fun box216(): String {
    var prope4 = (A.s).replaceBeforeLast('', A.v, A().f())
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += (A().f()).compareTo("uhmww").unaryMinus()
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vqwwd"}).exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "mzfyc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while ((ArrayList<Kla6>(1060254698)).subList(1782290226, 1233847133).removeAll({a: T -> true})) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A().f()).isNotBlank() }?.let { TODO("mamun")}
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A.s).get(-2125883856).isLetter() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (A().f()).count()..(A.v).compareTo(A().f()).toInt()) {
            if (909244939 != (A.v).compareTo(A.s).coerceAtLeast(115096001)) error((A().f()).replace('რ', '梨', true) + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((A().f()).dropLastWhile({a: Char -> true}) + prope6)
        if (prope7) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:23:02,467 [main:107] - replacing (getOrThrow(), Any?)
2021-03-11 22:23:02,467 [main:50] - replacing getOrThrow() Any?
2021-03-11 22:23:02,467 [main:54] - Getting value of type Any?
2021-03-11 22:23:02,614 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:23:02,614 [main:58] - GENERATED VALUE OF TYPE Any? = "dkaxa"
2021-03-11 22:23:02,614 [main:61] - GENERATED IS CALL =false
2021-03-11 22:23:02,622 [main:67] - randomType = Kla5
2021-03-11 22:23:02,766 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 22:23:02,768 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (A().f()).count()..(A.v).compareTo(A().f()).toInt()) {
            if (909244939 != (A.v).compareTo(A.s).coerceAtLeast(115096001)) error((A().f()).replace('რ', '梨', true) + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((A().f()).dropLastWhile({a: Char -> true}) + prope6)
        if (prope7) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 22:23:02,779 [main:106] - GETTING Any? from String
2021-03-11 22:23:02,806 [main:106] - GETTING Any? from String
2021-03-11 22:23:02,807 [main:106] - GETTING Any? from String
2021-03-11 22:23:02,808 [main:114] - replacement of getOrThrow() of type Any? is "dkaxa"
2021-03-11 22:23:02,931 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 22:23:02,932 [main:66] - Compilation checking started
2021-03-11 22:23:03,290 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return Kla0().prope2
}

fun box216(): String {
    var prope4 = (A.s).replaceBeforeLast('', A.v, A().f())
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += (A().f()).compareTo("uhmww").unaryMinus()
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vqwwd"}).exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "mzfyc"})."dkaxa"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A().f()).isNotBlank() }?.let { TODO("mamun")}
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A.s).get(-2125883856).isLetter() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (A().f()).count()..(A.v).compareTo(A().f()).toInt()) {
            if (909244939 != (A.v).compareTo(A.s).coerceAtLeast(115096001)) error((A().f()).replace('რ', '梨', true) + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((A().f()).dropLastWhile({a: Char -> true}) + prope6)
        if (prope7) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:23:03,292 [main:107] - replacing (prope7, Boolean)
2021-03-11 22:23:03,292 [main:50] - replacing prope7 Boolean
2021-03-11 22:23:03,293 [main:54] - Getting value of type Boolean
2021-03-11 22:23:03,440 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:23:03,442 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 22:23:03,442 [main:61] - GENERATED IS CALL =false
2021-03-11 22:23:03,925 [main:67] - randomType = HashSet<UByte>
2021-03-11 22:23:04,075 [main:302] - generating value of type = HashSet<UByte> false depth = 0
2021-03-11 22:23:04,230 [main:43] - GENERATING CALL OF fun <E> HashSet(initialCapacity: kotlin.Int): HashSet<UByte> = TODO()
2021-03-11 22:23:04,233 [main:61] - WITHOUT TYPE PARAMS = fun <E> HashSet(initialCapacity: kotlin.Int): HashSet<UByte> = TODO()
2021-03-11 22:23:04,554 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:23:04,556 [main:95] - GENERATED = HashSet<UByte>(-1506462825)
2021-03-11 22:23:04,691 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@22a63beb]
2021-03-11 22:23:04,833 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:23:04,833 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4fef2259]
2021-03-11 22:23:04,980 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:23:04,983 [main:78] - Generated call from random type = (HashSet<UByte>(-1506462825)).equals("jhemx").xor(true)
2021-03-11 22:23:04,983 [main:114] - replacement of prope7 of type Boolean is (HashSet<UByte>(-1506462825)).equals("jhemx").xor(true)
2021-03-11 22:23:05,111 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:23:05,112 [main:66] - Compilation checking started
2021-03-11 22:23:05,654 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return Kla0().prope2
}

fun box216(): String {
    var prope4 = (A.s).replaceBeforeLast('', A.v, A().f())
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += (A().f()).compareTo("uhmww").unaryMinus()
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vqwwd"}).exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "mzfyc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A().f()).isNotBlank() }?.let { TODO("mamun")}
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A.s).get(-2125883856).isLetter() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (A().f()).count()..(A.v).compareTo(A().f()).toInt()) {
            if (909244939 != (A.v).compareTo(A.s).coerceAtLeast(115096001)) error((A().f()).replace('რ', '梨', true) + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((A().f()).dropLastWhile({a: Char -> true}) + prope6)
        if ((HashSet<UByte>(-1506462825)).equals("jhemx").xor(true)) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:23:05,656 [main:107] - replacing (c, Continuation<*>)
2021-03-11 22:23:05,656 [main:50] - replacing c Continuation<*>
2021-03-11 22:23:05,656 [main:54] - Getting value of type Continuation<*>
2021-03-11 22:23:05,831 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 22:23:06,003 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 22:23:06,006 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 22:23:06,494 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 22:23:06,632 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:23:06,635 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:23:06,957 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 22:23:07,097 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:23:07,100 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:23:07,579 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:23:07,579 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:23:07,579 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 22:23:07,579 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 22:23:08,053 [main:67] - randomType = HashSet<Kla6>
2021-03-11 22:23:08,199 [main:302] - generating value of type = HashSet<Kla6> false depth = 0
2021-03-11 22:23:08,348 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: Kla6): HashSet<Kla6> = TODO()
2021-03-11 22:23:08,351 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: Kla6): HashSet<Kla6> = TODO()
2021-03-11 22:23:08,486 [main:302] - generating value of type = Kla6 false depth = 3
2021-03-11 22:23:08,488 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}
2021-03-11 22:23:08,488 [main:95] - GENERATED = hashSetOf<Kla6>(Kla6)
2021-03-11 22:23:08,586 [main:106] - GETTING Continuation<*> from String
2021-03-11 22:23:08,603 [main:106] - GETTING Continuation<*> from String
2021-03-11 22:23:08,604 [main:106] - GETTING Continuation<*> from String
2021-03-11 22:23:08,604 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-11 22:23:08,604 [main:107] - replacing (it?.methodName?.startsWith(method) == (A().f()).isNotBlank(), Boolean)
2021-03-11 22:23:08,604 [main:50] - replacing it?.methodName?.startsWith(method) == (A().f()).isNotBlank() Boolean
2021-03-11 22:23:08,604 [main:54] - Getting value of type Boolean
2021-03-11 22:23:08,754 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:23:08,756 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 22:23:08,756 [main:61] - GENERATED IS CALL =false
2021-03-11 22:23:08,915 [main:67] - randomType = UShort
2021-03-11 22:23:09,045 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 22:23:09,078 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@3a48cec9]
2021-03-11 22:23:09,079 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@5abcd0d7]
2021-03-11 22:23:09,079 [main:78] - Generated call from random type = (16999.toUShort()).toDouble().isInfinite()
2021-03-11 22:23:09,080 [main:106] - GETTING Boolean from String
2021-03-11 22:23:09,096 [main:113] - Case = [public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@707af378]]
2021-03-11 22:23:09,096 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@707af378]
2021-03-11 22:23:09,238 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:23:09,390 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:23:09,392 [main:117] - GENERATED CALL = (A.v).startsWith("xqrkg", false)
2021-03-11 22:23:09,392 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@23b046a8]]
2021-03-11 22:23:09,392 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de]
2021-03-11 22:23:09,392 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@23b046a8]
2021-03-11 22:23:09,524 [main:117] - GENERATED CALL = (A.v).compareTo(A().f()).equals(null)
2021-03-11 22:23:09,524 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d08b00b]]
2021-03-11 22:23:09,524 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:23:09,669 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:09,671 [main:149] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d08b00b]
2021-03-11 22:23:09,671 [main:117] - GENERATED CALL = (A.v).get(910700468).isLowerCase()
2021-03-11 22:23:09,671 [main:113] - Case = [public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14b0d912]]
2021-03-11 22:23:09,671 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14b0d912]
2021-03-11 22:23:09,815 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:09,817 [main:117] - GENERATED CALL = (A.v).hasSurrogatePairAt(-2095654693)
2021-03-11 22:23:09,818 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282699f]]
2021-03-11 22:23:09,818 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:23:09,946 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:09,948 [main:149] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282699f]
2021-03-11 22:23:09,948 [main:117] - GENERATED CALL = (A.v).get(-1559226661).isLetter()
2021-03-11 22:23:09,948 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f1f6355]]
2021-03-11 22:23:09,948 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:23:10,095 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:10,097 [main:149] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f1f6355]
2021-03-11 22:23:10,097 [main:117] - GENERATED CALL = (A.v).get(-448971522).isHighSurrogate()
2021-03-11 22:23:10,097 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da89baf]]
2021-03-11 22:23:10,097 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:23:10,242 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:10,385 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:10,387 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da89baf]
2021-03-11 22:23:10,387 [main:117] - GENERATED CALL = (A.v).subSequence(894973681, -1478633451).isBlank()
2021-03-11 22:23:10,387 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5dadcec2]]
2021-03-11 22:23:10,387 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:23:10,531 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:10,697 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:10,701 [main:149] - GENERATING call of type public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5dadcec2]
2021-03-11 22:23:10,845 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:23:10,990 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:23:10,992 [main:117] - GENERATED CALL = (A.v).subSequence(906369977, -156341411).startsWith('⺤', false)
2021-03-11 22:23:10,992 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dae008e]]
2021-03-11 22:23:10,992 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:23:11,138 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:11,268 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:11,270 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dae008e]
2021-03-11 22:23:11,270 [main:117] - GENERATED CALL = (A.v).subSequence(-1913508149, -1014732836).isEmpty()
2021-03-11 22:23:11,270 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@795ef724]]
2021-03-11 22:23:11,271 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:23:11,415 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:11,561 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:11,564 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@795ef724]
2021-03-11 22:23:11,564 [main:117] - GENERATED CALL = (A.v).subSequence(-2132163901, -643406611).isNotEmpty()
2021-03-11 22:23:11,564 [main:114] - replacement of it?.methodName?.startsWith(method) == (A().f()).isNotBlank() of type Boolean is (A.v).subSequence(-1913508149, -1014732836).isEmpty()
2021-03-11 22:23:11,692 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:23:11,693 [main:66] - Compilation checking started
2021-03-11 22:23:12,221 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return Kla0().prope2
}

fun box216(): String {
    var prope4 = (A.s).replaceBeforeLast('', A.v, A().f())
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += (A().f()).compareTo("uhmww").unaryMinus()
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vqwwd"}).exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "mzfyc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { (A.v).subSequence(-1913508149, -1014732836).isEmpty() }?.let { TODO("mamun")}
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A.s).get(-2125883856).isLetter() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (A().f()).count()..(A.v).compareTo(A().f()).toInt()) {
            if (909244939 != (A.v).compareTo(A.s).coerceAtLeast(115096001)) error((A().f()).replace('რ', '梨', true) + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((A().f()).dropLastWhile({a: Char -> true}) + prope6)
        if ((HashSet<UByte>(-1506462825)).equals("jhemx").xor(true)) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:23:12,224 [main:107] - replacing ((A().f()).replace('რ', '梨', true) + prope6, String)
2021-03-11 22:23:12,225 [main:50] - replacing (A().f()).replace('რ', '梨', true) + prope6 String
2021-03-11 22:23:12,225 [main:54] - Getting value of type String
2021-03-11 22:23:12,394 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:23:12,396 [main:58] - GENERATED VALUE OF TYPE String = "wanos"
2021-03-11 22:23:12,396 [main:61] - GENERATED IS CALL =false
2021-03-11 22:23:12,401 [main:67] - randomType = UByte
2021-03-11 22:23:12,545 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 22:23:12,594 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@6d0e9b22]
2021-03-11 22:23:12,594 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23615b37]
2021-03-11 22:23:12,723 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:12,725 [main:78] - Generated call from random type = (36.toUByte()).toLong().toString(1466140190)
2021-03-11 22:23:12,725 [main:114] - replacement of (A().f()).replace('რ', '梨', true) + prope6 of type String is (36.toUByte()).toLong().toString(1466140190)
2021-03-11 22:23:12,867 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:23:12,867 [main:66] - Compilation checking started
2021-03-11 22:23:13,459 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return Kla0().prope2
}

fun box216(): String {
    var prope4 = (A.s).replaceBeforeLast('', A.v, A().f())
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += (A().f()).compareTo("uhmww").unaryMinus()
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vqwwd"}).exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "mzfyc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { (A.v).subSequence(-1913508149, -1014732836).isEmpty() }?.let { TODO("mamun")}
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A.s).get(-2125883856).isLetter() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (A().f()).count()..(A.v).compareTo(A().f()).toInt()) {
            if (909244939 != (A.v).compareTo(A.s).coerceAtLeast(115096001)) error((36.toUByte()).toLong().toString(1466140190))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((A().f()).dropLastWhile({a: Char -> true}) + prope6)
        if ((HashSet<UByte>(-1506462825)).equals("jhemx").xor(true)) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:23:13,461 [main:107] - replacing (prope1.prope8, Function0<Unit>)
2021-03-11 22:23:13,461 [main:50] - replacing prope1.prope8 Function0<Unit>
2021-03-11 22:23:13,462 [main:54] - Getting value of type Function0<Unit>
2021-03-11 22:23:13,626 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 22:23:13,629 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 22:23:13,785 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 22:23:13,788 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 22:23:14,259 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 22:23:14,261 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 22:23:14,263 [main:302] - generating value of type = Any false depth = 5
2021-03-11 22:23:14,263 [main:95] - GENERATED = check(false, { "acqeg"})
2021-03-11 22:23:14,263 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false, { "acqeg"})}
2021-03-11 22:23:14,263 [main:61] - GENERATED IS CALL =false
2021-03-11 22:23:14,271 [main:67] - randomType = Kla0
2021-03-11 22:23:14,401 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 22:23:14,403 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}
2021-03-11 22:23:14,412 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:23:14,430 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:23:14,431 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:23:14,431 [main:114] - replacement of prope1.prope8 of type Function0<Unit> is { check(false, { "acqeg"})}
2021-03-11 22:23:14,574 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 22:23:14,575 [main:66] - Compilation checking started
2021-03-11 22:23:14,964 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return Kla0().prope2
}

fun box216(): String {
    var prope4 = (A.s).replaceBeforeLast('', A.v, A().f())
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += (A().f()).compareTo("uhmww").unaryMinus()
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vqwwd"}).exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "mzfyc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { (A.v).subSequence(-1913508149, -1014732836).isEmpty() }?.let { TODO("mamun")}
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == (A.s).get(-2125883856).isLetter() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (A().f()).count()..(A.v).compareTo(A().f()).toInt()) {
            if (909244939 != (A.v).compareTo(A.s).coerceAtLeast(115096001)) error((36.toUByte()).toLong().toString(1466140190))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((A().f()).dropLastWhile({a: Char -> true}) + prope6)
        if ((HashSet<UByte>(-1506462825)).equals("jhemx").xor(true)) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        { check(false, { "acqeg"})} = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:23:14,966 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 22:23:14,966 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 22:23:14,966 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-11 22:23:15,110 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 22:23:15,115 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 22:23:15,274 [main:67] - randomType = UByte?
2021-03-11 22:23:15,402 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 22:23:15,433 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:23:15,451 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:23:15,452 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:23:15,452 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 22:23:15,452 [main:107] - replacing (prope2.isSuccess, Boolean)
2021-03-11 22:23:15,452 [main:50] - replacing prope2.isSuccess Boolean
2021-03-11 22:23:15,452 [main:54] - Getting value of type Boolean
2021-03-11 22:23:15,597 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:23:15,599 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 22:23:15,599 [main:61] - GENERATED IS CALL =false
2021-03-11 22:23:15,756 [main:67] - randomType = Byte
2021-03-11 22:23:15,887 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:23:15,921 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@2954f22f]
2021-03-11 22:23:15,921 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@640a443f]
2021-03-11 22:23:15,921 [main:78] - Generated call from random type = (-41).toChar().isUpperCase()
2021-03-11 22:23:15,922 [main:106] - GETTING Boolean from String
2021-03-11 22:23:15,938 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dae008e]]
2021-03-11 22:23:15,939 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:23:16,085 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:16,235 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:16,237 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dae008e]
2021-03-11 22:23:16,237 [main:117] - GENERATED CALL = (A().f()).subSequence(-1191073045, -1701142419).isEmpty()
2021-03-11 22:23:16,237 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@376f85c1]]
2021-03-11 22:23:16,237 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:23:16,366 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:16,368 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@376f85c1]
2021-03-11 22:23:16,369 [main:117] - GENERATED CALL = (A().f()).get(1619041074).isDefined()
2021-03-11 22:23:16,369 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@204d5820]]
2021-03-11 22:23:16,369 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:23:16,512 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:16,659 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:16,661 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@204d5820]
2021-03-11 22:23:16,661 [main:117] - GENERATED CALL = (A().f()).subSequence(-497342078, -1646287988).none()
2021-03-11 22:23:16,662 [main:113] - Case = [public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da89baf]]
2021-03-11 22:23:16,662 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1da89baf]
2021-03-11 22:23:16,662 [main:117] - GENERATED CALL = (A().f()).isBlank()
2021-03-11 22:23:16,662 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282699f]]
2021-03-11 22:23:16,662 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:23:16,791 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:16,793 [main:149] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282699f]
2021-03-11 22:23:16,793 [main:117] - GENERATED CALL = (A().f()).get(-276689507).isLetter()
2021-03-11 22:23:16,793 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6098db]]
2021-03-11 22:23:16,793 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6098db]
2021-03-11 22:23:16,793 [main:117] - GENERATED CALL = (A().f()).isNotBlank()
2021-03-11 22:23:16,793 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c4a710c]]
2021-03-11 22:23:16,793 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c4a710c]
2021-03-11 22:23:16,935 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:23:16,935 [main:117] - GENERATED CALL = (A().f()).equals("rszdf")
2021-03-11 22:23:16,935 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c4a710c], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4fef2259]]
2021-03-11 22:23:16,935 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c4a710c]
2021-03-11 22:23:17,089 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:23:17,090 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4fef2259]
2021-03-11 22:23:17,219 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:23:17,221 [main:117] - GENERATED CALL = (A().f()).equals("wrlkh").xor(true)
2021-03-11 22:23:17,221 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d08b00b]]
2021-03-11 22:23:17,221 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:23:17,364 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:17,366 [main:149] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d08b00b]
2021-03-11 22:23:17,366 [main:117] - GENERATED CALL = (A().f()).get(-1421902394).isLowerCase()
2021-03-11 22:23:17,366 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c4a710c], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@41dcf819]]
2021-03-11 22:23:17,366 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c4a710c]
2021-03-11 22:23:17,511 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:23:17,512 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@41dcf819]
2021-03-11 22:23:17,512 [main:117] - GENERATED CALL = (A().f()).equals("tlezh").not()
2021-03-11 22:23:17,512 [main:114] - replacement of prope2.isSuccess of type Boolean is (A().f()).isBlank()
2021-03-11 22:23:17,641 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:23:17,643 [main:107] - replacing (method, String)
2021-03-11 22:23:17,643 [main:50] - replacing method String
2021-03-11 22:23:17,643 [main:54] - Getting value of type String
2021-03-11 22:23:17,787 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:23:17,789 [main:58] - GENERATED VALUE OF TYPE String = "yvtcx"
2021-03-11 22:23:17,789 [main:61] - GENERATED IS CALL =false
2021-03-11 22:23:17,950 [main:67] - randomType = UInt
2021-03-11 22:23:18,083 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 22:23:18,114 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@56a5830f]
2021-03-11 22:23:18,114 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10809fdc]
2021-03-11 22:23:18,260 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:18,263 [main:78] - Generated call from random type = (275808411.toUInt()).toUShort().toString(759891129)
2021-03-11 22:23:18,263 [main:106] - GETTING String from String
2021-03-11 22:23:18,286 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ffb7dce]]
2021-03-11 22:23:18,286 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ffb7dce]
2021-03-11 22:23:18,426 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 22:23:18,428 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:23:18,430 [main:117] - GENERATED CALL = (A().f()).filter({a: Char -> false})
2021-03-11 22:23:18,430 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4af7b2b9]]
2021-03-11 22:23:18,430 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4af7b2b9]
2021-03-11 22:23:18,430 [main:117] - GENERATED CALL = (A().f()).toLowerCase()
2021-03-11 22:23:18,430 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51edcdcb]]
2021-03-11 22:23:18,430 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51edcdcb]
2021-03-11 22:23:18,560 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:23:18,562 [main:117] - GENERATED CALL = (A().f()).substringAfter('⚩', A().f())
2021-03-11 22:23:18,562 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@abc67a]]
2021-03-11 22:23:18,562 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@abc67a]
2021-03-11 22:23:18,706 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:23:18,707 [main:117] - GENERATED CALL = (A().f()).plus("nxiem")
2021-03-11 22:23:18,707 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@272c9357]]
2021-03-11 22:23:18,707 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@272c9357]
2021-03-11 22:23:18,853 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 22:23:18,989 [main:43] - GENERATING CALL OF fun <T> mutableListOf(): Iterable<Int> = TODO()
2021-03-11 22:23:18,992 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableListOf(): Iterable<Int> = TODO()
2021-03-11 22:23:19,147 [main:95] - GENERATED = mutableListOf<Int>()
2021-03-11 22:23:19,147 [main:117] - GENERATED CALL = (A().f()).slice(mutableListOf<Int>())
2021-03-11 22:23:19,147 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48f66f29]]
2021-03-11 22:23:19,147 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48f66f29]
2021-03-11 22:23:19,300 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:23:19,302 [main:117] - GENERATED CALL = (A().f()).replaceIndent("wjwgq")
2021-03-11 22:23:19,302 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ab2b222]]
2021-03-11 22:23:19,302 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ab2b222]
2021-03-11 22:23:19,431 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:23:19,579 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:23:19,581 [main:117] - GENERATED CALL = (A().f()).replaceBeforeLast('셊', A.v, "nrqyt")
2021-03-11 22:23:19,581 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50f17df8]]
2021-03-11 22:23:19,581 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:23:19,726 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:19,857 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:19,859 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50f17df8]
2021-03-11 22:23:20,024 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:23:20,173 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:23:20,176 [main:117] - GENERATED CALL = (A().f()).subSequence(-49317710, 82537347).commonPrefixWith("kxhko", true)
2021-03-11 22:23:20,176 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ab9e242]]
2021-03-11 22:23:20,176 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:23:20,303 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:20,450 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:20,452 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ab9e242]
2021-03-11 22:23:20,597 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:23:20,730 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:23:20,733 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:23:21,053 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 22:23:21,187 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:23:21,189 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:23:21,506 [main:302] - generating value of type = CharSequence false depth = 6
2021-03-11 22:23:21,640 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:23:21,643 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 22:23:21,963 [main:302] - generating value of type = CharSequence false depth = 9
2021-03-11 22:23:22,099 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:23:22,101 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:23:22,467 [main:302] - generating value of type = String true depth = 12
2021-03-11 22:23:22,470 [main:95] - GENERATED = StringBuilder("mumjk")
2021-03-11 22:23:22,470 [main:95] - GENERATED = StringBuilder(StringBuilder("mumjk"))
2021-03-11 22:23:22,470 [main:95] - GENERATED = StringBuilder(StringBuilder(StringBuilder("mumjk")))
2021-03-11 22:23:22,470 [main:95] - GENERATED = StringBuilder(StringBuilder(StringBuilder(StringBuilder("mumjk"))))
2021-03-11 22:23:22,621 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:23:22,623 [main:117] - GENERATED CALL = (A().f()).subSequence(-1336067453, 475007051).commonSuffixWith(StringBuilder(StringBuilder(StringBuilder(StringBuilder("mumjk")))), true)
2021-03-11 22:23:22,623 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62b8e389]]
2021-03-11 22:23:22,623 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62b8e389]
2021-03-11 22:23:22,771 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:23:22,773 [main:117] - GENERATED CALL = (A().f()).trimMargin("egneq")
2021-03-11 22:23:22,773 [main:114] - replacement of method of type String is A().f()
2021-03-11 22:23:22,918 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:23:22,918 [main:66] - Compilation checking started
2021-03-11 22:23:23,518 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return Kla0().prope2
}

fun box216(): String {
    var prope4 = (A.s).replaceBeforeLast('', A.v, A().f())
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += (A().f()).compareTo("uhmww").unaryMinus()
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vqwwd"}).exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "mzfyc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { (A.v).subSequence(-1913508149, -1014732836).isEmpty() }?.let { TODO("mamun")}
    }

    fun fu8(method: String) {
        prope5.find { it?.methodName?.startsWith(A().f()) == (A.s).get(-2125883856).isLetter() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (A().f()).count()..(A.v).compareTo(A().f()).toInt()) {
            if (909244939 != (A.v).compareTo(A.s).coerceAtLeast(115096001)) error((36.toUByte()).toLong().toString(1466140190))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((A().f()).dropLastWhile({a: Char -> true}) + prope6)
        if ((HashSet<UByte>(-1506462825)).equals("jhemx").xor(true)) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:23:23,520 [main:107] - replacing (it?.methodName?.startsWith(A().f()) == (A.s).get(-2125883856).isLetter(), Boolean)
2021-03-11 22:23:23,520 [main:50] - replacing it?.methodName?.startsWith(A().f()) == (A.s).get(-2125883856).isLetter() Boolean
2021-03-11 22:23:23,520 [main:54] - Getting value of type Boolean
2021-03-11 22:23:23,660 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:23:23,662 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 22:23:23,662 [main:61] - GENERATED IS CALL =false
2021-03-11 22:23:23,666 [main:67] - randomType = Boolean
2021-03-11 22:23:23,811 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:23:23,825 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@61a045c5]
2021-03-11 22:23:23,956 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:23:23,956 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@58a5cd83]
2021-03-11 22:23:24,107 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:23:24,107 [main:78] - Generated call from random type = (true).equals("fnupe").equals("fmcxq")
2021-03-11 22:23:24,108 [main:106] - GETTING Boolean from String
2021-03-11 22:23:24,130 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cf33aef]]
2021-03-11 22:23:24,130 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cf33aef]
2021-03-11 22:23:24,130 [main:117] - GENERATED CALL = (A().f()).toBoolean()
2021-03-11 22:23:24,130 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d08b00b]]
2021-03-11 22:23:24,130 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:23:24,270 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:24,272 [main:149] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d08b00b]
2021-03-11 22:23:24,272 [main:117] - GENERATED CALL = (A().f()).get(1032780741).isLowerCase()
2021-03-11 22:23:24,272 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ba36d74]]
2021-03-11 22:23:24,272 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:23:24,401 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:24,542 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:24,544 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ba36d74]
2021-03-11 22:23:24,688 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:23:24,819 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:23:24,822 [main:117] - GENERATED CALL = (A().f()).subSequence(-926305378, -868756922).contains('釉', false)
2021-03-11 22:23:24,822 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c4a710c]]
2021-03-11 22:23:24,822 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c4a710c]
2021-03-11 22:23:24,965 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:23:24,965 [main:117] - GENERATED CALL = (A().f()).equals("qzvad")
2021-03-11 22:23:24,965 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20a07d96]]
2021-03-11 22:23:24,965 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:23:25,120 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:25,123 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20a07d96]
2021-03-11 22:23:25,123 [main:117] - GENERATED CALL = (A().f()).get(1936404992).isSurrogate()
2021-03-11 22:23:25,123 [main:113] - Case = [public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bf69766]]
2021-03-11 22:23:25,123 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bf69766]
2021-03-11 22:23:25,251 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:25,395 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:23:25,537 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:25,677 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:25,842 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:23:25,844 [main:117] - GENERATED CALL = (A().f()).regionMatches(1736041171, "xunbr", -1823303596, 279683462, false)
2021-03-11 22:23:25,844 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f1f6355]]
2021-03-11 22:23:25,844 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:23:25,989 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:25,991 [main:149] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f1f6355]
2021-03-11 22:23:25,991 [main:117] - GENERATED CALL = (A().f()).get(-1990063011).isHighSurrogate()
2021-03-11 22:23:25,991 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fa931be]]
2021-03-11 22:23:25,991 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:23:26,125 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:26,127 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fa931be]
2021-03-11 22:23:26,128 [main:117] - GENERATED CALL = (A().f()).get(-1490156649).isLowSurrogate()
2021-03-11 22:23:26,128 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@795ef724]]
2021-03-11 22:23:26,128 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@795ef724]
2021-03-11 22:23:26,128 [main:117] - GENERATED CALL = (A().f()).isNotEmpty()
2021-03-11 22:23:26,128 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c4a710c], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@503c6c4d]]
2021-03-11 22:23:26,128 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c4a710c]
2021-03-11 22:23:26,270 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:23:26,270 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@503c6c4d]
2021-03-11 22:23:26,415 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:23:26,417 [main:117] - GENERATED CALL = (A().f()).equals("wswmn").and(false)
2021-03-11 22:23:26,418 [main:114] - replacement of it?.methodName?.startsWith(A().f()) == (A.s).get(-2125883856).isLetter() of type Boolean is (A().f()).get(-1990063011).isHighSurrogate()
2021-03-11 22:23:26,546 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:23:26,547 [main:66] - Compilation checking started
2021-03-11 22:23:27,080 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return Kla0().prope2
}

fun box216(): String {
    var prope4 = (A.s).replaceBeforeLast('', A.v, A().f())
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += (A().f()).compareTo("uhmww").unaryMinus()
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vqwwd"}).exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "mzfyc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { (A.v).subSequence(-1913508149, -1014732836).isEmpty() }?.let { TODO("mamun")}
    }

    fun fu8(method: String) {
        prope5.find { (A().f()).get(-1990063011).isHighSurrogate() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (A().f()).count()..(A.v).compareTo(A().f()).toInt()) {
            if (909244939 != (A.v).compareTo(A.s).coerceAtLeast(115096001)) error((36.toUByte()).toLong().toString(1466140190))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((A().f()).dropLastWhile({a: Char -> true}) + prope6)
        if ((HashSet<UByte>(-1506462825)).equals("jhemx").xor(true)) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:23:27,083 [main:107] - replacing ((A().f()).dropLastWhile({a: Char -> true}) + prope6, String)
2021-03-11 22:23:27,084 [main:50] - replacing (A().f()).dropLastWhile({a: Char -> true}) + prope6 String
2021-03-11 22:23:27,084 [main:54] - Getting value of type String
2021-03-11 22:23:27,235 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:23:27,238 [main:58] - GENERATED VALUE OF TYPE String = "buegj"
2021-03-11 22:23:27,238 [main:61] - GENERATED IS CALL =false
2021-03-11 22:23:27,401 [main:67] - randomType = Array<A>
2021-03-11 22:23:27,528 [main:302] - generating value of type = Array<A> false depth = 0
2021-03-11 22:23:27,677 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: A): Array<A> = TODO()
2021-03-11 22:23:27,680 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: A): Array<A> = TODO()
2021-03-11 22:23:27,829 [main:302] - generating value of type = A false depth = 3
2021-03-11 22:23:27,831 [main:112] - generating klass A text = class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}
2021-03-11 22:23:27,832 [main:95] - GENERATED = arrayOf<A>(A())
2021-03-11 22:23:27,848 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4baa45cf]
2021-03-11 22:23:27,848 [main:78] - Generated call from random type = (arrayOf<A>(A())).contentDeepToString()
2021-03-11 22:23:27,848 [main:106] - GETTING String from String
2021-03-11 22:23:27,872 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@272c9357]]
2021-03-11 22:23:27,872 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@272c9357]
2021-03-11 22:23:27,999 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 22:23:28,151 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Int): Iterable<Int> = TODO()
2021-03-11 22:23:28,154 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Int): Iterable<Int> = TODO()
2021-03-11 22:23:28,302 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:23:28,304 [main:95] - GENERATED = linkedSetOf<Int>(311227901)
2021-03-11 22:23:28,304 [main:117] - GENERATED CALL = (A.v).slice(linkedSetOf<Int>(311227901))
2021-03-11 22:23:28,304 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e28298e]]
2021-03-11 22:23:28,305 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:23:28,432 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:28,434 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e28298e]
2021-03-11 22:23:28,435 [main:117] - GENERATED CALL = (A.v).get(1062561844).uppercase()
2021-03-11 22:23:28,435 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62b8e389]]
2021-03-11 22:23:28,435 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62b8e389]
2021-03-11 22:23:28,586 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:23:28,588 [main:117] - GENERATED CALL = (A.v).trimMargin("ykjxc")
2021-03-11 22:23:28,588 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48f66f29]]
2021-03-11 22:23:28,588 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48f66f29]
2021-03-11 22:23:28,589 [main:117] - GENERATED CALL = (A.v).replaceIndent(A.s)
2021-03-11 22:23:28,589 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@abc67a]]
2021-03-11 22:23:28,589 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@abc67a]
2021-03-11 22:23:28,732 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:23:28,733 [main:117] - GENERATED CALL = (A.v).plus("hescc")
2021-03-11 22:23:28,733 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b70aa8a]]
2021-03-11 22:23:28,733 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b70aa8a]
2021-03-11 22:23:28,860 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:28,862 [main:117] - GENERATED CALL = (A.v).substring(1035758902)
2021-03-11 22:23:28,863 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d2b29c6]]
2021-03-11 22:23:28,863 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d2b29c6]
2021-03-11 22:23:29,007 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:23:29,149 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:23:29,287 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:23:29,289 [main:117] - GENERATED CALL = (A.v).replace('?', '⎔', true)
2021-03-11 22:23:29,290 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34acae1a]]
2021-03-11 22:23:29,290 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34acae1a]
2021-03-11 22:23:29,434 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:29,570 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:29,573 [main:117] - GENERATED CALL = (A.v).removeRange(937851775, -1072544918)
2021-03-11 22:23:29,573 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43739c43]]
2021-03-11 22:23:29,573 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43739c43]
2021-03-11 22:23:29,709 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:29,833 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:23:29,836 [main:117] - GENERATED CALL = (A.v).padEnd(-43517605, '깾')
2021-03-11 22:23:29,836 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4833974d]]
2021-03-11 22:23:29,836 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4833974d]
2021-03-11 22:23:29,980 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:23:30,128 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:23:30,130 [main:117] - GENERATED CALL = (A.v).replaceAfterLast('', "gukwn", A.v)
2021-03-11 22:23:30,130 [main:114] - replacement of (A().f()).dropLastWhile({a: Char -> true}) + prope6 of type String is (A.v).slice(linkedSetOf<Int>(311227901))
2021-03-11 22:23:30,257 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:23:30,257 [main:66] - Compilation checking started
2021-03-11 22:23:30,812 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return Kla0().prope2
}

fun box216(): String {
    var prope4 = (A.s).replaceBeforeLast('', A.v, A().f())
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = fu0 {
        var prope10 = 1
        do {
            prope2 += (A().f()).compareTo("uhmww").unaryMinus()
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vqwwd"}).exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "mzfyc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { (A.v).subSequence(-1913508149, -1014732836).isEmpty() }?.let { TODO("mamun")}
    }

    fun fu8(method: String) {
        prope5.find { (A().f()).get(-1990063011).isHighSurrogate() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (A().f()).count()..(A.v).compareTo(A().f()).toInt()) {
            if (909244939 != (A.v).compareTo(A.s).coerceAtLeast(115096001)) error((36.toUByte()).toLong().toString(1466140190))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((A.v).slice(linkedSetOf<Int>(311227901)))
        if ((HashSet<UByte>(-1506462825)).equals("jhemx").xor(true)) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:23:30,814 [main:107] - replacing (fu0 {
        var prope10 = 1
        do {
            prope2 += (A().f()).compareTo("uhmww").unaryMinus()
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    }, String)
2021-03-11 22:23:30,814 [main:50] - replacing fu0 {
        var prope10 = 1
        do {
            prope2 += (A().f()).compareTo("uhmww").unaryMinus()
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    } String
2021-03-11 22:23:30,814 [main:54] - Getting value of type String
2021-03-11 22:23:30,960 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:23:30,962 [main:58] - GENERATED VALUE OF TYPE String = "lqmaw"
2021-03-11 22:23:30,962 [main:61] - GENERATED IS CALL =false
2021-03-11 22:23:30,969 [main:67] - randomType = A
2021-03-11 22:23:31,117 [main:302] - generating value of type = A false depth = 0
2021-03-11 22:23:31,119 [main:112] - generating klass A text = class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}
2021-03-11 22:23:31,128 [main:149] - GENERATING call of type public final fun f(): kotlin.String defined in A[SimpleFunctionDescriptorImpl@5723b67]
2021-03-11 22:23:31,128 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d93281e]
2021-03-11 22:23:31,129 [main:78] - Generated call from random type = (A()).f().trimEnd()
2021-03-11 22:23:31,129 [main:106] - GETTING String from String
2021-03-11 22:23:31,153 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@255f0213]]
2021-03-11 22:23:31,153 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@255f0213]
2021-03-11 22:23:31,295 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:31,297 [main:117] - GENERATED CALL = (A().f()).take(-322851714)
2021-03-11 22:23:31,297 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63deed18]]
2021-03-11 22:23:31,297 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63deed18]
2021-03-11 22:23:31,463 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:23:31,468 [main:117] - GENERATED CALL = (A().f()).removeSurrounding("xqdro")
2021-03-11 22:23:31,468 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c281616]]
2021-03-11 22:23:31,468 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c281616]
2021-03-11 22:23:31,623 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:31,776 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:23:31,778 [main:117] - GENERATED CALL = (A().f()).padStart(1711418941, 'ᴒ')
2021-03-11 22:23:31,778 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1b5d65]]
2021-03-11 22:23:31,778 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1b5d65]
2021-03-11 22:23:31,935 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-11 22:23:31,936 [main:302] - generating value of type = Char true depth = 1
2021-03-11 22:23:31,938 [main:117] - GENERATED CALL = (A().f()).replaceFirstChar({a: Char -> ''})
2021-03-11 22:23:31,939 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ee5c5fb]]
2021-03-11 22:23:31,939 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ee5c5fb]
2021-03-11 22:23:32,082 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:23:32,240 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:23:32,242 [main:117] - GENERATED CALL = (A().f()).replaceBefore('ꛈ', A.s, "wnapr")
2021-03-11 22:23:32,242 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50f17df8]]
2021-03-11 22:23:32,242 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:23:32,367 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:32,512 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:32,514 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50f17df8]
2021-03-11 22:23:32,661 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:23:32,797 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:23:32,799 [main:117] - GENERATED CALL = (A().f()).subSequence(-2025407043, 752274010).commonPrefixWith("tezyv", true)
2021-03-11 22:23:32,799 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e45f41]]
2021-03-11 22:23:32,799 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e45f41]
2021-03-11 22:23:32,948 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:23:32,950 [main:117] - GENERATED CALL = (A().f()).substringBeforeLast('䐋', A.v)
2021-03-11 22:23:32,950 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51edcdcb]]
2021-03-11 22:23:32,950 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51edcdcb]
2021-03-11 22:23:33,092 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:23:33,094 [main:117] - GENERATED CALL = (A().f()).substringAfter('❆', A().f())
2021-03-11 22:23:33,094 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b56b568]]
2021-03-11 22:23:33,094 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b56b568]
2021-03-11 22:23:33,241 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:23:33,390 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:23:33,393 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 22:23:33,685 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:23:33,687 [main:95] - GENERATED = StringBuilder(563751155)
2021-03-11 22:23:33,687 [main:117] - GENERATED CALL = (A().f()).removePrefix(StringBuilder(563751155))
2021-03-11 22:23:33,687 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@261d48cc]]
2021-03-11 22:23:33,687 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@261d48cc]
2021-03-11 22:23:33,687 [main:117] - GENERATED CALL = (A().f()).trimIndent()
2021-03-11 22:23:33,687 [main:114] - replacement of fu0 {
        var prope10 = 1
        do {
            prope2 += (A().f()).compareTo("uhmww").unaryMinus()
            prope2 += ";"
        } while (prope10++ < 3)
        prope2 += "."
    } of type String is (A().f()).subSequence(-2025407043, 752274010).commonPrefixWith("tezyv", true)
2021-03-11 22:23:33,831 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:23:33,831 [main:66] - Compilation checking started
2021-03-11 22:23:34,386 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        COROUTINE_SUSPENDED
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return Kla0().prope2
}

fun box216(): String {
    var prope4 = (A.s).replaceBeforeLast('', A.v, A().f())
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = (A().f()).subSequence(-2025407043, 752274010).commonPrefixWith("tezyv", true)
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vqwwd"}).exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "mzfyc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { (A.v).subSequence(-1913508149, -1014732836).isEmpty() }?.let { TODO("mamun")}
    }

    fun fu8(method: String) {
        prope5.find { (A().f()).get(-1990063011).isHighSurrogate() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (A().f()).count()..(A.v).compareTo(A().f()).toInt()) {
            if (909244939 != (A.v).compareTo(A.s).coerceAtLeast(115096001)) error((36.toUByte()).toLong().toString(1466140190))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((A.v).slice(linkedSetOf<Int>(311227901)))
        if ((HashSet<UByte>(-1506462825)).equals("jhemx").xor(true)) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:23:34,388 [main:107] - replacing (COROUTINE_SUSPENDED, Any)
2021-03-11 22:23:34,389 [main:50] - replacing COROUTINE_SUSPENDED Any
2021-03-11 22:23:34,389 [main:54] - Getting value of type Any
2021-03-11 22:23:34,547 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:23:34,547 [main:58] - GENERATED VALUE OF TYPE Any = "ebeje"
2021-03-11 22:23:34,547 [main:61] - GENERATED IS CALL =false
2021-03-11 22:23:34,692 [main:67] - randomType = Kla6
2021-03-11 22:23:34,859 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 22:23:34,860 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}
2021-03-11 22:23:34,889 [main:106] - GETTING Any from String
2021-03-11 22:23:34,905 [main:114] - replacement of COROUTINE_SUSPENDED of type Any is "ebeje"
2021-03-11 22:23:35,040 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 22:23:35,041 [main:66] - Compilation checking started
2021-03-11 22:23:35,581 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        "ebeje"
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return Kla0().prope2
}

fun box216(): String {
    var prope4 = (A.s).replaceBeforeLast('', A.v, A().f())
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = (A().f()).subSequence(-2025407043, 752274010).commonPrefixWith("tezyv", true)
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vqwwd"}).exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "mzfyc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { (A.v).subSequence(-1913508149, -1014732836).isEmpty() }?.let { TODO("mamun")}
    }

    fun fu8(method: String) {
        prope5.find { (A().f()).get(-1990063011).isHighSurrogate() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (A().f()).count()..(A.v).compareTo(A().f()).toInt()) {
            if (909244939 != (A.v).compareTo(A.s).coerceAtLeast(115096001)) error((36.toUByte()).toLong().toString(1466140190))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((A.v).slice(linkedSetOf<Int>(311227901)))
        if ((HashSet<UByte>(-1506462825)).equals("jhemx").xor(true)) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:23:35,582 [main:107] - replacing (prope8, Function0<Unit>)
2021-03-11 22:23:35,582 [main:50] - replacing prope8 Function0<Unit>
2021-03-11 22:23:35,582 [main:54] - Getting value of type Function0<Unit>
2021-03-11 22:23:35,725 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 22:23:35,727 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 22:23:35,860 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 22:23:35,863 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 22:23:36,283 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 22:23:36,285 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 22:23:36,287 [main:302] - generating value of type = Any false depth = 5
2021-03-11 22:23:36,287 [main:95] - GENERATED = check(false, { "xcpru"})
2021-03-11 22:23:36,287 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false, { "xcpru"})}
2021-03-11 22:23:36,287 [main:61] - GENERATED IS CALL =false
2021-03-11 22:23:36,441 [main:67] - randomType = Sequence<Char>
2021-03-11 22:23:36,443 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:23:36,482 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:23:36,483 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:23:36,483 [main:114] - replacement of prope8 of type Function0<Unit> is { check(false, { "xcpru"})}
2021-03-11 22:23:36,603 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 22:23:36,603 [main:66] - Compilation checking started
2021-03-11 22:23:36,936 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        "ebeje"
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return Kla0().prope2
}

fun box216(): String {
    var prope4 = (A.s).replaceBeforeLast('', A.v, A().f())
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = (A().f()).subSequence(-2025407043, 752274010).commonPrefixWith("tezyv", true)
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vqwwd"}).exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "mzfyc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { (A.v).subSequence(-1913508149, -1014732836).isEmpty() }?.let { TODO("mamun")}
    }

    fun fu8(method: String) {
        prope5.find { (A().f()).get(-1990063011).isHighSurrogate() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        { check(false, { "xcpru"})} = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (A().f()).count()..(A.v).compareTo(A().f()).toInt()) {
            if (909244939 != (A.v).compareTo(A.s).coerceAtLeast(115096001)) error((36.toUByte()).toLong().toString(1466140190))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((A.v).slice(linkedSetOf<Int>(311227901)))
        if ((HashSet<UByte>(-1506462825)).equals("jhemx").xor(true)) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        prope1.prope8 = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:23:36,938 [main:107] - replacing (prope1, Kla5)
2021-03-11 22:23:36,938 [main:50] - replacing prope1 Kla5
2021-03-11 22:23:36,938 [main:54] - Getting value of type Kla5
2021-03-11 22:23:37,081 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 22:23:37,083 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (A().f()).count()..(A.v).compareTo(A().f()).toInt()) {
            if (909244939 != (A.v).compareTo(A.s).coerceAtLeast(115096001)) error((36.toUByte()).toLong().toString(1466140190))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((A.v).slice(linkedSetOf<Int>(311227901)))
        if ((HashSet<UByte>(-1506462825)).equals("jhemx").xor(true)) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 22:23:37,083 [main:58] - GENERATED VALUE OF TYPE Kla5 = Kla5()
2021-03-11 22:23:37,083 [main:61] - GENERATED IS CALL =true
2021-03-11 22:23:37,237 [main:67] - randomType = Kla5?
2021-03-11 22:23:37,357 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 22:23:37,359 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (A().f()).count()..(A.v).compareTo(A().f()).toInt()) {
            if (909244939 != (A.v).compareTo(A.s).coerceAtLeast(115096001)) error((36.toUByte()).toLong().toString(1466140190))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((A.v).slice(linkedSetOf<Int>(311227901)))
        if ((HashSet<UByte>(-1506462825)).equals("jhemx").xor(true)) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 22:23:37,369 [main:106] - GETTING Kla5 from String
2021-03-11 22:23:37,400 [main:106] - GETTING Kla5 from String
2021-03-11 22:23:37,401 [main:106] - GETTING Kla5 from String
2021-03-11 22:23:37,401 [main:114] - replacement of prope1 of type Kla5 is Kla5()
2021-03-11 22:23:37,551 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 22:23:37,551 [main:66] - Compilation checking started
2021-03-11 22:23:38,140 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        "ebeje"
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return Kla0().prope2
}

fun box216(): String {
    var prope4 = (A.s).replaceBeforeLast('', A.v, A().f())
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = (A().f()).subSequence(-2025407043, 752274010).commonPrefixWith("tezyv", true)
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vqwwd"}).exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "mzfyc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { (A.v).subSequence(-1913508149, -1014732836).isEmpty() }?.let { TODO("mamun")}
    }

    fun fu8(method: String) {
        prope5.find { (A().f()).get(-1990063011).isHighSurrogate() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (A().f()).count()..(A.v).compareTo(A().f()).toInt()) {
            if (909244939 != (A.v).compareTo(A.s).coerceAtLeast(115096001)) error((36.toUByte()).toLong().toString(1466140190))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((A.v).slice(linkedSetOf<Int>(311227901)))
        if ((HashSet<UByte>(-1506462825)).equals("jhemx").xor(true)) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        Kla5().prope8 = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:23:38,142 [main:107] - replacing (0, Int)
2021-03-11 22:23:38,142 [main:50] - replacing 0 Int
2021-03-11 22:23:38,142 [main:54] - Getting value of type Int
2021-03-11 22:23:38,306 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:38,308 [main:58] - GENERATED VALUE OF TYPE Int = 305991775
2021-03-11 22:23:38,308 [main:61] - GENERATED IS CALL =false
2021-03-11 22:23:38,456 [main:67] - randomType = UShort
2021-03-11 22:23:38,576 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 22:23:38,616 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@10930c21]
2021-03-11 22:23:38,616 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6de70de2]
2021-03-11 22:23:38,616 [main:78] - Generated call from random type = (24276.toUShort()).toShort().countTrailingZeroBits()
2021-03-11 22:23:38,617 [main:106] - GETTING Int from String
2021-03-11 22:23:38,633 [main:113] - Case = [public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@413a646b]]
2021-03-11 22:23:38,634 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@413a646b]
2021-03-11 22:23:38,770 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-11 22:23:38,772 [main:302] - generating value of type = Int true depth = 1
2021-03-11 22:23:38,774 [main:117] - GENERATED CALL = (A.v).sumBy({a: Char -> -805024565})
2021-03-11 22:23:38,774 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f1ac8f3]]
2021-03-11 22:23:38,774 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de]
2021-03-11 22:23:38,774 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6f1ac8f3]
2021-03-11 22:23:38,774 [main:117] - GENERATED CALL = (A.v).compareTo(A.s).unaryPlus()
2021-03-11 22:23:38,774 [main:113] - Case = [public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2181b1cd]]
2021-03-11 22:23:38,774 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2181b1cd]
2021-03-11 22:23:38,900 [main:302] - generating value of type = CharArray false depth = 0
2021-03-11 22:23:39,033 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 22:23:39,036 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 22:23:39,164 [main:302] - generating value of type = Char true depth = 3
2021-03-11 22:23:39,165 [main:95] - GENERATED = charArrayOf('䂺')
2021-03-11 22:23:39,322 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:39,452 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:23:39,454 [main:117] - GENERATED CALL = (A.v).indexOfAny(charArrayOf('䂺'), -131067662, true)
2021-03-11 22:23:39,454 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1af24856]]
2021-03-11 22:23:39,454 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de]
2021-03-11 22:23:39,454 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1af24856]
2021-03-11 22:23:39,454 [main:117] - GENERATED CALL = (A.v).compareTo(A().f()).unaryMinus()
2021-03-11 22:23:39,454 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@330bba7c]]
2021-03-11 22:23:39,454 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de]
2021-03-11 22:23:39,455 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@330bba7c]
2021-03-11 22:23:39,455 [main:117] - GENERATED CALL = (A.v).compareTo(A.v).inc()
2021-03-11 22:23:39,455 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@27cd312c]]
2021-03-11 22:23:39,455 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de]
2021-03-11 22:23:39,584 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:23:39,586 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@27cd312c]
2021-03-11 22:23:39,586 [main:117] - GENERATED CALL = (A.v).compareTo("gzbjm").takeHighestOneBit()
2021-03-11 22:23:39,586 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@3cd2fd3d]]
2021-03-11 22:23:39,586 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:23:39,703 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:39,705 [main:117] - GENERATED CALL = (A.v).get(2143107591).code
2021-03-11 22:23:39,705 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4285e6ae]]
2021-03-11 22:23:39,705 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@bf982de]
2021-03-11 22:23:39,705 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4285e6ae]
2021-03-11 22:23:39,856 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:39,858 [main:117] - GENERATED CALL = (A.v).compareTo(A().f()).rotateRight(-1442825311)
2021-03-11 22:23:39,858 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@304551d8], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4fc1f04e]]
2021-03-11 22:23:39,858 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4fc1f04e]
2021-03-11 22:23:39,983 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:40,114 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:40,116 [main:117] - GENERATED CALL = (A.v).length.coerceIn(396597015, 888337792)
2021-03-11 22:23:40,116 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c4a710c], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3867e848]]
2021-03-11 22:23:40,116 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c4a710c]
2021-03-11 22:23:40,233 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:23:40,233 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3867e848]
2021-03-11 22:23:40,390 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:23:40,392 [main:117] - GENERATED CALL = (A.v).equals("fdtgy").compareTo(false)
2021-03-11 22:23:40,392 [main:114] - replacement of 0 of type Int is (A.v).compareTo(A.s).unaryPlus()
2021-03-11 22:23:40,518 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:23:40,518 [main:66] - Compilation checking started
2021-03-11 22:23:41,041 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        "ebeje"
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return Kla0().prope2
}

fun box216(): String {
    var prope4 = (A.s).replaceBeforeLast('', A.v, A().f())
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = (A().f()).subSequence(-2025407043, 752274010).commonPrefixWith("tezyv", true)
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vqwwd"}).exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "mzfyc"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { (A.v).subSequence(-1913508149, -1014732836).isEmpty() }?.let { TODO("mamun")}
    }

    fun fu8(method: String) {
        prope5.find { (A().f()).get(-1990063011).isHighSurrogate() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = (A.v).compareTo(A.s).unaryPlus()
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (A().f()).count()..(A.v).compareTo(A().f()).toInt()) {
            if (909244939 != (A.v).compareTo(A.s).coerceAtLeast(115096001)) error((36.toUByte()).toLong().toString(1466140190))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((A.v).slice(linkedSetOf<Int>(311227901)))
        if ((HashSet<UByte>(-1506462825)).equals("jhemx").xor(true)) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        Kla5().prope8 = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:23:41,043 [main:107] - replacing (runCatching<Any?>({ "mzfyc"}).getOrThrow(), Any?)
2021-03-11 22:23:41,043 [main:50] - replacing runCatching<Any?>({ "mzfyc"}).getOrThrow() Any?
2021-03-11 22:23:41,043 [main:54] - Getting value of type Any?
2021-03-11 22:23:41,198 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:23:41,198 [main:58] - GENERATED VALUE OF TYPE Any? = "rwfci"
2021-03-11 22:23:41,198 [main:61] - GENERATED IS CALL =false
2021-03-11 22:23:41,488 [main:67] - randomType = Kla3<Int?>
2021-03-11 22:23:41,625 [main:302] - generating value of type = Kla3<Int?> false depth = 0
2021-03-11 22:23:41,627 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}
2021-03-11 22:23:42,647 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 22:23:42,649 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        Kla5().prope8 = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}
2021-03-11 22:23:42,668 [main:106] - GETTING Any? from String
2021-03-11 22:23:42,690 [main:106] - GETTING Any? from String
2021-03-11 22:23:42,691 [main:106] - GETTING Any? from String
2021-03-11 22:23:42,691 [main:114] - replacement of runCatching<Any?>({ "mzfyc"}).getOrThrow() of type Any? is "rwfci"
2021-03-11 22:23:42,825 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 22:23:42,826 [main:66] - Compilation checking started
2021-03-11 22:23:43,334 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        "ebeje"
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return Kla0().prope2
}

fun box216(): String {
    var prope4 = (A.s).replaceBeforeLast('', A.v, A().f())
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = (A().f()).subSequence(-2025407043, 752274010).commonPrefixWith("tezyv", true)
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vqwwd"}).exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "rwfci"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { (A.v).subSequence(-1913508149, -1014732836).isEmpty() }?.let { TODO("mamun")}
    }

    fun fu8(method: String) {
        prope5.find { (A().f()).get(-1990063011).isHighSurrogate() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = (A.v).compareTo(A.s).unaryPlus()
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (A().f()).count()..(A.v).compareTo(A().f()).toInt()) {
            if (909244939 != (A.v).compareTo(A.s).coerceAtLeast(115096001)) error((36.toUByte()).toLong().toString(1466140190))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((A.v).slice(linkedSetOf<Int>(311227901)))
        if ((HashSet<UByte>(-1506462825)).equals("jhemx").xor(true)) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        Kla5().prope8 = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:23:43,336 [main:107] - replacing (prope4, String)
2021-03-11 22:23:43,336 [main:50] - replacing prope4 String
2021-03-11 22:23:43,336 [main:54] - Getting value of type String
2021-03-11 22:23:43,477 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:23:43,479 [main:58] - GENERATED VALUE OF TYPE String = "hqnjr"
2021-03-11 22:23:43,479 [main:61] - GENERATED IS CALL =false
2021-03-11 22:23:43,764 [main:67] - randomType = List<Float>
2021-03-11 22:23:43,764 [main:106] - GETTING String from String
2021-03-11 22:23:43,792 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2df1636b]]
2021-03-11 22:23:43,792 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:23:43,908 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:44,046 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:44,048 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2df1636b]
2021-03-11 22:23:44,182 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:44,184 [main:117] - GENERATED CALL = (A().f()).subSequence(-251894894, 161709910).repeat(1444135063)
2021-03-11 22:23:44,184 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ccc1de7]]
2021-03-11 22:23:44,184 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ccc1de7]
2021-03-11 22:23:44,313 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:23:44,430 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:23:44,568 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:23:44,570 [main:117] - GENERATED CALL = (A().f()).replaceFirst('', '㽊', false)
2021-03-11 22:23:44,571 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fe69a85]]
2021-03-11 22:23:44,571 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fe69a85]
2021-03-11 22:23:44,697 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 22:23:44,698 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:23:44,700 [main:117] - GENERATED CALL = (A().f()).filterNot({a: Char -> false})
2021-03-11 22:23:44,700 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d93281e]]
2021-03-11 22:23:44,701 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d93281e]
2021-03-11 22:23:44,701 [main:117] - GENERATED CALL = (A().f()).trimEnd()
2021-03-11 22:23:44,701 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7eeb1661]]
2021-03-11 22:23:44,701 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7eeb1661]
2021-03-11 22:23:44,701 [main:117] - GENERATED CALL = (A().f()).trimStart()
2021-03-11 22:23:44,701 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ab9e242]]
2021-03-11 22:23:44,701 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ab9e242]
2021-03-11 22:23:44,830 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:23:44,951 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:23:44,953 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 22:23:45,240 [main:302] - generating value of type = String true depth = 3
2021-03-11 22:23:45,242 [main:95] - GENERATED = StringBuilder("jjwpt")
2021-03-11 22:23:45,372 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:23:45,374 [main:117] - GENERATED CALL = (A().f()).commonSuffixWith(StringBuilder("jjwpt"), true)
2021-03-11 22:23:45,374 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b70aa8a]]
2021-03-11 22:23:45,374 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b70aa8a]
2021-03-11 22:23:45,490 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:45,492 [main:117] - GENERATED CALL = (A().f()).substring(-2088777979)
2021-03-11 22:23:45,492 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ffb7dce]]
2021-03-11 22:23:45,492 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ffb7dce]
2021-03-11 22:23:45,630 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 22:23:45,631 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:23:45,633 [main:117] - GENERATED CALL = (A().f()).filter({a: Char -> false})
2021-03-11 22:23:45,634 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e220c0c]]
2021-03-11 22:23:45,634 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:23:45,760 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:45,890 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:45,892 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e220c0c]
2021-03-11 22:23:46,010 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:46,150 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:46,152 [main:117] - GENERATED CALL = (A().f()).subSequence(2065956670, -2025584794).substring(872628266, 1144571963)
2021-03-11 22:23:46,152 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cbc9a8b]]
2021-03-11 22:23:46,152 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cbc9a8b]
2021-03-11 22:23:46,278 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 22:23:46,280 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:23:46,282 [main:117] - GENERATED CALL = (A().f()).takeLastWhile({a: Char -> true})
2021-03-11 22:23:46,282 [main:114] - replacement of prope4 of type String is (A().f()).replaceFirst('', '㽊', false)
2021-03-11 22:23:46,412 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:23:46,412 [main:66] - Compilation checking started
2021-03-11 22:23:46,749 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        "ebeje"
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return Kla0().prope2
}

fun box216(): String {
    var prope4 = (A.s).replaceBeforeLast('', A.v, A().f())
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    (A().f()).replaceFirst('', '㽊', false) = (A().f()).subSequence(-2025407043, 752274010).commonPrefixWith("tezyv", true)
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vqwwd"}).exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "rwfci"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { (A.v).subSequence(-1913508149, -1014732836).isEmpty() }?.let { TODO("mamun")}
    }

    fun fu8(method: String) {
        prope5.find { (A().f()).get(-1990063011).isHighSurrogate() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = (A.v).compareTo(A.s).unaryPlus()
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (A().f()).count()..(A.v).compareTo(A().f()).toInt()) {
            if (909244939 != (A.v).compareTo(A.s).coerceAtLeast(115096001)) error((36.toUByte()).toLong().toString(1466140190))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((A.v).slice(linkedSetOf<Int>(311227901)))
        if ((HashSet<UByte>(-1506462825)).equals("jhemx").xor(true)) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        Kla5().prope8 = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:23:46,750 [main:107] - replacing (true, Boolean)
2021-03-11 22:23:46,751 [main:50] - replacing true Boolean
2021-03-11 22:23:46,751 [main:54] - Getting value of type Boolean
2021-03-11 22:23:46,887 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:23:46,889 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 22:23:46,889 [main:61] - GENERATED IS CALL =false
2021-03-11 22:23:46,896 [main:67] - randomType = Kla5
2021-03-11 22:23:47,026 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 22:23:47,028 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope6 = (A.v).compareTo(A.s).unaryPlus()
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (A().f()).count()..(A.v).compareTo(A().f()).toInt()) {
            if (909244939 != (A.v).compareTo(A.s).coerceAtLeast(115096001)) error((36.toUByte()).toLong().toString(1466140190))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((A.v).slice(linkedSetOf<Int>(311227901)))
        if ((HashSet<UByte>(-1506462825)).equals("jhemx").xor(true)) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 22:23:47,037 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@503c6c4d]
2021-03-11 22:23:47,167 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:23:47,169 [main:78] - Generated call from random type = (Kla5()).prope7.and(false)
2021-03-11 22:23:47,170 [main:106] - GETTING Boolean from String
2021-03-11 22:23:47,198 [main:113] - Case = [public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@202842fb]]
2021-03-11 22:23:47,198 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@202842fb]
2021-03-11 22:23:47,199 [main:117] - GENERATED CALL = (A.s).matches(A.s)
2021-03-11 22:23:47,199 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a0f8dce]]
2021-03-11 22:23:47,199 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:23:47,334 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:47,336 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a0f8dce]
2021-03-11 22:23:47,336 [main:117] - GENERATED CALL = (A.s).get(676619307).isDigit()
2021-03-11 22:23:47,336 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22217226]]
2021-03-11 22:23:47,336 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:23:47,463 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:47,594 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:47,596 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22217226]
2021-03-11 22:23:47,713 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 22:23:47,855 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-11 22:23:47,858 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-11 22:23:48,269 [main:302] - generating value of type = String true depth = 3
2021-03-11 22:23:48,271 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-11 22:23:48,273 [main:95] - GENERATED = Regex("bhrax", kotlin.text.RegexOption.IGNORE_CASE)
2021-03-11 22:23:48,274 [main:117] - GENERATED CALL = (A.s).subSequence(-232979586, 1077746613).matches(Regex("bhrax", kotlin.text.RegexOption.IGNORE_CASE))
2021-03-11 22:23:48,274 [main:113] - Case = [public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47854e48]]
2021-03-11 22:23:48,274 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47854e48]
2021-03-11 22:23:48,412 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:23:48,414 [main:117] - GENERATED CALL = (A.s).endsWith(A().f(), false)
2021-03-11 22:23:48,415 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42087911]]
2021-03-11 22:23:48,415 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:23:48,539 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:48,668 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:48,670 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42087911]
2021-03-11 22:23:48,670 [main:117] - GENERATED CALL = (A.s).subSequence(-1415257730, -1252105643).any()
2021-03-11 22:23:48,670 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14b0d912]]
2021-03-11 22:23:48,670 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:23:48,787 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:48,939 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:48,941 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14b0d912]
2021-03-11 22:23:49,067 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:49,069 [main:117] - GENERATED CALL = (A.s).subSequence(-1874471066, 1518425536).hasSurrogatePairAt(1958829991)
2021-03-11 22:23:49,069 [main:113] - Case = [public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@204d5820]]
2021-03-11 22:23:49,069 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@204d5820]
2021-03-11 22:23:49,069 [main:117] - GENERATED CALL = (A.s).none()
2021-03-11 22:23:49,069 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c4a710c], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@467e6dc2]]
2021-03-11 22:23:49,069 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c4a710c]
2021-03-11 22:23:49,198 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:23:49,198 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@467e6dc2]
2021-03-11 22:23:49,316 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:23:49,318 [main:117] - GENERATED CALL = (A.s).equals("swbfi").or(true)
2021-03-11 22:23:49,318 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c4a710c], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@58a5cd83]]
2021-03-11 22:23:49,318 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3c4a710c]
2021-03-11 22:23:49,455 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:23:49,455 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@58a5cd83]
2021-03-11 22:23:49,583 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:23:49,583 [main:117] - GENERATED CALL = (A.s).equals("hvzhj").equals("cysqk")
2021-03-11 22:23:49,584 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20a07d96]]
2021-03-11 22:23:49,584 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:23:49,713 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:49,715 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20a07d96]
2021-03-11 22:23:49,715 [main:117] - GENERATED CALL = (A.s).get(-1785670376).isSurrogate()
2021-03-11 22:23:49,715 [main:114] - replacement of true of type Boolean is (A.s).endsWith(A().f(), false)
2021-03-11 22:23:49,834 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:23:49,835 [main:66] - Compilation checking started
2021-03-11 22:23:50,343 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        "ebeje"
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return Kla0().prope2
}

fun box216(): String {
    var prope4 = (A.s).replaceBeforeLast('', A.v, A().f())
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = (A().f()).subSequence(-2025407043, 752274010).commonPrefixWith("tezyv", true)
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vqwwd"}).exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "rwfci"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { (A.v).subSequence(-1913508149, -1014732836).isEmpty() }?.let { TODO("mamun")}
    }

    fun fu8(method: String) {
        prope5.find { (A().f()).get(-1990063011).isHighSurrogate() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = (A.v).compareTo(A.s).unaryPlus()
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = (A.s).endsWith(A().f(), false)) {
        for (i in (A().f()).count()..(A.v).compareTo(A().f()).toInt()) {
            if (909244939 != (A.v).compareTo(A.s).coerceAtLeast(115096001)) error((36.toUByte()).toLong().toString(1466140190))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((A.v).slice(linkedSetOf<Int>(311227901)))
        if ((HashSet<UByte>(-1506462825)).equals("jhemx").xor(true)) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        Kla5().prope8 = {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:23:50,345 [main:107] - replacing ({
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        }, Function0<Unit>)
2021-03-11 22:23:50,345 [main:50] - replacing {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        } Function0<Unit>
2021-03-11 22:23:50,345 [main:54] - Getting value of type Function0<Unit>
2021-03-11 22:23:50,492 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 22:23:50,494 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 22:23:50,626 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 22:23:50,628 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 22:23:50,892 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 22:23:50,894 [main:95] - GENERATED = require(false)
2021-03-11 22:23:50,894 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false)}
2021-03-11 22:23:50,894 [main:61] - GENERATED IS CALL =false
2021-03-11 22:23:51,190 [main:67] - randomType = ULong?
2021-03-11 22:23:51,322 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 22:23:51,367 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:23:51,388 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:23:51,389 [main:106] - GETTING Function0<Unit> from String
2021-03-11 22:23:51,389 [main:114] - replacement of {
            prope1.prope7 = (A.s).subSequence(-193529191, -911066653).regionMatches(1952612489, StringBuilder(-1619314887), 1343043200, -153849662, false)
        } of type Function0<Unit> is { require(false)}
2021-03-11 22:23:51,525 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 22:23:51,525 [main:66] - Compilation checking started
2021-03-11 22:23:52,029 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        "ebeje"
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return Kla0().prope2
}

fun box216(): String {
    var prope4 = (A.s).replaceBeforeLast('', A.v, A().f())
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = (A().f()).subSequence(-2025407043, 752274010).commonPrefixWith("tezyv", true)
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vqwwd"}).exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "rwfci"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { (A.v).subSequence(-1913508149, -1014732836).isEmpty() }?.let { TODO("mamun")}
    }

    fun fu8(method: String) {
        prope5.find { (A().f()).get(-1990063011).isHighSurrogate() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = (A.v).compareTo(A.s).unaryPlus()
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = (A.s).endsWith(A().f(), false)) {
        for (i in (A().f()).count()..(A.v).compareTo(A().f()).toInt()) {
            if (909244939 != (A.v).compareTo(A.s).coerceAtLeast(115096001)) error((36.toUByte()).toLong().toString(1466140190))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((A.v).slice(linkedSetOf<Int>(311227901)))
        if ((HashSet<UByte>(-1506462825)).equals("jhemx").xor(true)) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        Kla5().prope8 = { require(false)}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:23:52,031 [main:107] - replacing (this.prope2, Any?)
2021-03-11 22:23:52,031 [main:50] - replacing this.prope2 Any?
2021-03-11 22:23:52,031 [main:54] - Getting value of type Any?
2021-03-11 22:23:52,167 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:23:52,167 [main:58] - GENERATED VALUE OF TYPE Any? = "jsjmo"
2021-03-11 22:23:52,168 [main:61] - GENERATED IS CALL =false
2021-03-11 22:23:52,580 [main:67] - randomType = HashSet<Short>
2021-03-11 22:23:52,718 [main:302] - generating value of type = HashSet<Short> false depth = 0
2021-03-11 22:23:52,850 [main:43] - GENERATING CALL OF fun <E> HashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): HashSet<Short> = TODO()
2021-03-11 22:23:52,853 [main:61] - WITHOUT TYPE PARAMS = fun <E> HashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): HashSet<Short> = TODO()
2021-03-11 22:23:53,274 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:23:53,276 [main:302] - generating value of type = Float true depth = 3
2021-03-11 22:23:53,278 [main:95] - GENERATED = HashSet<Short>(2077699323, 0.8553966f)
2021-03-11 22:23:53,410 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@20a122e5]
2021-03-11 22:23:53,410 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Any? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@44e5f5b4]
2021-03-11 22:23:53,538 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:53,540 [main:78] - Generated call from random type = (HashSet<Short>(2077699323, 0.8553966f)).toArray().get(1007615680)
2021-03-11 22:23:53,541 [main:106] - GETTING Any? from String
2021-03-11 22:23:53,569 [main:106] - GETTING Any? from String
2021-03-11 22:23:53,570 [main:106] - GETTING Any? from String
2021-03-11 22:23:53,570 [main:114] - replacement of this.prope2 of type Any? is (HashSet<Short>(2077699323, 0.8553966f)).toArray().get(1007615680)
2021-03-11 22:23:53,684 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:23:53,684 [main:66] - Compilation checking started
2021-03-11 22:23:54,105 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        "ebeje"
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return Kla0().prope2
}

fun box216(): String {
    var prope4 = (A.s).replaceBeforeLast('', A.v, A().f())
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = (A().f()).subSequence(-2025407043, 752274010).commonPrefixWith("tezyv", true)
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vqwwd"}).exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "rwfci"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        (HashSet<Short>(2077699323, 0.8553966f)).toArray().get(1007615680) = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { (A.v).subSequence(-1913508149, -1014732836).isEmpty() }?.let { TODO("mamun")}
    }

    fun fu8(method: String) {
        prope5.find { (A().f()).get(-1990063011).isHighSurrogate() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = (A.v).compareTo(A.s).unaryPlus()
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = (A.s).endsWith(A().f(), false)) {
        for (i in (A().f()).count()..(A.v).compareTo(A().f()).toInt()) {
            if (909244939 != (A.v).compareTo(A.s).coerceAtLeast(115096001)) error((36.toUByte()).toLong().toString(1466140190))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((A.v).slice(linkedSetOf<Int>(311227901)))
        if ((HashSet<UByte>(-1506462825)).equals("jhemx").xor(true)) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        Kla5().prope8 = { require(false)}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:23:54,108 [main:107] - replacing (prope4, String)
2021-03-11 22:23:54,109 [main:50] - replacing prope4 String
2021-03-11 22:23:54,109 [main:54] - Getting value of type String
2021-03-11 22:23:54,320 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:23:54,323 [main:58] - GENERATED VALUE OF TYPE String = "zktva"
2021-03-11 22:23:54,323 [main:61] - GENERATED IS CALL =false
2021-03-11 22:23:54,333 [main:67] - randomType = Kla4
2021-03-11 22:23:54,490 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 22:23:54,492 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { (A.v).subSequence(-1913508149, -1014732836).isEmpty() }?.let { TODO("mamun")}
    }

    fun fu8(method: String) {
        prope5.find { (A().f()).get(-1990063011).isHighSurrogate() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}
2021-03-11 22:23:54,499 [main:106] - GETTING String from String
2021-03-11 22:23:54,525 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4af7b2b9]]
2021-03-11 22:23:54,525 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4af7b2b9]
2021-03-11 22:23:54,525 [main:117] - GENERATED CALL = (A.v).toLowerCase()
2021-03-11 22:23:54,525 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50f17df8]]
2021-03-11 22:23:54,525 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50f17df8]
2021-03-11 22:23:54,646 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:23:54,788 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:23:54,790 [main:117] - GENERATED CALL = (A.v).commonPrefixWith(StringBuilder(), true)
2021-03-11 22:23:54,791 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50f17df8]]
2021-03-11 22:23:54,791 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:23:54,918 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:55,049 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:55,051 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50f17df8]
2021-03-11 22:23:55,169 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:23:55,311 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:23:55,313 [main:117] - GENERATED CALL = (A.v).subSequence(1790171980, 57993656).commonPrefixWith(StringBuilder(), false)
2021-03-11 22:23:55,314 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ccc1de7]]
2021-03-11 22:23:55,314 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ccc1de7]
2021-03-11 22:23:55,443 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:23:55,580 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:23:55,700 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:23:55,702 [main:117] - GENERATED CALL = (A.v).replaceFirst('抸', '楌', false)
2021-03-11 22:23:55,702 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6913f0ba]]
2021-03-11 22:23:55,702 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6913f0ba]
2021-03-11 22:23:55,839 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 22:23:55,841 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:23:55,843 [main:117] - GENERATED CALL = (A.v).dropLastWhile({a: Char -> true})
2021-03-11 22:23:55,843 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cd1d7f5]]
2021-03-11 22:23:55,843 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cd1d7f5]
2021-03-11 22:23:55,968 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:55,970 [main:117] - GENERATED CALL = (A.v).takeLast(988918603)
2021-03-11 22:23:55,970 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54523220]]
2021-03-11 22:23:55,970 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:23:56,100 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:56,102 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54523220]
2021-03-11 22:23:56,220 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:23:56,222 [main:117] - GENERATED CALL = (A.v).get(1850649402).plus("aqyqg")
2021-03-11 22:23:56,223 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34acae1a]]
2021-03-11 22:23:56,223 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@34acae1a]
2021-03-11 22:23:56,359 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:56,488 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:56,490 [main:117] - GENERATED CALL = (A.v).removeRange(1673374681, 79393015)
2021-03-11 22:23:56,490 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63deed18]]
2021-03-11 22:23:56,490 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63deed18]
2021-03-11 22:23:56,624 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:23:56,629 [main:117] - GENERATED CALL = (A.v).removeSurrounding(StringBuilder())
2021-03-11 22:23:56,629 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b70aa8a]]
2021-03-11 22:23:56,629 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b70aa8a]
2021-03-11 22:23:56,748 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:23:56,749 [main:117] - GENERATED CALL = (A.v).substring(1140789169)
2021-03-11 22:23:56,750 [main:114] - replacement of prope4 of type String is (A.v).dropLastWhile({a: Char -> true})
2021-03-11 22:23:56,884 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:23:56,884 [main:66] - Compilation checking started
2021-03-11 22:23:57,263 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        "ebeje"
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return Kla0().prope2
}

fun box216(): String {
    var prope4 = (A.s).replaceBeforeLast('', A.v, A().f())
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    (A.v).dropLastWhile({a: Char -> true}) = (A().f()).subSequence(-2025407043, 752274010).commonPrefixWith("tezyv", true)
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vqwwd"}).exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "rwfci"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { (A.v).subSequence(-1913508149, -1014732836).isEmpty() }?.let { TODO("mamun")}
    }

    fun fu8(method: String) {
        prope5.find { (A().f()).get(-1990063011).isHighSurrogate() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = (A.v).compareTo(A.s).unaryPlus()
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = (A.s).endsWith(A().f(), false)) {
        for (i in (A().f()).count()..(A.v).compareTo(A().f()).toInt()) {
            if (909244939 != (A.v).compareTo(A.s).coerceAtLeast(115096001)) error((36.toUByte()).toLong().toString(1466140190))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((A.v).slice(linkedSetOf<Int>(311227901)))
        if ((HashSet<UByte>(-1506462825)).equals("jhemx").xor(true)) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        Kla5().prope8 = { require(false)}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:23:57,265 [main:107] - replacing ({ (A.v).subSequence(-1913508149, -1014732836).isEmpty() }, Function0<Boolean>)
2021-03-11 22:23:57,265 [main:50] - replacing { (A.v).subSequence(-1913508149, -1014732836).isEmpty() } Function0<Boolean>
2021-03-11 22:23:57,265 [main:54] - Getting value of type Function0<Boolean>
2021-03-11 22:23:57,405 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-11 22:23:57,408 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:23:57,409 [main:58] - GENERATED VALUE OF TYPE Function0<Boolean> = { true}
2021-03-11 22:23:57,410 [main:61] - GENERATED IS CALL =false
2021-03-11 22:23:57,549 [main:67] - randomType = UShort
2021-03-11 22:23:57,678 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 22:23:57,720 [main:106] - GETTING Function0<Boolean> from String
2021-03-11 22:23:57,749 [main:106] - GETTING Function0<Boolean> from String
2021-03-11 22:23:57,750 [main:106] - GETTING Function0<Boolean> from String
2021-03-11 22:23:57,750 [main:114] - replacement of { (A.v).subSequence(-1913508149, -1014732836).isEmpty() } of type Function0<Boolean> is { true}
2021-03-11 22:23:57,884 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 22:23:57,885 [main:66] - Compilation checking started
2021-03-11 22:23:58,433 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        "ebeje"
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return Kla0().prope2
}

fun box216(): String {
    var prope4 = (A.s).replaceBeforeLast('', A.v, A().f())
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = (A().f()).subSequence(-2025407043, 752274010).commonPrefixWith("tezyv", true)
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vqwwd"}).exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "rwfci"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { true}?.let { TODO("mamun")}
    }

    fun fu8(method: String) {
        prope5.find { (A().f()).get(-1990063011).isHighSurrogate() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = (A.v).compareTo(A.s).unaryPlus()
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = (A.s).endsWith(A().f(), false)) {
        for (i in (A().f()).count()..(A.v).compareTo(A().f()).toInt()) {
            if (909244939 != (A.v).compareTo(A.s).coerceAtLeast(115096001)) error((36.toUByte()).toLong().toString(1466140190))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((A.v).slice(linkedSetOf<Int>(311227901)))
        if ((HashSet<UByte>(-1506462825)).equals("jhemx").xor(true)) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        Kla5().prope8 = { require(false)}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:23:58,434 [main:107] - replacing (this.prope2, Any?)
2021-03-11 22:23:58,435 [main:50] - replacing this.prope2 Any?
2021-03-11 22:23:58,435 [main:54] - Getting value of type Any?
2021-03-11 22:23:58,566 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:23:58,567 [main:58] - GENERATED VALUE OF TYPE Any? = "hgzxd"
2021-03-11 22:23:58,567 [main:61] - GENERATED IS CALL =false
2021-03-11 22:23:58,840 [main:67] - randomType = UInt?
2021-03-11 22:23:58,956 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 22:23:58,989 [main:106] - GETTING Any? from String
2021-03-11 22:23:59,009 [main:106] - GETTING Any? from String
2021-03-11 22:23:59,010 [main:106] - GETTING Any? from String
2021-03-11 22:23:59,010 [main:114] - replacement of this.prope2 of type Any? is "hgzxd"
2021-03-11 22:23:59,148 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 22:23:59,149 [main:66] - Compilation checking started
2021-03-11 22:23:59,546 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        "ebeje"
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return Kla0().prope2
}

fun box216(): String {
    var prope4 = (A.s).replaceBeforeLast('', A.v, A().f())
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = (A().f()).subSequence(-2025407043, 752274010).commonPrefixWith("tezyv", true)
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vqwwd"}).exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "rwfci"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        "hgzxd" = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { true}?.let { TODO("mamun")}
    }

    fun fu8(method: String) {
        prope5.find { (A().f()).get(-1990063011).isHighSurrogate() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = (A.v).compareTo(A.s).unaryPlus()
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = (A.s).endsWith(A().f(), false)) {
        for (i in (A().f()).count()..(A.v).compareTo(A().f()).toInt()) {
            if (909244939 != (A.v).compareTo(A.s).coerceAtLeast(115096001)) error((36.toUByte()).toLong().toString(1466140190))
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((A.v).slice(linkedSetOf<Int>(311227901)))
        if ((HashSet<UByte>(-1506462825)).equals("jhemx").xor(true)) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        Kla5().prope8 = { require(false)}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:23:59,548 [main:107] - replacing (prope6 != numberOfSuspensions, Boolean)
2021-03-11 22:23:59,549 [main:50] - replacing prope6 != numberOfSuspensions Boolean
2021-03-11 22:23:59,549 [main:54] - Getting value of type Boolean
2021-03-11 22:23:59,681 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:23:59,683 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 22:23:59,683 [main:61] - GENERATED IS CALL =false
2021-03-11 22:23:59,687 [main:67] - randomType = String
2021-03-11 22:23:59,812 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:23:59,837 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42087911]
2021-03-11 22:23:59,837 [main:78] - Generated call from random type = ("jatgb").any()
2021-03-11 22:23:59,838 [main:106] - GETTING Boolean from String
2021-03-11 22:23:59,873 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@304551d8], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@23b046a8]]
2021-03-11 22:23:59,873 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@23b046a8]
2021-03-11 22:23:59,990 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:23:59,990 [main:117] - GENERATED CALL = (A.s).length.equals("rklfv")
2021-03-11 22:23:59,990 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c82af08]]
2021-03-11 22:23:59,991 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:24:00,106 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:24:00,108 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c82af08]
2021-03-11 22:24:00,108 [main:117] - GENERATED CALL = (A.s).get(470189174).isTitleCase()
2021-03-11 22:24:00,108 [main:113] - Case = [public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cace456]]
2021-03-11 22:24:00,108 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cace456]
2021-03-11 22:24:00,239 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 22:24:00,241 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:24:00,243 [main:117] - GENERATED CALL = (A.s).all({a: Char -> false})
2021-03-11 22:24:00,243 [main:113] - Case = [public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14b0d912]]
2021-03-11 22:24:00,243 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14b0d912]
2021-03-11 22:24:00,375 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:24:00,377 [main:117] - GENERATED CALL = (A.s).hasSurrogatePairAt(-1428717654)
2021-03-11 22:24:00,378 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@795ef724]]
2021-03-11 22:24:00,378 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@795ef724]
2021-03-11 22:24:00,378 [main:117] - GENERATED CALL = (A.s).isNotEmpty()
2021-03-11 22:24:00,378 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5dadcec2]]
2021-03-11 22:24:00,378 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:24:00,504 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:24:00,621 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:24:00,623 [main:149] - GENERATING call of type public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5dadcec2]
2021-03-11 22:24:00,754 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:24:00,879 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:24:00,881 [main:117] - GENERATED CALL = (A.s).subSequence(-1615362673, -510617461).startsWith('', false)
2021-03-11 22:24:00,881 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7757be0c]]
2021-03-11 22:24:00,881 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:24:01,008 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:24:01,010 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7757be0c]
2021-03-11 22:24:01,010 [main:117] - GENERATED CALL = (A.s).get(1255824409).isWhitespace()
2021-03-11 22:24:01,010 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6098db]]
2021-03-11 22:24:01,010 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6098db]
2021-03-11 22:24:01,011 [main:117] - GENERATED CALL = (A.s).isNotBlank()
2021-03-11 22:24:01,011 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cace456]]
2021-03-11 22:24:01,011 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:24:01,134 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:24:01,268 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:24:01,270 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cace456]
2021-03-11 22:24:01,395 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 22:24:01,396 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:24:01,398 [main:117] - GENERATED CALL = (A.s).subSequence(33514083, -35640167).all({a: Char -> false})
2021-03-11 22:24:01,398 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@376f85c1]]
2021-03-11 22:24:01,398 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:24:01,526 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:24:01,528 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@376f85c1]
2021-03-11 22:24:01,528 [main:117] - GENERATED CALL = (A.s).get(-1939416692).isDefined()
2021-03-11 22:24:01,528 [main:114] - replacement of prope6 != numberOfSuspensions of type Boolean is (A.s).isNotBlank()
2021-03-11 22:24:01,644 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:24:01,644 [main:66] - Compilation checking started
2021-03-11 22:24:02,121 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        "ebeje"
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return Kla0().prope2
}

fun box216(): String {
    var prope4 = (A.s).replaceBeforeLast('', A.v, A().f())
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = (A().f()).subSequence(-2025407043, 752274010).commonPrefixWith("tezyv", true)
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vqwwd"}).exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "rwfci"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { true}?.let { TODO("mamun")}
    }

    fun fu8(method: String) {
        prope5.find { (A().f()).get(-1990063011).isHighSurrogate() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = (A.v).compareTo(A.s).unaryPlus()
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = (A.s).endsWith(A().f(), false)) {
        for (i in (A().f()).count()..(A.v).compareTo(A().f()).toInt()) {
            if (909244939 != (A.v).compareTo(A.s).coerceAtLeast(115096001)) error((36.toUByte()).toLong().toString(1466140190))
            prope8()
        }
        if ((A.s).isNotBlank())
            error((A.v).slice(linkedSetOf<Int>(311227901)))
        if ((HashSet<UByte>(-1506462825)).equals("jhemx").xor(true)) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        Kla5().prope8 = { require(false)}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:24:02,123 [main:107] - replacing (Kla5(), Kla5)
2021-03-11 22:24:02,123 [main:50] - replacing Kla5() Kla5
2021-03-11 22:24:02,123 [main:54] - Getting value of type Kla5
2021-03-11 22:24:02,256 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 22:24:02,258 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope6 = (A.v).compareTo(A.s).unaryPlus()
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = (A.s).endsWith(A().f(), false)) {
        for (i in (A().f()).count()..(A.v).compareTo(A().f()).toInt()) {
            if (909244939 != (A.v).compareTo(A.s).coerceAtLeast(115096001)) error((36.toUByte()).toLong().toString(1466140190))
            prope8()
        }
        if ((A.s).isNotBlank())
            error((A.v).slice(linkedSetOf<Int>(311227901)))
        if ((HashSet<UByte>(-1506462825)).equals("jhemx").xor(true)) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 22:24:02,258 [main:58] - GENERATED VALUE OF TYPE Kla5 = Kla5()
2021-03-11 22:24:02,258 [main:61] - GENERATED IS CALL =true
2021-03-11 22:24:02,393 [main:67] - randomType = UInt
2021-03-11 22:24:02,519 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 22:24:02,561 [main:106] - GETTING Kla5 from String
2021-03-11 22:24:02,589 [main:106] - GETTING Kla5 from String
2021-03-11 22:24:02,589 [main:106] - GETTING Kla5 from String
2021-03-11 22:24:02,589 [main:114] - replacement of Kla5() of type Kla5 is Kla5()
2021-03-11 22:24:02,721 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 22:24:02,723 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 22:24:02,723 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 22:24:02,723 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-11 22:24:02,847 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 22:24:02,852 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 22:24:02,994 [main:67] - randomType = UShort
2021-03-11 22:24:03,112 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 22:24:03,141 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:24:03,157 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:24:03,158 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-11 22:24:03,158 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 22:24:03,158 [main:107] - replacing (c, Continuation<*>)
2021-03-11 22:24:03,158 [main:50] - replacing c Continuation<*>
2021-03-11 22:24:03,158 [main:54] - Getting value of type Continuation<*>
2021-03-11 22:24:03,291 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 22:24:03,429 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 22:24:03,432 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 22:24:03,856 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 22:24:03,988 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:24:03,991 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:24:04,257 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 22:24:04,427 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:24:04,430 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:24:04,836 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:24:04,836 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:24:04,836 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 22:24:04,837 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 22:24:04,843 [main:67] - randomType = Kla1
2021-03-11 22:24:04,989 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 22:24:04,990 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "rwfci"
    }
}
2021-03-11 22:24:05,116 [main:194] - Type params = []
2021-03-11 22:24:05,243 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 22:24:05,365 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:24:05,368 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:24:05,651 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 22:24:05,785 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:24:05,788 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:24:06,215 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 8
2021-03-11 22:24:06,351 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:24:06,353 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:24:06,791 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 11
2021-03-11 22:24:06,927 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:24:06,930 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:24:07,369 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 14
2021-03-11 22:24:07,505 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:24:07,508 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:24:07,967 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:24:07,968 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:24:07,968 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:24:07,968 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:24:07,968 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:24:07,990 [main:106] - GETTING Continuation<*> from String
2021-03-11 22:24:08,019 [main:106] - GETTING Continuation<*> from String
2021-03-11 22:24:08,020 [main:106] - GETTING Continuation<*> from String
2021-03-11 22:24:08,021 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-11 22:24:08,021 [main:107] - replacing ("", String)
2021-03-11 22:24:08,021 [main:50] - replacing "" String
2021-03-11 22:24:08,021 [main:54] - Getting value of type String
2021-03-11 22:24:08,173 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:24:08,175 [main:58] - GENERATED VALUE OF TYPE String = "sacop"
2021-03-11 22:24:08,176 [main:61] - GENERATED IS CALL =false
2021-03-11 22:24:08,468 [main:67] - randomType = Double?
2021-03-11 22:24:08,593 [main:302] - generating value of type = Double true depth = 0
2021-03-11 22:24:08,630 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@76d4d6e3]
2021-03-11 22:24:08,630 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7df7fef2]
2021-03-11 22:24:08,757 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:24:08,759 [main:78] - Generated call from random type = (0.21444373261325123)?.toInt().toString(-1776462014)
2021-03-11 22:24:08,759 [main:106] - GETTING String from String
2021-03-11 22:24:08,785 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2df1636b]]
2021-03-11 22:24:08,785 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:24:08,903 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:24:09,034 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:24:09,036 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2df1636b]
2021-03-11 22:24:09,162 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:24:09,164 [main:117] - GENERATED CALL = (A.s).subSequence(85584906, 759984168).repeat(1847937829)
2021-03-11 22:24:09,164 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5aed59aa]]
2021-03-11 22:24:09,164 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5aed59aa]
2021-03-11 22:24:09,299 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:24:09,417 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:24:09,546 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:24:09,552 [main:117] - GENERATED CALL = (A.s).replaceRange(301465204, 1474478837, "cygcp")
2021-03-11 22:24:09,552 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3dfe6f92]]
2021-03-11 22:24:09,552 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:24:09,680 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:24:09,681 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3dfe6f92]
2021-03-11 22:24:09,682 [main:117] - GENERATED CALL = (A.s).get(10156372).titlecase()
2021-03-11 22:24:09,682 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2df1636b]]
2021-03-11 22:24:09,682 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2df1636b]
2021-03-11 22:24:09,811 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:24:09,813 [main:117] - GENERATED CALL = (A.s).repeat(2090797553)
2021-03-11 22:24:09,813 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@127a9e58]]
2021-03-11 22:24:09,813 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@127a9e58]
2021-03-11 22:24:09,930 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:24:09,932 [main:117] - GENERATED CALL = (A.s).dropLast(630728660)
2021-03-11 22:24:09,932 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54523220]]
2021-03-11 22:24:09,933 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@35c8d32a]
2021-03-11 22:24:10,073 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:24:10,075 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54523220]
2021-03-11 22:24:10,075 [main:117] - GENERATED CALL = (A.s).get(1177533293).plus(A.s)
2021-03-11 22:24:10,075 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@272c9357]]
2021-03-11 22:24:10,075 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@272c9357]
2021-03-11 22:24:10,202 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 22:24:10,336 [main:43] - GENERATING CALL OF fun LongRange(start: kotlin.Long, endInclusive: kotlin.Long): Iterable<Int> = TODO()
2021-03-11 22:24:10,338 [main:61] - WITHOUT TYPE PARAMS = fun LongRange(start: kotlin.Long, endInclusive: kotlin.Long): Iterable<Int> = TODO()
2021-03-11 22:24:10,746 [main:302] - generating value of type = Long true depth = 3
2021-03-11 22:24:10,748 [main:302] - generating value of type = Long true depth = 3
2021-03-11 22:24:10,749 [main:95] - GENERATED = LongRange(44823484356212218, 8172989608860599537)
2021-03-11 22:24:10,750 [main:117] - GENERATED CALL = (A.s).slice(LongRange(44823484356212218, 8172989608860599537))
2021-03-11 22:24:10,750 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39f6f63f]]
2021-03-11 22:24:10,750 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39f6f63f]
2021-03-11 22:24:10,750 [main:117] - GENERATED CALL = (A.s).uppercase()
2021-03-11 22:24:10,750 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@304551d8], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7df7fef2]]
2021-03-11 22:24:10,750 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7df7fef2]
2021-03-11 22:24:10,879 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:24:10,881 [main:117] - GENERATED CALL = (A.s).length.toString(632864736)
2021-03-11 22:24:10,881 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b56b568]]
2021-03-11 22:24:10,881 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b56b568]
2021-03-11 22:24:10,999 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 22:24:11,004 [main:117] - GENERATED CALL = (A.s).removePrefix(StringBuilder())
2021-03-11 22:24:11,004 [main:114] - replacement of "" of type String is (A.s).slice(LongRange(44823484356212218, 8172989608860599537))
2021-03-11 22:24:11,137 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:24:11,137 [main:66] - Compilation checking started
2021-03-11 22:24:11,514 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = (A.s).slice(LongRange(44823484356212218, 8172989608860599537))

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        "ebeje"
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return Kla0().prope2
}

fun box216(): String {
    var prope4 = (A.s).replaceBeforeLast('', A.v, A().f())
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = (A().f()).subSequence(-2025407043, 752274010).commonPrefixWith("tezyv", true)
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vqwwd"}).exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "rwfci"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { true}?.let { TODO("mamun")}
    }

    fun fu8(method: String) {
        prope5.find { (A().f()).get(-1990063011).isHighSurrogate() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = (A.v).compareTo(A.s).unaryPlus()
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = (A.s).endsWith(A().f(), false)) {
        for (i in (A().f()).count()..(A.v).compareTo(A().f()).toInt()) {
            if (909244939 != (A.v).compareTo(A.s).coerceAtLeast(115096001)) error((36.toUByte()).toLong().toString(1466140190))
            prope8()
        }
        if ((A.s).isNotBlank())
            error((A.v).slice(linkedSetOf<Int>(311227901)))
        if ((HashSet<UByte>(-1506462825)).equals("jhemx").xor(true)) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        Kla5().prope8 = { require(false)}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:24:11,516 [main:107] - replacing (it, Continuation<Unit>)
2021-03-11 22:24:11,516 [main:50] - replacing it Continuation<Unit>
2021-03-11 22:24:11,516 [main:54] - Getting value of type Continuation<Unit>
2021-03-11 22:24:11,646 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-11 22:24:11,774 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 22:24:11,777 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 22:24:12,198 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 22:24:12,327 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:24:12,330 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:24:12,602 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 22:24:12,755 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:24:12,758 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:24:13,171 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:24:13,171 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:24:13,171 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 22:24:13,172 [main:58] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-11 22:24:13,322 [main:67] - randomType = Kla0?
2021-03-11 22:24:13,448 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 22:24:13,450 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        "ebeje"
    }
}
2021-03-11 22:24:13,458 [main:106] - GETTING Continuation<Unit> from String
2021-03-11 22:24:13,478 [main:106] - GETTING Continuation<Unit> from String
2021-03-11 22:24:13,479 [main:106] - GETTING Continuation<Unit> from String
2021-03-11 22:24:13,479 [main:111] - Cant find and generate replacement for it type Continuation<Unit>
2021-03-11 22:24:13,479 [main:107] - replacing ("Wrong state-machine generated: it is not finished yet", String)
2021-03-11 22:24:13,480 [main:50] - replacing "Wrong state-machine generated: it is not finished yet" String
2021-03-11 22:24:13,480 [main:54] - Getting value of type String
2021-03-11 22:24:13,612 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:24:13,614 [main:58] - GENERATED VALUE OF TYPE String = "vjndy"
2021-03-11 22:24:13,614 [main:61] - GENERATED IS CALL =false
2021-03-11 22:24:13,617 [main:67] - randomType = String
2021-03-11 22:24:13,734 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:24:13,753 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f060572]
2021-03-11 22:24:13,884 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:24:14,015 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:24:14,017 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2df1636b]
2021-03-11 22:24:14,148 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:24:14,150 [main:78] - Generated call from random type = ("dywoi").subSequence(-821860392, 788859351).repeat(-606290176)
2021-03-11 22:24:14,150 [main:106] - GETTING String from String
2021-03-11 22:24:14,178 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b8aa177]]
2021-03-11 22:24:14,178 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b8aa177]
2021-03-11 22:24:14,303 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:24:14,304 [main:117] - GENERATED CALL = (A.s).prependIndent("osfqg")
2021-03-11 22:24:14,305 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74196470]]
2021-03-11 22:24:14,305 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74196470]
2021-03-11 22:24:14,305 [main:117] - GENERATED CALL = (A.s).trim()
2021-03-11 22:24:14,305 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@304551d8], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7df7fef2]]
2021-03-11 22:24:14,305 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7df7fef2]
2021-03-11 22:24:14,437 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:24:14,439 [main:117] - GENERATED CALL = (A.s).length.toString(-504352566)
2021-03-11 22:24:14,439 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e2a9fc1]]
2021-03-11 22:24:14,439 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e2a9fc1]
2021-03-11 22:24:14,439 [main:117] - GENERATED CALL = (A.s).capitalize()
2021-03-11 22:24:14,439 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7dd25ac5]]
2021-03-11 22:24:14,439 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7dd25ac5]
2021-03-11 22:24:14,440 [main:117] - GENERATED CALL = (A.s).decapitalize()
2021-03-11 22:24:14,440 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@490367ed]]
2021-03-11 22:24:14,440 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@490367ed]
2021-03-11 22:24:14,567 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:24:14,699 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:24:14,701 [main:117] - GENERATED CALL = (A.s).replaceAfter('', "ursab", A.v)
2021-03-11 22:24:14,701 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39f6f63f]]
2021-03-11 22:24:14,702 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39f6f63f]
2021-03-11 22:24:14,702 [main:117] - GENERATED CALL = (A.s).uppercase()
2021-03-11 22:24:14,702 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e062264]]
2021-03-11 22:24:14,702 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e062264]
2021-03-11 22:24:14,702 [main:117] - GENERATED CALL = (A.s).toUpperCase()
2021-03-11 22:24:14,702 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@255f0213]]
2021-03-11 22:24:14,702 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@255f0213]
2021-03-11 22:24:14,820 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:24:14,822 [main:117] - GENERATED CALL = (A.s).take(788696160)
2021-03-11 22:24:14,822 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48f66f29]]
2021-03-11 22:24:14,822 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48f66f29]
2021-03-11 22:24:14,822 [main:117] - GENERATED CALL = (A.s).replaceIndent(A.s)
2021-03-11 22:24:14,822 [main:114] - replacement of "Wrong state-machine generated: it is not finished yet" of type String is (A.s).uppercase()
2021-03-11 22:24:14,954 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:24:14,954 [main:66] - Compilation checking started
2021-03-11 22:24:15,478 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        "ebeje"
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return Kla0().prope2
}

fun box216(): String {
    var prope4 = (A.s).replaceBeforeLast('', A.v, A().f())
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = (A().f()).subSequence(-2025407043, 752274010).commonPrefixWith("tezyv", true)
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vqwwd"}).exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "rwfci"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { true}?.let { TODO("mamun")}
    }

    fun fu8(method: String) {
        prope5.find { (A().f()).get(-1990063011).isHighSurrogate() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = (A.v).compareTo(A.s).unaryPlus()
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = (A.s).endsWith(A().f(), false)) {
        for (i in (A().f()).count()..(A.v).compareTo(A().f()).toInt()) {
            if (909244939 != (A.v).compareTo(A.s).coerceAtLeast(115096001)) error((36.toUByte()).toLong().toString(1466140190))
            prope8()
        }
        if ((A.s).isNotBlank())
            error((A.v).slice(linkedSetOf<Int>(311227901)))
        if ((HashSet<UByte>(-1506462825)).equals("jhemx").xor(true)) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error((A.s).uppercase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        Kla5().prope8 = { require(false)}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:24:15,480 [main:107] - replacing (c, Continuation<*>)
2021-03-11 22:24:15,480 [main:50] - replacing c Continuation<*>
2021-03-11 22:24:15,480 [main:54] - Getting value of type Continuation<*>
2021-03-11 22:24:15,614 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 22:24:15,747 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 22:24:15,749 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 22:24:16,183 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 22:24:16,311 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:24:16,314 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:24:16,598 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 22:24:16,767 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:24:16,770 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:24:17,182 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-11 22:24:17,347 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 22:24:17,350 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 22:24:17,770 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 22:24:17,770 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:24:17,771 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:24:17,771 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 22:24:17,771 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 22:24:18,369 [main:67] - randomType = LinkedHashMap<ULong, LinkedHashSet<UByte>>
2021-03-11 22:24:18,516 [main:302] - generating value of type = LinkedHashMap<ULong, LinkedHashSet<UByte>> false depth = 0
2021-03-11 22:24:18,653 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int): LinkedHashMap<ULong, LinkedHashSet<UByte>> = TODO()
2021-03-11 22:24:18,656 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int): LinkedHashMap<ULong, LinkedHashSet<UByte>> = TODO()
2021-03-11 22:24:18,919 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:24:18,921 [main:95] - GENERATED = LinkedHashMap<ULong, LinkedHashSet<UByte>>(-1976806967)
2021-03-11 22:24:19,065 [main:106] - GETTING Continuation<*> from String
2021-03-11 22:24:19,082 [main:106] - GETTING Continuation<*> from String
2021-03-11 22:24:19,083 [main:106] - GETTING Continuation<*> from String
2021-03-11 22:24:19,083 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-11 22:24:19,083 [main:107] - replacing (getOrThrow(), Ty0)
2021-03-11 22:24:19,083 [main:50] - replacing getOrThrow() Ty0
2021-03-11 22:24:19,083 [main:54] - Getting value of type Ty0
2021-03-11 22:24:19,212 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 22:24:19,217 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 22:24:19,352 [main:67] - randomType = Float
2021-03-11 22:24:19,479 [main:302] - generating value of type = Float true depth = 0
2021-03-11 22:24:19,527 [main:106] - GETTING Ty0 from String
2021-03-11 22:24:19,554 [main:106] - GETTING Ty0 from String
2021-03-11 22:24:19,555 [main:106] - GETTING Ty0 from String
2021-03-11 22:24:19,555 [main:111] - Cant find and generate replacement for getOrThrow() type Ty0
2021-03-11 22:24:19,555 [main:107] - replacing (prope2, Any?)
2021-03-11 22:24:19,555 [main:50] - replacing prope2 Any?
2021-03-11 22:24:19,555 [main:54] - Getting value of type Any?
2021-03-11 22:24:19,670 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:24:19,670 [main:58] - GENERATED VALUE OF TYPE Any? = "fsain"
2021-03-11 22:24:19,670 [main:61] - GENERATED IS CALL =false
2021-03-11 22:24:19,819 [main:67] - randomType = Kla5?
2021-03-11 22:24:19,942 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 22:24:19,944 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope6 = (A.v).compareTo(A.s).unaryPlus()
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = (A.s).endsWith(A().f(), false)) {
        for (i in (A().f()).count()..(A.v).compareTo(A().f()).toInt()) {
            if (909244939 != (A.v).compareTo(A.s).coerceAtLeast(115096001)) error((36.toUByte()).toLong().toString(1466140190))
            prope8()
        }
        if ((A.s).isNotBlank())
            error((A.v).slice(linkedSetOf<Int>(311227901)))
        if ((HashSet<UByte>(-1506462825)).equals("jhemx").xor(true)) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error((A.s).uppercase())
    }
}
2021-03-11 22:24:19,953 [main:106] - GETTING Any? from String
2021-03-11 22:24:19,972 [main:106] - GETTING Any? from String
2021-03-11 22:24:19,973 [main:106] - GETTING Any? from String
2021-03-11 22:24:19,973 [main:114] - replacement of prope2 of type Any? is "fsain"
2021-03-11 22:24:20,100 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 22:24:20,100 [main:66] - Compilation checking started
2021-03-11 22:24:20,431 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        "ebeje"
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return Kla0().prope2
}

fun box216(): String {
    var prope4 = (A.s).replaceBeforeLast('', A.v, A().f())
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = (A().f()).subSequence(-2025407043, 752274010).commonPrefixWith("tezyv", true)
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vqwwd"}).exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "rwfci"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this."fsain" = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { true}?.let { TODO("mamun")}
    }

    fun fu8(method: String) {
        prope5.find { (A().f()).get(-1990063011).isHighSurrogate() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = (A.v).compareTo(A.s).unaryPlus()
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = (A.s).endsWith(A().f(), false)) {
        for (i in (A().f()).count()..(A.v).compareTo(A().f()).toInt()) {
            if (909244939 != (A.v).compareTo(A.s).coerceAtLeast(115096001)) error((36.toUByte()).toLong().toString(1466140190))
            prope8()
        }
        if ((A.s).isNotBlank())
            error((A.v).slice(linkedSetOf<Int>(311227901)))
        if ((HashSet<UByte>(-1506462825)).equals("jhemx").xor(true)) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error((A.s).uppercase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        Kla5().prope8 = { require(false)}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:24:20,433 [main:107] - replacing (this, Kla2)
2021-03-11 22:24:20,433 [main:50] - replacing this Kla2
2021-03-11 22:24:20,433 [main:54] - Getting value of type Kla2
2021-03-11 22:24:20,564 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-11 22:24:20,566 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = "uauqp"
    }

    var prope2: Any? = null
}
2021-03-11 22:24:20,566 [main:58] - GENERATED VALUE OF TYPE Kla2 = Kla2()
2021-03-11 22:24:20,566 [main:61] - GENERATED IS CALL =true
2021-03-11 22:24:20,573 [main:67] - randomType = Kla0
2021-03-11 22:24:20,701 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 22:24:20,703 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        "ebeje"
    }
}
2021-03-11 22:24:20,713 [main:106] - GETTING Kla2 from String
2021-03-11 22:24:20,736 [main:106] - GETTING Kla2 from String
2021-03-11 22:24:20,737 [main:106] - GETTING Kla2 from String
2021-03-11 22:24:20,737 [main:114] - replacement of this of type Kla2 is Kla2()
2021-03-11 22:24:20,864 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 22:24:20,865 [main:66] - Compilation checking started
2021-03-11 22:24:21,368 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class A {
    companion object {
        val s = "OK"
        var v = "NOT OK"
    }

    fun f(): String = s

    fun g() {
        v = "OK"
    }

    inline fun i(j: () -> Unit) {
        j()
    }

    fun h() {
        i {
            s
            v = "OK"
        }
    }
}

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(prope4: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        c.resume(prope4)
        "ebeje"
    }
}

fun fu0(c: suspend Kla0.() -> Unit): String {
    val prope3 = Kla0()
    c.startCoroutine(Kla0(), Kla1)
    return Kla0().prope2
}

fun box216(): String {
    var prope4 = (A.s).replaceBeforeLast('', A.v, A().f())
    if (prope4 != "123.") return "fail: suspend as do..while condition: $prope4"

    prope4 = (A().f()).subSequence(-2025407043, 752274010).commonPrefixWith("tezyv", true)
    if ((A.s).contains('陏', false)) return "fail: suspend in do..while body: $prope4"

    return "OK"
}

fun <Ty0> fu1(prope10: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        prope10(prope2.getOrThrow())
    }
}

fun fu2(prope10: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vqwwd"}).exceptionOrNull()?.let(prope10)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        "rwfci"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        Kla2().prope2 = "uauqp"
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu4(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(prope4: Ty0)
}

class Kla4 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu7(method: String) {
        prope5.find { true}?.let { TODO("mamun")}
    }

    fun fu8(method: String) {
        prope5.find { (A().f()).get(-1990063011).isHighSurrogate() } ?: error((A.s).replaceAfter('ꚪ', A.s, A.v))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope6 = (A.v).compareTo(A.s).unaryPlus()
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu9() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope6++
        prope8 = { require(true)}
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = (A.s).endsWith(A().f(), false)) {
        for (i in (A().f()).count()..(A.v).compareTo(A().f()).toInt()) {
            if (909244939 != (A.v).compareTo(A.s).coerceAtLeast(115096001)) error((36.toUByte()).toLong().toString(1466140190))
            prope8()
        }
        if ((A.s).isNotBlank())
            error((A.v).slice(linkedSetOf<Int>(311227901)))
        if ((HashSet<UByte>(-1506462825)).equals("jhemx").xor(true)) error((Kla2()).prope2?.toString()!!)
        prope8()
        if ((A.v).subSequence(249250820, -1843649769).isNotEmpty()) error((A.s).uppercase())
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(prope4: Unit) {
        Kla5().prope8 = { require(false)}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:24:21,370 [main:107] - replacing ("OK", String)
2021-03-11 22:24:21,371 [main:50] - replacing "OK" String
2021-03-11 22:24:21,371 [main:54] - Getting value of type String
